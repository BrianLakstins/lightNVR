const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./preact-app-Rq3_3Hhz.js","../css/preact-app.css"])))=>i.map(i=>d[i]);
var B=Object.freeze,ee=Object.defineProperty;var v=(u,b)=>B(ee(u,"raw",{value:B(b||u.slice())}));import{d as C,A as j,y as I,s as te,a as oe,b as ne,c as y,e as re,h as w,_ as se}from"./preact-app-Rq3_3Hhz.js";import{e as le,s as ie,c as ae,t as ce}from"./DetectionOverlay-Dkv5Ryzi.js";var F,V,q,A,D,z;function de(){const[u,b]=C([]),[h,G]=C("4"),[S,L]=C(""),[_,W]=C(!1),[U,T]=C(!0),[m,k]=C(()=>{const i=new URLSearchParams(window.location.search).get("page");return i?Math.max(0,parseInt(i,10)-1):0}),x=j(null),g=j({}),M=j({});I(()=>{te(),oe(),ne();const e=o=>{if(o.key==="Escape"){console.log("Escape key pressed, current fullscreen state:",_);const n=document.getElementById("live-page");n&&n.classList.contains("fullscreen-mode")&&(console.log("Detected fullscreen mode via DOM, exiting fullscreen"),le(null,W))}};document.addEventListener("keydown",e);const i=()=>{O()},s=()=>{document.hidden?(console.log("Page hidden, pausing WebRTC streams"),Object.keys(g.current).forEach(o=>{const n=g.current[o];if(n&&n.connectionState!=="closed"){const t="video-".concat(o.replace(/\s+/g,"-")),r=document.getElementById(t);r&&r.pause()}})):(console.log("Page visible, resuming WebRTC streams"),Object.keys(g.current).forEach(o=>{const n=g.current[o];if(n&&n.connectionState!=="closed"){const t="video-".concat(o.replace(/\s+/g,"-")),r=document.getElementById(t);r&&r.play().catch(a=>{console.warn("Could not resume video for ".concat(o,":"),a)})}}))};window.addEventListener("beforeunload",i),document.addEventListener("visibilitychange",s);const l=setInterval(()=>{Object.keys(g.current).forEach(o=>{const n=g.current[o];if(n&&(console.debug("WebRTC connection state for ".concat(o,": ").concat(n.connectionState,", ICE state: ").concat(n.iceConnectionState)),n.iceConnectionState==="failed"||n.iceConnectionState==="disconnected")){console.warn("WebRTC connection for ".concat(o," is in ").concat(n.iceConnectionState," state, will attempt reconnect")),$(o);const t=u.find(r=>r.name===o);t&&(console.log("Attempting to reconnect WebRTC for stream ".concat(o)),P(t))}})},3e4);return()=>{document.removeEventListener("keydown",e),window.removeEventListener("beforeunload",i),document.removeEventListener("visibilitychange",s),clearInterval(l),O()}},[u]),I(()=>{T(!0);const e=setTimeout(()=>{console.warn("Stream loading timed out"),T(!1),y("Loading streams timed out. Please try refreshing the page.")},15e3);J().then(i=>{clearTimeout(e),i&&i.length>0?(b(i),L(i[0].name)):console.warn("No streams returned from API"),T(!1)}).catch(i=>{clearTimeout(e),console.error("Error loading streams:",i),y("Error loading streams: "+i.message),T(!1)})},[]),I(()=>{K()},[h,S,u,m]),I(()=>{const e=new URL(window.location);m===0?e.searchParams.delete("page"):e.searchParams.set("page",m+1),window.history.replaceState({},"",e)},[m]);const J=async()=>{try{const e=new Promise((d,c)=>{setTimeout(()=>c(new Error("Request timed out")),5e3)}),i=fetch("/api/streams"),s=await Promise.race([i,e]);if(!s.ok)throw new Error("Failed to load streams");const l=new Promise((d,c)=>{setTimeout(()=>c(new Error("JSON parsing timed out")),3e3)}),o=s.json(),t=(await Promise.race([o,l])||[]).map(d=>{const c=new Promise((f,N)=>{setTimeout(()=>N(new Error("Timeout fetching details for stream ".concat(d.name))),3e3)}),p=fetch("/api/streams/".concat(encodeURIComponent(d.id||d.name))).then(f=>{if(!f.ok)throw new Error("Failed to load details for stream ".concat(d.name));return f.json()});return Promise.race([p,c]).catch(f=>(console.error("Error loading details for stream ".concat(d.name,":"),f),d))}),r=await Promise.all(t);console.log("Loaded detailed streams for WebRTC view:",r);const a=r.filter(d=>d.is_deleted?(console.log("Stream ".concat(d.name," is soft deleted, filtering out")),!1):d.enabled?d.streaming_enabled?!0:(console.log("Stream ".concat(d.name," is not configured for HLS, filtering out")),!1):(console.log("Stream ".concat(d.name," is inactive, filtering out")),!1));return console.log("Filtered streams for WebRTC view:",a),a||[]}catch(e){return console.error("Error loading streams for WebRTC view:",e),y("Error loading streams: "+e.message),[]}},E=()=>{switch(h){case"1":return 1;case"2":return 2;case"4":return 4;case"6":return 6;case"9":return 9;case"16":return 16;default:return 4}},K=()=>{if(!x.current)return;const e=x.current.querySelector(".placeholder");if(x.current.innerHTML="",e&&u.length===0){x.current.appendChild(e);return}let i=u;if(h==="1"&&S)i=u.filter(l=>l.name===S);else{const l=E(),o=Math.ceil(u.length/l);if(m>=o){k(Math.max(0,o-1));return}const n=m*l,t=Math.min(n+l,u.length);i=u.slice(n,t)}const s=i.map(l=>l.name);Object.keys(g.current).forEach(l=>{s.includes(l)||(console.log("Cleaning up WebRTC connection for stream ".concat(l," as it's not on the current page")),$(l))}),i.forEach((l,o)=>{Q(l),g.current[l.name]?console.log("WebRTC connection for stream ".concat(l.name," already exists, reusing")):setTimeout(()=>{P(l)},o*500)})},Q=e=>{const i=e.id||e.name,s=document.createElement("div");s.className="video-cell",s.dataset.streamName=e.name,s.style.position="relative";const l=document.createElement("video");l.id="video-".concat(e.name.replace(/\s+/g,"-")),l.className="video-element",l.playsInline=!0,l.autoplay=!0,l.muted=!0,l.style.pointerEvents="none";const o=document.createElement("div");o.className="loading-indicator",o.innerHTML='\n      <div class="spinner"></div>\n      <p>Connecting...</p>\n    ',o.style.position="absolute",o.style.top="0",o.style.left="0",o.style.width="100%",o.style.height="100%",o.style.display="flex",o.style.flexDirection="column",o.style.justifyContent="center",o.style.alignItems="center",o.style.backgroundColor="rgba(0, 0, 0, 0.7)",o.style.color="white",o.style.zIndex="20";const n=document.createElement("div");n.className="error-indicator",n.style.display="none",n.style.position="absolute",n.style.top="0",n.style.left="0",n.style.width="100%",n.style.height="100%",n.style.flexDirection="column",n.style.justifyContent="center",n.style.alignItems="center",n.style.backgroundColor="rgba(0, 0, 0, 0.7)",n.style.color="white",n.style.zIndex="20";const t=document.createElement("div");t.className="stream-name-overlay",t.textContent=e.name,t.style.position="absolute",t.style.top="10px",t.style.left="10px",t.style.padding="5px 10px",t.style.backgroundColor="rgba(0, 0, 0, 0.5)",t.style.color="white",t.style.borderRadius="4px",t.style.fontSize="14px",t.style.zIndex="15";const r=document.createElement("div");r.className="stream-controls",r.innerHTML='\n      <button class="snapshot-btn" title="Take Snapshot" data-id="'.concat(i,'" data-name="').concat(e.name,'">\n        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"></path><circle cx="12" cy="13" r="4"></circle></svg>\n      </button>\n      <button class="fullscreen-btn" title="Toggle Fullscreen" data-id="').concat(i,'" data-name="').concat(e.name,'">\n        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"></path></svg>\n      </button>\n    '),r.style.position="absolute",r.style.bottom="10px",r.style.right="10px",r.style.display="flex",r.style.gap="10px",r.style.zIndex="30";const a=document.createElement("canvas");a.id="canvas-".concat(e.name.replace(/\s+/g,"-")),a.className="detection-overlay",a.style.position="absolute",a.style.top="0",a.style.left="0",a.style.width="100%",a.style.height="100%",a.style.pointerEvents="none",a.style.zIndex="5",s.appendChild(l),s.appendChild(o),s.appendChild(n),s.appendChild(t),s.appendChild(r),s.appendChild(a),x.current.appendChild(s),s.querySelectorAll("button").forEach(f=>{f.style.position="relative",f.style.zIndex="30",f.style.pointerEvents="auto"});const c=s.querySelector(".snapshot-btn");c&&c.addEventListener("click",f=>{Y(i)});const p=s.querySelector(".fullscreen-btn");p&&p.addEventListener("click",()=>{Z(e.name)})},P=e=>{const i="video-".concat(e.name.replace(/\s+/g,"-")),s=document.getElementById(i),l=s?s.closest(".video-cell"):null;if(!s||!l)return;const o=l.querySelector(".loading-indicator");o&&(o.style.display="flex");const n="canvas-".concat(e.name.replace(/\s+/g,"-"));let t=document.getElementById(n);t||(t=document.createElement("canvas"),t.id=n,t.className="detection-overlay",t.style.position="absolute",t.style.top="0",t.style.left="0",t.style.width="100%",t.style.height="100%",t.style.pointerEvents="none",l.appendChild(t));const r=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}],iceTransportPolicy:"all",bundlePolicy:"balanced",rtcpMuxPolicy:"require",sdpSemantics:"unified-plan"});g.current[e.name]=r,r.ontrack=c=>{console.log("Track received for stream ".concat(e.name,":"),c),c.track.kind==="video"&&(s.srcObject=c.streams[0],s.onloadeddata=()=>{o&&(o.style.display="none")})},r.onicecandidate=c=>{c.candidate&&console.log("ICE candidate for stream ".concat(e.name,":"),c.candidate)},r.oniceconnectionstatechange=()=>{console.log("ICE connection state for stream ".concat(e.name,":"),r.iceConnectionState),(r.iceConnectionState==="failed"||r.iceConnectionState==="disconnected")&&R(e.name,"WebRTC connection failed")},r.addTransceiver("video",{direction:"recvonly"}),r.addTransceiver("audio",{direction:"recvonly"});const a={offerToReceiveAudio:!0,offerToReceiveVideo:!0},d=setTimeout(()=>{console.warn("WebRTC setup timed out for stream ".concat(e.name)),R(e.name,"WebRTC setup timed out"),g.current[e.name]&&$(e.name)},15e3);r.createOffer(a).then(c=>(console.log("Created offer for stream ".concat(e.name,":"),c),console.log("Original SDP for stream ".concat(e.name,":"),c.sdp),(!c.sdp.includes("a=ice-ufrag:")||!c.sdp.includes("a=ice-pwd:"))&&console.warn("SDP for stream ".concat(e.name," is missing ice-ufrag or ice-pwd!")),console.log("Using original offer for stream ".concat(e.name)),r.setLocalDescription(c))).then(()=>(console.log("Set local description for stream ".concat(e.name)),X(e.name,r.localDescription))).then(c=>(console.log("Received answer for stream ".concat(e.name,":"),c),r.setRemoteDescription(new RTCSessionDescription(c)))).then(()=>{console.log("Set remote description for stream ".concat(e.name)),clearTimeout(d),console.log("Stream ".concat(e.name," detection settings:"),{detection_based_recording:e.detection_based_recording,detection_model:e.detection_model,detection_threshold:e.detection_threshold}),e.detection_based_recording&&e.detection_model?(console.log("Starting detection polling for stream ".concat(e.name)),ie(e.name,t,s,M.current)):console.log("Detection not enabled for stream ".concat(e.name))}).catch(c=>{clearTimeout(d),console.error("Error setting up WebRTC for stream ".concat(e.name,":"),c),R(e.name,c.message)})},X=async(e,i)=>{try{const s=localStorage.getItem("auth"),l={type:i.type,sdp:i.sdp};console.log("Sending formatted offer for stream ".concat(e,":"),l);const o=new AbortController,n=o.signal,t=setTimeout(()=>{console.warn("Aborting WebRTC offer request for stream ".concat(e," due to timeout")),o.abort()},8e3);try{const r=await fetch("/api/webrtc?src=".concat(encodeURIComponent(e)),{method:"POST",headers:{"Content-Type":"application/json",...s?{Authorization:"Basic "+s}:{}},body:JSON.stringify(l),signal:n});if(clearTimeout(t),!r.ok)throw new Error("Failed to send offer: ".concat(r.status," ").concat(r.statusText));const a=new AbortController,d=a.signal,c=setTimeout(()=>{console.warn("Aborting JSON parsing for stream ".concat(e," due to timeout")),a.abort()},5e3);try{const p=await r.text();clearTimeout(c);try{return JSON.parse(p)}catch(f){throw console.error("Error parsing JSON for stream ".concat(e,":"),f),console.log("Raw response text: ".concat(p)),new Error("Failed to parse WebRTC answer: ".concat(f.message))}}catch(p){throw clearTimeout(c),p.name==="AbortError"?new Error("WebRTC answer parsing timed out for stream ".concat(e)):p}}catch(r){throw clearTimeout(t),r.name==="AbortError"?new Error("WebRTC offer request timed out for stream ".concat(e)):r}}catch(s){throw console.error("Error sending offer for stream ".concat(e,":"),s),s}},R=(e,i)=>{console.error("WebRTC error for stream ".concat(e,":"),i);const s="video-".concat(e.replace(/\s+/g,"-")),l=document.getElementById(s);if(!l)return;const o=l.closest(".video-cell");if(!o)return;const n=o.querySelector(".loading-indicator");n&&(n.style.display="none");let t=o.querySelector(".error-indicator");t||(t=document.createElement("div"),t.className="error-indicator",t.style.position="absolute",t.style.top="0",t.style.left="0",t.style.width="100%",t.style.height="100%",t.style.display="flex",t.style.flexDirection="column",t.style.justifyContent="center",t.style.alignItems="center",t.style.backgroundColor="rgba(0, 0, 0, 0.7)",t.style.color="white",t.style.zIndex="20",o.appendChild(t)),t.innerHTML='\n      <div class="error-icon">!</div>\n      <p>'.concat(i||"WebRTC connection failed",'</p>\n      <button class="retry-button mt-4 px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">Retry</button>\n    '),t.style.display="flex";const r=t.querySelector(".retry-button");r&&(r.style.position="relative",r.style.zIndex="30",r.style.pointerEvents="auto",r.addEventListener("click",()=>{n&&(n.style.display="flex"),t.style.display="none",$(e),fetch("/api/streams/".concat(encodeURIComponent(e))).then(a=>a.json()).then(a=>{P(a)}).catch(a=>{console.error("Error fetching stream info:",a),t.style.display="flex";const d=t.querySelector("p");d&&(d.textContent="Could not reconnect: "+a.message),n&&(n.style.display="none")})}))},$=e=>{g.current[e]&&(g.current[e].close(),delete g.current[e]);const i="video-".concat(e.replace(/\s+/g,"-")),s=document.getElementById(i);s&&(s.srcObject=null),ae(e,M.current)},O=()=>{Object.keys(g.current).forEach(e=>{$(e)})},Y=e=>{const i=document.querySelector('.snapshot-btn[data-id="'.concat(e,'"]'));let s;if(i)s=i.getAttribute("data-name");else{const a=(event.currentTarget||event.target).closest(".video-cell");a&&(s=a.dataset.streamName)}if(!s){console.error("Stream name not found for snapshot"),y("Cannot take snapshot: Stream not identified");return}const l="video-".concat(s.replace(/\s+/g,"-")),o=document.getElementById(l);if(!o){console.error("Video element not found for stream:",s),y("Cannot take snapshot: Video element not found");return}const n=document.createElement("canvas");if(n.width=o.videoWidth,n.height=o.videoHeight,n.width===0||n.height===0){console.error("Invalid video dimensions:",n.width,n.height),y("Cannot take snapshot: Video not loaded or has invalid dimensions");return}n.getContext("2d").drawImage(o,0,0,n.width,n.height);try{window.__snapshotCanvas=n;const r=new Date().toISOString().replace(/[:.]/g,"-"),a="snapshot-".concat(s.replace(/\s+/g,"-"),"-").concat(r,".jpg");window.__snapshotFileName=a,re(n.toDataURL("image/jpeg",.95),"Snapshot: ".concat(s)),y("Snapshot taken successfully")}catch(r){console.error("Error creating snapshot:",r),y("Failed to create snapshot: "+r.message)}},Z=e=>{const i="video-".concat(e.replace(/\s+/g,"-")),s=document.getElementById(i),l=s?s.closest(".video-cell"):null;if(!l){console.error("Stream not found:",e);return}document.fullscreenElement?document.exitFullscreen():l.requestFullscreen().catch(o=>{console.error("Error attempting to enable fullscreen: ".concat(o.message)),y("Could not enable fullscreen mode: ".concat(o.message))})};return w(z||(z=v(['\n    <section id="live-page" class="page">\n      <div class="page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow">\n        <div class="flex items-center space-x-2">\n          <h2 class="text-xl font-bold mr-4">Live View</h2>\n          <div class="flex space-x-2">\n            <button \n              id="hls-toggle-btn" \n              class="px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"\n              onClick=','\n            >\n              HLS View\n            </button>\n            <button \n              id="fullscreen-btn" \n              class="px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"\n              onClick=','\n            >\n              Fullscreen\n            </button>\n          </div>\n        </div>\n        <div class="controls flex items-center space-x-2">\n          <select \n            id="layout-selector" \n            class="px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600"\n            value=',"\n            onChange=",'\n          >\n            <option value="1">Single View</option>\n            <option value="2">2x1 Grid</option>\n            <option value="4" selected>2x2 Grid</option>\n            <option value="6">2x3 Grid</option>\n            <option value="9">3x3 Grid</option>\n            <option value="16">4x4 Grid</option>\n          </select>\n          \n          ','\n        </div>\n      </div>\n      \n      <div class="flex flex-col space-y-4">\n        <div \n          id="video-grid" \n          class=',"\n          ref=","\n        >\n          ","\n          <!-- Video cells will be dynamically added by the updateVideoGrid function -->\n        </div>\n        \n        ","\n      </div>\n    </section>\n  "])),()=>window.location.href="/hls.html",()=>ce(_,W),h,e=>{G(e.target.value),k(0)},h==="1"&&w(V||(V=v(['\n            <select \n              id="stream-selector" \n              class="px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600"\n              value=',"\n              onChange=","\n            >\n              ","\n            </select>\n          "])),S,e=>L(e.target.value),u.map(e=>w(F||(F=v(["\n                <option key="," value=",">","</option>\n              "])),e.name,e.name,e.name))),"video-container layout-".concat(h),x,U?w(q||(q=v(['\n            <div class="flex justify-center items-center col-span-full row-span-full h-64 w-full">\n              <div class="flex flex-col items-center justify-center py-8">\n                <div class="inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16"></div>\n                <p class="mt-4 text-gray-700 dark:text-gray-300">Loading streams...</p>\n              </div>\n            </div>\n          ']))):u.length===0?w(A||(A=v(['\n            <div class="placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8">\n              <p class="mb-6 text-gray-600 dark:text-gray-300 text-lg">No streams configured</p>\n              <a href="streams.html" class="btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">Configure Streams</a>\n            </div>\n          ']))):null,h!=="1"&&u.length>E()?w(D||(D=v(['\n          <div class="pagination-controls flex justify-center items-center space-x-4 mt-4">\n            <button \n              class="px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"\n              onClick=',"\n              disabled=",'\n            >\n              Previous\n            </button>\n            <span class="text-gray-700 dark:text-gray-300">\n              Page '," of ",'\n            </span>\n            <button \n              class="px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"\n              onClick=',"\n              disabled=","\n            >\n              Next\n            </button>\n          </div>\n        "])),()=>k(Math.max(0,m-1)),m===0,m+1,Math.ceil(u.length/E()),()=>k(Math.min(Math.ceil(u.length/E())-1,m+1)),m>=Math.ceil(u.length/E())-1):null)}var H;function me(){const u=document.getElementById("main-content");u&&se(async()=>{const{render:b}=await import("./preact-app-Rq3_3Hhz.js").then(h=>h.p);return{render:b}},__vite__mapDeps([0,1]),import.meta.url).then(({render:b})=>{b(w(H||(H=v(["<"," />"])),de),u)})}export{de as WebRTCView,me as loadWebRTCView};
//# sourceMappingURL=WebRTCView-DA72Bsuz.js.map
