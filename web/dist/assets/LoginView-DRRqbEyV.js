const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./preact-app-DUOnBgZ0.js","../css/preact-app.css"])))=>i.map(i=>d[i]);
var v=Object.freeze,C=Object.defineProperty;var g=(t,n)=>v(C(t,"raw",{value:v(n||t.slice())}));import{d as l,A as x,y as k,h as w,_ as T,s as q}from"./preact-app-DUOnBgZ0.js";var S,$;function A(){const[t,n]=l(""),[s,L]=l(""),[y,m]=l(!1),[c,o]=l(""),[R,I]=l(0),d=x(null);k(()=>{const e=new URLSearchParams(window.location.search);e.has("error")?o("Invalid username or password"):e.has("auth_required")&&e.has("logout")?o("You have been successfully logged out."):e.has("auth_required")?o("Authentication required. Please log in to continue."):e.has("logout")&&o("You have been successfully logged out.")},[]),x(null),k(()=>()=>{d.current&&clearTimeout(d.current)},[]);const f=()=>{const r=new URLSearchParams(window.location.search).get("redirect"),a=new Date().getTime(),i=r?"".concat(r).concat(r.includes("?")?"&":"?","t=").concat(a):"/index.html?t=".concat(a);console.log("Login successful, redirecting to: ".concat(i));try{window.location.href=i}catch(h){console.error("Error redirecting via location.href:",h)}d.current=setTimeout(()=>{window.location.pathname.includes("login.html")&&(console.log("Still on login page, trying alternate redirection method"),I(h=>{const p=h+1;if(p<=3)try{window.location.assign(i),d.current=setTimeout(()=>{window.location.pathname.includes("login.html")&&(console.log("Still on login page after assign, trying location.replace"),window.location.replace(i))},1e3)}catch(E){if(console.error("Error during alternate redirection:",E),p>=3){q('Please click the "Go to Dashboard" button to continue',"info",1e4),o("Login successful! Click the button below to continue.");const u=document.createElement("button");u.textContent="Go to Dashboard",u.className="w-full px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors",u.onclick=()=>{window.location=i};const b=document.getElementById("login-form");b&&b.parentNode&&b.parentNode.appendChild(u)}}return p}))},500)},_=async e=>{if(e.preventDefault(),!t||!s){o("Please enter both username and password");return}m(!0),o("");try{const r=btoa("".concat(t,":").concat(s));localStorage.setItem("auth",r);const a=await fetch("/api/auth/login",{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Basic ".concat(r)},body:JSON.stringify({username:t,password:s}),timeout:1e4});a.ok||a.status===302?(console.log("Login successful, proceeding to redirect"),sessionStorage.setItem("auth_confirmed","true"),f()):(m(!1),o("Invalid username or password"),localStorage.removeItem("auth"))}catch(r){console.error("Login error:",r),r.message==="Request timed out"&&localStorage.getItem("auth")?(console.log("Login request timed out, proceeding with stored credentials"),f()):localStorage.getItem("auth")?(console.log("Login API error, but proceeding with stored credentials"),f()):(m(!1),o("Login failed. Please try again."))}};return w($||($=g(['\n    <section id="login-page" class="page flex items-center justify-center min-h-screen">\n      <div class="login-container w-full max-w-md p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">\n        <div class="text-center mb-8">\n          <h1 class="text-2xl font-bold">LightNVR</h1>\n          <p class="text-gray-600 dark:text-gray-400">Please sign in to continue</p>\n        </div>\n\n        ','\n\n        <form id="login-form" class="space-y-6" action="/api/auth/login" method="POST" onSubmit=','>\n          <div class="form-group">\n            <label for="username" class="block text-sm font-medium mb-1">Username</label>\n            <input\n                type="text"\n                id="username"\n                name="username"\n                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                placeholder="Enter your username"\n                value=',"\n                onChange=",'\n                required\n                autocomplete="username"\n            />\n          </div>\n          <div class="form-group">\n            <label for="password" class="block text-sm font-medium mb-1">Password</label>\n            <input\n                type="password"\n                id="password"\n                name="password"\n                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                placeholder="Enter your password"\n                value=',"\n                onChange=",'\n                required\n                autocomplete="current-password"\n            />\n          </div>\n          <div class="form-group">\n            <button\n                type="submit"\n                class="w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"\n                disabled=',"\n            >\n              ",'\n            </button>\n          </div>\n        </form>\n\n        <div class="mt-6 text-center text-sm text-gray-600 dark:text-gray-400">\n          <p>Default credentials: admin / admin</p>\n          <p class="mt-2">You can change these in Settings after login</p>\n        </div>\n      </div>\n    </section>\n  '])),c&&w(S||(S=g(["\n          <div class=",">\n            ","\n          </div>\n        "])),"mb-4 p-3 rounded-lg ".concat(c.includes("successfully logged out")||c.includes("Click the button below")?"bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-200":"bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-200"),c),_,t,e=>n(e.target.value),s,e=>L(e.target.value),y,y?"Signing in...":"Sign In")}var P;function N(){const t=document.getElementById("main-content");t&&T(async()=>{const{render:n}=await import("./preact-app-DUOnBgZ0.js").then(s=>s.p);return{render:n}},__vite__mapDeps([0,1]),import.meta.url).then(({render:n})=>{n(w(P||(P=g(["<"," />"])),A),t)})}export{A as LoginView,N as loadLoginView};
//# sourceMappingURL=LoginView-DRRqbEyV.js.map
