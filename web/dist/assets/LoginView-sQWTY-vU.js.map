{"version":3,"mappings":"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","names":["LoginView","username","setUsername","useState","password","setPassword","isLoggingIn","setIsLoggingIn","errorMessage","setErrorMessage","redirectAttempts","setRedirectAttempts","redirectTimerRef","useRef","useEffect","urlParams","handleSuccessfulLogin","redirectUrl","timestamp","targetUrl","error","prev","newCount","showStatusMessage","redirectButton","loginForm","handleSubmit","authString","response","html","_b","__template","_a","loadLoginView","mainContent","__vitePreload","render","n","_c"],"ignoreList":[],"sources":["../../js/components/preact/LoginView.js"],"sourcesContent":["/**\n * LightNVR Web Interface LoginView Component\n * Preact component for the login page\n */\n\nimport { h } from 'preact';\nimport { html } from '../../html-helper.js';\nimport { useState, useRef, useEffect } from 'preact/hooks';\nimport { showStatusMessage } from './UI.js';\nimport { enhancedFetch, createRequestController } from '../../fetch-utils.js';\n\n/**\n * LoginView component\n * @returns {JSX.Element} LoginView component\n */\nexport function LoginView() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [redirectAttempts, setRedirectAttempts] = useState(0);\n  const redirectTimerRef = useRef(null);\n\n  // Check URL for error, auth_required, or logout parameter\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.has('error')) {\n      setErrorMessage('Invalid username or password');\n    } else if (urlParams.has('auth_required') && urlParams.has('logout')) {\n      setErrorMessage('You have been successfully logged out.');\n    } else if (urlParams.has('auth_required')) {\n      setErrorMessage('Authentication required. Please log in to continue.');\n    } else if (urlParams.has('logout')) {\n      setErrorMessage('You have been successfully logged out.');\n    }\n  }, []);\n\n  // Request controller for cancelling requests\n  const requestControllerRef = useRef(null);\n\n  // Cleanup function for any timers\n  useEffect(() => {\n    return () => {\n      if (redirectTimerRef.current) {\n        clearTimeout(redirectTimerRef.current);\n      }\n    };\n  }, []);\n\n  // Handle successful login with improved reliability\n  const handleSuccessfulLogin = () => {\n    // Get redirect URL from query parameter if it exists\n    const urlParams = new URLSearchParams(window.location.search);\n    const redirectUrl = urlParams.get('redirect');\n\n    // Add timestamp to prevent caching issues\n    const timestamp = new Date().getTime();\n    const targetUrl = redirectUrl\n        ? `${redirectUrl}${redirectUrl.includes('?') ? '&' : '?'}t=${timestamp}`\n        : `/index.html?t=${timestamp}`;\n\n    console.log(`Login successful, redirecting to: ${targetUrl}`);\n\n    // First, try using window.location.href\n    try {\n      window.location.href = targetUrl;\n    } catch (error) {\n      console.error('Error redirecting via location.href:', error);\n    }\n\n    // Set a backup timeout to check if redirection happened\n    redirectTimerRef.current = setTimeout(() => {\n      // Check if we're still on the login page\n      if (window.location.pathname.includes('login.html')) {\n        console.log('Still on login page, trying alternate redirection method');\n\n        // Increment redirect attempts\n        setRedirectAttempts(prev => {\n          const newCount = prev + 1;\n\n          // If we've tried multiple times, try different approaches\n          if (newCount <= 3) {\n            try {\n              // Try window.location assign\n              window.location.assign(targetUrl);\n\n              // Also try reload as a fallback\n              redirectTimerRef.current = setTimeout(() => {\n                if (window.location.pathname.includes('login.html')) {\n                  console.log('Still on login page after assign, trying location.replace');\n                  window.location.replace(targetUrl);\n                }\n              }, 1000);\n            } catch (error) {\n              console.error('Error during alternate redirection:', error);\n\n              // Last resort - show a manual redirect button\n              if (newCount >= 3) {\n                showStatusMessage('Please click the \"Go to Dashboard\" button to continue', 'info', 10000);\n                setErrorMessage('Login successful! Click the button below to continue.');\n\n                // Create a redirect button (this will be handled by showing the message in the UI)\n                const redirectButton = document.createElement('button');\n                redirectButton.textContent = 'Go to Dashboard';\n                redirectButton.className = 'w-full px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors';\n                redirectButton.onclick = () => {\n                  window.location = targetUrl;\n                };\n\n                // Find the login form and append the button\n                const loginForm = document.getElementById('login-form');\n                if (loginForm && loginForm.parentNode) {\n                  loginForm.parentNode.appendChild(redirectButton);\n                }\n              }\n            }\n          }\n          return newCount;\n        });\n      }\n    }, 500); // Check after 500ms if redirection worked\n  };\n\n  // Handle login form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!username || !password) {\n      setErrorMessage('Please enter both username and password');\n      return;\n    }\n\n    setIsLoggingIn(true);\n    setErrorMessage('');\n\n    try {\n      // Store credentials in localStorage for future requests\n      const authString = btoa(`${username}:${password}`);\n      localStorage.setItem('auth', authString);\n\n      // Make login request\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Basic ${authString}`\n        },\n        body: JSON.stringify({ username, password }),\n        timeout: 10000\n      });\n\n      if (response.ok || response.status === 302) {\n        // Successful login\n        console.log('Login successful, proceeding to redirect');\n        // Set a flag to indicate authenticated status\n        sessionStorage.setItem('auth_confirmed', 'true');\n        handleSuccessfulLogin();\n      } else {\n        // Failed login\n        setIsLoggingIn(false);\n        setErrorMessage('Invalid username or password');\n        localStorage.removeItem('auth');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n\n      // If it's a timeout error, proceed anyway with stored credentials\n      if (error.message === 'Request timed out' && localStorage.getItem('auth')) {\n        console.log('Login request timed out, proceeding with stored credentials');\n        handleSuccessfulLogin();\n      }\n      // For other errors, also try to proceed if we have credentials\n      else if (localStorage.getItem('auth')) {\n        console.log('Login API error, but proceeding with stored credentials');\n        handleSuccessfulLogin();\n      } else {\n        setIsLoggingIn(false);\n        setErrorMessage('Login failed. Please try again.');\n      }\n    }\n  };\n\n  return html`\n    <section id=\"login-page\" class=\"page flex items-center justify-center min-h-screen\">\n      <div class=\"login-container w-full max-w-md p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg\">\n        <div class=\"text-center mb-8\">\n          <h1 class=\"text-2xl font-bold\">LightNVR</h1>\n          <p class=\"text-gray-600 dark:text-gray-400\">Please sign in to continue</p>\n        </div>\n\n        ${errorMessage && html`\n          <div class=${`mb-4 p-3 rounded-lg ${\n              errorMessage.includes('successfully logged out') || errorMessage.includes('Click the button below')\n                  ? 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-200'\n                  : 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-200'\n          }`}>\n            ${errorMessage}\n          </div>\n        `}\n\n        <form id=\"login-form\" class=\"space-y-6\" action=\"/api/auth/login\" method=\"POST\" onSubmit=${handleSubmit}>\n          <div class=\"form-group\">\n            <label for=\"username\" class=\"block text-sm font-medium mb-1\">Username</label>\n            <input\n                type=\"text\"\n                id=\"username\"\n                name=\"username\"\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                placeholder=\"Enter your username\"\n                value=${username}\n                onChange=${e => setUsername(e.target.value)}\n                required\n                autocomplete=\"username\"\n            />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\" class=\"block text-sm font-medium mb-1\">Password</label>\n            <input\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                placeholder=\"Enter your password\"\n                value=${password}\n                onChange=${e => setPassword(e.target.value)}\n                required\n                autocomplete=\"current-password\"\n            />\n          </div>\n          <div class=\"form-group\">\n            <button\n                type=\"submit\"\n                class=\"w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n                disabled=${isLoggingIn}\n            >\n              ${isLoggingIn ? 'Signing in...' : 'Sign In'}\n            </button>\n          </div>\n        </form>\n\n        <div class=\"mt-6 text-center text-sm text-gray-600 dark:text-gray-400\">\n          <p>Default credentials: admin / admin</p>\n          <p class=\"mt-2\">You can change these in Settings after login</p>\n        </div>\n      </div>\n    </section>\n  `;\n}\n\n/**\n * Load LoginView component\n */\nexport function loadLoginView() {\n  const mainContent = document.getElementById('main-content');\n  if (!mainContent) return;\n\n  // Render the LoginView component to the container\n  import('preact').then(({ render }) => {\n    render(html`<${LoginView} />`, mainContent);\n  });\n}"],"file":"assets/LoginView-sQWTY-vU.js"}