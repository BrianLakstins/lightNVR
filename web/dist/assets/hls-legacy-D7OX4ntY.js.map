{"version":3,"file":"hls-legacy-D7OX4ntY.js","sources":["../../js/pages/hls-page.jsx"],"sourcesContent":["/**\n * LightNVR Web Interface Live View Page\n * Entry point for the live view page with WebRTC/HLS support\n */\n\nimport { render } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { LiveView } from '../components/preact/LiveView.jsx';\nimport { ToastContainer } from \"../components/preact/ToastContainer.jsx\";\nimport { QueryClientProvider, queryClient } from '../query-client.js';\nimport { Header } from \"../components/preact/Header.jsx\";\nimport { Footer } from \"../components/preact/Footer.jsx\";\n\n/**\n * Main App component that conditionally renders WebRTCView or LiveView\n * based on whether WebRTC is disabled in settings\n */\nfunction App() {\n    const [isWebRTCDisabled, setIsWebRTCDisabled] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        // Check if WebRTC is disabled in settings\n        async function checkWebRTCStatus() {\n            try {\n                const response = await fetch('/api/settings');\n                if (!response.ok) {\n                    console.error('Failed to fetch settings:', response.status, response.statusText);\n                    setIsLoading(false);\n                    return;\n                }\n\n                const settings = await response.json();\n\n                if (settings.webrtc_disabled) {\n                    console.log('WebRTC is disabled, using HLS view');\n                    setIsWebRTCDisabled(true);\n                } else {\n                    console.log('WebRTC is enabled, using WebRTC view');\n                    setIsWebRTCDisabled(false);\n                }\n            } catch (error) {\n                console.error('Error checking WebRTC status:', error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n\n        checkWebRTCStatus();\n    }, []);\n\n    if (isLoading) {\n        return <div className=\"loading\">Loading...</div>;\n    }\n\n    return (\n        <>\n            <Header />\n            <ToastContainer />\n            <LiveView isWebRTCDisabled={isWebRTCDisabled} />\n            <Footer />\n        </>\n    );\n}\n\n// Render the App component when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Get the container element\n    const container = document.getElementById('main-content');\n\n    if (container) {\n        render(\n            <QueryClientProvider client={queryClient}>\n                <App />\n            </QueryClientProvider>,\n            container\n        );\n    }\n});\n"],"names":["App","isWebRTCDisabled","setIsWebRTCDisabled","useState","isLoading","setIsLoading","useEffect","async","response","fetch","ok","console","error","status","statusText","json","webrtc_disabled","log","checkWebRTCStatus","jsx","className","children","jsxs","Fragment","Header","ToastContainer","LiveView","Footer","document","addEventListener","container","getElementById","render","QueryClientProvider","client","queryClient"],"mappings":"6YAiBA,SAASA,IACL,MAAOC,EAAkBC,GAAuBC,GAAS,IAClDC,EAAWC,GAAgBF,GAAS,GAgC3C,OA9BAG,GAAU,MAENC,iBACQ,IACM,MAAAC,QAAiBC,MAAM,iBACzB,IAACD,EAASE,GAGV,OAFAC,QAAQC,MAAM,4BAA6BJ,EAASK,OAAQL,EAASM,iBACrET,GAAa,UAIMG,EAASO,QAEnBC,iBACTL,QAAQM,IAAI,sCACZf,GAAoB,KAEpBS,QAAQM,IAAI,wCACZf,GAAoB,UAEnBU,GACGD,QAAAC,MAAM,gCAAiCA,EAAK,CACtD,QACEP,GAAa,EAAK,CACtB,CAGca,EAAA,GACnB,IAECd,EACQe,EAAA,MAAA,CAAIC,UAAU,UAAUC,SAAU,eAKtCC,EAAAC,EAAA,CAAAF,SAAA,CAAAF,EAACK,EAAO,MACPC,EAAe,IAChBN,EAACO,GAASzB,uBACT0B,EAAO,CAAA,KAGpB,CAGAC,SAASC,iBAAiB,oBAAoB,KAEpC,MAAAC,EAAYF,SAASG,eAAe,gBAEtCD,GACAE,IACKC,EAAoB,CAAAC,OAAQC,EACzBd,SAAAF,EAACnB,GAAI,KAET8B,EACJ"}