{"version":3,"file":"UsersView-legacy-CqfsyXLv.js","sources":["../../js/components/preact/UsersView.js","../../js/components/preact/users/UserRoles.js","../../js/components/preact/users/UsersTable.js","../../js/components/preact/users/AddUserModal.js","../../js/components/preact/users/EditUserModal.js","../../js/components/preact/users/DeleteUserModal.js","../../js/components/preact/users/ApiKeyModal.js"],"sourcesContent":["/**\n * LightNVR Web Interface Users View Component\n * Preact component for the user management page\n */\n\nimport { h } from '../../preact.min.js';\nimport { useState, useEffect, useRef, useCallback } from '../../preact.hooks.module.js';\nimport { html } from '../../html-helper.js';\nimport { showStatusMessage } from './UI.js';\nimport { fetchJSON, enhancedFetch, createRequestController } from '../../fetch-utils.js';\n\n// Import user components\nimport { USER_ROLES } from './users/UserRoles.js';\nimport { UsersTable } from './users/UsersTable.js';\nimport { AddUserModal } from './users/AddUserModal.js';\nimport { EditUserModal } from './users/EditUserModal.js';\nimport { DeleteUserModal } from './users/DeleteUserModal.js';\nimport { ApiKeyModal } from './users/ApiKeyModal.js';\n\n/**\n * UsersView component\n * @returns {JSX.Element} UsersView component\n */\nexport function UsersView() {\n  // State for users data and loading status\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // State for modal visibility\n  const [activeModal, setActiveModal] = useState(null); // 'add', 'edit', 'delete', 'apiKey', or null\n  \n  // State for selected user and API key\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  \n  // Form state for adding/editing users\n  const [formData, setFormData] = useState({\n    username: '',\n    password: '',\n    email: '',\n    role: 1,\n    is_active: true\n  });\n\n  // Request controller for cancelling requests on unmount\n  const requestControllerRef = useRef(null);\n\n  /**\n   * Get auth headers for requests\n   * @returns {Object} Headers object with Authorization if available\n   */\n  const getAuthHeaders = useCallback(() => {\n    const auth = localStorage.getItem('auth');\n    return auth ? { 'Authorization': 'Basic ' + auth } : {};\n  }, []);\n\n  /**\n   * Fetch users from the API\n   */\n  const fetchUsers = useCallback(async () => {\n    setLoading(true);\n    try {\n      const data = await fetchJSON('/api/auth/users', {\n        headers: getAuthHeaders(),\n        cache: 'no-store',\n        signal: requestControllerRef.current?.signal,\n        timeout: 15000, // 15 second timeout\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n      \n      setUsers(data.users || []); // Extract users array from response\n      setError(null);\n    } catch (error) {\n      // Only show error if the request wasn't cancelled\n      if (error.message !== 'Request was cancelled') {\n        console.error('Error fetching users:', error);\n        setError('Failed to load users. Please try again.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [getAuthHeaders]);\n\n  // Fetch users on component mount\n  useEffect(() => {\n    // Create a new request controller\n    requestControllerRef.current = createRequestController();\n    \n    fetchUsers();\n    \n    // Clean up and cancel pending requests on unmount\n    return () => {\n      if (requestControllerRef.current) {\n        requestControllerRef.current.abort();\n      }\n    };\n  }, [fetchUsers]);\n\n  // Add event listener for the add user button\n  useEffect(() => {\n    const addUserBtn = document.getElementById('add-user-btn');\n    if (addUserBtn) {\n      const handleAddUserClick = () => {\n        // Reset form data for new user\n        setFormData({\n          username: '',\n          password: '',\n          email: '',\n          role: 1,\n          is_active: true\n        });\n        setActiveModal('add');\n      };\n      \n      addUserBtn.addEventListener('click', handleAddUserClick);\n      \n      return () => {\n        if (addUserBtn) {\n          addUserBtn.removeEventListener('click', handleAddUserClick);\n        }\n      };\n    }\n  }, []);\n\n  /**\n   * Handle form input changes\n   * @param {Event} e - Input change event\n   */\n  const handleInputChange = useCallback((e) => {\n    const { name, value, type, checked } = e.target;\n    \n    setFormData(prevData => ({\n      ...prevData,\n      [name]: type === 'checkbox' ? checked : (name === 'role' ? parseInt(value, 10) : value)\n    }));\n  }, []);\n\n  /**\n   * Handle form submission for adding a user\n   * @param {Event} e - Form submit event\n   */\n  const handleAddUser = useCallback(async (e) => {\n    if (e) e.preventDefault();\n    \n    try {\n      console.log('Adding user:', formData.username);\n      \n      await fetchJSON('/api/auth/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...getAuthHeaders()\n        },\n        body: JSON.stringify(formData),\n        signal: requestControllerRef.current?.signal,\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n      \n      // Close modal and show success message\n      setActiveModal(null);\n      showStatusMessage('User added successfully', 'success', 5000);\n      \n      // Refresh users list\n      await fetchUsers();\n    } catch (err) {\n      console.error('Error adding user:', err);\n      showStatusMessage(`Error adding user: ${err.message}`, 'error', 8000);\n    }\n  }, [formData, getAuthHeaders, fetchUsers]);\n\n  /**\n   * Handle form submission for editing a user\n   * @param {Event} e - Form submit event\n   */\n  const handleEditUser = useCallback(async (e) => {\n    if (e) e.preventDefault();\n    \n    try {\n      console.log('Editing user:', selectedUser.id, selectedUser.username);\n      \n      await fetchJSON(`/api/auth/users/${selectedUser.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          ...getAuthHeaders()\n        },\n        body: JSON.stringify(formData),\n        signal: requestControllerRef.current?.signal,\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n      \n      // Close modal and show success message\n      setActiveModal(null);\n      showStatusMessage('User updated successfully', 'success', 5000);\n      \n      // Refresh users list\n      await fetchUsers();\n    } catch (err) {\n      console.error('Error updating user:', err);\n      showStatusMessage(`Error updating user: ${err.message}`, 'error', 8000);\n    }\n  }, [selectedUser, formData, getAuthHeaders, fetchUsers]);\n\n  /**\n   * Handle user deletion\n   */\n  const handleDeleteUser = useCallback(async () => {\n    try {\n      console.log('Deleting user:', selectedUser.id, selectedUser.username);\n      \n      await enhancedFetch(`/api/auth/users/${selectedUser.id}`, {\n        method: 'DELETE',\n        headers: getAuthHeaders(),\n        signal: requestControllerRef.current?.signal,\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n      \n      // Close modal and show success message\n      setActiveModal(null);\n      showStatusMessage('User deleted successfully', 'success', 5000);\n      \n      // Refresh users list\n      await fetchUsers();\n    } catch (err) {\n      console.error('Error deleting user:', err);\n      showStatusMessage(`Error deleting user: ${err.message}`, 'error', 8000);\n    }\n  }, [selectedUser, getAuthHeaders, fetchUsers]);\n\n  /**\n   * Handle generating a new API key for a user\n   */\n  const handleGenerateApiKey = useCallback(async () => {\n    // Show loading state\n    setApiKey('Generating...');\n    \n    try {\n      console.log('Generating API key for user:', selectedUser.id, selectedUser.username);\n      \n      const data = await fetchJSON(`/api/auth/users/${selectedUser.id}/api-key`, {\n        method: 'POST',\n        headers: getAuthHeaders(),\n        signal: requestControllerRef.current?.signal,\n        timeout: 20000, // 20 second timeout for key generation\n        retries: 1,     // Retry once\n        retryDelay: 2000 // 2 seconds between retries\n      });\n      \n      setApiKey(data.api_key);\n      showStatusMessage('API key generated successfully', 'success');\n      \n      // Refresh users list\n      await fetchUsers();\n    } catch (err) {\n      console.error('Error generating API key:', err);\n      setApiKey('');\n      showStatusMessage(`Error generating API key: ${err.message}`, 'error');\n    }\n  }, [selectedUser, getAuthHeaders, fetchUsers]);\n\n  /**\n   * Copy API key to clipboard\n   */\n  const copyApiKey = useCallback(() => {\n    navigator.clipboard.writeText(apiKey)\n      .then(() => {\n        // Use global toast function if available\n        if (window.showSuccessToast) {\n          window.showSuccessToast('API key copied to clipboard');\n        } else {\n          // Fallback to standard showStatusMessage\n          showStatusMessage('API key copied to clipboard', 'success');\n        }\n      })\n      .catch((err) => {\n        console.error('Error copying API key:', err);\n        \n        // Use global toast function if available\n        if (window.showErrorToast) {\n          window.showErrorToast('Failed to copy API key');\n        } else {\n          // Fallback to standard showStatusMessage\n          showStatusMessage('Failed to copy API key', 'error');\n        }\n      });\n  }, [apiKey]);\n\n  /**\n   * Open the edit modal for a user\n   * @param {Object} user - User to edit\n   */\n  const openEditModal = useCallback((user) => {\n    setSelectedUser(user);\n    setFormData({\n      username: user.username,\n      password: '', // Don't include the password in the form\n      email: user.email || '',\n      role: user.role,\n      is_active: user.is_active\n    });\n    setActiveModal('edit');\n  }, []);\n\n  /**\n   * Open the delete modal for a user\n   * @param {Object} user - User to delete\n   */\n  const openDeleteModal = useCallback((user) => {\n    setSelectedUser(user);\n    setActiveModal('delete');\n  }, []);\n\n  /**\n   * Open the API key modal for a user\n   * @param {Object} user - User to generate API key for\n   */\n  const openApiKeyModal = useCallback((user) => {\n    setSelectedUser(user);\n    setApiKey('');\n    setActiveModal('apiKey');\n  }, []);\n\n  /**\n   * Close any open modal\n   */\n  const closeModal = useCallback(() => {\n    setActiveModal(null);\n  }, []);\n\n  // Render loading state\n  if (loading && users.length === 0) {\n    return html`\n      <div class=\"flex justify-center items-center p-8\">\n        <div class=\"w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n        <span class=\"sr-only\">Loading...</span>\n      </div>\n    `;\n  }\n\n  // Render empty state\n  if (users.length === 0 && !loading) {\n    return html`\n      <div class=\"bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded relative mb-4\">\n        <h4 class=\"font-bold mb-2\">No Users Found</h4>\n        <p>Click the \"Add User\" button to create your first user.</p>\n      </div>\n      ${activeModal === 'add' && html`<${AddUserModal} \n        formData=${formData} \n        handleInputChange=${handleInputChange} \n        handleAddUser=${handleAddUser} \n        onClose=${closeModal} \n      />`}\n    `;\n  }\n\n  // Render users table with modals\n  return html`\n    <div>\n      <${UsersTable} \n        users=${users} \n        onEdit=${openEditModal} \n        onDelete=${openDeleteModal} \n        onApiKey=${openApiKeyModal} \n      />\n      \n      ${activeModal === 'add' && html`<${AddUserModal} \n        formData=${formData} \n        handleInputChange=${handleInputChange} \n        handleAddUser=${handleAddUser} \n        onClose=${closeModal} \n      />`}\n      \n      ${activeModal === 'edit' && html`<${EditUserModal} \n        currentUser=${selectedUser} \n        formData=${formData} \n        handleInputChange=${handleInputChange} \n        handleEditUser=${handleEditUser} \n        onClose=${closeModal} \n      />`}\n      \n      ${activeModal === 'delete' && html`<${DeleteUserModal} \n        currentUser=${selectedUser} \n        handleDeleteUser=${handleDeleteUser} \n        onClose=${closeModal} \n      />`}\n      \n      ${activeModal === 'apiKey' && html`<${ApiKeyModal} \n        currentUser=${selectedUser} \n        newApiKey=${apiKey} \n        handleGenerateApiKey=${handleGenerateApiKey} \n        copyApiKey=${copyApiKey} \n        onClose=${closeModal} \n      />`}\n    </div>\n  `;\n}\n\n/**\n * Load the UsersView component\n */\nexport function loadUsersView() {\n  const container = document.getElementById('users-container');\n  if (!container) return;\n  \n  import('../../preact.min.js').then(({ render }) => {\n    render(html`<${UsersView} />`, container);\n  });\n}\n","/**\n * User role definitions\n */\nexport const USER_ROLES = {\n  0: 'Admin',\n  1: 'User',\n  2: 'Viewer',\n  3: 'API'\n};\n","/**\n * Users Table Component\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\nimport { USER_ROLES } from './UserRoles.js';\n\n/**\n * Users Table Component\n * @param {Object} props - Component props\n * @param {Array} props.users - List of users to display\n * @param {Function} props.onEdit - Function to handle edit action\n * @param {Function} props.onDelete - Function to handle delete action\n * @param {Function} props.onApiKey - Function to handle API key action\n * @returns {JSX.Element} Users table\n */\nexport function UsersTable({ users, onEdit, onDelete, onApiKey }) {\n  // Create direct handlers for each button\n  const handleEdit = (user, e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onEdit(user);\n  };\n  \n  const handleDelete = (user, e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onDelete(user);\n  };\n  \n  const handleApiKey = (user, e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onApiKey(user);\n  };\n  \n  return html`\n    <div class=\"overflow-x-auto\">\n      <table class=\"w-full border-collapse\">\n        <thead class=\"bg-gray-50 dark:bg-gray-700\">\n          <tr>\n            <th class=\"py-3 px-6 text-left font-semibold\">ID</th>\n            <th class=\"py-3 px-6 text-left font-semibold\">Username</th>\n            <th class=\"py-3 px-6 text-left font-semibold\">Email</th>\n            <th class=\"py-3 px-6 text-left font-semibold\">Role</th>\n            <th class=\"py-3 px-6 text-left font-semibold\">Status</th>\n            <th class=\"py-3 px-6 text-left font-semibold\">Last Login</th>\n            <th class=\"py-3 px-6 text-left font-semibold\">Actions</th>\n          </tr>\n        </thead>\n        <tbody class=\"divide-y divide-gray-200 dark:divide-gray-700\">\n          ${users.map(user => html`\n            <tr key=${user.id} class=\"hover:bg-gray-100 dark:hover:bg-gray-600\">\n              <td class=\"py-3 px-6 border-b border-gray-200 dark:border-gray-700\">${user.id}</td>\n              <td class=\"py-3 px-6 border-b border-gray-200 dark:border-gray-700\">${user.username}</td>\n              <td class=\"py-3 px-6 border-b border-gray-200 dark:border-gray-700\">${user.email || '-'}</td>\n              <td class=\"py-3 px-6 border-b border-gray-200 dark:border-gray-700\">${USER_ROLES[user.role] || 'Unknown'}</td>\n              <td class=\"py-3 px-6 border-b border-gray-200 dark:border-gray-700\">\n                <span class=${`inline-block px-2 py-1 text-xs font-semibold rounded-full ${user.is_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\n                  ${user.is_active ? 'Active' : 'Inactive'}\n                </span>\n              </td>\n              <td class=\"py-3 px-6 border-b border-gray-200 dark:border-gray-700\">${user.last_login ? new Date(user.last_login * 1000).toLocaleString() : 'Never'}</td>\n              <td class=\"py-3 px-6 border-b border-gray-200 dark:border-gray-700\">\n                <div class=\"flex space-x-2\">\n                  <button \n                    class=\"p-1 text-blue-600 hover:text-blue-800 rounded hover:bg-blue-100 transition-colors\"\n                    onClick=${(e) => handleEdit(user, e)}\n                    title=\"Edit User\"\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                    </svg>\n                  </button>\n                  <button \n                    class=\"p-1 text-red-600 hover:text-red-800 rounded hover:bg-red-100 transition-colors\"\n                    onClick=${(e) => handleDelete(user, e)}\n                    title=\"Delete User\"\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                    </svg>\n                  </button>\n                  <button \n                    class=\"p-1 text-gray-600 hover:text-gray-800 rounded hover:bg-gray-100 transition-colors\"\n                    onClick=${(e) => handleApiKey(user, e)}\n                    title=\"Manage API Key\"\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z\" />\n                    </svg>\n                  </button>\n                </div>\n              </td>\n            </tr>\n          `)}\n        </tbody>\n      </table>\n    </div>\n  `;\n}\n","/**\n * Add User Modal Component\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\nimport { USER_ROLES } from './UserRoles.js';\n\n/**\n * Add User Modal Component\n * @param {Object} props - Component props\n * @param {Object} props.formData - Form data for adding a user\n * @param {Function} props.handleInputChange - Function to handle input changes\n * @param {Function} props.handleAddUser - Function to handle user addition\n * @param {Function} props.onClose - Function to close the modal\n * @returns {JSX.Element} Add user modal\n */\nexport function AddUserModal({ formData, handleInputChange, handleAddUser, onClose }) {\n  // Direct submit handler\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    e.stopPropagation(); // Stop event from bubbling up\n    handleAddUser(e);\n  };\n\n  // Stop click propagation on modal content\n  const stopPropagation = (e) => {\n    e.stopPropagation();\n  };\n\n  return html`\n    <div class=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\" onClick=${onClose}>\n      <div class=\"bg-white rounded-lg p-6 max-w-md w-full dark:bg-gray-800 dark:text-white\" onClick=${stopPropagation}>\n        <h2 class=\"text-xl font-bold mb-4\">Add New User</h2>\n        \n        <form onSubmit=${handleSubmit}>\n          <div class=\"mb-4\">\n            <label class=\"block text-sm font-bold mb-2\" for=\"username\">\n              Username\n            </label>\n            <input\n              class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"username\"\n              type=\"text\"\n              name=\"username\"\n              value=${formData.username}\n              onChange=${handleInputChange}\n              required\n            />\n          </div>\n          \n          <div class=\"mb-4\">\n            <label class=\"block text-sm font-bold mb-2\" for=\"password\">\n              Password\n            </label>\n            <input\n              class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"password\"\n              type=\"password\"\n              name=\"password\"\n              value=${formData.password}\n              onChange=${handleInputChange}\n              required\n            />\n          </div>\n          \n          <div class=\"mb-4\">\n            <label class=\"block text-sm font-bold mb-2\" for=\"email\">\n              Email\n            </label>\n            <input\n              class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"email\"\n              type=\"email\"\n              name=\"email\"\n              value=${formData.email}\n              onChange=${handleInputChange}\n            />\n          </div>\n          \n          <div class=\"mb-4\">\n            <label class=\"block text-sm font-bold mb-2\" for=\"role\">\n              Role\n            </label>\n            <select\n              class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"role\"\n              name=\"role\"\n              value=${formData.role}\n              onChange=${handleInputChange}\n            >\n              ${Object.entries(USER_ROLES).map(([value, label]) => html`\n                <option value=${value}>${label}</option>\n              `)}\n            </select>\n          </div>\n          \n          <div class=\"mb-6\">\n            <label class=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"is_active\"\n                checked=${formData.is_active}\n                onChange=${handleInputChange}\n                class=\"mr-2\"\n              />\n              <span class=\"text-sm font-bold\">Active</span>\n            </label>\n          </div>\n          \n          <div class=\"flex justify-end mt-6\">\n            <button\n              type=\"button\"\n              class=\"px-4 py-2 bg-gray-300 text-gray-800 dark:bg-gray-600 dark:text-white rounded hover:bg-gray-400 dark:hover:bg-gray-500 mr-2\"\n              onClick=${onClose}\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              class=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n            >\n              Add User\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  `;\n}\n","/**\n * Edit User Modal Component\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\nimport { USER_ROLES } from './UserRoles.js';\n\n/**\n * Edit User Modal Component\n * @param {Object} props - Component props\n * @param {Object} props.currentUser - Current user being edited\n * @param {Object} props.formData - Form data for editing a user\n * @param {Function} props.handleInputChange - Function to handle input changes\n * @param {Function} props.handleEditUser - Function to handle user editing\n * @param {Function} props.onClose - Function to close the modal\n * @returns {JSX.Element} Edit user modal\n */\nexport function EditUserModal({ currentUser, formData, handleInputChange, handleEditUser, onClose }) {\n  // Direct submit handler\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    e.stopPropagation(); // Stop event from bubbling up\n    handleEditUser(e);\n  };\n\n  // Stop click propagation on modal content\n  const stopPropagation = (e) => {\n    e.stopPropagation();\n  };\n\n  return html`\n    <div class=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\" onClick=${onClose}>\n      <div class=\"bg-white rounded-lg p-6 max-w-md w-full dark:bg-gray-800 dark:text-white\" onClick=${stopPropagation}>\n        <h2 class=\"text-xl font-bold mb-4\">Edit User: ${currentUser.username}</h2>\n        \n        <form onSubmit=${handleSubmit}>\n          <div class=\"mb-4\">\n            <label class=\"block text-sm font-bold mb-2\" for=\"username\">\n              Username\n            </label>\n            <input\n              class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"username\"\n              type=\"text\"\n              name=\"username\"\n              value=${formData.username}\n              onChange=${handleInputChange}\n              required\n            />\n          </div>\n          \n          <div class=\"mb-4\">\n            <label class=\"block text-sm font-bold mb-2\" for=\"password\">\n              Password (leave blank to keep current)\n            </label>\n            <input\n              class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"password\"\n              type=\"password\"\n              name=\"password\"\n              value=${formData.password}\n              onChange=${handleInputChange}\n            />\n          </div>\n          \n          <div class=\"mb-4\">\n            <label class=\"block text-sm font-bold mb-2\" for=\"email\">\n              Email\n            </label>\n            <input\n              class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"email\"\n              type=\"email\"\n              name=\"email\"\n              value=${formData.email}\n              onChange=${handleInputChange}\n            />\n          </div>\n          \n          <div class=\"mb-4\">\n            <label class=\"block text-sm font-bold mb-2\" for=\"role\">\n              Role\n            </label>\n            <select\n              class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"role\"\n              name=\"role\"\n              value=${formData.role}\n              onChange=${handleInputChange}\n            >\n              ${Object.entries(USER_ROLES).map(([value, label]) => html`\n                <option value=${value}>${label}</option>\n              `)}\n            </select>\n          </div>\n          \n          <div class=\"mb-6\">\n            <label class=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"is_active\"\n                checked=${formData.is_active}\n                onChange=${handleInputChange}\n                class=\"mr-2\"\n              />\n              <span class=\"text-sm font-bold\">Active</span>\n            </label>\n          </div>\n          \n          <div class=\"flex justify-end mt-6\">\n            <button\n              type=\"button\"\n              class=\"px-4 py-2 bg-gray-300 text-gray-800 dark:bg-gray-600 dark:text-white rounded hover:bg-gray-400 dark:hover:bg-gray-500 mr-2\"\n              onClick=${onClose}\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              class=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n            >\n              Update User\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  `;\n}\n","/**\n * Delete User Modal Component\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\n\n/**\n * Delete User Modal Component\n * @param {Object} props - Component props\n * @param {Object} props.currentUser - Current user being deleted\n * @param {Function} props.handleDeleteUser - Function to handle user deletion\n * @param {Function} props.onClose - Function to close the modal\n * @returns {JSX.Element} Delete user modal\n */\nexport function DeleteUserModal({ currentUser, handleDeleteUser, onClose }) {\n  // Direct delete handler\n  const handleDeleteClick = (e) => {\n    e.stopPropagation(); // Stop event from bubbling up\n    handleDeleteUser();\n  };\n\n  // Stop click propagation on modal content\n  const stopPropagation = (e) => {\n    e.stopPropagation();\n  };\n\n  return html`\n    <div class=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\" onClick=${onClose}>\n      <div class=\"bg-white rounded-lg p-6 max-w-md w-full dark:bg-gray-800 dark:text-white\" onClick=${stopPropagation}>\n        <h2 class=\"text-xl font-bold mb-4\">Delete User</h2>\n        \n        <p class=\"mb-6\">\n          Are you sure you want to delete the user \"${currentUser.username}\"? This action cannot be undone.\n        </p>\n        \n        <div class=\"flex justify-end\">\n          <button\n            class=\"px-4 py-2 bg-gray-300 text-gray-800 dark:bg-gray-600 dark:text-white rounded hover:bg-gray-400 dark:hover:bg-gray-500 mr-2\"\n            onClick=${onClose}\n          >\n            Cancel\n          </button>\n          <button\n            class=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\n            onClick=${handleDeleteClick}\n          >\n            Delete User\n          </button>\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * API Key Modal Component\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\n\n/**\n * API Key Modal Component\n * @param {Object} props - Component props\n * @param {Object} props.currentUser - Current user for API key generation\n * @param {string} props.newApiKey - Newly generated API key\n * @param {Function} props.handleGenerateApiKey - Function to handle API key generation\n * @param {Function} props.copyApiKey - Function to copy API key to clipboard\n * @param {Function} props.onClose - Function to close the modal\n * @returns {JSX.Element} API key modal\n */\nexport function ApiKeyModal({ currentUser, newApiKey, handleGenerateApiKey, copyApiKey, onClose }) {\n  // Stop click propagation on modal content\n  const stopPropagation = (e) => {\n    e.stopPropagation();\n  };\n\n  return html`\n    <div class=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\" onClick=${onClose}>\n      <div class=\"bg-white rounded-lg p-6 max-w-md w-full dark:bg-gray-800 dark:text-white\" onClick=${stopPropagation}>\n        <h2 class=\"text-xl font-bold mb-4\">API Key for ${currentUser.username}</h2>\n        \n        <div class=\"mb-6\">\n          ${newApiKey ? html`\n            <div class=\"mb-4\">\n              <label class=\"block text-sm font-bold mb-2\">\n                API Key\n              </label>\n              <div class=\"flex\">\n                <input\n                  class=\"shadow appearance-none border rounded-l w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                  type=\"text\"\n                  value=${newApiKey}\n                  readonly\n                />\n                <button\n                  class=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-r\"\n                  onClick=${copyApiKey}\n                >\n                  Copy\n                </button>\n              </div>\n              <p class=\"text-sm text-gray-600 dark:text-gray-300 mt-2\">\n                This key will only be shown once. Save it securely.\n              </p>\n            </div>\n          ` : html`\n            <p class=\"mb-4\">\n              Generate a new API key for this user. This will invalidate any existing API key.\n            </p>\n            <button\n              class=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-4\"\n              onClick=${handleGenerateApiKey}\n            >\n              Generate New API Key\n            </button>\n          `}\n        </div>\n        \n        <div class=\"flex justify-end\">\n          <button\n            class=\"px-4 py-2 bg-gray-300 text-gray-800 dark:bg-gray-600 dark:text-white rounded hover:bg-gray-400 dark:hover:bg-gray-500\"\n            onClick=${onClose}\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  `;\n}\n"],"names":["container","document","getElementById","__vitePreload","async","render","module","import","then","n","p","meta","url","html","UsersView","USER_ROLES","UsersTable","users","onEdit","onDelete","onApiKey","map","user","id","username","email","role","is_active","last_login","Date","toLocaleString","e","handleEdit","preventDefault","stopPropagation","handleDelete","handleApiKey","AddUserModal","formData","handleInputChange","handleAddUser","onClose","password","Object","entries","value","label","EditUserModal","currentUser","handleEditUser","DeleteUserModal","handleDeleteUser","ApiKeyModal","newApiKey","handleGenerateApiKey","copyApiKey","setUsers","useState","loading","setLoading","error","setError","activeModal","setActiveModal","selectedUser","setSelectedUser","apiKey","setApiKey","setFormData","requestControllerRef","useRef","getAuthHeaders","useCallback","auth","localStorage","getItem","Authorization","fetchUsers","data","fetchJSON","headers","cache","signal","current","timeout","retries","retryDelay","message","console","useEffect","createRequestController","abort","addUserBtn","handleAddUserClick","addEventListener","removeEventListener","name","type","checked","target","prevData","parseInt","log","method","body","JSON","stringify","showStatusMessage","err","enhancedFetch","api_key","navigator","clipboard","writeText","window","showSuccessToast","catch","showErrorToast","openEditModal","openDeleteModal","openApiKeyModal","closeModal","length"],"mappings":"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"}