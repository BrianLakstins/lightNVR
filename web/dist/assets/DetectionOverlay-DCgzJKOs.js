import{c as D}from"./preact-app-W1tfenKU.js";function I(e,o){e&&(e.stopPropagation(),e.preventDefault()),console.log("DIRECT EXIT FUNCTION CALLED");const n=document.getElementById("live-page");if(!n){console.error("Live page element not found");return}n.classList.remove("fullscreen-mode"),document.body.style.overflow="";const t=document.querySelector(".fullscreen-exit");t?t.remove():console.warn("Exit button not found when trying to remove it");const i=document.getElementById("fullscreen-btn");i?i.style.display="":console.warn("Fullscreen button not found when trying to show it again"),o(!1),console.log("Fullscreen mode exited, state set to false")}function $(e,o){console.log("toggleFullscreen called, current state:",e);const n=document.getElementById("live-page");if(!n){console.error("Live page element not found");return}const t=n.classList.contains("fullscreen-mode");if(console.log("DOM check for fullscreen mode:",t),t)I(null,o);else{console.log("Entering fullscreen mode"),n.classList.add("fullscreen-mode"),document.body.style.overflow="hidden";const i=document.createElement("button");i.className="fullscreen-exit fixed top-4 right-4 w-10 h-10 bg-black/70 text-white rounded-full flex justify-center items-center cursor-pointer z-50 transition-all duration-200 hover:bg-black/85 hover:scale-110 shadow-md",i.innerHTML="âœ•";const u=function(g){console.log("Exit button clicked - STANDALONE HANDLER"),I(g,o)};i.addEventListener("click",u),n.appendChild(i);const r=document.getElementById("fullscreen-btn");r&&(r.style.display="none"),o(!0),console.log("Fullscreen mode entered, state set to true")}}function R(e){const o="video-".concat(e.replace(/\s+/g,"-")),n=document.getElementById(o),t=n?n.closest(".video-cell"):null;if(!t){console.error("Stream not found:",e);return}document.fullscreenElement?document.exitFullscreen():t.requestFullscreen().catch(i=>{console.error("Error attempting to enable fullscreen: ".concat(i.message)),D("Could not enable fullscreen mode: ".concat(i.message))})}function S(e,o,n,t){t[e]&&clearInterval(t[e]);const i=c=>{const l=o,s=l.getContext("2d");if(l.width=n.clientWidth,l.height=n.clientHeight,s.clearRect(0,0,l.width,l.height),!c||c.length===0)return;const p=n.videoWidth,x=n.videoHeight;if(!p||!x){console.log("Video dimensions not available yet, skipping detection drawing");return}const w=p/x,C=l.width/l.height;let f,a,y=0,b=0;w>C?(f=l.width,a=l.width/w,b=(l.height-a)/2):(a=l.height,f=l.height*w,y=(l.width-f)/2),c.forEach(d=>{const v=d.x*f+y,m=d.y*a+b,B=d.width*f,L=d.height*a;s.strokeStyle="rgba(255, 0, 0, 0.8)",s.lineWidth=3,s.strokeRect(v,m,B,L);const E="".concat(d.label," (").concat(Math.round(d.confidence*100),"%)");s.font="14px Arial";const k=s.measureText(E).width;s.fillStyle="rgba(255, 0, 0, 0.7)",s.fillRect(v,m-20,k+10,20),s.fillStyle="white",s.fillText(E,v+5,m-5)})};let u=0,r=1e3;const g=()=>{n.videoWidth&&fetch("/api/detection/results/".concat(encodeURIComponent(e))).then(c=>{if(!c.ok)throw new Error("Failed to fetch detection results: ".concat(c.status));return u=0,c.json()}).then(c=>{c&&c.detections&&i(c.detections)}).catch(c=>{console.error("Error fetching detection results for ".concat(e,":"),c),o.getContext("2d").clearRect(0,0,o.width,o.height),u++,u>3&&(clearInterval(t[e]),r=Math.min(5e3,r*2),console.log("Reducing detection polling frequency to ".concat(r,"ms due to errors")),t[e]=setInterval(g,r))})},h=setInterval(g,r);return t[e]=h,o.detectionInterval=h,h}function A(e,o){const n="canvas-".concat(e.replace(/\s+/g,"-")),t=document.getElementById(n);t&&t.detectionInterval&&(clearInterval(t.detectionInterval),delete t.detectionInterval),o[e]&&(clearInterval(o[e]),delete o[e])}export{R as a,A as c,I as e,S as s,$ as t};
//# sourceMappingURL=DetectionOverlay-DCgzJKOs.js.map
