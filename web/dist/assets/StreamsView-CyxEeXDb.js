const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./preact-app-DMiXxE4W.js","../css/preact-app.css"])))=>i.map(i=>d[i]);
var K=Object.freeze,Qe=Object.defineProperty;var s=(l,u)=>K(Qe(l,"raw",{value:K(u||l.slice())}));import{d as i,h as d,f as Je,u as X,m as b,_ as W,c as n,j as f}from"./preact-app-DMiXxE4W.js";import{C as Ke}from"./LoadingIndicator-Dw8b5dSA.js";var Y,G,Z;function Xe({streamId:l,streamName:u,onClose:c,onDisable:y,onDelete:g}){const[D,h]=i(!1),_=()=>{h(!0)},k=()=>{y(l),c()},E=()=>{g(l),c()};return d(Z||(Z=s(['\n    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300">\n      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full">\n        <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">\n          <h3 class="text-lg font-medium">','</h3>\n          <span class="text-2xl cursor-pointer" onClick=','>Ã—</span>\n        </div>\n        \n        <div class="p-6">\n          ',"\n        </div>\n      </div>\n    </div>\n  "])),D?"Confirm Permanent Deletion":"Stream Actions",c,D?d(G||(G=s(['\n            <div class="mb-6">\n              <div class="flex items-center justify-center mb-4 text-red-600 dark:text-red-500">\n                <svg class="w-12 h-12" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">\n                  <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>\n                </svg>\n              </div>\n              <h4 class="text-lg font-medium mb-2 text-center">Are you sure you want to permanently delete "','"?</h4>\n              <p class="text-gray-600 dark:text-gray-400 mb-4 text-center">\n                This action cannot be undone. The stream configuration will be permanently removed from the database.\n              </p>\n            </div>\n            \n            <div class="flex justify-center space-x-3">\n              <button \n                class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"\n                onClick=','\n              >\n                Cancel\n              </button>\n              <button \n                class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"\n                onClick=',"\n              >\n                Yes, Delete Permanently\n              </button>\n            </div>\n          "])),u,()=>h(!1),E):d(Y||(Y=s(['\n            <div class="mb-6">\n              <h4 class="text-lg font-medium mb-2">What would you like to do with "','"?</h4>\n              <p class="text-gray-600 dark:text-gray-400 mb-4">\n                Please choose one of the following options:\n              </p>\n              \n              <div class="space-y-4">\n                <div class="p-4 border border-yellow-200 bg-yellow-50 dark:bg-yellow-900/20 dark:border-yellow-900/30 rounded-lg">\n                  <h5 class="font-medium text-yellow-800 dark:text-yellow-500 mb-2">Disable Stream (Soft Delete)</h5>\n                  <p class="text-gray-600 dark:text-gray-400 mb-2">\n                    This option will disable the stream but keep its configuration in the database. You can re-enable it later.\n                  </p>\n                  <ul class="list-disc list-inside text-sm text-gray-600 dark:text-gray-400 mb-3">\n                    <li>Stream will stop processing</li>\n                    <li>Live streaming will be disabled</li>\n                    <li>Recording will be disabled</li>\n                    <li>Audio recording will be disabled</li>\n                    <li>Detection-based recording will be disabled</li>\n                    <li>Configuration is preserved</li>\n                    <li>Existing recordings are kept</li>\n                    <li>Can be re-enabled later</li>\n                  </ul>\n                  <button \n                    class="w-full px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700 transition-colors focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"\n                    onClick=','\n                  >\n                    Disable Stream\n                  </button>\n                </div>\n                \n                <div class="p-4 border border-red-200 bg-red-50 dark:bg-red-900/20 dark:border-red-900/30 rounded-lg">\n                  <h5 class="font-medium text-red-800 dark:text-red-500 mb-2">Delete Stream (Permanent)</h5>\n                  <p class="text-gray-600 dark:text-gray-400 mb-2">\n                    This option will permanently delete the stream configuration from the database. This action cannot be undone.\n                  </p>\n                  <ul class="list-disc list-inside text-sm text-gray-600 dark:text-gray-400 mb-3">\n                    <li>Stream will be completely removed</li>\n                    <li>Configuration is deleted</li>\n                    <li>Recordings remain accessible</li>\n                    <li>Cannot be recovered</li>\n                  </ul>\n                  <button \n                    class="w-full px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"\n                    onClick=',"\n                  >\n                    Delete Stream\n                  </button>\n                </div>\n              </div>\n            </div>\n          "])),u,k,_))}var ee,te,re,ae,se,oe,ne,de,ie,le,ce,ue,me,ge,pe;function We(){const l=Je(),[u,c]=i(!1),[y,g]=i(!1),[D,h]=i(!1),[_,k]=i(!1),[E,fe]=i([]),[j,R]=i([]),[p,ye]=i(null),[x,he]=i(null),[M,B]=i(""),[$,xe]=i({username:"",password:""}),[A,O]=i(!1),[F,v]=i(!1),{data:I=[],isLoading:ve,error:Ye}=X(["streams"],"/api/streams",{timeout:1e4,retries:2,retryDelay:1e3}),{data:N}=X(["detectionModels"],"/api/detection/models",{timeout:5e3,retries:1,retryDelay:1e3}),w=Array.isArray(I)?I:I.streams||[];console.log("API Response:",I),console.log("Streams data:",w),console.log("hasData:",w&&w.length>0);const[t,T]=i({name:"",url:"",enabled:!0,streamingEnabled:!0,width:1280,height:720,fps:15,codec:"h264",protocol:"0",priority:"5",segment:30,record:!0,recordAudio:!0,detectionEnabled:!1,detectionModel:"",detectionThreshold:50,detectionInterval:10,preBuffer:10,postBuffer:30}),[C,L]=i(!1),[we,U]=i(!1),[V,z]=i(null),ke=w&&w.length>0,$e=(N==null?void 0:N.models)||[],Ce=b({mutationFn:async e=>await f("/api/streams",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e),timeout:15e3,retries:1,retryDelay:1e3}),onSuccess:()=>{n("Stream added successfully"),P(),l.invalidateQueries({queryKey:["streams"]})},onError:e=>{n("Error adding stream: ".concat(e.message),5e3,"error")}}),Se=b({mutationFn:async e=>await f("/api/streams/".concat(encodeURIComponent(e.name)),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e),timeout:15e3,retries:1,retryDelay:1e3}),onSuccess:()=>{n("Stream updated successfully"),P(),l.invalidateQueries({queryKey:["streams"]})},onError:e=>{n("Error updating stream: ".concat(e.message),5e3,"error")}}),q={mutate:(e,a)=>{C?Se.mutate(e,a):Ce.mutate(e,a)}},De=b({mutationFn:async e=>(n("Testing stream connection..."),await f("/api/streams/test",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({url:e.url,protocol:parseInt(e.protocol,10)}),timeout:2e4,retries:1,retryDelay:2e3})),onSuccess:e=>{e.success?n("Stream connection successful!",3e3,"success"):n("Stream connection failed: ".concat(e.message),5e3,"error")},onError:e=>{n("Error testing stream: ".concat(e.message),5e3,"error")}}),H=b({mutationFn:async({streamId:e,permanent:a})=>{const m=a?"/api/streams/".concat(encodeURIComponent(e),"?permanent=true"):"/api/streams/".concat(encodeURIComponent(e));return await f(m,{method:"DELETE",headers:{"Content-Type":"application/json"},timeout:1e4,retries:1,retryDelay:1e3})},onSuccess:()=>{n("Stream deleted successfully"),Q(),l.invalidateQueries({queryKey:["streams"]})},onError:e=>{n("Error deleting stream: ".concat(e.message),5e3,"error")}});b({mutationFn:async({streamId:e,enabled:a})=>await f("/api/streams/".concat(encodeURIComponent(e),"/enable"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({enabled:!a}),timeout:1e4,retries:1,retryDelay:1e3}),onSuccess:(e,a)=>{n("Stream ".concat(a.enabled?"disabled":"enabled"," successfully")),l.invalidateQueries({queryKey:["streams"]})},onError:e=>{n("Error toggling stream state: ".concat(e.message),5e3,"error")}});const _e=e=>{e.preventDefault();const a={name:t.name,url:t.url,enabled:t.enabled,streaming_enabled:t.streamingEnabled,width:parseInt(t.width,10),height:parseInt(t.height,10),fps:parseInt(t.fps,10),codec:t.codec,protocol:parseInt(t.protocol,10),priority:parseInt(t.priority,10),segment_duration:parseInt(t.segment,10),record:t.record,detection_based_recording:t.detectionEnabled,detection_model:t.detectionModel,detection_threshold:parseInt(t.detectionThreshold,10),detection_interval:parseInt(t.detectionInterval,10),pre_detection_buffer:parseInt(t.preBuffer,10),post_detection_buffer:parseInt(t.postBuffer,10),record_audio:t.recordAudio};C&&(a.is_deleted=!1),q.mutate(a)},Ee=e=>{_e(e)},Me=()=>{De.mutate(t)},Ie=e=>{z(e),U(!0)},Q=()=>{U(!1),z(null)},Te=()=>{T({name:"",url:"",enabled:!0,streamingEnabled:!0,width:1280,height:720,fps:15,codec:"h264",protocol:"0",priority:"5",segment:30,record:!0,recordAudio:!0,detectionEnabled:!1,detectionModel:"",detectionThreshold:50,detectionInterval:10,preBuffer:10,postBuffer:30}),L(!1),c(!0)},Pe=async e=>{var a,m;try{const r=await l.fetchQuery({queryKey:["stream",e],queryFn:async()=>{const S=await fetch("/api/streams/".concat(encodeURIComponent(e)));if(!S.ok)throw new Error("HTTP error ".concat(S.status));return S.json()},staleTime:1e4});T({...r,width:r.width||1280,height:r.height||720,fps:r.fps||15,protocol:((a=r.protocol)==null?void 0:a.toString())||"0",priority:((m=r.priority)==null?void 0:m.toString())||"5",segment:r.segment_duration||30,detectionThreshold:r.detection_threshold||50,detectionInterval:r.detection_interval||10,preBuffer:r.pre_detection_buffer||10,postBuffer:r.post_detection_buffer||30,streamingEnabled:r.streaming_enabled!==void 0?r.streaming_enabled:!0,isOnvif:r.is_onvif!==void 0?r.is_onvif:!1,detectionEnabled:r.detection_based_recording||!1,detectionModel:r.detection_model||"",recordAudio:r.record_audio!==void 0?r.record_audio:!0}),L(!0),c(!0)}catch(r){console.error("Error loading stream details:",r),n("Error loading stream details: "+r.message)}},P=()=>{c(!1)},o=e=>{const{name:a,value:m,type:r,checked:S}=e.target;T(He=>({...He,[a]:r==="checkbox"?S:m}))},Ae=e=>{H.mutate({streamId:e,permanent:!1})},Oe=e=>{H.mutate({streamId:e,permanent:!0})},J=e=>{const{name:a,value:m}=e.target;xe(r=>({...r,[a]:m}))},Ne=e=>{const a=e.target.value;T(m=>({...m,detectionThreshold:a}))},Ve=()=>{l.invalidateQueries({queryKey:["detectionModels"]})},je=b({mutationFn:async()=>(O(!0),await f("/api/onvif/discovery/discover",{method:"POST",timeout:12e4,retries:0,body:JSON.stringify({})})),onSuccess:e=>{fe(e.devices||[]),O(!1)},onError:e=>{n("Error discovering ONVIF devices: ".concat(e.message),5e3,"error"),O(!1)}}),Re=b({mutationFn:async({device:e,credentials:a})=>(v(!0),await f("/api/onvif/device/profiles",{method:"GET",headers:{"X-Device-URL":"http://".concat(e.ip_address,"/onvif/device_service"),"X-Username":a.username,"X-Password":a.password},timeout:2e4,retries:0})),onSuccess:e=>{R(e.profiles||[]),v(!1)},onError:e=>{n("Error loading device profiles: ".concat(e.message),5e3,"error"),v(!1)}}),Be=b({mutationFn:async e=>(v(!0),await f("/api/onvif/device/test",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({url:"http://".concat(e.ip_address,"/onvif/device_service"),username:$.username,password:$.password}),timeout:15e3,retries:0})),onSuccess:(e,a)=>{e.success?(n("Connection successful!",3e3,"success"),Ue(a)):(n("Connection failed: ".concat(e.message),5e3,"error"),v(!1))},onError:e=>{n("Error testing connection: ".concat(e.message),5e3,"error"),v(!1)}}),Fe=()=>{if(!p||!x||!M.trim()){n("Missing required information",5e3,"error");return}k(!0);const e={name:M.trim(),url:x.stream_uri,enabled:!0,streaming_enabled:!0,width:x.width,height:x.height,fps:x.fps||15,codec:x.encoding==="H264"?"h264":"h265",protocol:"0",priority:"5",segment_duration:30,record:!0,record_audio:!0,is_onvif:!0};console.log("Adding ONVIF stream with data:",e),q.mutate(e,{onSuccess:()=>{k(!1),h(!1),g(!1)},onError:()=>{k(!1)},isEditing:!1})},Le=()=>{je.mutate()},Ue=e=>{ye(e),R([]),Re.mutate({device:e,credentials:$})},ze=e=>{he(e),B("".concat(p.name||"ONVIF","_").concat(e.name||"Stream")),h(!0)},qe=e=>{Be.mutate(e)};return d(pe||(pe=s(['\n    <section id="streams-page" class="page">\n      <div class="page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow">\n        <h2 class="text-xl font-bold">Streams</h2>\n        <div class="controls flex space-x-2">\n          <button\n              id="discover-onvif-btn"\n              class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"\n              onClick=','\n          >\n            Discover ONVIF Cameras\n          </button>\n          <button\n              id="add-stream-btn"\n              class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"\n              onClick=',"\n          >\n            Add Stream\n          </button>\n        </div>\n      </div>\n\n      <","\n          isLoading=","\n          hasData=",'\n          loadingMessage="Loading streams..."\n          emptyMessage="No streams configured yet. Click \'Add Stream\' to create one."\n      >\n        <div class="streams-container bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">\n          <div class="overflow-x-auto">\n            <table id="streams-table" class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">\n              <thead class="bg-gray-50 dark:bg-gray-700">\n              <tr>\n                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Name</th>\n                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">URL</th>\n                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Resolution</th>\n                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">FPS</th>\n                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Recording</th>\n                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>\n              </tr>\n              </thead>\n              <tbody class="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">\n              ',"\n              </tbody>\n            </table>\n          </div>\n        </div>\n      <//>\n\n      ","\n\n      ","\n\n      ","\n\n      ","\n    </section>\n  "])),()=>g(!0),Te,Ke,ve,ke,w.map(e=>d(ee||(ee=s(["\n                <tr key=",' class="hover:bg-gray-50 dark:hover:bg-gray-700">\n                  <td class="px-6 py-4 whitespace-nowrap">\n                    <div class="flex items-center">\n                      <span class=',"></span>\n                      ",'\n                    </div>\n                  </td>\n                  <td class="px-6 py-4 whitespace-nowrap">','</td>\n                  <td class="px-6 py-4 whitespace-nowrap">',"x",'</td>\n                  <td class="px-6 py-4 whitespace-nowrap">','</td>\n                  <td class="px-6 py-4 whitespace-nowrap">\n                    ',"\n                    ",'\n                  </td>\n                  <td class="px-6 py-4 whitespace-nowrap">\n                    <div class="flex space-x-2">\n                      <button\n                          class="p-1 rounded-full text-blue-600 hover:bg-blue-100 dark:text-blue-400 dark:hover:bg-blue-900 focus:outline-none"\n                          onClick=','\n                          title="Edit"\n                      >\n                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">\n                          <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>\n                        </svg>\n                      </button>\n                      <button\n                          class="p-1 rounded-full text-red-600 hover:bg-red-100 dark:text-red-400 dark:hover:bg-red-900 focus:outline-none"\n                          onClick=','\n                          title="Delete"\n                      >\n                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">\n                          <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>\n                        </svg>\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              '])),e.name,"status-indicator w-2 h-2 rounded-full mr-2 ".concat(e.enabled?"bg-green-500":"bg-red-500"),e.name,e.url,e.width,e.height,e.fps,e.record?"Enabled":"Disabled",e.detection_based_recording?" (Detection)":"",()=>Pe(e.name),()=>Ie(e))),we&&V&&d(te||(te=s(["\n        <","\n            streamId=","\n            streamName=","\n            onClose=","\n            onDisable=","\n            onDelete=","\n        />\n      "])),Xe,V.name,V.name,Q,Ae,Oe),u&&d(ae||(ae=s(['\n        <div id="stream-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300">\n          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto">\n            <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">\n              <h3 class="text-lg font-medium">','</h3>\n              <span class="text-2xl cursor-pointer" onClick=','>Ã—</span>\n            </div>\n            <div class="p-4">\n              <form id="stream-form" class="space-y-4">\n                <div class="form-group">\n                  <label for="stream-name" class="block text-sm font-medium mb-1">Name</label>\n                  <input\n                      type="text"\n                      id="stream-name"\n                      name="name"\n                      class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white ','"\n                      value=',"\n                      onChange=","\n                      disabled=",'\n                      required\n                  />\n                </div>\n                <div class="form-group">\n                  <label for="stream-url" class="block text-sm font-medium mb-1">URL</label>\n                  <input\n                      type="text"\n                      id="stream-url"\n                      name="url"\n                      class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                      placeholder="rtsp://example.com/stream"\n                      value=',"\n                      onChange=",'\n                      required\n                  />\n                </div>\n                <div class="form-group flex items-center">\n                  <input\n                      type="checkbox"\n                      id="stream-enabled"\n                      name="enabled"\n                      class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"\n                      checked=',"\n                      onChange=",'\n                  />\n                  <label for="stream-enabled" class="ml-2 block text-sm">Stream Active</label>\n                  <span class="ml-2 text-xs text-gray-500 dark:text-gray-400">Enable/disable all stream processing</span>\n                </div>\n                <div class="form-group flex items-center">\n                  <input\n                      type="checkbox"\n                      id="stream-streaming-enabled"\n                      name="streamingEnabled"\n                      class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"\n                      checked=',"\n                      onChange=",'\n                  />\n                  <label for="stream-streaming-enabled" class="ml-2 block text-sm">Live View Enabled</label>\n                  <span class="ml-2 text-xs text-gray-500 dark:text-gray-400">Enable/disable live viewing in browser</span>\n                </div>\n                <div class="form-group flex items-center">\n                  <input\n                      type="checkbox"\n                      id="stream-is-onvif"\n                      name="isOnvif"\n                      class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"\n                      checked=',"\n                      onChange=",'\n                  />\n                  <label for="stream-is-onvif" class="ml-2 block text-sm">ONVIF Camera</label>\n                  <span class="ml-2 text-xs text-gray-500 dark:text-gray-400">Mark this stream as an ONVIF camera for special handling</span>\n                </div>\n                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">\n                  <div class="form-group">\n                    <label for="stream-width" class="block text-sm font-medium mb-1">Width</label>\n                    <input\n                        type="number"\n                        id="stream-width"\n                        name="width"\n                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                        min="320"\n                        max="1920"\n                        value=',"\n                        onChange=",'\n                    />\n                  </div>\n                  <div class="form-group">\n                    <label for="stream-height" class="block text-sm font-medium mb-1">Height</label>\n                    <input\n                        type="number"\n                        id="stream-height"\n                        name="height"\n                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                        min="240"\n                        max="1080"\n                        value=',"\n                        onChange=",'\n                    />\n                  </div>\n                </div>\n                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">\n                  <div class="form-group">\n                    <label for="stream-fps" class="block text-sm font-medium mb-1">FPS</label>\n                    <input\n                        type="number"\n                        id="stream-fps"\n                        name="fps"\n                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                        min="1"\n                        max="30"\n                        value=',"\n                        onChange=",'\n                    />\n                  </div>\n                  <div class="form-group">\n                    <label for="stream-codec" class="block text-sm font-medium mb-1">Codec</label>\n                    <select\n                        id="stream-codec"\n                        name="codec"\n                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                        value=',"\n                        onChange=",'\n                    >\n                      <option value="h264">H.264</option>\n                      <option value="h265">H.265</option>\n                    </select>\n                  </div>\n                  <div class="form-group">\n                    <label for="stream-protocol" class="block text-sm font-medium mb-1">Protocol</label>\n                    <select\n                        id="stream-protocol"\n                        name="protocol"\n                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                        value=',"\n                        onChange=",'\n                    >\n                      <option value="0">TCP</option>\n                      <option value="1">UDP</option>\n                    </select>\n                    <span class="text-xs text-gray-500 dark:text-gray-400">Connection protocol (ONVIF cameras use either TCP or UDP)</span>\n                  </div>\n                </div>\n                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">\n                  <div class="form-group">\n                    <label for="stream-priority" class="block text-sm font-medium mb-1">Priority</label>\n                    <select\n                        id="stream-priority"\n                        name="priority"\n                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                        value=',"\n                        onChange=",'\n                    >\n                      <option value="1">Low (1)</option>\n                      <option value="5">Medium (5)</option>\n                      <option value="10">High (10)</option>\n                    </select>\n                  </div>\n                  <div class="form-group">\n                    <label for="stream-segment" class="block text-sm font-medium mb-1">Segment Duration (seconds)</label>\n                    <input\n                        type="number"\n                        id="stream-segment"\n                        name="segment"\n                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                        min="60"\n                        max="3600"\n                        value=',"\n                        onChange=",'\n                    />\n                  </div>\n                </div>\n                <div class="form-group flex items-center">\n                  <input\n                      type="checkbox"\n                      id="stream-record"\n                      name="record"\n                      class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"\n                      checked=',"\n                      onChange=",'\n                  />\n                  <label for="stream-record" class="ml-2 block text-sm">Record</label>\n                </div>\n                <div class="form-group flex items-center">\n                  <input\n                      type="checkbox"\n                      id="stream-record-audio"\n                      name="recordAudio"\n                      class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"\n                      checked=',"\n                      onChange=",'\n                  />\n                  <label for="stream-record-audio" class="ml-2 block text-sm">Record Audio</label>\n                  <span class="ml-2 text-xs text-gray-500 dark:text-gray-400">Include audio in recordings if available in the stream</span>\n                </div>\n\n                <!-- Detection-based recording options -->\n                <div class="mt-6 mb-2 pb-1 border-b border-gray-200 dark:border-gray-700">\n                  <h4 class="text-md font-medium">Detection-Based Recording</h4>\n                </div>\n                <div class="form-group flex items-center">\n                  <input\n                      type="checkbox"\n                      id="stream-detection-enabled"\n                      name="detectionEnabled"\n                      class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"\n                      checked=',"\n                      onChange=",'\n                  />\n                  <label for="stream-detection-enabled" class="ml-2 block text-sm">Enable Detection-Based Recording</label>\n                  <span class="ml-2 text-xs text-gray-500 dark:text-gray-400">Only record when objects are detected</span>\n                </div>\n                <div class="form-group" style=','>\n                  <label for="stream-detection-model" class="block text-sm font-medium mb-1">Detection Model</label>\n                  <div class="flex space-x-2">\n                    <select\n                        id="stream-detection-model"\n                        name="detectionModel"\n                        class="flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                        value=',"\n                        onChange=",'\n                    >\n                      <option value="">Select a model</option>\n                      ','\n                    </select>\n                    <button\n                        id="refresh-models-btn"\n                        class="p-2 rounded-md bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none"\n                        title="Refresh Models"\n                        onClick=','\n                        type="button"\n                    >\n                      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">\n                        <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"></path>\n                      </svg>\n                    </button>\n                  </div>\n                </div>\n                <div class="form-group" style=','>\n                  <label for="stream-detection-threshold" class="block text-sm font-medium mb-1">Detection Threshold</label>\n                  <div class="flex items-center space-x-2">\n                    <input\n                        type="range"\n                        id="stream-detection-threshold"\n                        name="detectionThreshold"\n                        class="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700"\n                        min="0"\n                        max="100"\n                        step="1"\n                        value=',"\n                        onInput=",'\n                    />\n                    <span id="stream-threshold-value" class="font-medium text-blue-600 dark:text-blue-400 min-w-[3rem] text-center">\n                      ','%\n                    </span>\n                  </div>\n                </div>\n                <div class="grid grid-cols-1 md:grid-cols-3 gap-4" style=','>\n                  <div class="form-group">\n                    <label for="stream-detection-interval" class="block text-sm font-medium mb-1">Detection Interval (frames)</label>\n                    <input\n                        type="number"\n                        id="stream-detection-interval"\n                        name="detectionInterval"\n                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                        min="1"\n                        max="100"\n                        value=',"\n                        onChange=",'\n                    />\n                    <span class="text-xs text-gray-500 dark:text-gray-400">Detect on every Nth frame</span>\n                  </div>\n                  <div class="form-group">\n                    <label for="stream-pre-buffer" class="block text-sm font-medium mb-1">Pre-detection Buffer (seconds)</label>\n                    <input\n                        type="number"\n                        id="stream-pre-buffer"\n                        name="preBuffer"\n                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                        min="0"\n                        max="60"\n                        value=',"\n                        onChange=",'\n                    />\n                    <span class="text-xs text-gray-500 dark:text-gray-400">Seconds to keep before detection</span>\n                  </div>\n                  <div class="form-group">\n                    <label for="stream-post-buffer" class="block text-sm font-medium mb-1">Post-detection Buffer (seconds)</label>\n                    <input\n                        type="number"\n                        id="stream-post-buffer"\n                        name="postBuffer"\n                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                        min="0"\n                        max="300"\n                        value=',"\n                        onChange=",'\n                    />\n                    <span class="text-xs text-gray-500 dark:text-gray-400">Seconds to keep after detection</span>\n                  </div>\n                </div>\n              </form>\n            </div>\n            <div class="flex justify-between p-4 border-t border-gray-200 dark:border-gray-700">\n              <button\n                  id="stream-test-btn"\n                  class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition-colors dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600"\n                  onClick=','\n                  type="button"\n              >\n                Test Connection\n              </button>\n              <div class="space-x-2">\n                <button\n                    id="stream-save-btn"\n                    class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"\n                    onClick=','\n                    type="button"\n                >\n                  Save\n                </button>\n                <button\n                    id="stream-cancel-btn"\n                    class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors"\n                    onClick=','\n                    type="button"\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      '])),C?"Edit Stream":"Add Stream",P,C?"bg-gray-100 dark:bg-gray-800":"",t.name,o,C,t.url,o,t.enabled,o,t.streamingEnabled,o,t.isOnvif,o,t.width,o,t.height,o,t.fps,o,t.codec,o,t.protocol,o,t.priority,o,t.segment,o,t.record,o,t.recordAudio,o,t.detectionEnabled,o,t.detectionEnabled?"":"display: none",t.detectionModel,o,$e.map(e=>d(re||(re=s(["\n                        <option key="," value=",">","</option>\n                      "])),e.id,e.id,e.name)),Ve,t.detectionEnabled?"":"display: none",t.detectionThreshold,Ne,t.detectionThreshold,t.detectionEnabled?"":"display: none",t.detectionInterval,o,t.preBuffer,o,t.postBuffer,o,Me,Ee,P),y&&d(ue||(ue=s(['\n        <div id="onvif-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300">\n          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">\n            <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">\n              <h3 class="text-lg font-medium">ONVIF Camera Discovery</h3>\n              <span class="text-2xl cursor-pointer" onClick=','>Ã—</span>\n            </div>\n            <div class="p-4">\n              <div class="mb-4 flex justify-between items-center">\n                <h4 class="text-md font-medium">Discovered Devices</h4>\n                <button\n                    id="discover-btn"\n                    class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors focus:outline-none"\n                    onClick=',"\n                    disabled=",'\n                    type="button"\n                >\n                  ','\n                </button>\n              </div>\n\n              <div class="overflow-x-auto">\n                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">\n                  <thead class="bg-gray-50 dark:bg-gray-700">\n                  <tr>\n                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">IP Address</th>\n                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Manufacturer</th>\n                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Model</th>\n                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>\n                  </tr>\n                  </thead>\n                  <tbody class="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">\n                  ','\n                  </tbody>\n                </table>\n              </div>\n\n              <div class="mt-6 mb-4">\n                <h4 class="text-md font-medium mb-2">Authentication</h4>\n                <p class="text-sm text-gray-500 dark:text-gray-400 mb-3">\n                  Enter credentials to connect to the selected ONVIF device. Credentials are not needed for discovery, only for connecting to devices.\n                </p>\n                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">\n                  <div class="form-group">\n                    <label for="onvif-username" class="block text-sm font-medium mb-1">Username</label>\n                    <input\n                        type="text"\n                        id="onvif-username"\n                        name="username"\n                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                        placeholder="admin"\n                        value=',"\n                        onChange=",'\n                    />\n                  </div>\n                  <div class="form-group">\n                    <label for="onvif-password" class="block text-sm font-medium mb-1">Password</label>\n                    <input\n                        type="password"\n                        id="onvif-password"\n                        name="password"\n                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                        placeholder="password"\n                        value=',"\n                        onChange=","\n                    />\n                  </div>\n                </div>\n              </div>\n\n              ",'\n            </div>\n            <div class="flex justify-end p-4 border-t border-gray-200 dark:border-gray-700">\n              <button\n                  id="onvif-close-btn"\n                  class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors"\n                  onClick=','\n                  type="button"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      '])),()=>g(!1),Le,A,A?d(se||(se=s(['\n                    <span class="flex items-center">\n                      Discovering\n                      <span class="ml-1 flex space-x-1">\n                        <span class="animate-pulse delay-0 h-1.5 w-1.5 bg-white rounded-full"></span>\n                        <span class="animate-pulse delay-150 h-1.5 w-1.5 bg-white rounded-full"></span>\n                        <span class="animate-pulse delay-300 h-1.5 w-1.5 bg-white rounded-full"></span>\n                      </span>\n                    </span>\n                  ']))):"Start Discovery",E.length===0?d(ne||(ne=s(['\n                    <tr>\n                      <td colspan="4" class="px-6 py-4 text-center text-gray-500 dark:text-gray-400">\n                        ',"\n                      </td>\n                    </tr>\n                  "])),A?d(oe||(oe=s(['\n                          <div class="flex items-center justify-center">\n                            <span>Discovering devices</span>\n                            <span class="ml-1 flex space-x-1">\n                                <span class="animate-pulse delay-0 h-1.5 w-1.5 bg-gray-500 dark:bg-gray-400 rounded-full"></span>\n                                <span class="animate-pulse delay-150 h-1.5 w-1.5 bg-gray-500 dark:bg-gray-400 rounded-full"></span>\n                                <span class="animate-pulse delay-300 h-1.5 w-1.5 bg-gray-500 dark:bg-gray-400 rounded-full"></span>\n                              </span>\n                          </div>\n                        ']))):'No devices discovered yet. Click "Start Discovery" to scan your network.'):E.map(e=>d(ie||(ie=s(["\n                    <tr key=",' class="hover:bg-gray-50 dark:hover:bg-gray-700">\n                      <td class="px-6 py-4 whitespace-nowrap">','</td>\n                      <td class="px-6 py-4 whitespace-nowrap">','</td>\n                      <td class="px-6 py-4 whitespace-nowrap">','</td>\n                      <td class="px-6 py-4 whitespace-nowrap">\n                        <button\n                            class="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none"\n                            onClick=',"\n                            disabled=",'\n                            type="button"\n                        >\n                          ',"\n                        </button>\n                      </td>\n                    </tr>\n                  "])),e.ip_address,e.ip_address,e.manufacturer||"Unknown",e.model||"Unknown",()=>qe(e),F&&p&&p.ip_address===e.ip_address,F&&p&&p.ip_address===e.ip_address?d(de||(de=s(['\n                            <span class="flex items-center">\n                                Loading\n                                <span class="ml-1 flex space-x-1">\n                                  <span class="animate-pulse delay-0 h-1.5 w-1.5 bg-white rounded-full"></span>\n                                  <span class="animate-pulse delay-150 h-1.5 w-1.5 bg-white rounded-full"></span>\n                                  <span class="animate-pulse delay-300 h-1.5 w-1.5 bg-white rounded-full"></span>\n                                </span>\n                              </span>\n                          ']))):"Connect")),$.username,J,$.password,J,p&&j.length>0&&d(ce||(ce=s(['\n                <div class="mt-6">\n                  <h4 class="text-md font-medium mb-2">Available Profiles for ','</h4>\n                  <div class="overflow-x-auto">\n                    <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">\n                      <thead class="bg-gray-50 dark:bg-gray-700">\n                      <tr>\n                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Name</th>\n                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Resolution</th>\n                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Encoding</th>\n                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">FPS</th>\n                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>\n                      </tr>\n                      </thead>\n                      <tbody class="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">\n                      ',"\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              "])),p.ip_address,j.map(e=>d(le||(le=s(["\n                        <tr key=",' class="hover:bg-gray-50 dark:hover:bg-gray-700">\n                          <td class="px-6 py-4 whitespace-nowrap">','</td>\n                          <td class="px-6 py-4 whitespace-nowrap">',"x",'</td>\n                          <td class="px-6 py-4 whitespace-nowrap">','</td>\n                          <td class="px-6 py-4 whitespace-nowrap">','</td>\n                          <td class="px-6 py-4 whitespace-nowrap">\n                            <button\n                                class="px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 transition-colors focus:outline-none"\n                                onClick=','\n                                type="button"\n                            >\n                              Add as Stream\n                            </button>\n                          </td>\n                        </tr>\n                      '])),e.token,e.name,e.width,e.height,e.encoding,e.fps,()=>ze(e)))),()=>g(!1)),D&&d(ge||(ge=s(['\n        <div id="custom-name-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300">\n          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full">\n            <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">\n              <h3 class="text-lg font-medium">Stream Name</h3>\n              <span class="text-2xl cursor-pointer" onClick=','>Ã—</span>\n            </div>\n            <div class="p-4">\n              <div class="mb-4">\n                <label for="custom-stream-name" class="block text-sm font-medium mb-1">Enter a name for this stream:</label>\n                <input\n                    type="text"\n                    id="custom-stream-name"\n                    class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                    value=',"\n                    onChange=",'\n                />\n                <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">\n                  This name will be used to identify the stream in the system.\n                </p>\n              </div>\n            </div>\n            <div class="flex justify-end p-4 border-t border-gray-200 dark:border-gray-700 space-x-2">\n              <button\n                  class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors"\n                  onClick=','\n                  type="button"\n              >\n                Cancel\n              </button>\n              <button\n                  class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"\n                  onClick=','\n                  type="button"\n                  disabled=',"\n              >\n                ","\n              </button>\n            </div>\n          </div>\n        </div>\n      "])),()=>h(!1),M,e=>B(e.target.value),()=>h(!1),Fe,!M.trim()||_,_?d(me||(me=s(['\n                  <span class="flex items-center">\n                    Adding\n                    <span class="ml-1 flex space-x-1">\n                      <span class="animate-pulse delay-0 h-1.5 w-1.5 bg-white rounded-full"></span>\n                      <span class="animate-pulse delay-150 h-1.5 w-1.5 bg-white rounded-full"></span>\n                      <span class="animate-pulse delay-300 h-1.5 w-1.5 bg-white rounded-full"></span>\n                    </span>\n                  </span>\n                ']))):"Add Stream"))}var be;function tt(){const l=document.getElementById("main-content");l&&W(async()=>{const{render:u}=await import("./preact-app-DMiXxE4W.js").then(c=>c.p);return{render:u}},__vite__mapDeps([0,1]),import.meta.url).then(({render:u})=>{W(async()=>{const{QueryClientProvider:c,queryClient:y}=await import("./preact-app-DMiXxE4W.js").then(g=>g.o);return{QueryClientProvider:c,queryClient:y}},__vite__mapDeps([0,1]),import.meta.url).then(({QueryClientProvider:c,queryClient:y})=>{u(d(be||(be=s(["<"," client=","><"," /></",">"])),c,y,We,c),l)})})}export{We as StreamsView,tt as loadStreamsView};
//# sourceMappingURL=StreamsView-CyxEeXDb.js.map
