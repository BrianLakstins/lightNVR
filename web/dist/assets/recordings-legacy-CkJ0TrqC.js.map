{"version":3,"file":"recordings-legacy-CkJ0TrqC.js","sources":["../../js/components/preact/recordings/FiltersSidebar.jsx","../../js/components/preact/recordings/ActiveFilters.jsx","../../js/components/preact/recordings/formatUtils.js","../../js/components/preact/recordings/RecordingsTable.jsx","../../js/components/preact/recordings/PaginationControls.jsx","../../js/components/preact/recordings/recordingsAPI.js","../../js/components/preact/recordings/urlUtils.js","../../js/components/preact/RecordingsView.jsx","../../js/components/preact/BatchDeleteModal.jsx","../../js/pages/recordings-page.jsx"],"sourcesContent":["/**\n * FiltersSidebar component for RecordingsView\n */\n\nimport { h } from 'preact';\n\n/**\n * FiltersSidebar component\n * @param {Object} props Component props\n * @returns {JSX.Element} FiltersSidebar component\n */\nexport function FiltersSidebar({\n  filters,\n  setFilters,\n  pagination,\n  setPagination,\n  streams,\n  filtersVisible,\n  applyFilters,\n  resetFilters,\n  handleDateRangeChange,\n  setDefaultDateRange\n}) {\n  return (\n    <aside id=\"filters-sidebar\"\n           className={`filters-sidebar w-full md:w-64 bg-white dark:bg-gray-800 rounded-lg shadow p-4 md:sticky md:top-4 md:self-start transition-all duration-300 ${!filtersVisible ? 'hidden md:block' : ''}`}>\n      <div className=\"filter-group mb-4\">\n        <h3 className=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Date Range</h3>\n        <div className=\"filter-option mb-2\">\n          <label htmlFor=\"date-range-select\" className=\"block mb-1 text-sm font-medium\">Quick Select:</label>\n          <select id=\"date-range-select\"\n                  className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value={filters.dateRange}\n                  onChange={handleDateRangeChange}>\n            <option value=\"today\">Today</option>\n            <option value=\"yesterday\">Yesterday</option>\n            <option value=\"last7days\">Last 7 Days</option>\n            <option value=\"last30days\">Last 30 Days</option>\n            <option value=\"custom\">Custom Range</option>\n          </select>\n        </div>\n\n        <div id=\"custom-date-range\"\n             className=\"filter-option space-y-3\"\n             style={{display: filters.dateRange === 'custom' ? 'block' : 'none'}}>\n          <div className=\"space-y-1\">\n            <label htmlFor=\"start-date\" className=\"block text-sm font-medium\">Start Date:</label>\n            <input type=\"date\" id=\"start-date\"\n                   className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                   value={filters.startDate}\n                   onChange={e => setFilters(prev => ({ ...prev, startDate: e.target.value }))} />\n            <div className=\"mt-1\">\n              <label htmlFor=\"start-time\" className=\"block text-sm font-medium\">Time:</label>\n              <input type=\"time\" id=\"start-time\"\n                     className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                     value={filters.startTime}\n                     onChange={e => setFilters(prev => ({ ...prev, startTime: e.target.value }))} />\n            </div>\n          </div>\n\n          <div className=\"space-y-1\">\n            <label htmlFor=\"end-date\" className=\"block text-sm font-medium\">End Date:</label>\n            <input type=\"date\" id=\"end-date\"\n                   className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                   value={filters.endDate}\n                   onChange={e => setFilters(prev => ({ ...prev, endDate: e.target.value }))} />\n            <div className=\"mt-1\">\n              <label htmlFor=\"end-time\" className=\"block text-sm font-medium\">Time:</label>\n              <input type=\"time\" id=\"end-time\"\n                     className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                     value={filters.endTime}\n                     onChange={e => setFilters(prev => ({ ...prev, endTime: e.target.value }))} />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"filter-group mb-4\">\n        <h3 className=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Stream</h3>\n        <div className=\"filter-option\">\n          <select id=\"stream-filter\"\n                  className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value={filters.streamId}\n                  onChange={e => setFilters(prev => ({ ...prev, streamId: e.target.value }))}>\n            <option value=\"all\">All Streams</option>\n            {streams.map(stream => (\n              <option key={stream.name} value={stream.name}>{stream.name}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      <div className=\"filter-group mb-4\">\n        <h3 className=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Recording Type</h3>\n        <div className=\"filter-option\">\n          <select id=\"detection-filter\"\n                  className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value={filters.recordingType}\n                  onChange={e => setFilters(prev => ({ ...prev, recordingType: e.target.value }))}>\n            <option value=\"all\">All Recordings</option>\n            <option value=\"detection\">Detection Events Only</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"filter-group mb-4\">\n        <h3 className=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Display Options</h3>\n        <div className=\"filter-option\">\n          <label htmlFor=\"page-size\" className=\"block mb-1 text-sm font-medium\">Items per page:</label>\n          <select id=\"page-size\"\n                  className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value={pagination.pageSize}\n                  onChange={e => setPagination(prev => ({ ...prev, pageSize: parseInt(e.target.value, 10) }))}>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n            <option value=\"50\">50</option>\n            <option value=\"100\">100</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"filter-actions flex space-x-2\">\n        <button id=\"apply-filters-btn\"\n                className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n                onClick={applyFilters}>\n          Apply Filters\n        </button>\n        <button id=\"reset-filters-btn\"\n                className=\"flex-1 px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition-colors dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600\"\n                onClick={resetFilters}>\n          Reset\n        </button>\n      </div>\n    </aside>\n  );\n}\n","/**\n * ActiveFilters component for RecordingsView\n */\n\nimport { h } from 'preact';\n\n/**\n * ActiveFilters component\n * @param {Object} props Component props\n * @returns {JSX.Element} ActiveFilters component\n */\nexport function ActiveFilters({ activeFiltersDisplay, removeFilter, hasActiveFilters }) {\n  if (!hasActiveFilters) {\n    return null;\n  }\n\n  return (\n    <div id=\"active-filters\"\n         className=\"active-filters mb-4 p-3 bg-blue-50 dark:bg-blue-900/30 rounded-lg flex flex-wrap gap-2\">\n      {activeFiltersDisplay.map((filter, index) => (\n        <div key={index} className=\"filter-tag inline-flex items-center px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-200\">\n          <span>{filter.label}</span>\n          <button className=\"ml-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 focus:outline-none\"\n                  onClick={() => removeFilter(filter.key)}>\n            Ã—\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n}\n","/**\n * Formatting utility functions for RecordingsView\n */\n\nexport const formatUtils = {\n  /**\n   * Format date time\n   * @param {string} isoString ISO date string\n   * @returns {string} Formatted date time\n   */\n  formatDateTime: (isoString) => {\n    if (!isoString) return '';\n    \n    const date = new Date(isoString);\n    return date.toLocaleString();\n  },\n  \n  /**\n   * Format duration\n   * @param {number} seconds Duration in seconds\n   * @returns {string} Formatted duration\n   */\n  formatDuration: (seconds) => {\n    if (!seconds) return '00:00:00';\n    \n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = Math.floor(seconds % 60);\n    \n    return [\n      hours.toString().padStart(2, '0'),\n      minutes.toString().padStart(2, '0'),\n      secs.toString().padStart(2, '0')\n    ].join(':');\n  },\n  \n  /**\n   * Format file size\n   * @param {number} bytes Size in bytes\n   * @returns {string} Formatted file size\n   */\n  formatFileSize: (bytes) => {\n    if (!bytes) return '0 B';\n    \n    const units = ['B', 'KB', 'MB', 'GB', 'TB'];\n    let i = 0;\n    let size = bytes;\n    \n    while (size >= 1024 && i < units.length - 1) {\n      size /= 1024;\n      i++;\n    }\n    \n    return `${size.toFixed(1)} ${units[i]}`;\n  }\n};\n","/**\n * RecordingsTable component for RecordingsView\n */\n\nimport { h } from 'preact';\nimport { formatUtils } from './formatUtils.js';\n\n/**\n * RecordingsTable component\n * @param {Object} props Component props\n * @returns {JSX.Element} RecordingsTable component\n */\nexport function RecordingsTable({\n  recordings,\n  sortField,\n  sortDirection,\n  sortBy,\n  selectedRecordings,\n  toggleRecordingSelection,\n  selectAll,\n  toggleSelectAll,\n  getSelectedCount,\n  openDeleteModal,\n  playRecording,\n  downloadRecording,\n  deleteRecording,\n  recordingsTableBodyRef,\n  pagination\n}) {\n  return (\n    <div className=\"recordings-container bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden w-full\">\n      <div className=\"batch-actions p-3 border-b border-gray-200 dark:border-gray-700 flex flex-wrap gap-2 items-center\">\n        <div className=\"selected-count text-sm text-gray-600 dark:text-gray-400 mr-2\">\n          {getSelectedCount() > 0 ?\n            `${getSelectedCount()} recording${getSelectedCount() !== 1 ? 's' : ''} selected` :\n            'No recordings selected'}\n        </div>\n        <button\n          className=\"px-3 py-1.5 bg-red-600 text-white rounded hover:bg-red-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          disabled={getSelectedCount() === 0}\n          onClick={() => openDeleteModal('selected')}>\n          Delete Selected\n        </button>\n        <button\n          className=\"px-3 py-1.5 bg-red-600 text-white rounded hover:bg-red-700 transition-colors\"\n          onClick={() => openDeleteModal('all')}>\n          Delete All Filtered\n        </button>\n      </div>\n      <div className=\"overflow-x-auto\">\n        <table id=\"recordings-table\" className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n          <thead className=\"bg-gray-50 dark:bg-gray-700\">\n            <tr>\n              <th className=\"w-10 px-4 py-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectAll}\n                  onChange={toggleSelectAll}\n                  className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"\n                />\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer\"\n                  onClick={() => sortBy('stream_name')}>\n                <div className=\"flex items-center\">\n                  Stream\n                  {sortField === 'stream_name' && (\n                    <span className=\"sort-icon ml-1\">{sortDirection === 'asc' ? 'â–²' : 'â–¼'}</span>\n                  )}\n                </div>\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer\"\n                  onClick={() => sortBy('start_time')}>\n                <div className=\"flex items-center\">\n                  Start Time\n                  {sortField === 'start_time' && (\n                    <span className=\"sort-icon ml-1\">{sortDirection === 'asc' ? 'â–²' : 'â–¼'}</span>\n                  )}\n                </div>\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                Duration\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer\"\n                  onClick={() => sortBy('size_bytes')}>\n                <div className=\"flex items-center\">\n                  Size\n                  {sortField === 'size_bytes' && (\n                    <span className=\"sort-icon ml-1\">{sortDirection === 'asc' ? 'â–²' : 'â–¼'}</span>\n                  )}\n                </div>\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                Detections\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                Actions\n              </th>\n            </tr>\n          </thead>\n          <tbody ref={recordingsTableBodyRef} className=\"bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700\">\n            {recordings.length === 0 ? (\n              <tr>\n                <td colSpan=\"6\" className=\"px-6 py-4 text-center text-gray-500 dark:text-gray-400\">\n                  {pagination.totalItems === 0 ? 'No recordings found' : 'Loading recordings...'}\n                </td>\n              </tr>\n            ) : recordings.map(recording => (\n              <tr key={recording.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                <td className=\"px-4 py-4 whitespace-nowrap\">\n                  <input\n                    type=\"checkbox\"\n                    checked={!!selectedRecordings[recording.id]}\n                    onChange={() => toggleRecordingSelection(recording.id)}\n                    className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"\n                  />\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">{recording.stream || ''}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">{formatUtils.formatDateTime(recording.start_time)}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">{formatUtils.formatDuration(recording.duration)}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">{recording.size || ''}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  {recording.has_detections ? (\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100\">\n                      <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M10 12a2 2 0 100-4 2 2 0 000 4z\"></path>\n                        <path fillRule=\"evenodd\" d=\"M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z\" clipRule=\"evenodd\"></path>\n                      </svg>\n                      Yes\n                    </span>\n                  ) : ''}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"flex space-x-2\">\n                    <button className=\"p-1 rounded-full text-blue-600 hover:bg-blue-100 dark:text-blue-400 dark:hover:bg-blue-900 focus:outline-none\"\n                            onClick={() => playRecording(recording)}\n                            title=\"Play\">\n                      <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                    <button className=\"p-1 rounded-full text-green-600 hover:bg-green-100 dark:text-green-400 dark:hover:bg-green-900 focus:outline-none\"\n                            onClick={() => downloadRecording(recording)}\n                            title=\"Download\">\n                      <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clipRule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                    <button className=\"p-1 rounded-full text-red-600 hover:bg-red-100 dark:text-red-400 dark:hover:bg-red-900 focus:outline-none\"\n                            onClick={() => deleteRecording(recording)}\n                            title=\"Delete\">\n                      <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","/**\n * PaginationControls component for RecordingsView\n */\n\nimport { h } from 'preact';\n\n/**\n * PaginationControls component\n * @param {Object} props Component props\n * @returns {JSX.Element} PaginationControls component\n */\nexport function PaginationControls({ pagination, goToPage }) {\n  return (\n    <div className=\"pagination-controls flex flex-col sm:flex-row justify-between items-center p-4 border-t border-gray-200 dark:border-gray-700\">\n      <div className=\"pagination-info text-sm text-gray-600 dark:text-gray-400 mb-2 sm:mb-0\">\n        Showing <span id=\"pagination-showing\">{pagination.startItem}-{pagination.endItem}</span> of <span id=\"pagination-total\">{pagination.totalItems}</span> recordings\n      </div>\n      <div className=\"pagination-buttons flex items-center space-x-1\">\n        <button id=\"pagination-first\"\n                className=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"First Page\"\n                onClick={() => goToPage(1)}\n                disabled={pagination.currentPage === 1}>\n          Â«\n        </button>\n        <button id=\"pagination-prev\"\n                className=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"Previous Page\"\n                onClick={() => goToPage(pagination.currentPage - 1)}\n                disabled={pagination.currentPage === 1}>\n          â€¹\n        </button>\n        <span id=\"pagination-current\" className=\"px-2 text-sm text-gray-700 dark:text-gray-300\">\n          Page {pagination.currentPage} of {pagination.totalPages}\n        </span>\n        <button id=\"pagination-next\"\n                className=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"Next Page\"\n                onClick={() => goToPage(pagination.currentPage + 1)}\n                disabled={pagination.currentPage === pagination.totalPages}>\n          â€º\n        </button>\n        <button id=\"pagination-last\"\n                className=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"Last Page\"\n                onClick={() => goToPage(pagination.totalPages)}\n                disabled={pagination.currentPage === pagination.totalPages}>\n          Â»\n        </button>\n      </div>\n    </div>\n  );\n}\n","/**\n * API functions for RecordingsView\n */\n\nimport { showStatusMessage } from '../ToastContainer.jsx';\nimport { formatUtils } from './formatUtils.js';\nimport { fetchJSON, enhancedFetch } from '../../../fetch-utils.js';\nimport {\n  useQuery,\n  useMutation,\n  useQueryClient,\n  usePostMutation,\n} from '../../../query-client.js';\n\n/**\n * RecordingsAPI - Handles all API calls related to recordings\n */\nexport const recordingsAPI = {\n  /**\n   * Custom hooks for preact-query\n   */\n  hooks: {\n    /**\n     * Hook to fetch streams list\n     * @returns {Object} Query result\n     */\n    useStreams: () => {\n      return useQuery('streams', '/api/streams', {\n        timeout: 15000, // 15 second timeout\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n    },\n\n    /**\n     * Hook to fetch recordings with filters\n     * @param {Object} filters Filter settings\n     * @param {Object} pagination Pagination settings\n     * @param {string} sortField Sort field\n     * @param {string} sortDirection Sort direction\n     * @returns {Object} Query result\n     */\n    useRecordings: (filters, pagination, sortField, sortDirection) => {\n      // Build query parameters\n      const params = new URLSearchParams();\n      params.append('page', pagination.currentPage);\n      params.append('limit', pagination.pageSize);\n      params.append('sort', sortField);\n      params.append('order', sortDirection);\n\n      // Add date range filters\n      if (filters.dateRange === 'custom') {\n        params.append('start', `${filters.startDate}T${filters.startTime}:00`);\n        params.append('end', `${filters.endDate}T${filters.endTime}:00`);\n      } else {\n        // Convert predefined range to actual dates\n        const { start, end } = recordingsAPI.getDateRangeFromPreset(filters.dateRange);\n        params.append('start', start);\n        params.append('end', end);\n      }\n\n      // Add stream filter\n      if (filters.streamId !== 'all') {\n        params.append('stream', filters.streamId);\n      }\n\n      // Add recording type filter\n      if (filters.recordingType === 'detection') {\n        params.append('detection', '1');\n      }\n\n      // Create query key that includes all filter parameters\n      const queryKey = ['recordings', filters, pagination, sortField, sortDirection];\n\n      return useQuery(\n        queryKey,\n        `/api/recordings?${params.toString()}`,\n        {\n          timeout: 30000, // 30 second timeout for potentially large data\n          retries: 2,     // Retry twice\n          retryDelay: 1000 // 1 second between retries\n        },\n        // No special handling needed - we rely on the backend API for detection information\n      );\n    },\n\n    // useRecordingDetections hook removed - we rely on the backend API for detection information\n\n    /**\n     * Hook to delete a recording\n     * @returns {Object} Mutation result\n     */\n    useDeleteRecording: () => {\n      const queryClient = useQueryClient();\n\n      return useMutation({\n        mutationFn: async (recordingId) => {\n          const url = `/api/recordings/${recordingId}`;\n          return await fetchJSON(url, {\n            method: 'DELETE',\n            timeout: 15000, // 15 second timeout\n            retries: 1,     // Retry once\n            retryDelay: 1000 // 1 second between retries\n          });\n        },\n        onSuccess: () => {\n          // Invalidate recordings queries to refresh the list\n          queryClient.invalidateQueries({ queryKey: ['recordings'] });\n          showStatusMessage('Recording deleted successfully');\n        },\n        onError: (error) => {\n          console.error('Error deleting recording:', error);\n          showStatusMessage('Error deleting recording: ' + error.message);\n        }\n      });\n    },\n\n    /**\n     * Hook to delete multiple recordings\n     * @returns {Object} Mutation result\n     */\n    useBatchDeleteRecordings: () => {\n      const queryClient = useQueryClient();\n\n      return usePostMutation(\n        '/api/recordings/batch-delete',\n        {\n          timeout: 60000, // 60 second timeout for batch operations\n          retries: 1,     // Retry once\n          retryDelay: 2000 // 2 seconds between retries\n        },\n        {\n          onSuccess: (result) => {\n            // Invalidate recordings queries to refresh the list\n            queryClient.invalidateQueries({ queryKey: ['recordings'] });\n\n            const successCount = result.succeeded;\n            const errorCount = result.failed;\n\n            // Show status message\n            if (successCount > 0 && errorCount === 0) {\n              showStatusMessage(`Successfully deleted ${successCount} recording${successCount !== 1 ? 's' : ''}`);\n            } else if (successCount > 0 && errorCount > 0) {\n              showStatusMessage(`Deleted ${successCount} recording${successCount !== 1 ? 's' : ''}, but failed to delete ${errorCount}`);\n            } else {\n              showStatusMessage(`Failed to delete ${errorCount} recording${errorCount !== 1 ? 's' : ''}`);\n            }\n          },\n          onError: (error) => {\n            console.error('Error in batch delete operation:', error);\n            showStatusMessage('Error in batch delete operation: ' + error.message);\n          }\n        }\n      );\n    }\n  },\n  /**\n   * Load streams from API\n   * @returns {Promise<Array>} Array of streams\n   */\n  loadStreams: async () => {\n    try {\n      const data = await fetchJSON('/api/streams', {\n        timeout: 15000, // 15 second timeout\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      return data || [];\n    } catch (error) {\n      console.error('Error loading streams for filter:', error);\n      showStatusMessage('Error loading streams: ' + error.message);\n      return [];\n    }\n  },\n\n  /**\n   * Get date range from preset\n   * @param {string} preset Preset name\n   * @returns {Object} Start and end dates\n   */\n  getDateRangeFromPreset: (preset) => {\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);\n    const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);\n\n    let start, end;\n\n    switch (preset) {\n      case 'today':\n        start = todayStart.toISOString();\n        end = today.toISOString();\n        break;\n      case 'yesterday':\n        const yesterday = new Date(todayStart);\n        yesterday.setDate(yesterday.getDate() - 1);\n        const yesterdayEnd = new Date(yesterday);\n        yesterdayEnd.setHours(23, 59, 59);\n        start = yesterday.toISOString();\n        end = yesterdayEnd.toISOString();\n        break;\n      case 'last7days':\n        const sevenDaysAgo = new Date(todayStart);\n        sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n        start = sevenDaysAgo.toISOString();\n        end = today.toISOString();\n        break;\n      case 'last30days':\n        const thirtyDaysAgo = new Date(todayStart);\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        start = thirtyDaysAgo.toISOString();\n        end = today.toISOString();\n        break;\n      default:\n        // Default to last 7 days\n        const defaultStart = new Date(todayStart);\n        defaultStart.setDate(defaultStart.getDate() - 7);\n        start = defaultStart.toISOString();\n        end = today.toISOString();\n    }\n\n    return { start, end };\n  },\n\n  /**\n   * Load recordings\n   * @param {Object} filters Filter settings\n   * @param {Object} pagination Pagination settings\n   * @param {string} sortField Sort field\n   * @param {string} sortDirection Sort direction\n   * @returns {Promise<Object>} Recordings data and pagination info\n   */\n  loadRecordings: async (filters, pagination, sortField, sortDirection) => {\n    try {\n      // Build query parameters\n      const params = new URLSearchParams();\n      params.append('page', pagination.currentPage);\n      params.append('limit', pagination.pageSize);\n      params.append('sort', sortField);\n      params.append('order', sortDirection);\n\n      // Add date range filters\n      if (filters.dateRange === 'custom') {\n        params.append('start', `${filters.startDate}T${filters.startTime}:00`);\n        params.append('end', `${filters.endDate}T${filters.endTime}:00`);\n      } else {\n        // Convert predefined range to actual dates\n        const { start, end } = recordingsAPI.getDateRangeFromPreset(filters.dateRange);\n        params.append('start', start);\n        params.append('end', end);\n      }\n\n      // Add stream filter\n      if (filters.streamId !== 'all') {\n        params.append('stream', filters.streamId);\n      }\n\n      // Add recording type filter\n      if (filters.recordingType === 'detection') {\n        params.append('detection', '1');\n      }\n\n      // Log the API request\n      console.log('API Request:', `/api/recordings?${params.toString()}`);\n\n      // Fetch recordings with enhanced fetch\n      const data = await fetchJSON(`/api/recordings?${params.toString()}`, {\n        timeout: 30000, // 30 second timeout for potentially large data\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      console.log('Recordings data received:', data);\n\n      // Set has_detections to false by default instead of making API calls\n      // This prevents unnecessary detection API calls on the recordings page\n      if (data.recordings && data.recordings.length > 0) {\n        // Process recordings in batches to avoid too many parallel requests\n        const batchSize = 5;\n        for (let i = 0; i < data.recordings.length; i += batchSize) {\n          const batch = data.recordings.slice(i, i + batchSize);\n          await Promise.all(batch.map(async (recording) => {\n            try {\n              recording.has_detections = await recordingsAPI.checkRecordingHasDetections(recording);\n            } catch (error) {\n              console.error(`Error checking detections for recording ${recording.id}:`, error);\n              recording.has_detections = false;\n            }\n          }));\n        }\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Error loading recordings:', error);\n      showStatusMessage('Error loading recordings: ' + error.message);\n      throw error;\n    }\n  },\n\n  /**\n   * Delete a single recording\n   * @param {Object} recording Recording to delete\n   * @returns {Promise<boolean>} Success status\n   */\n  deleteRecording: async (recording) => {\n    try {\n      await enhancedFetch(`/api/recordings/${recording.id}`, {\n        method: 'DELETE',\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      showStatusMessage('Recording deleted successfully');\n      return true;\n    } catch (error) {\n      console.error('Error deleting recording:', error);\n      showStatusMessage('Error deleting recording: ' + error.message);\n      return false;\n    }\n  },\n\n  /**\n   * Delete selected recordings\n   * @param {Object} selectedRecordings Object with recording IDs as keys\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteSelectedRecordings: async (selectedRecordings) => {\n    const selectedIds = Object.entries(selectedRecordings)\n      .filter(([_, isSelected]) => isSelected)\n      .map(([id, _]) => parseInt(id, 10));\n\n    if (selectedIds.length === 0) {\n      showStatusMessage('No recordings selected');\n      return { succeeded: 0, failed: 0 };\n    }\n\n    try {\n      // Check if WebSocket client is available\n      if (window.wsClient) {\n        console.log('Using WebSocket for batch delete operation');\n\n        // Connect the WebSocket client if not already connected\n        if (!window.wsClient.isConnected()) {\n          console.log('WebSocket not connected, connecting now...');\n          window.wsClient.connect();\n        }\n\n        // Initialize batch delete client if needed\n        if (!window.batchDeleteClient) {\n          if (typeof BatchDeleteRecordingsClient !== 'undefined') {\n            console.log('Creating new BatchDeleteRecordingsClient');\n            window.batchDeleteClient = new BatchDeleteRecordingsClient(window.wsClient);\n          } else {\n            console.warn('BatchDeleteRecordingsClient not available, falling back to HTTP');\n            return recordingsAPI.deleteSelectedRecordingsHttp(selectedIds);\n          }\n        }\n\n        // Show batch delete modal\n        if (typeof showBatchDeleteModal === 'function') {\n          showBatchDeleteModal();\n        }\n\n        // Use WebSocket for batch delete\n        // The client ID will be obtained by the batch delete client\n        return await window.batchDeleteClient.deleteWithProgress({ ids: selectedIds });\n      } else {\n        console.log('WebSocket client not available, using HTTP for batch delete');\n        return recordingsAPI.deleteSelectedRecordingsHttp(selectedIds);\n      }\n    } catch (error) {\n      console.error('Error in batch delete operation:', error);\n      showStatusMessage('Error in batch delete operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Delete selected recordings using HTTP (fallback)\n   * @param {Array<number>} selectedIds Array of recording IDs\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteSelectedRecordingsHttp: async (selectedIds) => {\n    try {\n      // Use the batch delete endpoint with enhanced fetch\n      const response = await enhancedFetch('/api/recordings/batch-delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ids: selectedIds\n        }),\n        timeout: 60000, // 60 second timeout for batch operations\n        retries: 1,     // Retry once\n        retryDelay: 2000 // 2 seconds between retries\n      });\n\n      const result = await response.json();\n      const successCount = result.succeeded;\n      const errorCount = result.failed;\n\n      // Show status message\n      if (successCount > 0 && errorCount === 0) {\n        showStatusMessage(`Successfully deleted ${successCount} recording${successCount !== 1 ? 's' : ''}`);\n      } else if (successCount > 0 && errorCount > 0) {\n        showStatusMessage(`Deleted ${successCount} recording${successCount !== 1 ? 's' : ''}, but failed to delete ${errorCount}`);\n      } else {\n        showStatusMessage(`Failed to delete ${errorCount} recording${errorCount !== 1 ? 's' : ''}`);\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Error in HTTP batch delete operation:', error);\n      showStatusMessage('Error in batch delete operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Delete all recordings matching current filter\n   * @param {Object} filters Current filters\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteAllFilteredRecordings: async (filters) => {\n    try {\n      // Create filter object\n      const filter = {};\n\n      // Add date range filters\n      if (filters.dateRange === 'custom') {\n        filter.start = `${filters.startDate}T${filters.startTime}:00`;\n        filter.end = `${filters.endDate}T${filters.endTime}:00`;\n      } else {\n        // Convert predefined range to actual dates\n        const { start, end } = recordingsAPI.getDateRangeFromPreset(filters.dateRange);\n        filter.start = start;\n        filter.end = end;\n      }\n\n      // Add stream filter\n      if (filters.streamId !== 'all') {\n        filter.stream_name = filters.streamId; // Changed from 'stream' to 'stream_name' to match API expectations\n      }\n\n      // Add recording type filter\n      if (filters.recordingType === 'detection') {\n        filter.detection = 1;\n      }\n\n      console.log('Deleting with filter:', filter);\n\n      // Show batch delete modal with indeterminate progress initially\n      if (typeof showBatchDeleteModal === 'function') {\n        showBatchDeleteModal();\n\n        // Update the progress UI with an indeterminate state\n        if (typeof window.updateBatchDeleteProgress === 'function') {\n          window.updateBatchDeleteProgress({\n            current: 0,\n            total: 0, // We don't know the total yet\n            succeeded: 0,\n            failed: 0,\n            status: `Preparing to delete recordings matching filter...`,\n            complete: false\n          });\n        }\n      }\n\n      // Get the total count from the current page's filter\n      // This will help us set a more accurate progress indicator\n      let totalCount = 0;\n      try {\n        // Build query parameters for the API request\n        const params = new URLSearchParams();\n\n        // Add date range parameters\n        if (filter.start) {\n          params.append('start', filter.start);\n        }\n\n        if (filter.end) {\n          params.append('end', filter.end);\n        }\n\n        // Add stream filter\n        if (filter.stream_name) {\n          params.append('stream', filter.stream_name);\n        }\n\n        // Add detection filter\n        if (filter.detection) {\n          params.append('detection', '1');\n        }\n\n        // Set page size to 1 to minimize data transfer, we just need the total count\n        params.append('page', '1');\n        params.append('limit', '1');\n\n        console.log('Getting total count with params:', params.toString());\n\n        // Fetch recordings to get pagination info\n        const response = await fetch(`/api/recordings?${params.toString()}`);\n        if (response.ok) {\n          const data = await response.json();\n          if (data && data.pagination && data.pagination.total) {\n            totalCount = data.pagination.total;\n            console.log(`Found ${totalCount} recordings matching filter`);\n\n            // Update the progress UI with the total count\n            if (typeof window.updateBatchDeleteProgress === 'function') {\n              window.updateBatchDeleteProgress({\n                current: 0,\n                total: totalCount,\n                succeeded: 0,\n                failed: 0,\n                status: `Found ${totalCount} recordings matching filter. Starting deletion...`,\n                complete: false\n              });\n            }\n          }\n        }\n      } catch (countError) {\n        console.warn('Error getting recording count:', countError);\n        // Continue anyway, we'll just show an indeterminate progress\n      }\n\n      // Set up an error handler in case the operation fails\n      const handleOperationError = (error) => {\n        console.error('Error in delete all operation:', error);\n        showStatusMessage('Error in delete all operation: ' + error.message);\n\n        // Update the progress UI to show the error\n        if (typeof window.updateBatchDeleteProgress === 'function') {\n          window.updateBatchDeleteProgress({\n            current: 0,\n            total: 0,\n            succeeded: 0,\n            failed: 0,\n            status: `Error: ${error.message}`,\n            complete: true\n          });\n        }\n\n        return { succeeded: 0, failed: 0 };\n      };\n\n        // Check if WebSocket client is available\n        if (window.wsClient) {\n          console.log('Using WebSocket for batch delete with filter');\n\n          // Connect the WebSocket client if not already connected\n          if (!window.wsClient.isConnected()) {\n            console.log('WebSocket not connected, connecting now...');\n            window.wsClient.connect();\n          }\n\n          // Initialize batch delete client if needed\n          if (!window.batchDeleteClient) {\n            if (typeof BatchDeleteRecordingsClient !== 'undefined') {\n              console.log('Creating new BatchDeleteRecordingsClient for filtered delete');\n              window.batchDeleteClient = new BatchDeleteRecordingsClient(window.wsClient);\n            } else {\n              console.warn('BatchDeleteRecordingsClient not available, falling back to HTTP');\n              return recordingsAPI.deleteAllFilteredRecordingsHttp(filter);\n            }\n          }\n\n          // Log the client ID being used\n          console.log('Using WebSocket client ID for filtered batch delete:', window.wsClient.getClientId());\n\n          // Set up a timeout to handle server crashes\n          const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => {\n              reject(new Error('Operation timed out or server crashed. Some recordings may have been deleted.'));\n            }, 60000); // 60 second timeout\n          });\n\n          try {\n            // Race between the delete operation and the timeout\n            // Pass the total count to the WebSocket client\n            const result = await Promise.race([\n              window.batchDeleteClient.deleteWithProgress({\n                filter,\n                totalCount // Pass the total count to the WebSocket client\n              }),\n              timeoutPromise\n            ]);\n\n            return result;\n          } catch (wsError) {\n            console.error('WebSocket error or timeout:', wsError);\n\n            // If we got a timeout or server crash, reload the recordings to show what was deleted\n            setTimeout(() => {\n              if (typeof loadRecordings === 'function') {\n                loadRecordings();\n              }\n            }, 1000);\n\n            return handleOperationError(wsError);\n          }\n        } else {\n          console.log('WebSocket client not available, using HTTP for batch delete with filter');\n          return recordingsAPI.deleteAllFilteredRecordingsHttp(filter);\n        }\n    } catch (error) {\n      console.error('Error in delete all operation:', error);\n      showStatusMessage('Error in delete all operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Delete all recordings matching filter using HTTP (fallback)\n   * @param {Object} filter Filter object\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteAllFilteredRecordingsHttp: async (filter) => {\n    try {\n      // Use the batch delete endpoint with filter and enhanced fetch\n      const deleteResponse = await enhancedFetch('/api/recordings/batch-delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          filter: filter\n        }),\n        timeout: 120000, // 120 second timeout for potentially large batch operations\n        retries: 1,      // Retry once\n        retryDelay: 3000 // 3 seconds between retries\n      });\n\n      const result = await deleteResponse.json();\n      const successCount = result.succeeded;\n      const errorCount = result.failed;\n\n      // Show status message\n      if (successCount > 0 && errorCount === 0) {\n        showStatusMessage(`Successfully deleted ${successCount} recording${successCount !== 1 ? 's' : ''}`);\n      } else if (successCount > 0 && errorCount > 0) {\n        showStatusMessage(`Deleted ${successCount} recording${successCount !== 1 ? 's' : ''}, but failed to delete ${errorCount}`);\n      } else {\n        showStatusMessage(`Failed to delete ${errorCount} recording${errorCount !== 1 ? 's' : ''}`);\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Error in HTTP delete all operation:', error);\n      showStatusMessage('Error in delete all operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Check if a recording has associated detections\n   * @param {Object} recording Recording to check\n   * @returns {Promise<boolean>} True if the recording has detections, false otherwise\n   */\n  checkRecordingHasDetections: async (recording) => {\n    if (!recording || !recording.id || !recording.stream || !recording.start_time || !recording.end_time) {\n      return false;\n    }\n\n    try {\n      // Convert timestamps to seconds\n      const startTime = Math.floor(new Date(recording.start_time).getTime() / 1000);\n      const endTime = Math.floor(new Date(recording.end_time).getTime() / 1000);\n\n      // Query the detections API to check if there are any detections in this time range\n      const params = new URLSearchParams({\n        start: startTime,\n        end: endTime\n      });\n\n      const data = await fetchJSON(`/api/detection/results/${recording.stream}?${params.toString()}`, {\n        timeout: 10000, // 10 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 500 // 0.5 second between retries\n      });\n\n      return data.detections && data.detections.length > 0;\n    } catch (error) {\n      console.error('Error checking detections:', error);\n      return false;\n    }\n  },\n\n  /**\n   * Get detections for a recording\n   * @param {Object} recording Recording to get detections for\n   * @returns {Promise<Array>} Array of detections\n   */\n  getRecordingDetections: async (recording) => {\n    if (!recording || !recording.id || !recording.stream || !recording.start_time || !recording.end_time) {\n      return [];\n    }\n\n    try {\n      // Convert timestamps to seconds\n      const startTime = Math.floor(new Date(recording.start_time).getTime() / 1000);\n      const endTime = Math.floor(new Date(recording.end_time).getTime() / 1000);\n\n      // Query the detections API to get detections in this time range\n      const params = new URLSearchParams({\n        start: startTime,\n        end: endTime\n      });\n\n      const data = await fetchJSON(`/api/detection/results/${recording.stream}?${params.toString()}`, {\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      return data.detections || [];\n    } catch (error) {\n      console.error('Error getting detections:', error);\n      return [];\n    }\n  },\n\n  /**\n   * Play recording\n   * @param {Object} recording Recording to play\n   * @param {Function} showVideoModal Function to show video modal\n   */\n  playRecording: (recording, showVideoModal) => {\n    console.log('Play recording clicked:', recording);\n\n    // Check if recording has an id property\n    if (!recording.id) {\n      console.error('Recording has no id property:', recording);\n      showStatusMessage('Error: Recording has no id property');\n      return;\n    }\n\n    // Build video URL\n    const videoUrl = `/api/recordings/play/${recording.id}`;\n    const title = `${recording.stream} - ${formatUtils.formatDateTime(recording.start_time)}`;\n    const downloadUrl = `/api/recordings/download/${recording.id}`;\n\n    console.log('Video URL:', videoUrl);\n    console.log('Title:', title);\n    console.log('Download URL:', downloadUrl);\n\n    // Check if we're using the context-based showVideoModal or the direct function\n    if (window.__modalContext && window.__modalContext.showVideoModal) {\n      // Use the context-based function if available\n      window.__modalContext.showVideoModal(videoUrl, title, downloadUrl);\n    } else {\n      // Fall back to the provided function\n      showVideoModal(videoUrl, title, downloadUrl);\n    }\n\n    console.log('Video modal should be shown now');\n  },\n\n  /**\n   * Download recording\n   * @param {Object} recording Recording to download\n   */\n  downloadRecording: (recording) => {\n    // Create download link\n    const downloadUrl = `/api/recordings/download/${recording.id}`;\n    const link = document.createElement('a');\n    link.href = downloadUrl;\n    link.download = `${recording.stream}_${new Date(recording.start_time).toISOString().replace(/[:.]/g, '-')}.mp4`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    showStatusMessage('Download started');\n  }\n};\n","/**\n * URL utility functions for RecordingsView\n */\n\n/**\n * URL utilities for RecordingsView\n */\nexport const urlUtils = {\n  /**\n   * Get filters from URL\n   * @returns {Object|null} Filters object or null if no filters in URL\n   */\n  getFiltersFromUrl: () => {\n    // Get URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    \n    // Check if we have any filter parameters\n    if (!urlParams.has('dateRange') && !urlParams.has('page') && !urlParams.has('sort') && !urlParams.has('detection') && !urlParams.has('stream')) {\n      return null;\n    }\n    \n    // Create result object\n    const result = {\n      filters: {\n        dateRange: 'last7days',\n        startDate: '',\n        startTime: '00:00',\n        endDate: '',\n        endTime: '23:59',\n        streamId: 'all',\n        recordingType: 'all'\n      },\n      page: 1,\n      limit: 20,\n      sort: 'start_time',\n      order: 'desc'\n    };\n    \n    // Date range\n    if (urlParams.has('dateRange')) {\n      result.filters.dateRange = urlParams.get('dateRange');\n      \n      if (result.filters.dateRange === 'custom') {\n        if (urlParams.has('startDate')) {\n          result.filters.startDate = urlParams.get('startDate');\n        }\n        if (urlParams.has('startTime')) {\n          result.filters.startTime = urlParams.get('startTime');\n        }\n        if (urlParams.has('endDate')) {\n          result.filters.endDate = urlParams.get('endDate');\n        }\n        if (urlParams.has('endTime')) {\n          result.filters.endTime = urlParams.get('endTime');\n        }\n      }\n    }\n    \n    // Stream\n    if (urlParams.has('stream')) {\n      result.filters.streamId = urlParams.get('stream');\n    }\n    \n    // Recording type\n    if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n      result.filters.recordingType = 'detection';\n    }\n    \n    // Pagination\n    if (urlParams.has('page')) {\n      result.page = parseInt(urlParams.get('page'), 10);\n    }\n    if (urlParams.has('limit')) {\n      result.limit = parseInt(urlParams.get('limit'), 10);\n    }\n    \n    // Sorting\n    if (urlParams.has('sort')) {\n      result.sort = urlParams.get('sort');\n    }\n    if (urlParams.has('order')) {\n      result.order = urlParams.get('order');\n    }\n    \n    return result;\n  },\n  \n  /**\n   * Get active filters display\n   * @param {Object} filters Current filters\n   * @returns {Array} Array of active filter objects with key and label\n   */\n  getActiveFiltersDisplay: (filters) => {\n    const activeFilters = [];\n    \n    // Check if we have any active filters\n    const hasFilters = (\n      filters.dateRange !== 'last7days' ||\n      filters.streamId !== 'all' ||\n      filters.recordingType !== 'all'\n    );\n    \n    if (hasFilters) {\n      // Date range filter\n      if (filters.dateRange !== 'last7days') {\n        let label = '';\n        switch (filters.dateRange) {\n          case 'today':\n            label = 'Today';\n            break;\n          case 'yesterday':\n            label = 'Yesterday';\n            break;\n          case 'last30days':\n            label = 'Last 30 Days';\n            break;\n          case 'custom':\n            label = `${filters.startDate} to ${filters.endDate}`;\n            break;\n        }\n        activeFilters.push({ key: 'dateRange', label: `Date: ${label}` });\n      }\n      \n      // Stream filter\n      if (filters.streamId !== 'all') {\n        activeFilters.push({ key: 'streamId', label: `Stream: ${filters.streamId}` });\n      }\n      \n      // Recording type filter\n      if (filters.recordingType !== 'all') {\n        activeFilters.push({ key: 'recordingType', label: 'Detection Events Only' });\n      }\n    }\n    \n    return activeFilters;\n  },\n  \n  /**\n   * Load filters from URL\n   * @param {Object} filters Current filters\n   * @param {Object} pagination Current pagination\n   * @param {Function} setFilters Function to update filters\n   * @param {Function} setPagination Function to update pagination\n   * @param {Function} setSortField Function to update sort field\n   * @param {Function} setSortDirection Function to update sort direction\n   */\n  loadFiltersFromUrl: (filters, pagination, setFilters, setPagination, setSortField, setSortDirection) => {\n    // Get URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    \n    // Create a new filters object based on the current filters\n    const newFilters = { ...filters };\n    \n    // Date range\n    if (urlParams.has('dateRange')) {\n      newFilters.dateRange = urlParams.get('dateRange');\n      \n      if (newFilters.dateRange === 'custom') {\n        if (urlParams.has('startDate')) {\n          newFilters.startDate = urlParams.get('startDate');\n        }\n        if (urlParams.has('startTime')) {\n          newFilters.startTime = urlParams.get('startTime');\n        }\n        if (urlParams.has('endDate')) {\n          newFilters.endDate = urlParams.get('endDate');\n        }\n        if (urlParams.has('endTime')) {\n          newFilters.endTime = urlParams.get('endTime');\n        }\n      }\n    }\n    \n    // Stream\n    if (urlParams.has('stream')) {\n      newFilters.streamId = urlParams.get('stream');\n    }\n    \n    // Recording type - IMPORTANT: Check for this parameter even if dateRange is not present\n    if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n      newFilters.recordingType = 'detection';\n    }\n    \n    // Update filters state\n    setFilters(newFilters);\n    \n    // Pagination\n    if (urlParams.has('page')) {\n      setPagination(prev => ({\n        ...prev,\n        currentPage: parseInt(urlParams.get('page'), 10)\n      }));\n    }\n    if (urlParams.has('limit')) {\n      setPagination(prev => ({\n        ...prev,\n        pageSize: parseInt(urlParams.get('limit'), 10)\n      }));\n    }\n    \n    // Sorting\n    if (urlParams.has('sort')) {\n      setSortField(urlParams.get('sort'));\n    }\n    if (urlParams.has('order')) {\n      setSortDirection(urlParams.get('order'));\n    }\n  },\n  \n  /**\n   * Update URL with filters\n   * @param {Object} filters Current filters\n   * @param {Object} pagination Current pagination\n   * @param {string} sortField Current sort field\n   * @param {string} sortDirection Current sort direction\n   */\n  updateUrlWithFilters: (filters, pagination, sortField, sortDirection) => {\n    // Create URL parameters object based on current URL to preserve any existing parameters\n    const params = new URLSearchParams(window.location.search);\n    \n    // Add a timestamp parameter to prevent caching issues\n    params.set('t', Date.now().toString());\n    \n    // Update or add date range parameters\n    params.set('dateRange', filters.dateRange);\n    \n    // Handle custom date range\n    if (filters.dateRange === 'custom') {\n      params.set('startDate', filters.startDate);\n      params.set('startTime', filters.startTime);\n      params.set('endDate', filters.endDate);\n      params.set('endTime', filters.endTime);\n    } else {\n      // Remove custom date parameters if not using custom date range\n      params.delete('startDate');\n      params.delete('startTime');\n      params.delete('endDate');\n      params.delete('endTime');\n    }\n    \n    // Update stream filter\n    if (filters.streamId !== 'all') {\n      params.set('stream', filters.streamId);\n    } else {\n      params.delete('stream');\n    }\n    \n    // Update recording type filter\n    if (filters.recordingType === 'detection') {\n      params.set('detection', '1');\n    } else {\n      params.delete('detection');\n    }\n    \n    // Update pagination\n    params.set('page', pagination.currentPage.toString());\n    params.set('limit', pagination.pageSize.toString());\n    \n    // Update sorting\n    params.set('sort', sortField);\n    params.set('order', sortDirection);\n    \n    // Update URL without reloading the page\n    const newUrl = `${window.location.pathname}?${params.toString()}`;\n    window.history.pushState({ path: newUrl }, '', newUrl);\n    \n    // Also update the reload behavior to maintain URL parameters\n    // This is the key to preserving parameters during page reload\n    const reloadUrl = newUrl;\n    window.onbeforeunload = function() {\n      // Replace the current URL with our preserved URL just before reload\n      window.history.replaceState({ path: reloadUrl }, '', reloadUrl);\n    };\n  }\n};\n","/**\n * LightNVR Web Interface RecordingsView Component\n * Preact component for the recordings page\n */\n\nimport { h } from 'preact';\nimport { useState, useEffect, useRef, useContext } from 'preact/hooks';\nimport { showStatusMessage } from './ToastContainer.jsx';\nimport { showVideoModal, DeleteConfirmationModal, ModalContext } from './UI.jsx';\nimport { ContentLoader } from './LoadingIndicator.jsx';\n\n// Import components\nimport { FiltersSidebar } from './recordings/FiltersSidebar.jsx';\nimport { ActiveFilters } from './recordings/ActiveFilters.jsx';\nimport { RecordingsTable } from './recordings/RecordingsTable.jsx';\nimport { PaginationControls } from './recordings/PaginationControls.jsx';\n\n// Import utilities\nimport { formatUtils } from './recordings/formatUtils.js';\nimport { recordingsAPI } from './recordings/recordingsAPI.js';\nimport { urlUtils } from './recordings/urlUtils.js';\nimport { useQueryClient, invalidateQueries } from '../../query-client.js';\nimport { WebSocketClient, BatchDeleteRecordingsClient } from '../../websocket-client.js';\n\n/**\n * RecordingsView component\n * @returns {JSX.Element} RecordingsView component\n */\nexport function RecordingsView() {\n  const [recordings, setRecordings] = useState([]);\n  const [streams, setStreams] = useState([]);\n  const [filtersVisible, setFiltersVisible] = useState(true);\n  const [sortField, setSortField] = useState('start_time');\n  const [sortDirection, setSortDirection] = useState('desc');\n  const [filters, setFilters] = useState({\n    dateRange: 'last7days',\n    startDate: '',\n    startTime: '00:00',\n    endDate: '',\n    endTime: '23:59',\n    streamId: 'all',\n    recordingType: 'all'\n  });\n  const [pagination, setPagination] = useState({\n    currentPage: 1,\n    pageSize: 20,\n    totalItems: 0,\n    totalPages: 1,\n    startItem: 0,\n    endItem: 0\n  });\n  const [hasActiveFilters, setHasActiveFilters] = useState(false);\n  const [activeFiltersDisplay, setActiveFiltersDisplay] = useState([]);\n  const [selectedRecordings, setSelectedRecordings] = useState({});\n  const [selectAll, setSelectAll] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [deleteMode, setDeleteMode] = useState('selected'); // 'selected' or 'all'\n  const recordingsTableBodyRef = useRef(null);\n\n  // Get modal context for video playback\n  const modalContext = useContext(ModalContext);\n\n  // Store modal context in window for global access\n  useEffect(() => {\n    if (modalContext) {\n      console.log('Modal context available in RecordingsView');\n      window.__modalContext = modalContext;\n\n      // Log the available methods for debugging\n      console.log('Available modal methods:',\n        Object.keys(modalContext).map(key => key)\n      );\n    } else {\n      console.warn('Modal context not available in RecordingsView');\n    }\n  }, [modalContext]);\n\n  // Get query client for invalidating queries\n  const queryClient = useQueryClient();\n\n  // Fetch streams using preact-query\n  const {\n    data: streamsData,\n    isLoading: isLoadingStreams,\n    error: streamsError\n  } = recordingsAPI.hooks.useStreams();\n\n  // Update streams state when data is loaded\n  useEffect(() => {\n    if (streamsData && Array.isArray(streamsData)) {\n      setStreams(streamsData);\n    }\n  }, [streamsData]);\n\n  // Handle streams error\n  useEffect(() => {\n    if (streamsError) {\n      console.error('Error loading streams for filter:', streamsError);\n      showStatusMessage('Error loading streams: ' + streamsError.message);\n    }\n  }, [streamsError]);\n\n  // Initialize component\n  useEffect(() => {\n    // Initialize WebSocket client at the parent level\n    // This ensures a single WebSocket connection is shared across all components\n    if (typeof WebSocketClient !== 'undefined') {\n      // Create a global WebSocket client instance\n      window.wsClient = new WebSocketClient();\n      console.log('WebSocket client initialized at application level');\n\n      // Add additional event listeners for debugging\n      if (window.wsClient) {\n        // Log initial connection state\n        console.log('Initial WebSocket connection state:', {\n          connected: window.wsClient.isConnected(),\n          clientId: window.wsClient.getClientId()\n        });\n\n        // Add socket event listeners when socket is created\n        const originalConnect = window.wsClient.connect;\n        window.wsClient.connect = function() {\n          const result = originalConnect.apply(this, arguments);\n\n          // Add event listeners to the new socket\n          if (this.socket) {\n            const originalOnOpen = this.socket.onopen;\n            this.socket.onopen = (event) => {\n              console.log('WebSocket connection opened at application level');\n              if (originalOnOpen) originalOnOpen.call(this, event);\n            };\n\n            const originalOnError = this.socket.onerror;\n            this.socket.onerror = (error) => {\n              console.error('WebSocket error at application level:', error);\n              if (originalOnError) originalOnError.call(this, error);\n            };\n\n            const originalOnClose = this.socket.onclose;\n            this.socket.onclose = (event) => {\n              console.log(`WebSocket connection closed at application level: ${event.code} ${event.reason}`);\n              if (originalOnClose) originalOnClose.call(this, event);\n            };\n\n            const originalOnMessage = this.socket.onmessage;\n            this.socket.onmessage = (event) => {\n              // Only log non-welcome messages at application level to reduce noise\n              if (!event.data.includes('\"type\":\"welcome\"')) {\n                console.log('WebSocket message received at application level');\n              }\n              if (originalOnMessage) originalOnMessage.call(this, event);\n            };\n          }\n\n          return result;\n        };\n\n        // Override handleMessage to log when client ID is set\n        const originalHandleMessage = window.wsClient.handleMessage;\n        window.wsClient.handleMessage = function(data) {\n          const clientIdBefore = this.clientId;\n          originalHandleMessage.call(this, data);\n          const clientIdAfter = this.clientId;\n\n          // Log when client ID changes\n          if (clientIdBefore !== clientIdAfter && clientIdAfter) {\n            console.log(`WebSocket client ID changed at application level: ${clientIdAfter}`);\n          }\n        };\n      }\n\n      // Initialize batch delete client if needed\n      if (typeof BatchDeleteRecordingsClient !== 'undefined') {\n        window.batchDeleteClient = new BatchDeleteRecordingsClient(window.wsClient);\n        console.log('Batch delete client initialized');\n      }\n    }\n\n    // Set default date range\n    setDefaultDateRange();\n\n    // Check for URL parameters\n    const urlFilters = urlUtils.getFiltersFromUrl();\n\n    if (urlFilters) {\n      console.log('Found URL filters:', urlFilters);\n\n      // Check specifically for detection parameter\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n        // Ensure recordingType is set to 'detection'\n        urlFilters.filters.recordingType = 'detection';\n      }\n\n      // Update state with URL filters\n      setFilters(urlFilters.filters);\n      setPagination(prev => ({\n        ...prev,\n        currentPage: urlFilters.page || 1,\n        pageSize: urlFilters.limit || 20\n      }));\n      setSortField(urlFilters.sort || 'start_time');\n      setSortDirection(urlFilters.order || 'desc');\n    }\n\n    // Handle responsive behavior\n    handleResponsiveFilters();\n    window.addEventListener('resize', handleResponsiveFilters);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResponsiveFilters);\n    };\n  }, []);\n\n  // Update active filters when filters change\n  useEffect(() => {\n    updateActiveFilters();\n  }, [filters]);\n\n  // Set default date range\n  const setDefaultDateRange = () => {\n    const now = new Date();\n    const sevenDaysAgo = new Date(now);\n    sevenDaysAgo.setDate(now.getDate() - 7);\n\n    setFilters(prev => ({\n      ...prev,\n      endDate: now.toISOString().split('T')[0],\n      startDate: sevenDaysAgo.toISOString().split('T')[0]\n    }));\n  };\n\n  // Fetch recordings using preact-query\n  const {\n    data: recordingsData,\n    isLoading: isLoadingRecordings,\n    error: recordingsError,\n    refetch: refetchRecordings\n  } = recordingsAPI.hooks.useRecordings(filters, pagination, sortField, sortDirection);\n\n  // Update recordings state when data is loaded\n  useEffect(() => {\n    if (recordingsData) {\n      // Store recordings in the component state\n      const recordingsArray = recordingsData.recordings || [];\n\n      // When filtering for detection events, all returned recordings should have detections\n      if (filters.recordingType === 'detection') {\n        recordingsArray.forEach(recording => {\n          recording.has_detections = true;\n        });\n      }\n\n      // Set the recordings state\n      setRecordings(recordingsArray);\n      setHasData(recordingsArray.length > 0);\n\n      // Update pagination\n      if (recordingsData.pagination) {\n        updatePaginationFromResponse(recordingsData, pagination.currentPage);\n      }\n    }\n  }, [recordingsData, filters.recordingType]);\n\n  // Handle recordings error\n  useEffect(() => {\n    if (recordingsError) {\n      console.error('Error loading recordings:', recordingsError);\n      showStatusMessage('Error loading recordings: ' + recordingsError.message);\n      setHasData(false);\n    }\n  }, [recordingsError]);\n\n  // Load filters from URL\n  const loadFiltersFromUrl = () => {\n    const urlFilters = urlUtils.getFiltersFromUrl();\n    if (urlFilters) {\n      // Check specifically for detection parameter\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n        // Ensure recordingType is set to 'detection'\n        urlFilters.filters.recordingType = 'detection';\n      }\n\n      setFilters(urlFilters.filters);\n      setPagination(prev => ({\n        ...prev,\n        currentPage: urlFilters.page || 1,\n        pageSize: urlFilters.limit || 20\n      }));\n      setSortField(urlFilters.sort || 'start_time');\n      setSortDirection(urlFilters.order || 'desc');\n\n      // If detection parameter is present, ensure it's included in the URL when we update it\n      if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n        setTimeout(() => {\n          const currentUrl = new URL(window.location.href);\n          if (!currentUrl.searchParams.has('detection')) {\n            currentUrl.searchParams.set('detection', '1');\n            window.history.replaceState({ path: currentUrl.href }, '', currentUrl.href);\n          }\n        }, 0);\n      }\n\n      return urlFilters; // Return the filters so we can use them directly\n    }\n    return null;\n  };\n\n  // Handle responsive filters\n  const handleResponsiveFilters = () => {\n    // On mobile, hide filters by default\n    if (window.innerWidth < 768) {\n      setFiltersVisible(false);\n    } else {\n      setFiltersVisible(true);\n    }\n  };\n\n  // Toggle filters visibility\n  const toggleFilters = () => {\n    setFiltersVisible(!filtersVisible);\n  };\n\n  // State for data status\n  const [hasData, setHasData] = useState(false);\n\n  // Load recordings (now just updates pagination and URL)\n  const loadRecordings = (page = pagination.currentPage, updateUrl = true) => {\n    // Debug log to check filters\n    console.log('Loading recordings with filters:', JSON.stringify(filters));\n\n    // Create a pagination object with the specified page\n    const paginationWithPage = {\n      ...pagination,\n      currentPage: page\n    };\n\n    // Update pagination state\n    setPagination(paginationWithPage);\n\n    // Update URL with filters if requested\n    if (updateUrl) {\n      urlUtils.updateUrlWithFilters(filters, paginationWithPage, sortField, sortDirection);\n    }\n  };\n\n  // Update pagination from API response\n  const updatePaginationFromResponse = (data, currentPage) => {\n    // Use the provided page parameter instead of the state\n    currentPage = currentPage || pagination.currentPage;\n\n    if (data.pagination) {\n      const pageSize = data.pagination.limit || 20;\n      const totalItems = data.pagination.total || 0;\n      const totalPages = data.pagination.pages || 1;\n\n      // Calculate start and end items based on current page\n      let startItem = 0;\n      let endItem = 0;\n\n      if (data.recordings.length > 0) {\n        startItem = (currentPage - 1) * pageSize + 1;\n        endItem = Math.min(startItem + data.recordings.length - 1, totalItems);\n      }\n\n      console.log('Pagination update:', {\n        currentPage,\n        pageSize,\n        totalItems,\n        totalPages,\n        startItem,\n        endItem,\n        recordingsLength: data.recordings.length\n      });\n\n      setPagination(prev => ({\n        ...prev,\n        totalItems,\n        totalPages,\n        pageSize,\n        startItem,\n        endItem\n      }));\n    } else {\n      // Fallback if pagination object is not provided\n      const pageSize = pagination.pageSize;\n      const totalItems = data.total || 0;\n      const totalPages = Math.ceil(totalItems / pageSize) || 1;\n\n      // Calculate start and end items based on current page\n      let startItem = 0;\n      let endItem = 0;\n\n      if (data.recordings.length > 0) {\n        startItem = (currentPage - 1) * pageSize + 1;\n        endItem = Math.min(startItem + data.recordings.length - 1, totalItems);\n      }\n\n      console.log('Pagination update (fallback):', {\n        currentPage,\n        pageSize,\n        totalItems,\n        totalPages,\n        startItem,\n        endItem,\n        recordingsLength: data.recordings.length\n      });\n\n      setPagination(prev => ({\n        ...prev,\n        totalItems,\n        totalPages,\n        startItem,\n        endItem\n      }));\n    }\n  };\n\n  // Handle date range change\n  const handleDateRangeChange = (e) => {\n    const newDateRange = e.target.value;\n\n    setFilters(prev => ({\n      ...prev,\n      dateRange: newDateRange\n    }));\n\n    if (newDateRange === 'custom') {\n      // If custom is selected, make sure we have default dates\n      if (!filters.startDate || !filters.endDate) {\n        const now = new Date();\n        const sevenDaysAgo = new Date(now);\n        sevenDaysAgo.setDate(now.getDate() - 7);\n\n        setFilters(prev => ({\n          ...prev,\n          endDate: now.toISOString().split('T')[0],\n          startDate: sevenDaysAgo.toISOString().split('T')[0]\n        }));\n      }\n    }\n  };\n\n  // Update active filters\n  const updateActiveFilters = () => {\n    const activeFilters = urlUtils.getActiveFiltersDisplay(filters);\n    setHasActiveFilters(activeFilters.length > 0);\n    setActiveFiltersDisplay(activeFilters);\n  };\n\n  // Apply filters\n  const applyFilters = (resetToFirstPage = true) => {\n    // Reset to first page when applying filters (unless specified otherwise)\n    if (resetToFirstPage) {\n      setPagination(prev => ({\n        ...prev,\n        currentPage: 1\n      }));\n    }\n\n    // Update URL with filters\n    urlUtils.updateUrlWithFilters(\n      filters,\n      resetToFirstPage ? {...pagination, currentPage: 1} : pagination,\n      sortField,\n      sortDirection\n    );\n  };\n\n  // Reset filters\n  const resetFilters = () => {\n    // Create default filters\n    const defaultFilters = {\n      dateRange: 'last7days',\n      startDate: '',\n      startTime: '00:00',\n      endDate: '',\n      endTime: '23:59',\n      streamId: 'all',\n      recordingType: 'all'\n    };\n\n    // Get default date range\n    const now = new Date();\n    const sevenDaysAgo = new Date(now);\n    sevenDaysAgo.setDate(now.getDate() - 7);\n\n    defaultFilters.endDate = now.toISOString().split('T')[0];\n    defaultFilters.startDate = sevenDaysAgo.toISOString().split('T')[0];\n\n    // Reset filter state\n    setFilters(defaultFilters);\n\n    // Reset pagination to first page\n    setPagination(prev => ({\n      ...prev,\n      currentPage: 1\n    }));\n\n    // Reset sort\n    setSortField('start_time');\n    setSortDirection('desc');\n\n    // Clear all URL parameters by replacing the current URL with the base URL\n    const baseUrl = window.location.pathname;\n    window.history.pushState({ path: baseUrl }, '', baseUrl);\n  };\n\n  // Remove filter\n  const removeFilter = (key) => {\n    switch (key) {\n      case 'dateRange':\n        setFilters(prev => ({\n          ...prev,\n          dateRange: 'last7days'\n        }));\n        break;\n      case 'streamId':\n        setFilters(prev => ({\n          ...prev,\n          streamId: 'all'\n        }));\n        break;\n      case 'recordingType':\n        setFilters(prev => ({\n          ...prev,\n          recordingType: 'all'\n        }));\n        break;\n    }\n\n    applyFilters();\n  };\n\n  // Sort by field\n  const sortBy = (field) => {\n    if (sortField === field) {\n      // Toggle direction if already sorting by this field\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      // Default to descending for start_time, ascending for others\n      setSortDirection(field === 'start_time' ? 'desc' : 'asc');\n      setSortField(field);\n    }\n\n    // Reset to first page\n    setPagination(prev => ({\n      ...prev,\n      currentPage: 1\n    }));\n\n    // Update URL with new sort parameters\n    urlUtils.updateUrlWithFilters(\n      filters,\n      {...pagination, currentPage: 1},\n      field,\n      field === sortField ? (sortDirection === 'asc' ? 'desc' : 'asc') : (field === 'start_time' ? 'desc' : 'asc')\n    );\n  };\n\n  // Go to page\n  const goToPage = (page) => {\n    if (page < 1 || page > pagination.totalPages) return;\n\n    // Set the current page in pagination state\n    setPagination(prev => ({\n      ...prev,\n      currentPage: page\n    }));\n\n    // Update URL with all filters and the new page\n    urlUtils.updateUrlWithFilters(filters, {...pagination, currentPage: page}, sortField, sortDirection);\n  };\n\n  // Toggle selection of a recording\n  const toggleRecordingSelection = (recordingId) => {\n    setSelectedRecordings(prev => ({\n      ...prev,\n      [recordingId]: !prev[recordingId]\n    }));\n  };\n\n  // Toggle select all recordings\n  const toggleSelectAll = () => {\n    const newSelectAll = !selectAll;\n    setSelectAll(newSelectAll);\n\n    const newSelectedRecordings = {};\n    if (newSelectAll) {\n      // Select all recordings\n      recordings.forEach(recording => {\n        newSelectedRecordings[recording.id] = true;\n      });\n    }\n    // Always update selectedRecordings, even when deselecting all\n    setSelectedRecordings(newSelectedRecordings);\n  };\n\n  // Get count of selected recordings\n  const getSelectedCount = () => {\n    return Object.values(selectedRecordings).filter(Boolean).length;\n  };\n\n  // Open delete confirmation modal\n  const openDeleteModal = (mode) => {\n    setDeleteMode(mode);\n    setIsDeleteModalOpen(true);\n  };\n\n  // Close delete confirmation modal\n  const closeDeleteModal = () => {\n    setIsDeleteModalOpen(false);\n  };\n\n  // Handle delete confirmation\n  const handleDeleteConfirm = async () => {\n    closeDeleteModal();\n\n    // Save current URL parameters before deletion\n    const currentUrlParams = new URLSearchParams(window.location.search);\n    const currentSortField = currentUrlParams.get('sort') || sortField;\n    const currentSortDirection = currentUrlParams.get('order') || sortDirection;\n    const currentPage = parseInt(currentUrlParams.get('page'), 10) || pagination.currentPage;\n\n    if (deleteMode === 'selected') {\n      // Use the recordingsAPI to delete selected recordings\n      const result = await recordingsAPI.deleteSelectedRecordings(selectedRecordings);\n\n      // Reset selection\n      setSelectedRecordings({});\n      setSelectAll(false);\n\n      // Only reload if some recordings were deleted successfully\n      if (result.succeeded > 0) {\n        // Reload recordings with preserved parameters\n        reloadRecordingsWithPreservedParams(currentSortField, currentSortDirection, currentPage);\n      }\n    } else {\n      // Use the recordingsAPI to delete all filtered recordings\n      const result = await recordingsAPI.deleteAllFilteredRecordings(filters);\n\n      // Reset selection\n      setSelectedRecordings({});\n      setSelectAll(false);\n\n      // Only reload if some recordings were deleted successfully\n      if (result.succeeded > 0) {\n        // Reload recordings\n        loadRecordings();\n      }\n    }\n  };\n\n  // Helper function to reload recordings with preserved parameters\n  const reloadRecordingsWithPreservedParams = (sortField, sortDirection, page) => {\n    // Set the sort parameters directly\n    setSortField(sortField);\n    setSortDirection(sortDirection);\n\n    // Update pagination with the preserved page\n    setPagination(prev => ({\n      ...prev,\n      currentPage: page\n    }));\n\n    // Wait for state to update\n    setTimeout(() => {\n      // Create a new pagination object with the updated page\n      const updatedPagination = {\n        ...pagination,\n        currentPage: page\n      };\n\n      // Update URL with all filters and the preserved parameters\n      urlUtils.updateUrlWithFilters(filters, updatedPagination, sortField, sortDirection);\n\n      // Load recordings from API\n      recordingsAPI.loadRecordings(filters, updatedPagination, sortField, sortDirection)\n        .then(data => {\n          console.log('Recordings data received:', data);\n\n          // Store recordings in the component state\n          setRecordings(data.recordings || []);\n\n          // Update pagination without changing the current page\n          updatePaginationFromResponse(data, page);\n        })\n        .catch(error => {\n          console.error('Error loading recordings:', error);\n          showStatusMessage('Error loading recordings: ' + error.message);\n        });\n    }, 0);\n  };\n\n  // Delete recording using preact-query mutation\n  const { mutate: deleteRecordingMutation } = recordingsAPI.hooks.useDeleteRecording();\n\n  // Delete a single recording\n  const deleteRecording = (recording) => {\n    if (!confirm(`Are you sure you want to delete this recording from ${recording.stream}?`)) {\n      return;\n    }\n\n    // Call the mutation with the recording ID\n    deleteRecordingMutation(recording.id);\n  };\n\n  // Play recording\n  const playRecording = (recording) => {\n    console.log('RecordingsView.playRecording called with:', recording);\n\n    // Use the modal context if available, otherwise fall back to the imported function\n    if (modalContext && modalContext.showVideoModal) {\n      console.log('Using modal context showVideoModal');\n      const videoUrl = `/api/recordings/play/${recording.id}`;\n      const title = `${recording.stream} - ${formatUtils.formatDateTime(recording.start_time)}`;\n      const downloadUrl = `/api/recordings/download/${recording.id}`;\n\n      // Call the context function directly\n      modalContext.showVideoModal(videoUrl, title, downloadUrl);\n    } else {\n      console.log('Falling back to recordingsAPI.playRecording');\n      // Fall back to the API function which will use the imported showVideoModal\n      recordingsAPI.playRecording(recording, showVideoModal);\n    }\n  };\n\n  // Download recording\n  const downloadRecording = (recording) => {\n    recordingsAPI.downloadRecording(recording);\n  };\n\n  return (\n    <section id=\"recordings-page\" class=\"page\">\n      <div class=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <div class=\"flex items-center\">\n          <h2 class=\"text-xl font-bold\">Recordings</h2>\n          <div class=\"ml-4 flex\">\n            <a href=\"recordings.html\" class=\"px-3 py-1 bg-blue-500 text-white rounded-l-md\">Table View</a>\n            <a href=\"timeline.html\" class=\"px-3 py-1 bg-gray-300 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-400 dark:hover:bg-gray-600 rounded-r-md\">Timeline View</a>\n          </div>\n        </div>\n        <button id=\"toggle-filters-btn\"\n                class=\"p-2 rounded-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none\"\n                title=\"Toggle Filters\"\n                onClick={toggleFilters}>\n          <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path fill-rule=\"evenodd\" d=\"M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clip-rule=\"evenodd\"></path>\n          </svg>\n        </button>\n      </div>\n\n      <div class=\"recordings-layout flex flex-col md:flex-row gap-4 w-full\">\n        <FiltersSidebar\n          filters={filters}\n          setFilters={setFilters}\n          pagination={pagination}\n          setPagination={setPagination}\n          streams={streams}\n          filtersVisible={filtersVisible}\n          applyFilters={applyFilters}\n          resetFilters={resetFilters}\n          handleDateRangeChange={handleDateRangeChange}\n          setDefaultDateRange={setDefaultDateRange}\n        />\n\n        <div class=\"recordings-content flex-1\">\n          <ActiveFilters\n            activeFiltersDisplay={activeFiltersDisplay}\n            removeFilter={removeFilter}\n            hasActiveFilters={hasActiveFilters}\n          />\n\n          <ContentLoader\n            isLoading={isLoadingRecordings}\n            hasData={hasData}\n            loadingMessage=\"Loading recordings...\"\n            emptyMessage=\"No recordings found matching your criteria\"\n          >\n            <RecordingsTable\n              recordings={recordings}\n              sortField={sortField}\n              sortDirection={sortDirection}\n              sortBy={sortBy}\n              selectedRecordings={selectedRecordings}\n              toggleRecordingSelection={toggleRecordingSelection}\n              selectAll={selectAll}\n              toggleSelectAll={toggleSelectAll}\n              getSelectedCount={getSelectedCount}\n              openDeleteModal={openDeleteModal}\n              playRecording={playRecording}\n              downloadRecording={downloadRecording}\n              deleteRecording={deleteRecording}\n              recordingsTableBodyRef={recordingsTableBodyRef}\n              pagination={pagination}\n            />\n\n            <PaginationControls\n              pagination={pagination}\n              goToPage={goToPage}\n            />\n          </ContentLoader>\n        </div>\n      </div>\n\n      <DeleteConfirmationModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={handleDeleteConfirm}\n        mode={deleteMode}\n        count={getSelectedCount()}\n      />\n    </section>\n  );\n}\n","/**\n * LightNVR Web Interface Batch Delete Modal Component\n * Preact component for displaying progress of batch delete operations with WebSocket updates\n */\n\nimport { h } from 'preact';\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { showStatusMessage } from './ToastContainer.jsx';\nimport { WebSocketClient, BatchDeleteRecordingsClient } from '../../websocket-client.js';\n\n/**\n * BatchDeleteModal component\n * @returns {JSX.Element} BatchDeleteModal component\n */\nexport function BatchDeleteModal() {\n  // State for modal visibility and progress\n  const [isVisible, setIsVisible] = useState(false);\n  const [progress, setProgress] = useState({\n    current: 0,\n    total: 0,\n    succeeded: 0,\n    failed: 0,\n    status: 'Preparing to delete recordings...',\n    complete: false,\n    error: false\n  });\n\n  // Refs for clients\n  const wsClientRef = useRef(null);\n  const batchDeleteClientRef = useRef(null);\n\n  // Initialize WebSocket client and batch delete client\n  useEffect(() => {\n    // Initialize WebSocket client if it doesn't exist\n    if (!window.wsClient) {\n      console.log('Creating WebSocket client in BatchDeleteModal');\n      window.wsClient = new WebSocketClient();\n    }\n    wsClientRef.current = window.wsClient;\n\n    // Initialize batch delete client if it doesn't exist\n    if (!window.batchDeleteClient) {\n      console.log('Creating BatchDeleteRecordingsClient');\n      window.batchDeleteClient = new BatchDeleteRecordingsClient(wsClientRef.current);\n      \n      // Set up event handlers\n      window.batchDeleteClient.onProgress((payload) => {\n        console.log('Batch delete progress:', payload);\n        updateProgress(payload);\n      });\n\n      window.batchDeleteClient.onResult((payload) => {\n        console.log('Batch delete result:', payload);\n\n        // Make sure we have valid data\n        const total = payload.total || 0;\n        const succeeded = payload.succeeded || 0;\n        const failed = payload.failed || 0;\n\n        // Update final progress\n        updateProgress({\n          current: total,\n          total: total,\n          succeeded: succeeded,\n          failed: failed,\n          status: 'Batch delete operation complete',\n          complete: true\n        });\n\n        // Show status message\n        const message = payload.success\n          ? `Successfully deleted ${succeeded} recordings`\n          : `Deleted ${succeeded} recordings with ${failed} failures`;\n\n        showStatusMessage(message, 'success', 5000);\n\n        // Reload recordings after a short delay\n        setTimeout(() => {\n          if (typeof window.loadRecordings === 'function') {\n            window.loadRecordings();\n          }\n        }, 1000);\n      });\n\n      window.batchDeleteClient.onError((payload) => {\n        console.error('Batch delete error:', payload);\n\n        // Update progress UI to show error\n        updateProgress({\n          current: 0,\n          total: 0,\n          succeeded: 0,\n          failed: 0,\n          status: `Error: ${payload.error || 'Unknown error'}`,\n          complete: true,\n          error: true\n        });\n\n        // Show error message\n        showStatusMessage(`Error: ${payload.error || 'Unknown error'}`, 'error', 5000);\n      });\n    }\n    batchDeleteClientRef.current = window.batchDeleteClient;\n\n    // Make functions globally available\n    window.showBatchDeleteModal = showModal;\n    window.updateBatchDeleteProgress = updateProgress;\n    window.batchDeleteRecordingsByHttpRequest = batchDeleteRecordingsByHttpRequest;\n\n    // Clean up on unmount\n    return () => {\n      // No need to clean up WebSocket client as it might be used by other components\n    };\n  }, []);\n\n  /**\n   * Update progress state\n   * @param {Object} newProgress - New progress data\n   */\n  const updateProgress = (newProgress) => {\n    setProgress(prevProgress => ({\n      ...prevProgress,\n      ...newProgress\n    }));\n\n    // Show modal if it's not already visible\n    if (!isVisible) {\n      setIsVisible(true);\n    }\n  };\n\n  /**\n   * Show the modal\n   */\n  const showModal = () => {\n    // Reset progress state\n    setProgress({\n      current: 0,\n      total: 0,\n      succeeded: 0,\n      failed: 0,\n      status: 'Preparing to delete recordings...',\n      complete: false,\n      error: false\n    });\n\n    // Show modal\n    setIsVisible(true);\n  };\n\n  /**\n   * Close the modal\n   */\n  const closeModal = () => {\n    setIsVisible(false);\n  };\n\n  /**\n   * Cancel batch delete operation\n   */\n  const cancelBatchDelete = () => {\n    // Close modal\n    closeModal();\n\n    // Show status message\n    showStatusMessage('Batch delete operation cancelled', 'warning', 5000);\n  };\n\n  /**\n   * Delete recordings by HTTP request (fallback when WebSocket is not available)\n   * @param {Object} params - Delete parameters (ids or filter)\n   * @returns {Promise<Object>} Promise that resolves when the operation is complete\n   */\n  const batchDeleteRecordingsByHttpRequest = (params) => {\n    console.log('Using HTTP fallback for batch delete with params:', params);\n\n    return new Promise((resolve, reject) => {\n      // Show modal\n      showModal();\n\n      // Calculate total count for progress bar\n      let totalCount = 0;\n      if (params.ids) {\n        totalCount = params.ids.length;\n      } else if (params.filter && params.totalCount) {\n        totalCount = params.totalCount;\n      }\n\n      // Update progress to show we're using HTTP\n      updateProgress({\n        current: 0,\n        total: totalCount,\n        status: 'Using HTTP fallback for batch delete operation',\n        succeeded: 0,\n        failed: 0\n      });\n\n      // Send HTTP request\n      fetch('/api/recordings/batch-delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(params)\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error ${response.status}: ${response.statusText}`);\n        }\n        return response.json();\n      })\n      .then(result => {\n        console.log('HTTP batch delete result:', result);\n\n        // Make sure we have valid data\n        const total = result.total || totalCount || 0;\n        const succeeded = result.succeeded || 0;\n        const failed = result.failed || 0;\n\n        // Update final progress\n        updateProgress({\n          current: total,\n          total: total,\n          succeeded: succeeded,\n          failed: failed,\n          status: 'Batch delete operation complete',\n          complete: true\n        });\n\n        // Show status message\n        const message = result.success\n          ? `Successfully deleted ${succeeded} recordings`\n          : `Deleted ${succeeded} recordings with ${failed} failures`;\n\n        showStatusMessage(message, 'success', 5000);\n\n        // Reload recordings after a short delay\n        setTimeout(() => {\n          if (typeof window.loadRecordings === 'function') {\n            window.loadRecordings();\n          }\n        }, 1000);\n\n        resolve(result);\n      })\n      .catch(error => {\n        console.error('HTTP batch delete error:', error);\n\n        // Update progress UI to show error\n        updateProgress({\n          current: 0,\n          total: 0,\n          succeeded: 0,\n          failed: 0,\n          status: `Error: ${error.message || 'Unknown error'}`,\n          complete: true,\n          error: true\n        });\n\n        // Show error message\n        showStatusMessage(`Error: ${error.message || 'Unknown error'}`, 'error', 5000);\n\n        reject(error);\n      });\n    });\n  };\n\n  // Calculate progress percentage\n  const getProgressPercentage = () => {\n    if (progress.total > 0) {\n      return Math.round((progress.current / progress.total) * 100);\n    } else if (progress.complete) {\n      return 100;\n    } else if (progress.current > 0) {\n      return Math.min(90, progress.current / 10);\n    } else {\n      return 50; // Indeterminate\n    }\n  };\n\n  // Get progress bar classes\n  const getProgressBarClasses = () => {\n    let classes = 'h-4 rounded-full text-center text-xs text-white';\n    \n    // Add color class\n    if (progress.error) {\n      classes += ' bg-red-500';\n    } else {\n      classes += ' bg-green-500';\n    }\n    \n    // Add animation class if needed\n    if (!progress.complete && progress.total === 0) {\n      classes += ' animate-pulse';\n    }\n    \n    return classes;\n  };\n\n  // Get count text\n  const getCountText = () => {\n    if (progress.total > 0) {\n      return `${progress.current} / ${progress.total}`;\n    } else {\n      return `${progress.current} / ?`;\n    }\n  };\n\n  // Get percentage text\n  const getPercentageText = () => {\n    if (progress.total > 0) {\n      return `${Math.round((progress.current / progress.total) * 100)}%`;\n    } else if (progress.complete) {\n      return '100%';\n    } else {\n      return 'In progress';\n    }\n  };\n\n  // If not visible, don't render anything\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <div \n      id=\"batch-delete-modal\" \n      className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center z-50\"\n    >\n      <div className=\"relative bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md mx-auto p-6 w-full\">\n        <div className=\"flex justify-between items-center mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">\n          <h3 id=\"batch-delete-modal-title\" className=\"text-xl font-bold text-gray-900 dark:text-white\">\n            Batch Delete Progress\n          </h3>\n          <button \n            className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 text-2xl font-bold\"\n            onClick={closeModal}\n          >\n            &times;\n          </button>\n        </div>\n        \n        <div className=\"modal-body\">\n          <div className=\"mb-4 text-gray-700 dark:text-gray-300\">\n            {progress.status}\n          </div>\n          \n          <div className=\"progress-container bg-gray-200 dark:bg-gray-700 rounded-full h-4 mb-4\">\n            <div \n              className={getProgressBarClasses()}\n              style={{ width: `${getProgressPercentage()}%` }}\n            ></div>\n          </div>\n          \n          <div className=\"flex justify-between text-sm text-gray-600 dark:text-gray-400 mb-6\">\n            <div>{getCountText()}</div>\n            <div>{getPercentageText()}</div>\n          </div>\n          \n          <div className=\"mb-4\">\n            <div className=\"flex justify-between mb-2\">\n              <span className=\"text-gray-700 dark:text-gray-300\">Succeeded:</span>\n              <span className=\"font-bold text-green-600 dark:text-green-400\">{progress.succeeded}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-700 dark:text-gray-300\">Failed:</span>\n              <span className=\"font-bold text-red-600 dark:text-red-400\">{progress.failed}</span>\n            </div>\n          </div>\n          \n          <div className=\"text-sm italic text-gray-600 dark:text-gray-400 mb-4\">\n            {progress.message}\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end pt-2 border-t border-gray-200 dark:border-gray-700\">\n          {progress.complete ? (\n            <button \n              className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n              onClick={closeModal}\n            >\n              Done\n            </button>\n          ) : (\n            <button \n              className=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors\"\n              onClick={cancelBatchDelete}\n            >\n              Cancel\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Delete multiple recordings by IDs\n * @param {Array<number>} ids - Recording IDs to delete\n */\nexport function batchDeleteRecordings(ids) {\n  if (!ids || ids.length === 0) {\n    showStatusMessage('No recordings selected for deletion', 'warning', 5000);\n    return;\n  }\n\n  // Confirm deletion\n  if (!confirm(`Are you sure you want to delete ${ids.length} recordings?`)) {\n    return;\n  }\n\n  // Show modal\n  if (typeof window.showBatchDeleteModal === 'function') {\n    window.showBatchDeleteModal();\n  }\n\n  // Initialize batch delete client if needed\n  if (!window.batchDeleteClient && typeof window.wsClient !== 'undefined') {\n    window.batchDeleteClient = new BatchDeleteRecordingsClient(window.wsClient);\n  }\n\n  // Start batch delete operation\n  if (window.batchDeleteClient) {\n    window.batchDeleteClient.deleteWithProgress({ ids })\n      .catch(error => {\n        console.error('Error starting batch delete:', error);\n        showStatusMessage(`Error: ${error.message || 'Failed to start batch delete operation'}`, 'error', 5000);\n        \n        // Close modal if it's open\n        if (typeof window.closeBatchDeleteModal === 'function') {\n          window.closeBatchDeleteModal();\n        }\n      });\n  } else {\n    showStatusMessage('Batch delete client not available', 'error', 5000);\n  }\n}\n\n/**\n * Delete recordings by filter\n * @param {Object} filter - Filter to delete by\n */\nexport function batchDeleteRecordingsByFilter(filter) {\n  if (!filter) {\n    showStatusMessage('No filter specified for deletion', 'warning', 5000);\n    return;\n  }\n\n  // Confirm deletion\n  if (!confirm('Are you sure you want to delete all recordings matching the current filter?')) {\n    return;\n  }\n\n  // Show modal\n  if (typeof window.showBatchDeleteModal === 'function') {\n    window.showBatchDeleteModal();\n  }\n\n  // Initialize batch delete client if needed\n  if (!window.batchDeleteClient && typeof window.wsClient !== 'undefined') {\n    window.batchDeleteClient = new BatchDeleteRecordingsClient(window.wsClient);\n  }\n\n  // Start batch delete operation\n  if (window.batchDeleteClient) {\n    window.batchDeleteClient.deleteWithProgress({ filter })\n      .catch(error => {\n        console.error('Error starting batch delete:', error);\n        showStatusMessage(`Error: ${error.message || 'Failed to start batch delete operation'}`, 'error', 5000);\n        \n        // Close modal if it's open\n        if (typeof window.closeBatchDeleteModal === 'function') {\n          window.closeBatchDeleteModal();\n        }\n      });\n  } else {\n    showStatusMessage('Batch delete client not available', 'error', 5000);\n  }\n}\n\n// Export for global use\nif (typeof window !== 'undefined') {\n  window.batchDeleteRecordings = batchDeleteRecordings;\n  window.batchDeleteRecordingsByFilter = batchDeleteRecordingsByFilter;\n}\n","/**\n * LightNVR Web Interface Streams Page\n * Entry point for the streams page\n */\n\nimport { render } from 'preact';\nimport { RecordingsView } from '../components/preact/RecordingsView.jsx';\nimport { QueryClientProvider, queryClient } from '../query-client.js';\nimport { Header } from \"../components/preact/Header.jsx\";\nimport { Footer } from \"../components/preact/Footer.jsx\";\nimport { ToastContainer } from \"../components/preact/ToastContainer.jsx\";\nimport { BatchDeleteModal } from \"../components/preact/BatchDeleteModal.jsx\";\nimport { ModalProvider } from \"../components/preact/UI.jsx\";\n\n// Render the StreamsView component when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Get the container element\n    const container = document.getElementById('main-content');\n\n    if (container) {\n        render(\n            <QueryClientProvider client={queryClient}>\n                <ModalProvider>\n                    <Header />\n                    <ToastContainer />\n                    <BatchDeleteModal />\n                    <RecordingsView />\n                    <Footer />\n                </ModalProvider>\n            </QueryClientProvider>,\n            container\n        );\n    }\n});\n"],"names":["FiltersSidebar","filters","setFilters","pagination","setPagination","streams","filtersVisible","applyFilters","resetFilters","handleDateRangeChange","setDefaultDateRange","jsxs","id","className","children","jsx","htmlFor","value","dateRange","onChange","style","display","type","startDate","e","prev","target","startTime","endDate","endTime","streamId","map","stream","name","recordingType","pageSize","parseInt","onClick","ActiveFilters","activeFiltersDisplay","removeFilter","hasActiveFilters","filter","index","label","key","formatUtils","isoString","Date","toLocaleString","seconds","hours","Math","floor","minutes","secs","toString","padStart","join","RecordingsTable","recordings","sortField","sortDirection","sortBy","selectedRecordings","toggleRecordingSelection","selectAll","toggleSelectAll","getSelectedCount","openDeleteModal","playRecording","downloadRecording","deleteRecording","recordingsTableBodyRef","disabled","checked","ref","length","colSpan","totalItems","recording","start_time","duration","size","has_detections","fill","viewBox","xmlns","d","fillRule","clipRule","title","PaginationControls","goToPage","startItem","endItem","currentPage","totalPages","recordingsAPI","hooks","useStreams","useQuery","timeout","retries","retryDelay","useRecordings","params","URLSearchParams","append","start","end","getDateRangeFromPreset","useDeleteRecording","queryClient","useQueryClient","useMutation","mutationFn","async","url","recordingId","fetchJSON","method","onSuccess","invalidateQueries","queryKey","showStatusMessage","onError","error","console","message","useBatchDeleteRecordings","usePostMutation","result","successCount","succeeded","errorCount","failed","loadStreams","preset","now","today","getFullYear","getMonth","getDate","todayStart","toISOString","yesterday","setDate","yesterdayEnd","setHours","sevenDaysAgo","thirtyDaysAgo","defaultStart","loadRecordings","log","data","batchSize","i","batch","slice","Promise","all","checkRecordingHasDetections","enhancedFetch","deleteSelectedRecordings","selectedIds","Object","entries","_","isSelected","window","wsClient","isConnected","connect","batchDeleteClient","BatchDeleteRecordingsClient","warn","deleteSelectedRecordingsHttp","showBatchDeleteModal","deleteWithProgress","ids","response","headers","body","JSON","stringify","json","deleteAllFilteredRecordings","stream_name","detection","updateBatchDeleteProgress","current","total","status","complete","totalCount","fetch","ok","countError","handleOperationError","deleteAllFilteredRecordingsHttp","getClientId","timeoutPromise","reject","setTimeout","Error","race","wsError","deleteResponse","end_time","getTime","detections","getRecordingDetections","showVideoModal","videoUrl","downloadUrl","__modalContext","link","document","createElement","href","download","replace","appendChild","click","removeChild","urlUtils","getFiltersFromUrl","urlParams","location","search","has","page","limit","sort","order","get","activeFilters","push","updateUrlWithFilters","set","delete","newUrl","pathname","history","pushState","path","reloadUrl","onbeforeunload","replaceState","RecordingsView","setRecordings","useState","setStreams","setFiltersVisible","setSortField","setSortDirection","setHasActiveFilters","setActiveFiltersDisplay","setSelectedRecordings","setSelectAll","isDeleteModalOpen","setIsDeleteModalOpen","deleteMode","setDeleteMode","useRef","modalContext","useContext","ModalContext","useEffect","keys","streamsData","isLoading","isLoadingStreams","streamsError","Array","isArray","WebSocketClient","connected","clientId","originalConnect","apply","this","arguments","socket","originalOnOpen","onopen","event","call","originalOnError","onerror","originalOnClose","onclose","code","reason","originalOnMessage","onmessage","includes","originalHandleMessage","handleMessage","clientIdBefore","clientIdAfter","urlFilters","handleResponsiveFilters","addEventListener","removeEventListener","updateActiveFilters","split","recordingsData","isLoadingRecordings","recordingsError","refetch","refetchRecordings","recordingsArray","forEach","setHasData","updatePaginationFromResponse","innerWidth","hasData","pages","min","recordingsLength","ceil","resetToFirstPage","values","Boolean","closeDeleteModal","reloadRecordingsWithPreservedParams","updatedPagination","then","catch","mutate","deleteRecordingMutation","class","toggleFilters","defaultFilters","baseUrl","newDateRange","ContentLoader","loadingMessage","emptyMessage","field","newSelectAll","newSelectedRecordings","mode","confirm","DeleteConfirmationModal","isOpen","onClose","onConfirm","currentUrlParams","currentSortField","currentSortDirection","updateUrl","paginationWithPage","count","BatchDeleteModal","isVisible","setIsVisible","progress","setProgress","wsClientRef","batchDeleteClientRef","onProgress","payload","updateProgress","onResult","success","showModal","batchDeleteRecordingsByHttpRequest","newProgress","prevProgress","closeModal","resolve","statusText","getProgressBarClasses","classes","width","round","cancelBatchDelete","batchDeleteRecordings","closeBatchDeleteModal","batchDeleteRecordingsByFilter","container","getElementById","render","QueryClientProvider","client","ModalProvider","Header","ToastContainer","Footer"],"mappings":"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"}