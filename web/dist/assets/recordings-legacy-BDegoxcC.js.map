{"version":3,"file":"recordings-legacy-BDegoxcC.js","sources":["../../js/components/batch-delete-modal.js","../../js/components/preact/recordings/FiltersSidebar.jsx","../../js/components/preact/recordings/ActiveFilters.jsx","../../js/components/preact/recordings/formatUtils.js","../../js/components/preact/recordings/RecordingsTable.jsx","../../js/components/preact/recordings/PaginationControls.jsx","../../js/components/preact/recordings/recordingsAPI.js","../../js/components/preact/recordings/urlUtils.js","../../js/components/preact/RecordingsView.jsx","../../js/pages/recordings-page.jsx"],"sourcesContent":["/**\n * Batch Delete Modal Component\n * Displays progress of batch delete operations with WebSocket updates\n */\n\n/**\n * Show a status message to the user\n * @param {string} message - Message to display\n * @param {number} duration - Duration in milliseconds (default: 3000)\n */\nfunction showStatusMessage(message, duration = 3000) {\n    // Check if a status message container already exists\n    let statusContainer = document.getElementById('status-message-container');\n\n    // Create container if it doesn't exist\n    if (!statusContainer) {\n        statusContainer = document.createElement('div');\n        statusContainer.id = 'status-message-container';\n        statusContainer.className = 'fixed bottom-4 left-1/2 transform -translate-x-1/2 z-50 flex flex-col items-center';\n        document.body.appendChild(statusContainer);\n    }\n\n    // Create message element\n    const messageElement = document.createElement('div');\n    messageElement.className = 'bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg mb-2 transition-all duration-300 opacity-0 transform translate-y-2';\n    messageElement.textContent = message;\n\n    // Add to container\n    statusContainer.appendChild(messageElement);\n\n    // Trigger animation to show message\n    setTimeout(() => {\n        messageElement.classList.remove('opacity-0', 'translate-y-2');\n    }, 10);\n\n    // Set timeout to remove message\n    setTimeout(() => {\n        // Trigger animation to hide message\n        messageElement.classList.add('opacity-0', 'translate-y-2');\n\n        // Remove element after animation completes\n        setTimeout(() => {\n            if (messageElement.parentNode === statusContainer) {\n                statusContainer.removeChild(messageElement);\n            }\n\n            // Remove container if no more messages\n            if (statusContainer.children.length === 0) {\n                document.body.removeChild(statusContainer);\n            }\n        }, 300);\n    }, duration);\n}\n\n/**\n * Show loading indicator on an element\n * @param {HTMLElement} element - Element to show loading on\n */\nfunction showLoading(element) {\n    if (!element) return;\n\n    // Add loading class\n    element.classList.add('loading');\n\n    // Create loading overlay if it doesn't exist\n    let loadingOverlay = element.querySelector('.loading-overlay');\n    if (!loadingOverlay) {\n        loadingOverlay = document.createElement('div');\n        loadingOverlay.className = 'loading-overlay';\n        loadingOverlay.innerHTML = '<div class=\"loading-spinner\"></div>';\n        element.appendChild(loadingOverlay);\n    }\n\n    // Show loading overlay\n    loadingOverlay.style.display = 'flex';\n}\n\n/**\n * Hide loading indicator on an element\n * @param {HTMLElement} element - Element to hide loading from\n */\nfunction hideLoading(element) {\n    if (!element) return;\n\n    // Remove loading class\n    element.classList.remove('loading');\n\n    // Hide loading overlay\n    const loadingOverlay = element.querySelector('.loading-overlay');\n    if (loadingOverlay) {\n        loadingOverlay.style.display = 'none';\n    }\n}\n\n/**\n * Initialize the batch delete modal\n */\nfunction initBatchDeleteModal() {\n    // Create modal container if it doesn't exist\n    let modalContainer = document.getElementById('batch-delete-modal-container');\n    if (!modalContainer) {\n        modalContainer = document.createElement('div');\n        modalContainer.id = 'batch-delete-modal-container';\n        document.body.appendChild(modalContainer);\n    }\n\n    // Create modal HTML\n    modalContainer.innerHTML = `\n        <div id=\"batch-delete-modal\" class=\"modal hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center z-50\">\n            <div class=\"modal-content relative bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md mx-auto p-6 w-full\">\n                <div class=\"modal-header flex justify-between items-center mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">\n                    <h3 id=\"batch-delete-modal-title\" class=\"text-xl font-bold text-gray-900 dark:text-white\">Batch Delete Progress</h3>\n                    <button id=\"batch-delete-close-btn\" class=\"close text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 text-2xl font-bold\">&times;</button>\n                </div>\n                <div class=\"modal-body\">\n                    <div id=\"batch-delete-status\" class=\"mb-4 text-gray-700 dark:text-gray-300\">\n                        Preparing to delete recordings...\n                    </div>\n                    <div class=\"progress-container bg-gray-200 dark:bg-gray-700 rounded-full h-4 mb-4\">\n                        <div id=\"batch-delete-progress-bar\" class=\"bg-green-500 h-4 rounded-full text-center text-xs text-white\" style=\"width: 0%\"></div>\n                    </div>\n                    <div class=\"flex justify-between text-sm text-gray-600 dark:text-gray-400 mb-6\">\n                        <div id=\"batch-delete-count\">0 / 0</div>\n                        <div id=\"batch-delete-percentage\">0%</div>\n                    </div>\n                    <div id=\"batch-delete-details\" class=\"mb-4\">\n                        <div class=\"flex justify-between mb-2\">\n                            <span class=\"text-gray-700 dark:text-gray-300\">Succeeded:</span>\n                            <span id=\"batch-delete-succeeded\" class=\"font-bold text-green-600 dark:text-green-400\">0</span>\n                        </div>\n                        <div class=\"flex justify-between\">\n                            <span class=\"text-gray-700 dark:text-gray-300\">Failed:</span>\n                            <span id=\"batch-delete-failed\" class=\"font-bold text-red-600 dark:text-red-400\">0</span>\n                        </div>\n                    </div>\n                    <div id=\"batch-delete-message\" class=\"text-sm italic text-gray-600 dark:text-gray-400 mb-4\"></div>\n                </div>\n                <div class=\"modal-footer flex justify-end pt-2 border-t border-gray-200 dark:border-gray-700\">\n                    <button id=\"batch-delete-done-btn\" class=\"btn btn-primary hidden\">Done</button>\n                    <button id=\"batch-delete-cancel-btn\" class=\"btn btn-secondary\">Cancel</button>\n                </div>\n            </div>\n        </div>\n    `;\n\n    // Get modal elements\n    const modal = document.getElementById('batch-delete-modal');\n    const closeBtn = document.getElementById('batch-delete-close-btn');\n    const doneBtn = document.getElementById('batch-delete-done-btn');\n    const cancelBtn = document.getElementById('batch-delete-cancel-btn');\n\n    // Setup close button event handlers\n    if (closeBtn) {\n        closeBtn.addEventListener('click', closeBatchDeleteModal);\n    }\n\n    if (doneBtn) {\n        doneBtn.addEventListener('click', closeBatchDeleteModal);\n    }\n\n    if (cancelBtn) {\n        cancelBtn.addEventListener('click', cancelBatchDelete);\n    }\n\n    // Close on click outside\n    window.addEventListener('click', (event) => {\n        if (event.target === modal) {\n            closeBatchDeleteModal();\n        }\n    });\n}\n\n/**\n * Show the batch delete modal\n */\nfunction showBatchDeleteModal() {\n    const modal = document.getElementById('batch-delete-modal');\n    if (!modal) {\n        initBatchDeleteModal();\n    }\n\n    // Reset modal state\n    resetBatchDeleteModal();\n\n    // Show modal\n    modal.classList.remove('hidden');\n}\n\n/**\n * Close the batch delete modal\n */\nfunction closeBatchDeleteModal() {\n    const modal = document.getElementById('batch-delete-modal');\n    if (modal) {\n        modal.classList.add('hidden');\n    }\n}\n\n/**\n * Reset the batch delete modal state\n */\nfunction resetBatchDeleteModal() {\n    // Reset progress bar\n    const progressBar = document.getElementById('batch-delete-progress-bar');\n    if (progressBar) {\n        progressBar.style.width = '0%';\n    }\n\n    // Reset status text\n    const status = document.getElementById('batch-delete-status');\n    if (status) {\n        status.textContent = 'Preparing to delete recordings...';\n    }\n\n    // Reset count and percentage\n    const count = document.getElementById('batch-delete-count');\n    if (count) {\n        count.textContent = '0 / 0';\n    }\n\n    const percentage = document.getElementById('batch-delete-percentage');\n    if (percentage) {\n        percentage.textContent = '0%';\n    }\n\n    // Reset success/fail counts\n    const succeeded = document.getElementById('batch-delete-succeeded');\n    if (succeeded) {\n        succeeded.textContent = '0';\n    }\n\n    const failed = document.getElementById('batch-delete-failed');\n    if (failed) {\n        failed.textContent = '0';\n    }\n\n    // Reset message\n    const message = document.getElementById('batch-delete-message');\n    if (message) {\n        message.textContent = '';\n    }\n\n    // Hide done button, show cancel button\n    const doneBtn = document.getElementById('batch-delete-done-btn');\n    if (doneBtn) {\n        doneBtn.classList.add('hidden');\n    }\n\n    const cancelBtn = document.getElementById('batch-delete-cancel-btn');\n    if (cancelBtn) {\n        cancelBtn.classList.remove('hidden');\n    }\n}\n\n/**\n * Update batch delete progress\n *\n * @param {Object} progress Progress data from WebSocket\n */\nwindow.updateBatchDeleteProgress = function(progress) {\n    console.log('Updating batch delete progress UI:', progress);\n\n    // Make sure the modal is visible\n    showBatchDeleteModal();\n\n    // Update progress bar\n    const progressBar = document.getElementById('batch-delete-progress-bar');\n    if (progressBar) {\n        console.log(`Updating progress bar: current=${progress.current}, total=${progress.total}`);\n\n        if (progress.total > 0) {\n            // We have a known total, show percentage\n            const percent = Math.round((progress.current / progress.total) * 100);\n            console.log(`Setting progress bar width to ${percent}%`);\n            progressBar.style.width = `${percent}%`;\n            progressBar.classList.remove('animate-pulse');\n\n            // Force a reflow to ensure the browser updates the UI\n            void progressBar.offsetWidth;\n        } else if (progress.current > 0) {\n            // We don't know the total but have processed some items\n            // Show an indeterminate but growing progress bar\n            const estimatedPercent = Math.min(90, progress.current / 10);\n            console.log(`Setting progress bar width to ${estimatedPercent}% (estimated)`);\n            progressBar.style.width = `${estimatedPercent}%`;\n            progressBar.classList.add('animate-pulse');\n\n            // Force a reflow to ensure the browser updates the UI\n            void progressBar.offsetWidth;\n        } else if (progress.complete) {\n            // Operation is complete but we don't know the total\n            console.log('Setting progress bar to 100% (complete)');\n            progressBar.style.width = '100%';\n            progressBar.classList.remove('animate-pulse');\n\n            // Force a reflow to ensure the browser updates the UI\n            void progressBar.offsetWidth;\n        } else {\n            // Indeterminate progress\n            console.log('Setting progress bar to 50% (indeterminate)');\n            progressBar.style.width = '50%';\n            progressBar.classList.add('animate-pulse');\n\n            // Force a reflow to ensure the browser updates the UI\n            void progressBar.offsetWidth;\n        }\n\n        // If there's an error, change the color of the progress bar to red\n        if (progress.error) {\n            progressBar.classList.add('bg-red-500');\n            progressBar.classList.remove('bg-blue-500');\n        } else {\n            progressBar.classList.add('bg-blue-500');\n            progressBar.classList.remove('bg-red-500');\n        }\n    }\n\n    // Update status text\n    const status = document.getElementById('batch-delete-status');\n    if (status && progress.status) {\n        status.textContent = progress.status;\n    }\n\n    // Update count and percentage\n    const count = document.getElementById('batch-delete-count');\n    if (count) {\n        if (progress.total > 0) {\n            count.textContent = `${progress.current} / ${progress.total}`;\n        } else {\n            count.textContent = `${progress.current} / ?`;\n        }\n    }\n\n    const percentage = document.getElementById('batch-delete-percentage');\n    if (percentage) {\n        if (progress.total > 0) {\n            const percent = Math.round((progress.current / progress.total) * 100);\n            percentage.textContent = `${percent}%`;\n        } else if (progress.complete) {\n            percentage.textContent = '100%';\n        } else {\n            percentage.textContent = 'In progress';\n        }\n    }\n\n    // Update success/fail counts\n    const succeeded = document.getElementById('batch-delete-succeeded');\n    if (succeeded) {\n        succeeded.textContent = progress.succeeded || '0';\n    }\n\n    const failed = document.getElementById('batch-delete-failed');\n    if (failed) {\n        failed.textContent = progress.failed || '0';\n    }\n\n    // If complete, show done button, hide cancel button\n    if (progress.complete) {\n        const doneBtn = document.getElementById('batch-delete-done-btn');\n        if (doneBtn) {\n            doneBtn.classList.remove('hidden');\n        }\n\n        const cancelBtn = document.getElementById('batch-delete-cancel-btn');\n        if (cancelBtn) {\n            cancelBtn.classList.add('hidden');\n        }\n\n        // Update status if not already set\n        if (status && (!progress.status || progress.status === 'Preparing to delete recordings...')) {\n            status.textContent = 'Batch delete operation complete';\n        }\n\n        // Ensure progress bar shows 100%\n        if (progressBar) {\n            progressBar.style.width = '100%';\n            progressBar.classList.remove('animate-pulse');\n        }\n    }\n}\n\n// updateBatchDeleteProgress is already globally accessible\n\n/**\n * Cancel batch delete operation\n */\nfunction cancelBatchDelete() {\n    // Close modal\n    closeBatchDeleteModal();\n\n    // Show status message\n    showStatusMessage('Batch delete operation cancelled', 5000);\n}\n\n/**\n * Initialize batch delete client\n *\n * @returns {BatchDeleteRecordingsClient} Batch delete client\n */\nfunction initBatchDeleteClient() {\n    // If it doesn't exist for some reason, create it\n    if (!window.wsClient) {\n        console.log('Creating WebSocket client in batch-delete-modal.js');\n        window.wsClient = new WebSocketClient();\n    } else {\n        console.log('Using existing WebSocket client');\n    }\n\n    // Create batch delete client if it doesn't exist\n    if (!window.batchDeleteClient) {\n        console.log('Creating BatchDeleteRecordingsClient');\n        window.batchDeleteClient = new BatchDeleteRecordingsClient(window.wsClient);\n\n        // Set up event handlers\n        window.batchDeleteClient.onProgress((payload) => {\n            console.log('Batch delete progress:', payload);\n            updateBatchDeleteProgress(payload);\n        });\n\n        window.batchDeleteClient.onResult((payload) => {\n            console.log('Batch delete result:', payload);\n\n            // Make sure we have valid data\n            const total = payload.total || 0;\n            const succeeded = payload.succeeded || 0;\n            const failed = payload.failed || 0;\n\n            // Update final progress\n            updateBatchDeleteProgress({\n                current: total,\n                total: total,\n                succeeded: succeeded,\n                failed: failed,\n                status: 'Batch delete operation complete',\n                complete: true\n            });\n\n            // Show status message\n            const message = payload.success\n                ? `Successfully deleted ${succeeded} recordings`\n                : `Deleted ${succeeded} recordings with ${failed} failures`;\n\n            showStatusMessage(message, 5000);\n\n            // Reload recordings after a short delay\n            setTimeout(() => {\n                if (typeof loadRecordings === 'function') {\n                    loadRecordings();\n                }\n            }, 1000);\n        });\n\n        window.batchDeleteClient.onError((payload) => {\n            console.error('Batch delete error:', payload);\n\n            // Update progress UI to show error\n            updateBatchDeleteProgress({\n                current: 0,\n                total: 0,\n                succeeded: 0,\n                failed: 0,\n                status: `Error: ${payload.error || 'Unknown error'}`,\n                complete: true,\n                error: true\n            });\n\n            // Show error message\n            showStatusMessage(`Error: ${payload.error || 'Unknown error'}`, 5000);\n\n            // Don't close the modal immediately, let the user see the error\n            // They can close it with the Done button\n        });\n    }\n\n    return window.batchDeleteClient;\n}\n\n/**\n * Delete recordings by HTTP request (fallback when WebSocket is not available)\n *\n * @param {Object} params Delete parameters (ids or filter)\n * @returns {Promise<Object>} Promise that resolves when the operation is complete\n */\nwindow.batchDeleteRecordingsByHttpRequest = function(params) {\n    console.log('Using HTTP fallback for batch delete with params:', params);\n\n    return new Promise((resolve, reject) => {\n        // Show modal\n        showBatchDeleteModal();\n\n        // Calculate total count for progress bar\n        let totalCount = 0;\n        if (params.ids) {\n            totalCount = params.ids.length;\n        } else if (params.filter && params.totalCount) {\n            totalCount = params.totalCount;\n        }\n\n        // Update progress to show we're using HTTP\n        updateBatchDeleteProgress({\n            current: 0,\n            total: totalCount,\n            status: 'Using HTTP fallback for batch delete operation',\n            succeeded: 0,\n            failed: 0\n        });\n\n        // Send HTTP request\n        fetch('/api/recordings/batch-delete', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(params)\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error ${response.status}: ${response.statusText}`);\n            }\n            return response.json();\n        })\n        .then(result => {\n            console.log('HTTP batch delete result:', result);\n\n            // Make sure we have valid data\n            const total = result.total || totalCount || 0;\n            const succeeded = result.succeeded || 0;\n            const failed = result.failed || 0;\n\n            // Update final progress\n            updateBatchDeleteProgress({\n                current: total,\n                total: total,\n                succeeded: succeeded,\n                failed: failed,\n                status: 'Batch delete operation complete',\n                complete: true\n            });\n\n            // Show status message\n            const message = result.success\n                ? `Successfully deleted ${succeeded} recordings`\n                : `Deleted ${succeeded} recordings with ${failed} failures`;\n\n            showStatusMessage(message, 5000);\n\n            // Reload recordings after a short delay\n            setTimeout(() => {\n                if (typeof loadRecordings === 'function') {\n                    loadRecordings();\n                }\n            }, 1000);\n\n            resolve(result);\n        })\n        .catch(error => {\n            console.error('HTTP batch delete error:', error);\n\n            // Update progress UI to show error\n            updateBatchDeleteProgress({\n                current: 0,\n                total: 0,\n                succeeded: 0,\n                failed: 0,\n                status: `Error: ${error.message || 'Unknown error'}`,\n                complete: true,\n                error: true\n            });\n\n            // Show error message\n            showStatusMessage(`Error: ${error.message || 'Unknown error'}`, 5000);\n\n            // Don't close the modal immediately, let the user see the error\n            // They can close it with the Done button\n\n            reject(error);\n        });\n    });\n}\n\n/**\n * Delete multiple recordings by IDs\n *\n * @param {Array<number>} ids Recording IDs to delete\n */\nfunction batchDeleteRecordings(ids) {\n    if (!ids || ids.length === 0) {\n        showStatusMessage('No recordings selected for deletion', 5000);\n        return;\n    }\n\n    // Confirm deletion\n    if (!confirm(`Are you sure you want to delete ${ids.length} recordings?`)) {\n        return;\n    }\n\n    // Initialize batch delete client\n    const batchDeleteClient = initBatchDeleteClient();\n\n    // Show modal\n    showBatchDeleteModal();\n\n    // Start batch delete operation\n    batchDeleteClient.deleteWithProgress({ ids })\n        .catch(error => {\n            console.error('Error starting batch delete:', error);\n            showStatusMessage(`Error: ${error.message || 'Failed to start batch delete operation'}`, 5000);\n            closeBatchDeleteModal();\n        });\n}\n\n/**\n * Delete recordings by filter\n *\n * @param {Object} filter Filter to delete by\n */\nfunction batchDeleteRecordingsByFilter(filter) {\n    if (!filter) {\n        showStatusMessage('No filter specified for deletion', 5000);\n        return;\n    }\n\n    // Confirm deletion\n    if (!confirm('Are you sure you want to delete all recordings matching the current filter?')) {\n        return;\n    }\n\n    // Initialize batch delete client\n    const batchDeleteClient = initBatchDeleteClient();\n\n    // Show modal\n    showBatchDeleteModal();\n\n    // Start batch delete operation\n    batchDeleteClient.deleteWithProgress({ filter })\n        .catch(error => {\n            console.error('Error starting batch delete:', error);\n            showStatusMessage(`Error: ${error.message || 'Failed to start batch delete operation'}`, 5000);\n            closeBatchDeleteModal();\n        });\n}\n\n// Initialize batch delete modal when the page loads\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('Initializing batch delete modal');\n    initBatchDeleteModal();\n\n    // Make sure the modal is visible in the DOM\n    const modalContainer = document.getElementById('batch-delete-modal-container');\n    if (!modalContainer) {\n        console.error('Batch delete modal container not found, creating it');\n        const container = document.createElement('div');\n        container.id = 'batch-delete-modal-container';\n        document.body.appendChild(container);\n        initBatchDeleteModal();\n    }\n\n    // Make sure the global function is available\n    if (typeof window.updateBatchDeleteProgress !== 'function') {\n        console.error('updateBatchDeleteProgress function not available, setting it up');\n        window.updateBatchDeleteProgress = updateBatchDeleteProgress;\n    }\n\n    // Make sure the global function is available\n    if (typeof window.showBatchDeleteModal !== 'function') {\n        console.error('showBatchDeleteModal function not available, setting it up');\n        window.showBatchDeleteModal = showBatchDeleteModal;\n    }\n});\n\n// Make functions globally available\nwindow.showBatchDeleteModal = showBatchDeleteModal;\nwindow.updateBatchDeleteProgress = updateBatchDeleteProgress;\nwindow.initBatchDeleteModal = initBatchDeleteModal;\n","/**\n * FiltersSidebar component for RecordingsView\n */\n\nimport { h } from 'preact';\n\n/**\n * FiltersSidebar component\n * @param {Object} props Component props\n * @returns {JSX.Element} FiltersSidebar component\n */\nexport function FiltersSidebar({\n  filters,\n  setFilters,\n  pagination,\n  setPagination,\n  streams,\n  filtersVisible,\n  applyFilters,\n  resetFilters,\n  handleDateRangeChange,\n  setDefaultDateRange\n}) {\n  return (\n    <aside id=\"filters-sidebar\"\n           className={`filters-sidebar w-full md:w-64 bg-white dark:bg-gray-800 rounded-lg shadow p-4 md:sticky md:top-4 md:self-start transition-all duration-300 ${!filtersVisible ? 'hidden md:block' : ''}`}>\n      <div className=\"filter-group mb-4\">\n        <h3 className=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Date Range</h3>\n        <div className=\"filter-option mb-2\">\n          <label htmlFor=\"date-range-select\" className=\"block mb-1 text-sm font-medium\">Quick Select:</label>\n          <select id=\"date-range-select\"\n                  className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value={filters.dateRange}\n                  onChange={handleDateRangeChange}>\n            <option value=\"today\">Today</option>\n            <option value=\"yesterday\">Yesterday</option>\n            <option value=\"last7days\">Last 7 Days</option>\n            <option value=\"last30days\">Last 30 Days</option>\n            <option value=\"custom\">Custom Range</option>\n          </select>\n        </div>\n\n        <div id=\"custom-date-range\"\n             className=\"filter-option space-y-3\"\n             style={{display: filters.dateRange === 'custom' ? 'block' : 'none'}}>\n          <div className=\"space-y-1\">\n            <label htmlFor=\"start-date\" className=\"block text-sm font-medium\">Start Date:</label>\n            <input type=\"date\" id=\"start-date\"\n                   className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                   value={filters.startDate}\n                   onChange={e => setFilters(prev => ({ ...prev, startDate: e.target.value }))} />\n            <div className=\"mt-1\">\n              <label htmlFor=\"start-time\" className=\"block text-sm font-medium\">Time:</label>\n              <input type=\"time\" id=\"start-time\"\n                     className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                     value={filters.startTime}\n                     onChange={e => setFilters(prev => ({ ...prev, startTime: e.target.value }))} />\n            </div>\n          </div>\n\n          <div className=\"space-y-1\">\n            <label htmlFor=\"end-date\" className=\"block text-sm font-medium\">End Date:</label>\n            <input type=\"date\" id=\"end-date\"\n                   className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                   value={filters.endDate}\n                   onChange={e => setFilters(prev => ({ ...prev, endDate: e.target.value }))} />\n            <div className=\"mt-1\">\n              <label htmlFor=\"end-time\" className=\"block text-sm font-medium\">Time:</label>\n              <input type=\"time\" id=\"end-time\"\n                     className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                     value={filters.endTime}\n                     onChange={e => setFilters(prev => ({ ...prev, endTime: e.target.value }))} />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"filter-group mb-4\">\n        <h3 className=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Stream</h3>\n        <div className=\"filter-option\">\n          <select id=\"stream-filter\"\n                  className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value={filters.streamId}\n                  onChange={e => setFilters(prev => ({ ...prev, streamId: e.target.value }))}>\n            <option value=\"all\">All Streams</option>\n            {streams.map(stream => (\n              <option key={stream.name} value={stream.name}>{stream.name}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      <div className=\"filter-group mb-4\">\n        <h3 className=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Recording Type</h3>\n        <div className=\"filter-option\">\n          <select id=\"detection-filter\"\n                  className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value={filters.recordingType}\n                  onChange={e => setFilters(prev => ({ ...prev, recordingType: e.target.value }))}>\n            <option value=\"all\">All Recordings</option>\n            <option value=\"detection\">Detection Events Only</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"filter-group mb-4\">\n        <h3 className=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Display Options</h3>\n        <div className=\"filter-option\">\n          <label htmlFor=\"page-size\" className=\"block mb-1 text-sm font-medium\">Items per page:</label>\n          <select id=\"page-size\"\n                  className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value={pagination.pageSize}\n                  onChange={e => setPagination(prev => ({ ...prev, pageSize: parseInt(e.target.value, 10) }))}>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n            <option value=\"50\">50</option>\n            <option value=\"100\">100</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"filter-actions flex space-x-2\">\n        <button id=\"apply-filters-btn\"\n                className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n                onClick={applyFilters}>\n          Apply Filters\n        </button>\n        <button id=\"reset-filters-btn\"\n                className=\"flex-1 px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition-colors dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600\"\n                onClick={resetFilters}>\n          Reset\n        </button>\n      </div>\n    </aside>\n  );\n}\n","/**\n * ActiveFilters component for RecordingsView\n */\n\nimport { h } from 'preact';\n\n/**\n * ActiveFilters component\n * @param {Object} props Component props\n * @returns {JSX.Element} ActiveFilters component\n */\nexport function ActiveFilters({ activeFiltersDisplay, removeFilter, hasActiveFilters }) {\n  if (!hasActiveFilters) {\n    return null;\n  }\n\n  return (\n    <div id=\"active-filters\"\n         className=\"active-filters mb-4 p-3 bg-blue-50 dark:bg-blue-900/30 rounded-lg flex flex-wrap gap-2\">\n      {activeFiltersDisplay.map((filter, index) => (\n        <div key={index} className=\"filter-tag inline-flex items-center px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-200\">\n          <span>{filter.label}</span>\n          <button className=\"ml-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 focus:outline-none\"\n                  onClick={() => removeFilter(filter.key)}>\n            ×\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n}\n","/**\n * Formatting utility functions for RecordingsView\n */\n\nexport const formatUtils = {\n  /**\n   * Format date time\n   * @param {string} isoString ISO date string\n   * @returns {string} Formatted date time\n   */\n  formatDateTime: (isoString) => {\n    if (!isoString) return '';\n    \n    const date = new Date(isoString);\n    return date.toLocaleString();\n  },\n  \n  /**\n   * Format duration\n   * @param {number} seconds Duration in seconds\n   * @returns {string} Formatted duration\n   */\n  formatDuration: (seconds) => {\n    if (!seconds) return '00:00:00';\n    \n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = Math.floor(seconds % 60);\n    \n    return [\n      hours.toString().padStart(2, '0'),\n      minutes.toString().padStart(2, '0'),\n      secs.toString().padStart(2, '0')\n    ].join(':');\n  },\n  \n  /**\n   * Format file size\n   * @param {number} bytes Size in bytes\n   * @returns {string} Formatted file size\n   */\n  formatFileSize: (bytes) => {\n    if (!bytes) return '0 B';\n    \n    const units = ['B', 'KB', 'MB', 'GB', 'TB'];\n    let i = 0;\n    let size = bytes;\n    \n    while (size >= 1024 && i < units.length - 1) {\n      size /= 1024;\n      i++;\n    }\n    \n    return `${size.toFixed(1)} ${units[i]}`;\n  }\n};\n","/**\n * RecordingsTable component for RecordingsView\n */\n\nimport { h } from 'preact';\nimport { formatUtils } from './formatUtils.js';\n\n/**\n * RecordingsTable component\n * @param {Object} props Component props\n * @returns {JSX.Element} RecordingsTable component\n */\nexport function RecordingsTable({\n  recordings,\n  sortField,\n  sortDirection,\n  sortBy,\n  selectedRecordings,\n  toggleRecordingSelection,\n  selectAll,\n  toggleSelectAll,\n  getSelectedCount,\n  openDeleteModal,\n  playRecording,\n  downloadRecording,\n  deleteRecording,\n  recordingsTableBodyRef,\n  pagination\n}) {\n  return (\n    <div className=\"recordings-container bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden w-full\">\n      <div className=\"batch-actions p-3 border-b border-gray-200 dark:border-gray-700 flex flex-wrap gap-2 items-center\">\n        <div className=\"selected-count text-sm text-gray-600 dark:text-gray-400 mr-2\">\n          {getSelectedCount() > 0 ?\n            `${getSelectedCount()} recording${getSelectedCount() !== 1 ? 's' : ''} selected` :\n            'No recordings selected'}\n        </div>\n        <button\n          className=\"px-3 py-1.5 bg-red-600 text-white rounded hover:bg-red-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          disabled={getSelectedCount() === 0}\n          onClick={() => openDeleteModal('selected')}>\n          Delete Selected\n        </button>\n        <button\n          className=\"px-3 py-1.5 bg-red-600 text-white rounded hover:bg-red-700 transition-colors\"\n          onClick={() => openDeleteModal('all')}>\n          Delete All Filtered\n        </button>\n      </div>\n      <div className=\"overflow-x-auto\">\n        <table id=\"recordings-table\" className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n          <thead className=\"bg-gray-50 dark:bg-gray-700\">\n            <tr>\n              <th className=\"w-10 px-4 py-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectAll}\n                  onChange={toggleSelectAll}\n                  className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"\n                />\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer\"\n                  onClick={() => sortBy('stream_name')}>\n                <div className=\"flex items-center\">\n                  Stream\n                  {sortField === 'stream_name' && (\n                    <span className=\"sort-icon ml-1\">{sortDirection === 'asc' ? '▲' : '▼'}</span>\n                  )}\n                </div>\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer\"\n                  onClick={() => sortBy('start_time')}>\n                <div className=\"flex items-center\">\n                  Start Time\n                  {sortField === 'start_time' && (\n                    <span className=\"sort-icon ml-1\">{sortDirection === 'asc' ? '▲' : '▼'}</span>\n                  )}\n                </div>\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                Duration\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer\"\n                  onClick={() => sortBy('size_bytes')}>\n                <div className=\"flex items-center\">\n                  Size\n                  {sortField === 'size_bytes' && (\n                    <span className=\"sort-icon ml-1\">{sortDirection === 'asc' ? '▲' : '▼'}</span>\n                  )}\n                </div>\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                Detections\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                Actions\n              </th>\n            </tr>\n          </thead>\n          <tbody ref={recordingsTableBodyRef} className=\"bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700\">\n            {recordings.length === 0 ? (\n              <tr>\n                <td colSpan=\"6\" className=\"px-6 py-4 text-center text-gray-500 dark:text-gray-400\">\n                  {pagination.totalItems === 0 ? 'No recordings found' : 'Loading recordings...'}\n                </td>\n              </tr>\n            ) : recordings.map(recording => (\n              <tr key={recording.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                <td className=\"px-4 py-4 whitespace-nowrap\">\n                  <input\n                    type=\"checkbox\"\n                    checked={!!selectedRecordings[recording.id]}\n                    onChange={() => toggleRecordingSelection(recording.id)}\n                    className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"\n                  />\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">{recording.stream || ''}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">{formatUtils.formatDateTime(recording.start_time)}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">{formatUtils.formatDuration(recording.duration)}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">{recording.size || ''}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  {recording.has_detections ? (\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100\">\n                      <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M10 12a2 2 0 100-4 2 2 0 000 4z\"></path>\n                        <path fillRule=\"evenodd\" d=\"M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z\" clipRule=\"evenodd\"></path>\n                      </svg>\n                      Yes\n                    </span>\n                  ) : ''}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"flex space-x-2\">\n                    <button className=\"p-1 rounded-full text-blue-600 hover:bg-blue-100 dark:text-blue-400 dark:hover:bg-blue-900 focus:outline-none\"\n                            onClick={() => playRecording(recording)}\n                            title=\"Play\">\n                      <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                    <button className=\"p-1 rounded-full text-green-600 hover:bg-green-100 dark:text-green-400 dark:hover:bg-green-900 focus:outline-none\"\n                            onClick={() => downloadRecording(recording)}\n                            title=\"Download\">\n                      <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clipRule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                    <button className=\"p-1 rounded-full text-red-600 hover:bg-red-100 dark:text-red-400 dark:hover:bg-red-900 focus:outline-none\"\n                            onClick={() => deleteRecording(recording)}\n                            title=\"Delete\">\n                      <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","/**\n * PaginationControls component for RecordingsView\n */\n\nimport { h } from 'preact';\n\n/**\n * PaginationControls component\n * @param {Object} props Component props\n * @returns {JSX.Element} PaginationControls component\n */\nexport function PaginationControls({ pagination, goToPage }) {\n  return (\n    <div className=\"pagination-controls flex flex-col sm:flex-row justify-between items-center p-4 border-t border-gray-200 dark:border-gray-700\">\n      <div className=\"pagination-info text-sm text-gray-600 dark:text-gray-400 mb-2 sm:mb-0\">\n        Showing <span id=\"pagination-showing\">{pagination.startItem}-{pagination.endItem}</span> of <span id=\"pagination-total\">{pagination.totalItems}</span> recordings\n      </div>\n      <div className=\"pagination-buttons flex items-center space-x-1\">\n        <button id=\"pagination-first\"\n                className=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"First Page\"\n                onClick={() => goToPage(1)}\n                disabled={pagination.currentPage === 1}>\n          «\n        </button>\n        <button id=\"pagination-prev\"\n                className=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"Previous Page\"\n                onClick={() => goToPage(pagination.currentPage - 1)}\n                disabled={pagination.currentPage === 1}>\n          ‹\n        </button>\n        <span id=\"pagination-current\" className=\"px-2 text-sm text-gray-700 dark:text-gray-300\">\n          Page {pagination.currentPage} of {pagination.totalPages}\n        </span>\n        <button id=\"pagination-next\"\n                className=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"Next Page\"\n                onClick={() => goToPage(pagination.currentPage + 1)}\n                disabled={pagination.currentPage === pagination.totalPages}>\n          ›\n        </button>\n        <button id=\"pagination-last\"\n                className=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"Last Page\"\n                onClick={() => goToPage(pagination.totalPages)}\n                disabled={pagination.currentPage === pagination.totalPages}>\n          »\n        </button>\n      </div>\n    </div>\n  );\n}\n","/**\n * API functions for RecordingsView\n */\n\nimport { showStatusMessage } from '../UI.js';\nimport { formatUtils } from './formatUtils.js';\nimport { fetchJSON, enhancedFetch } from '../../../fetch-utils.js';\nimport {\n  useQuery,\n  useMutation,\n  useQueryClient,\n  usePostMutation,\n  useDeleteMutation,\n  invalidateQueries\n} from '../../../query-client.js';\n\n/**\n * RecordingsAPI - Handles all API calls related to recordings\n */\nexport const recordingsAPI = {\n  /**\n   * Custom hooks for preact-query\n   */\n  hooks: {\n    /**\n     * Hook to fetch streams list\n     * @returns {Object} Query result\n     */\n    useStreams: () => {\n      return useQuery('streams', '/api/streams', {\n        timeout: 15000, // 15 second timeout\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n    },\n\n    /**\n     * Hook to fetch recordings with filters\n     * @param {Object} filters Filter settings\n     * @param {Object} pagination Pagination settings\n     * @param {string} sortField Sort field\n     * @param {string} sortDirection Sort direction\n     * @returns {Object} Query result\n     */\n    useRecordings: (filters, pagination, sortField, sortDirection) => {\n      // Build query parameters\n      const params = new URLSearchParams();\n      params.append('page', pagination.currentPage);\n      params.append('limit', pagination.pageSize);\n      params.append('sort', sortField);\n      params.append('order', sortDirection);\n\n      // Add date range filters\n      if (filters.dateRange === 'custom') {\n        params.append('start', `${filters.startDate}T${filters.startTime}:00`);\n        params.append('end', `${filters.endDate}T${filters.endTime}:00`);\n      } else {\n        // Convert predefined range to actual dates\n        const { start, end } = recordingsAPI.getDateRangeFromPreset(filters.dateRange);\n        params.append('start', start);\n        params.append('end', end);\n      }\n\n      // Add stream filter\n      if (filters.streamId !== 'all') {\n        params.append('stream', filters.streamId);\n      }\n\n      // Add recording type filter\n      if (filters.recordingType === 'detection') {\n        params.append('detection', '1');\n      }\n\n      // Create query key that includes all filter parameters\n      const queryKey = ['recordings', filters, pagination, sortField, sortDirection];\n\n      return useQuery(\n        queryKey,\n        `/api/recordings?${params.toString()}`,\n        {\n          timeout: 30000, // 30 second timeout for potentially large data\n          retries: 2,     // Retry twice\n          retryDelay: 1000 // 1 second between retries\n        },\n        // No special handling needed - we rely on the backend API for detection information\n      );\n    },\n\n    // useRecordingDetections hook removed - we rely on the backend API for detection information\n\n    /**\n     * Hook to delete a recording\n     * @returns {Object} Mutation result\n     */\n    useDeleteRecording: () => {\n      const queryClient = useQueryClient();\n\n      return useMutation({\n        mutationFn: async (recordingId) => {\n          const url = `/api/recordings/${recordingId}`;\n          return await fetchJSON(url, {\n            method: 'DELETE',\n            timeout: 15000, // 15 second timeout\n            retries: 1,     // Retry once\n            retryDelay: 1000 // 1 second between retries\n          });\n        },\n        onSuccess: () => {\n          // Invalidate recordings queries to refresh the list\n          queryClient.invalidateQueries({ queryKey: ['recordings'] });\n          showStatusMessage('Recording deleted successfully');\n        },\n        onError: (error) => {\n          console.error('Error deleting recording:', error);\n          showStatusMessage('Error deleting recording: ' + error.message);\n        }\n      });\n    },\n\n    /**\n     * Hook to delete multiple recordings\n     * @returns {Object} Mutation result\n     */\n    useBatchDeleteRecordings: () => {\n      const queryClient = useQueryClient();\n\n      return usePostMutation(\n        '/api/recordings/batch-delete',\n        {\n          timeout: 60000, // 60 second timeout for batch operations\n          retries: 1,     // Retry once\n          retryDelay: 2000 // 2 seconds between retries\n        },\n        {\n          onSuccess: (result) => {\n            // Invalidate recordings queries to refresh the list\n            queryClient.invalidateQueries({ queryKey: ['recordings'] });\n\n            const successCount = result.succeeded;\n            const errorCount = result.failed;\n\n            // Show status message\n            if (successCount > 0 && errorCount === 0) {\n              showStatusMessage(`Successfully deleted ${successCount} recording${successCount !== 1 ? 's' : ''}`);\n            } else if (successCount > 0 && errorCount > 0) {\n              showStatusMessage(`Deleted ${successCount} recording${successCount !== 1 ? 's' : ''}, but failed to delete ${errorCount}`);\n            } else {\n              showStatusMessage(`Failed to delete ${errorCount} recording${errorCount !== 1 ? 's' : ''}`);\n            }\n          },\n          onError: (error) => {\n            console.error('Error in batch delete operation:', error);\n            showStatusMessage('Error in batch delete operation: ' + error.message);\n          }\n        }\n      );\n    }\n  },\n  /**\n   * Load streams from API\n   * @returns {Promise<Array>} Array of streams\n   */\n  loadStreams: async () => {\n    try {\n      const data = await fetchJSON('/api/streams', {\n        timeout: 15000, // 15 second timeout\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      return data || [];\n    } catch (error) {\n      console.error('Error loading streams for filter:', error);\n      showStatusMessage('Error loading streams: ' + error.message);\n      return [];\n    }\n  },\n\n  /**\n   * Get date range from preset\n   * @param {string} preset Preset name\n   * @returns {Object} Start and end dates\n   */\n  getDateRangeFromPreset: (preset) => {\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);\n    const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);\n\n    let start, end;\n\n    switch (preset) {\n      case 'today':\n        start = todayStart.toISOString();\n        end = today.toISOString();\n        break;\n      case 'yesterday':\n        const yesterday = new Date(todayStart);\n        yesterday.setDate(yesterday.getDate() - 1);\n        const yesterdayEnd = new Date(yesterday);\n        yesterdayEnd.setHours(23, 59, 59);\n        start = yesterday.toISOString();\n        end = yesterdayEnd.toISOString();\n        break;\n      case 'last7days':\n        const sevenDaysAgo = new Date(todayStart);\n        sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n        start = sevenDaysAgo.toISOString();\n        end = today.toISOString();\n        break;\n      case 'last30days':\n        const thirtyDaysAgo = new Date(todayStart);\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        start = thirtyDaysAgo.toISOString();\n        end = today.toISOString();\n        break;\n      default:\n        // Default to last 7 days\n        const defaultStart = new Date(todayStart);\n        defaultStart.setDate(defaultStart.getDate() - 7);\n        start = defaultStart.toISOString();\n        end = today.toISOString();\n    }\n\n    return { start, end };\n  },\n\n  /**\n   * Load recordings\n   * @param {Object} filters Filter settings\n   * @param {Object} pagination Pagination settings\n   * @param {string} sortField Sort field\n   * @param {string} sortDirection Sort direction\n   * @returns {Promise<Object>} Recordings data and pagination info\n   */\n  loadRecordings: async (filters, pagination, sortField, sortDirection) => {\n    try {\n      // Build query parameters\n      const params = new URLSearchParams();\n      params.append('page', pagination.currentPage);\n      params.append('limit', pagination.pageSize);\n      params.append('sort', sortField);\n      params.append('order', sortDirection);\n\n      // Add date range filters\n      if (filters.dateRange === 'custom') {\n        params.append('start', `${filters.startDate}T${filters.startTime}:00`);\n        params.append('end', `${filters.endDate}T${filters.endTime}:00`);\n      } else {\n        // Convert predefined range to actual dates\n        const { start, end } = recordingsAPI.getDateRangeFromPreset(filters.dateRange);\n        params.append('start', start);\n        params.append('end', end);\n      }\n\n      // Add stream filter\n      if (filters.streamId !== 'all') {\n        params.append('stream', filters.streamId);\n      }\n\n      // Add recording type filter\n      if (filters.recordingType === 'detection') {\n        params.append('detection', '1');\n      }\n\n      // Log the API request\n      console.log('API Request:', `/api/recordings?${params.toString()}`);\n\n      // Fetch recordings with enhanced fetch\n      const data = await fetchJSON(`/api/recordings?${params.toString()}`, {\n        timeout: 30000, // 30 second timeout for potentially large data\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      console.log('Recordings data received:', data);\n\n      // Set has_detections to false by default instead of making API calls\n      // This prevents unnecessary detection API calls on the recordings page\n      if (data.recordings && data.recordings.length > 0) {\n        // Process recordings in batches to avoid too many parallel requests\n        const batchSize = 5;\n        for (let i = 0; i < data.recordings.length; i += batchSize) {\n          const batch = data.recordings.slice(i, i + batchSize);\n          await Promise.all(batch.map(async (recording) => {\n            try {\n              recording.has_detections = await recordingsAPI.checkRecordingHasDetections(recording);\n            } catch (error) {\n              console.error(`Error checking detections for recording ${recording.id}:`, error);\n              recording.has_detections = false;\n            }\n          }));\n        }\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Error loading recordings:', error);\n      showStatusMessage('Error loading recordings: ' + error.message);\n      throw error;\n    }\n  },\n\n  /**\n   * Delete a single recording\n   * @param {Object} recording Recording to delete\n   * @returns {Promise<boolean>} Success status\n   */\n  deleteRecording: async (recording) => {\n    try {\n      await enhancedFetch(`/api/recordings/${recording.id}`, {\n        method: 'DELETE',\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      showStatusMessage('Recording deleted successfully');\n      return true;\n    } catch (error) {\n      console.error('Error deleting recording:', error);\n      showStatusMessage('Error deleting recording: ' + error.message);\n      return false;\n    }\n  },\n\n  /**\n   * Delete selected recordings\n   * @param {Object} selectedRecordings Object with recording IDs as keys\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteSelectedRecordings: async (selectedRecordings) => {\n    const selectedIds = Object.entries(selectedRecordings)\n      .filter(([_, isSelected]) => isSelected)\n      .map(([id, _]) => parseInt(id, 10));\n\n    if (selectedIds.length === 0) {\n      showStatusMessage('No recordings selected');\n      return { succeeded: 0, failed: 0 };\n    }\n\n    try {\n      // Check if WebSocket client is available\n      if (window.wsClient) {\n        console.log('Using WebSocket for batch delete operation');\n\n        // Connect the WebSocket client if not already connected\n        if (!window.wsClient.isConnected()) {\n          console.log('WebSocket not connected, connecting now...');\n          window.wsClient.connect();\n        }\n\n        // Initialize batch delete client if needed\n        if (!window.batchDeleteClient) {\n          if (typeof BatchDeleteRecordingsClient !== 'undefined') {\n            console.log('Creating new BatchDeleteRecordingsClient');\n            window.batchDeleteClient = new BatchDeleteRecordingsClient(window.wsClient);\n          } else {\n            console.warn('BatchDeleteRecordingsClient not available, falling back to HTTP');\n            return recordingsAPI.deleteSelectedRecordingsHttp(selectedIds);\n          }\n        }\n\n        // Show batch delete modal\n        if (typeof showBatchDeleteModal === 'function') {\n          showBatchDeleteModal();\n        }\n\n        // Use WebSocket for batch delete\n        // The client ID will be obtained by the batch delete client\n        return await window.batchDeleteClient.deleteWithProgress({ ids: selectedIds });\n      } else {\n        console.log('WebSocket client not available, using HTTP for batch delete');\n        return recordingsAPI.deleteSelectedRecordingsHttp(selectedIds);\n      }\n    } catch (error) {\n      console.error('Error in batch delete operation:', error);\n      showStatusMessage('Error in batch delete operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Delete selected recordings using HTTP (fallback)\n   * @param {Array<number>} selectedIds Array of recording IDs\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteSelectedRecordingsHttp: async (selectedIds) => {\n    try {\n      // Use the batch delete endpoint with enhanced fetch\n      const response = await enhancedFetch('/api/recordings/batch-delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ids: selectedIds\n        }),\n        timeout: 60000, // 60 second timeout for batch operations\n        retries: 1,     // Retry once\n        retryDelay: 2000 // 2 seconds between retries\n      });\n\n      const result = await response.json();\n      const successCount = result.succeeded;\n      const errorCount = result.failed;\n\n      // Show status message\n      if (successCount > 0 && errorCount === 0) {\n        showStatusMessage(`Successfully deleted ${successCount} recording${successCount !== 1 ? 's' : ''}`);\n      } else if (successCount > 0 && errorCount > 0) {\n        showStatusMessage(`Deleted ${successCount} recording${successCount !== 1 ? 's' : ''}, but failed to delete ${errorCount}`);\n      } else {\n        showStatusMessage(`Failed to delete ${errorCount} recording${errorCount !== 1 ? 's' : ''}`);\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Error in HTTP batch delete operation:', error);\n      showStatusMessage('Error in batch delete operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Delete all recordings matching current filter\n   * @param {Object} filters Current filters\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteAllFilteredRecordings: async (filters) => {\n    try {\n      // Create filter object\n      const filter = {};\n\n      // Add date range filters\n      if (filters.dateRange === 'custom') {\n        filter.start = `${filters.startDate}T${filters.startTime}:00`;\n        filter.end = `${filters.endDate}T${filters.endTime}:00`;\n      } else {\n        // Convert predefined range to actual dates\n        const { start, end } = recordingsAPI.getDateRangeFromPreset(filters.dateRange);\n        filter.start = start;\n        filter.end = end;\n      }\n\n      // Add stream filter\n      if (filters.streamId !== 'all') {\n        filter.stream_name = filters.streamId; // Changed from 'stream' to 'stream_name' to match API expectations\n      }\n\n      // Add recording type filter\n      if (filters.recordingType === 'detection') {\n        filter.detection = 1;\n      }\n\n      console.log('Deleting with filter:', filter);\n\n      // Show batch delete modal with indeterminate progress initially\n      if (typeof showBatchDeleteModal === 'function') {\n        showBatchDeleteModal();\n\n        // Update the progress UI with an indeterminate state\n        if (typeof window.updateBatchDeleteProgress === 'function') {\n          window.updateBatchDeleteProgress({\n            current: 0,\n            total: 0, // We don't know the total yet\n            succeeded: 0,\n            failed: 0,\n            status: `Preparing to delete recordings matching filter...`,\n            complete: false\n          });\n        }\n      }\n\n      // Get the total count from the current page's filter\n      // This will help us set a more accurate progress indicator\n      let totalCount = 0;\n      try {\n        // Build query parameters for the API request\n        const params = new URLSearchParams();\n\n        // Add date range parameters\n        if (filter.start) {\n          params.append('start', filter.start);\n        }\n\n        if (filter.end) {\n          params.append('end', filter.end);\n        }\n\n        // Add stream filter\n        if (filter.stream_name) {\n          params.append('stream', filter.stream_name);\n        }\n\n        // Add detection filter\n        if (filter.detection) {\n          params.append('detection', '1');\n        }\n\n        // Set page size to 1 to minimize data transfer, we just need the total count\n        params.append('page', '1');\n        params.append('limit', '1');\n\n        console.log('Getting total count with params:', params.toString());\n\n        // Fetch recordings to get pagination info\n        const response = await fetch(`/api/recordings?${params.toString()}`);\n        if (response.ok) {\n          const data = await response.json();\n          if (data && data.pagination && data.pagination.total) {\n            totalCount = data.pagination.total;\n            console.log(`Found ${totalCount} recordings matching filter`);\n\n            // Update the progress UI with the total count\n            if (typeof window.updateBatchDeleteProgress === 'function') {\n              window.updateBatchDeleteProgress({\n                current: 0,\n                total: totalCount,\n                succeeded: 0,\n                failed: 0,\n                status: `Found ${totalCount} recordings matching filter. Starting deletion...`,\n                complete: false\n              });\n            }\n          }\n        }\n      } catch (countError) {\n        console.warn('Error getting recording count:', countError);\n        // Continue anyway, we'll just show an indeterminate progress\n      }\n\n      // Set up an error handler in case the operation fails\n      const handleOperationError = (error) => {\n        console.error('Error in delete all operation:', error);\n        showStatusMessage('Error in delete all operation: ' + error.message);\n\n        // Update the progress UI to show the error\n        if (typeof window.updateBatchDeleteProgress === 'function') {\n          window.updateBatchDeleteProgress({\n            current: 0,\n            total: 0,\n            succeeded: 0,\n            failed: 0,\n            status: `Error: ${error.message}`,\n            complete: true\n          });\n        }\n\n        return { succeeded: 0, failed: 0 };\n      };\n\n        // Check if WebSocket client is available\n        if (window.wsClient) {\n          console.log('Using WebSocket for batch delete with filter');\n\n          // Connect the WebSocket client if not already connected\n          if (!window.wsClient.isConnected()) {\n            console.log('WebSocket not connected, connecting now...');\n            window.wsClient.connect();\n          }\n\n          // Initialize batch delete client if needed\n          if (!window.batchDeleteClient) {\n            if (typeof BatchDeleteRecordingsClient !== 'undefined') {\n              console.log('Creating new BatchDeleteRecordingsClient for filtered delete');\n              window.batchDeleteClient = new BatchDeleteRecordingsClient(window.wsClient);\n            } else {\n              console.warn('BatchDeleteRecordingsClient not available, falling back to HTTP');\n              return recordingsAPI.deleteAllFilteredRecordingsHttp(filter);\n            }\n          }\n\n          // Log the client ID being used\n          console.log('Using WebSocket client ID for filtered batch delete:', window.wsClient.getClientId());\n\n          // Set up a timeout to handle server crashes\n          const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => {\n              reject(new Error('Operation timed out or server crashed. Some recordings may have been deleted.'));\n            }, 60000); // 60 second timeout\n          });\n\n          try {\n            // Race between the delete operation and the timeout\n            // Pass the total count to the WebSocket client\n            const result = await Promise.race([\n              window.batchDeleteClient.deleteWithProgress({\n                filter,\n                totalCount // Pass the total count to the WebSocket client\n              }),\n              timeoutPromise\n            ]);\n\n            return result;\n          } catch (wsError) {\n            console.error('WebSocket error or timeout:', wsError);\n\n            // If we got a timeout or server crash, reload the recordings to show what was deleted\n            setTimeout(() => {\n              if (typeof loadRecordings === 'function') {\n                loadRecordings();\n              }\n            }, 1000);\n\n            return handleOperationError(wsError);\n          }\n        } else {\n          console.log('WebSocket client not available, using HTTP for batch delete with filter');\n          return recordingsAPI.deleteAllFilteredRecordingsHttp(filter);\n        }\n    } catch (error) {\n      console.error('Error in delete all operation:', error);\n      showStatusMessage('Error in delete all operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Delete all recordings matching filter using HTTP (fallback)\n   * @param {Object} filter Filter object\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteAllFilteredRecordingsHttp: async (filter) => {\n    try {\n      // Use the batch delete endpoint with filter and enhanced fetch\n      const deleteResponse = await enhancedFetch('/api/recordings/batch-delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          filter: filter\n        }),\n        timeout: 120000, // 120 second timeout for potentially large batch operations\n        retries: 1,      // Retry once\n        retryDelay: 3000 // 3 seconds between retries\n      });\n\n      const result = await deleteResponse.json();\n      const successCount = result.succeeded;\n      const errorCount = result.failed;\n\n      // Show status message\n      if (successCount > 0 && errorCount === 0) {\n        showStatusMessage(`Successfully deleted ${successCount} recording${successCount !== 1 ? 's' : ''}`);\n      } else if (successCount > 0 && errorCount > 0) {\n        showStatusMessage(`Deleted ${successCount} recording${successCount !== 1 ? 's' : ''}, but failed to delete ${errorCount}`);\n      } else {\n        showStatusMessage(`Failed to delete ${errorCount} recording${errorCount !== 1 ? 's' : ''}`);\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Error in HTTP delete all operation:', error);\n      showStatusMessage('Error in delete all operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Check if a recording has associated detections\n   * @param {Object} recording Recording to check\n   * @returns {Promise<boolean>} True if the recording has detections, false otherwise\n   */\n  checkRecordingHasDetections: async (recording) => {\n    if (!recording || !recording.id || !recording.stream || !recording.start_time || !recording.end_time) {\n      return false;\n    }\n\n    try {\n      // Convert timestamps to seconds\n      const startTime = Math.floor(new Date(recording.start_time).getTime() / 1000);\n      const endTime = Math.floor(new Date(recording.end_time).getTime() / 1000);\n\n      // Query the detections API to check if there are any detections in this time range\n      const params = new URLSearchParams({\n        start: startTime,\n        end: endTime\n      });\n\n      const data = await fetchJSON(`/api/detection/results/${recording.stream}?${params.toString()}`, {\n        timeout: 10000, // 10 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 500 // 0.5 second between retries\n      });\n\n      return data.detections && data.detections.length > 0;\n    } catch (error) {\n      console.error('Error checking detections:', error);\n      return false;\n    }\n  },\n\n  /**\n   * Get detections for a recording\n   * @param {Object} recording Recording to get detections for\n   * @returns {Promise<Array>} Array of detections\n   */\n  getRecordingDetections: async (recording) => {\n    if (!recording || !recording.id || !recording.stream || !recording.start_time || !recording.end_time) {\n      return [];\n    }\n\n    try {\n      // Convert timestamps to seconds\n      const startTime = Math.floor(new Date(recording.start_time).getTime() / 1000);\n      const endTime = Math.floor(new Date(recording.end_time).getTime() / 1000);\n\n      // Query the detections API to get detections in this time range\n      const params = new URLSearchParams({\n        start: startTime,\n        end: endTime\n      });\n\n      const data = await fetchJSON(`/api/detection/results/${recording.stream}?${params.toString()}`, {\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      return data.detections || [];\n    } catch (error) {\n      console.error('Error getting detections:', error);\n      return [];\n    }\n  },\n\n  /**\n   * Play recording\n   * @param {Object} recording Recording to play\n   */\n  playRecording: (recording, showVideoModal) => {\n    console.log('Play recording clicked:', recording);\n\n    // Check if recording has an id property\n    if (!recording.id) {\n      console.error('Recording has no id property:', recording);\n      showStatusMessage('Error: Recording has no id property');\n      return;\n    }\n\n    // Build video URL\n    const videoUrl = `/api/recordings/play/${recording.id}`;\n    const title = `${recording.stream} - ${formatUtils.formatDateTime(recording.start_time)}`;\n    const downloadUrl = `/api/recordings/download/${recording.id}`;\n\n    console.log('Video URL:', videoUrl);\n    console.log('Title:', title);\n    console.log('Download URL:', downloadUrl);\n\n    // Show video modal\n    showVideoModal(videoUrl, title, downloadUrl);\n    console.log('Video modal should be shown now');\n  },\n\n  /**\n   * Download recording\n   * @param {Object} recording Recording to download\n   */\n  downloadRecording: (recording) => {\n    // Create download link\n    const downloadUrl = `/api/recordings/download/${recording.id}`;\n    const link = document.createElement('a');\n    link.href = downloadUrl;\n    link.download = `${recording.stream}_${new Date(recording.start_time).toISOString().replace(/[:.]/g, '-')}.mp4`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    showStatusMessage('Download started');\n  }\n};\n","/**\n * URL utility functions for RecordingsView\n */\n\n/**\n * URL utilities for RecordingsView\n */\nexport const urlUtils = {\n  /**\n   * Get filters from URL\n   * @returns {Object|null} Filters object or null if no filters in URL\n   */\n  getFiltersFromUrl: () => {\n    // Get URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    \n    // Check if we have any filter parameters\n    if (!urlParams.has('dateRange') && !urlParams.has('page') && !urlParams.has('sort') && !urlParams.has('detection') && !urlParams.has('stream')) {\n      return null;\n    }\n    \n    // Create result object\n    const result = {\n      filters: {\n        dateRange: 'last7days',\n        startDate: '',\n        startTime: '00:00',\n        endDate: '',\n        endTime: '23:59',\n        streamId: 'all',\n        recordingType: 'all'\n      },\n      page: 1,\n      limit: 20,\n      sort: 'start_time',\n      order: 'desc'\n    };\n    \n    // Date range\n    if (urlParams.has('dateRange')) {\n      result.filters.dateRange = urlParams.get('dateRange');\n      \n      if (result.filters.dateRange === 'custom') {\n        if (urlParams.has('startDate')) {\n          result.filters.startDate = urlParams.get('startDate');\n        }\n        if (urlParams.has('startTime')) {\n          result.filters.startTime = urlParams.get('startTime');\n        }\n        if (urlParams.has('endDate')) {\n          result.filters.endDate = urlParams.get('endDate');\n        }\n        if (urlParams.has('endTime')) {\n          result.filters.endTime = urlParams.get('endTime');\n        }\n      }\n    }\n    \n    // Stream\n    if (urlParams.has('stream')) {\n      result.filters.streamId = urlParams.get('stream');\n    }\n    \n    // Recording type\n    if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n      result.filters.recordingType = 'detection';\n    }\n    \n    // Pagination\n    if (urlParams.has('page')) {\n      result.page = parseInt(urlParams.get('page'), 10);\n    }\n    if (urlParams.has('limit')) {\n      result.limit = parseInt(urlParams.get('limit'), 10);\n    }\n    \n    // Sorting\n    if (urlParams.has('sort')) {\n      result.sort = urlParams.get('sort');\n    }\n    if (urlParams.has('order')) {\n      result.order = urlParams.get('order');\n    }\n    \n    return result;\n  },\n  \n  /**\n   * Get active filters display\n   * @param {Object} filters Current filters\n   * @returns {Array} Array of active filter objects with key and label\n   */\n  getActiveFiltersDisplay: (filters) => {\n    const activeFilters = [];\n    \n    // Check if we have any active filters\n    const hasFilters = (\n      filters.dateRange !== 'last7days' ||\n      filters.streamId !== 'all' ||\n      filters.recordingType !== 'all'\n    );\n    \n    if (hasFilters) {\n      // Date range filter\n      if (filters.dateRange !== 'last7days') {\n        let label = '';\n        switch (filters.dateRange) {\n          case 'today':\n            label = 'Today';\n            break;\n          case 'yesterday':\n            label = 'Yesterday';\n            break;\n          case 'last30days':\n            label = 'Last 30 Days';\n            break;\n          case 'custom':\n            label = `${filters.startDate} to ${filters.endDate}`;\n            break;\n        }\n        activeFilters.push({ key: 'dateRange', label: `Date: ${label}` });\n      }\n      \n      // Stream filter\n      if (filters.streamId !== 'all') {\n        activeFilters.push({ key: 'streamId', label: `Stream: ${filters.streamId}` });\n      }\n      \n      // Recording type filter\n      if (filters.recordingType !== 'all') {\n        activeFilters.push({ key: 'recordingType', label: 'Detection Events Only' });\n      }\n    }\n    \n    return activeFilters;\n  },\n  \n  /**\n   * Load filters from URL\n   * @param {Object} filters Current filters\n   * @param {Object} pagination Current pagination\n   * @param {Function} setFilters Function to update filters\n   * @param {Function} setPagination Function to update pagination\n   * @param {Function} setSortField Function to update sort field\n   * @param {Function} setSortDirection Function to update sort direction\n   */\n  loadFiltersFromUrl: (filters, pagination, setFilters, setPagination, setSortField, setSortDirection) => {\n    // Get URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    \n    // Create a new filters object based on the current filters\n    const newFilters = { ...filters };\n    \n    // Date range\n    if (urlParams.has('dateRange')) {\n      newFilters.dateRange = urlParams.get('dateRange');\n      \n      if (newFilters.dateRange === 'custom') {\n        if (urlParams.has('startDate')) {\n          newFilters.startDate = urlParams.get('startDate');\n        }\n        if (urlParams.has('startTime')) {\n          newFilters.startTime = urlParams.get('startTime');\n        }\n        if (urlParams.has('endDate')) {\n          newFilters.endDate = urlParams.get('endDate');\n        }\n        if (urlParams.has('endTime')) {\n          newFilters.endTime = urlParams.get('endTime');\n        }\n      }\n    }\n    \n    // Stream\n    if (urlParams.has('stream')) {\n      newFilters.streamId = urlParams.get('stream');\n    }\n    \n    // Recording type - IMPORTANT: Check for this parameter even if dateRange is not present\n    if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n      newFilters.recordingType = 'detection';\n    }\n    \n    // Update filters state\n    setFilters(newFilters);\n    \n    // Pagination\n    if (urlParams.has('page')) {\n      setPagination(prev => ({\n        ...prev,\n        currentPage: parseInt(urlParams.get('page'), 10)\n      }));\n    }\n    if (urlParams.has('limit')) {\n      setPagination(prev => ({\n        ...prev,\n        pageSize: parseInt(urlParams.get('limit'), 10)\n      }));\n    }\n    \n    // Sorting\n    if (urlParams.has('sort')) {\n      setSortField(urlParams.get('sort'));\n    }\n    if (urlParams.has('order')) {\n      setSortDirection(urlParams.get('order'));\n    }\n  },\n  \n  /**\n   * Update URL with filters\n   * @param {Object} filters Current filters\n   * @param {Object} pagination Current pagination\n   * @param {string} sortField Current sort field\n   * @param {string} sortDirection Current sort direction\n   */\n  updateUrlWithFilters: (filters, pagination, sortField, sortDirection) => {\n    // Create URL parameters object based on current URL to preserve any existing parameters\n    const params = new URLSearchParams(window.location.search);\n    \n    // Add a timestamp parameter to prevent caching issues\n    params.set('t', Date.now().toString());\n    \n    // Update or add date range parameters\n    params.set('dateRange', filters.dateRange);\n    \n    // Handle custom date range\n    if (filters.dateRange === 'custom') {\n      params.set('startDate', filters.startDate);\n      params.set('startTime', filters.startTime);\n      params.set('endDate', filters.endDate);\n      params.set('endTime', filters.endTime);\n    } else {\n      // Remove custom date parameters if not using custom date range\n      params.delete('startDate');\n      params.delete('startTime');\n      params.delete('endDate');\n      params.delete('endTime');\n    }\n    \n    // Update stream filter\n    if (filters.streamId !== 'all') {\n      params.set('stream', filters.streamId);\n    } else {\n      params.delete('stream');\n    }\n    \n    // Update recording type filter\n    if (filters.recordingType === 'detection') {\n      params.set('detection', '1');\n    } else {\n      params.delete('detection');\n    }\n    \n    // Update pagination\n    params.set('page', pagination.currentPage.toString());\n    params.set('limit', pagination.pageSize.toString());\n    \n    // Update sorting\n    params.set('sort', sortField);\n    params.set('order', sortDirection);\n    \n    // Update URL without reloading the page\n    const newUrl = `${window.location.pathname}?${params.toString()}`;\n    window.history.pushState({ path: newUrl }, '', newUrl);\n    \n    // Also update the reload behavior to maintain URL parameters\n    // This is the key to preserving parameters during page reload\n    const reloadUrl = newUrl;\n    window.onbeforeunload = function() {\n      // Replace the current URL with our preserved URL just before reload\n      window.history.replaceState({ path: reloadUrl }, '', reloadUrl);\n    };\n  }\n};\n","/**\n * LightNVR Web Interface RecordingsView Component\n * Preact component for the recordings page\n */\n\nimport { h } from 'preact';\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { showStatusMessage, showVideoModal, DeleteConfirmationModal } from './UI.js';\nimport { ContentLoader } from './LoadingIndicator.js';\n\n// Import components\nimport { FiltersSidebar } from './recordings/FiltersSidebar.jsx';\nimport { ActiveFilters } from './recordings/ActiveFilters.jsx';\nimport { RecordingsTable } from './recordings/RecordingsTable.jsx';\nimport { PaginationControls } from './recordings/PaginationControls.jsx';\n\n// Import utilities\nimport { formatUtils } from './recordings/formatUtils.js';\nimport { recordingsAPI } from './recordings/recordingsAPI.js';\nimport { urlUtils } from './recordings/urlUtils.js';\nimport { useQueryClient, invalidateQueries } from '../../query-client.js';\nimport { WebSocketClient, BatchDeleteRecordingsClient } from '../../websocket-client.js';\n\n/**\n * RecordingsView component\n * @returns {JSX.Element} RecordingsView component\n */\nexport function RecordingsView() {\n  const [recordings, setRecordings] = useState([]);\n  const [streams, setStreams] = useState([]);\n  const [filtersVisible, setFiltersVisible] = useState(true);\n  const [sortField, setSortField] = useState('start_time');\n  const [sortDirection, setSortDirection] = useState('desc');\n  const [filters, setFilters] = useState({\n    dateRange: 'last7days',\n    startDate: '',\n    startTime: '00:00',\n    endDate: '',\n    endTime: '23:59',\n    streamId: 'all',\n    recordingType: 'all'\n  });\n  const [pagination, setPagination] = useState({\n    currentPage: 1,\n    pageSize: 20,\n    totalItems: 0,\n    totalPages: 1,\n    startItem: 0,\n    endItem: 0\n  });\n  const [hasActiveFilters, setHasActiveFilters] = useState(false);\n  const [activeFiltersDisplay, setActiveFiltersDisplay] = useState([]);\n  const [selectedRecordings, setSelectedRecordings] = useState({});\n  const [selectAll, setSelectAll] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [deleteMode, setDeleteMode] = useState('selected'); // 'selected' or 'all'\n  const recordingsTableBodyRef = useRef(null);\n\n  // Get query client for invalidating queries\n  const queryClient = useQueryClient();\n\n  // Fetch streams using preact-query\n  const {\n    data: streamsData,\n    isLoading: isLoadingStreams,\n    error: streamsError\n  } = recordingsAPI.hooks.useStreams();\n\n  // Update streams state when data is loaded\n  useEffect(() => {\n    if (streamsData && Array.isArray(streamsData)) {\n      setStreams(streamsData);\n    }\n  }, [streamsData]);\n\n  // Handle streams error\n  useEffect(() => {\n    if (streamsError) {\n      console.error('Error loading streams for filter:', streamsError);\n      showStatusMessage('Error loading streams: ' + streamsError.message);\n    }\n  }, [streamsError]);\n\n  // Initialize component\n  useEffect(() => {\n    // Initialize WebSocket client at the parent level\n    // This ensures a single WebSocket connection is shared across all components\n    if (typeof WebSocketClient !== 'undefined') {\n      // Create a global WebSocket client instance\n      window.wsClient = new WebSocketClient();\n      console.log('WebSocket client initialized at application level');\n\n      // Add additional event listeners for debugging\n      if (window.wsClient) {\n        // Log initial connection state\n        console.log('Initial WebSocket connection state:', {\n          connected: window.wsClient.isConnected(),\n          clientId: window.wsClient.getClientId()\n        });\n\n        // Add socket event listeners when socket is created\n        const originalConnect = window.wsClient.connect;\n        window.wsClient.connect = function() {\n          const result = originalConnect.apply(this, arguments);\n\n          // Add event listeners to the new socket\n          if (this.socket) {\n            const originalOnOpen = this.socket.onopen;\n            this.socket.onopen = (event) => {\n              console.log('WebSocket connection opened at application level');\n              if (originalOnOpen) originalOnOpen.call(this, event);\n            };\n\n            const originalOnError = this.socket.onerror;\n            this.socket.onerror = (error) => {\n              console.error('WebSocket error at application level:', error);\n              if (originalOnError) originalOnError.call(this, error);\n            };\n\n            const originalOnClose = this.socket.onclose;\n            this.socket.onclose = (event) => {\n              console.log(`WebSocket connection closed at application level: ${event.code} ${event.reason}`);\n              if (originalOnClose) originalOnClose.call(this, event);\n            };\n\n            const originalOnMessage = this.socket.onmessage;\n            this.socket.onmessage = (event) => {\n              // Only log non-welcome messages at application level to reduce noise\n              if (!event.data.includes('\"type\":\"welcome\"')) {\n                console.log('WebSocket message received at application level');\n              }\n              if (originalOnMessage) originalOnMessage.call(this, event);\n            };\n          }\n\n          return result;\n        };\n\n        // Override handleMessage to log when client ID is set\n        const originalHandleMessage = window.wsClient.handleMessage;\n        window.wsClient.handleMessage = function(data) {\n          const clientIdBefore = this.clientId;\n          originalHandleMessage.call(this, data);\n          const clientIdAfter = this.clientId;\n\n          // Log when client ID changes\n          if (clientIdBefore !== clientIdAfter && clientIdAfter) {\n            console.log(`WebSocket client ID changed at application level: ${clientIdAfter}`);\n          }\n        };\n      }\n\n      // Initialize batch delete client if needed\n      if (typeof BatchDeleteRecordingsClient !== 'undefined') {\n        window.batchDeleteClient = new BatchDeleteRecordingsClient(window.wsClient);\n        console.log('Batch delete client initialized');\n      }\n    }\n\n    // Set default date range\n    setDefaultDateRange();\n\n    // Check for URL parameters\n    const urlFilters = urlUtils.getFiltersFromUrl();\n\n    if (urlFilters) {\n      console.log('Found URL filters:', urlFilters);\n\n      // Check specifically for detection parameter\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n        // Ensure recordingType is set to 'detection'\n        urlFilters.filters.recordingType = 'detection';\n      }\n\n      // Update state with URL filters\n      setFilters(urlFilters.filters);\n      setPagination(prev => ({\n        ...prev,\n        currentPage: urlFilters.page || 1,\n        pageSize: urlFilters.limit || 20\n      }));\n      setSortField(urlFilters.sort || 'start_time');\n      setSortDirection(urlFilters.order || 'desc');\n    }\n\n    // Handle responsive behavior\n    handleResponsiveFilters();\n    window.addEventListener('resize', handleResponsiveFilters);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResponsiveFilters);\n    };\n  }, []);\n\n  // Update active filters when filters change\n  useEffect(() => {\n    updateActiveFilters();\n  }, [filters]);\n\n  // Set default date range\n  const setDefaultDateRange = () => {\n    const now = new Date();\n    const sevenDaysAgo = new Date(now);\n    sevenDaysAgo.setDate(now.getDate() - 7);\n\n    setFilters(prev => ({\n      ...prev,\n      endDate: now.toISOString().split('T')[0],\n      startDate: sevenDaysAgo.toISOString().split('T')[0]\n    }));\n  };\n\n  // Fetch recordings using preact-query\n  const {\n    data: recordingsData,\n    isLoading: isLoadingRecordings,\n    error: recordingsError,\n    refetch: refetchRecordings\n  } = recordingsAPI.hooks.useRecordings(filters, pagination, sortField, sortDirection);\n\n  // Update recordings state when data is loaded\n  useEffect(() => {\n    if (recordingsData) {\n      // Store recordings in the component state\n      const recordingsArray = recordingsData.recordings || [];\n\n      // When filtering for detection events, all returned recordings should have detections\n      if (filters.recordingType === 'detection') {\n        recordingsArray.forEach(recording => {\n          recording.has_detections = true;\n        });\n      }\n\n      // Set the recordings state\n      setRecordings(recordingsArray);\n      setHasData(recordingsArray.length > 0);\n\n      // Update pagination\n      if (recordingsData.pagination) {\n        updatePaginationFromResponse(recordingsData, pagination.currentPage);\n      }\n    }\n  }, [recordingsData, filters.recordingType]);\n\n  // Handle recordings error\n  useEffect(() => {\n    if (recordingsError) {\n      console.error('Error loading recordings:', recordingsError);\n      showStatusMessage('Error loading recordings: ' + recordingsError.message);\n      setHasData(false);\n    }\n  }, [recordingsError]);\n\n  // Load filters from URL\n  const loadFiltersFromUrl = () => {\n    const urlFilters = urlUtils.getFiltersFromUrl();\n    if (urlFilters) {\n      // Check specifically for detection parameter\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n        // Ensure recordingType is set to 'detection'\n        urlFilters.filters.recordingType = 'detection';\n      }\n\n      setFilters(urlFilters.filters);\n      setPagination(prev => ({\n        ...prev,\n        currentPage: urlFilters.page || 1,\n        pageSize: urlFilters.limit || 20\n      }));\n      setSortField(urlFilters.sort || 'start_time');\n      setSortDirection(urlFilters.order || 'desc');\n\n      // If detection parameter is present, ensure it's included in the URL when we update it\n      if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n        setTimeout(() => {\n          const currentUrl = new URL(window.location.href);\n          if (!currentUrl.searchParams.has('detection')) {\n            currentUrl.searchParams.set('detection', '1');\n            window.history.replaceState({ path: currentUrl.href }, '', currentUrl.href);\n          }\n        }, 0);\n      }\n\n      return urlFilters; // Return the filters so we can use them directly\n    }\n    return null;\n  };\n\n  // Handle responsive filters\n  const handleResponsiveFilters = () => {\n    // On mobile, hide filters by default\n    if (window.innerWidth < 768) {\n      setFiltersVisible(false);\n    } else {\n      setFiltersVisible(true);\n    }\n  };\n\n  // Toggle filters visibility\n  const toggleFilters = () => {\n    setFiltersVisible(!filtersVisible);\n  };\n\n  // State for data status\n  const [hasData, setHasData] = useState(false);\n\n  // Load recordings (now just updates pagination and URL)\n  const loadRecordings = (page = pagination.currentPage, updateUrl = true) => {\n    // Debug log to check filters\n    console.log('Loading recordings with filters:', JSON.stringify(filters));\n\n    // Create a pagination object with the specified page\n    const paginationWithPage = {\n      ...pagination,\n      currentPage: page\n    };\n\n    // Update pagination state\n    setPagination(paginationWithPage);\n\n    // Update URL with filters if requested\n    if (updateUrl) {\n      urlUtils.updateUrlWithFilters(filters, paginationWithPage, sortField, sortDirection);\n    }\n  };\n\n  // Update pagination from API response\n  const updatePaginationFromResponse = (data, currentPage) => {\n    // Use the provided page parameter instead of the state\n    currentPage = currentPage || pagination.currentPage;\n\n    if (data.pagination) {\n      const pageSize = data.pagination.limit || 20;\n      const totalItems = data.pagination.total || 0;\n      const totalPages = data.pagination.pages || 1;\n\n      // Calculate start and end items based on current page\n      let startItem = 0;\n      let endItem = 0;\n\n      if (data.recordings.length > 0) {\n        startItem = (currentPage - 1) * pageSize + 1;\n        endItem = Math.min(startItem + data.recordings.length - 1, totalItems);\n      }\n\n      console.log('Pagination update:', {\n        currentPage,\n        pageSize,\n        totalItems,\n        totalPages,\n        startItem,\n        endItem,\n        recordingsLength: data.recordings.length\n      });\n\n      setPagination(prev => ({\n        ...prev,\n        totalItems,\n        totalPages,\n        pageSize,\n        startItem,\n        endItem\n      }));\n    } else {\n      // Fallback if pagination object is not provided\n      const pageSize = pagination.pageSize;\n      const totalItems = data.total || 0;\n      const totalPages = Math.ceil(totalItems / pageSize) || 1;\n\n      // Calculate start and end items based on current page\n      let startItem = 0;\n      let endItem = 0;\n\n      if (data.recordings.length > 0) {\n        startItem = (currentPage - 1) * pageSize + 1;\n        endItem = Math.min(startItem + data.recordings.length - 1, totalItems);\n      }\n\n      console.log('Pagination update (fallback):', {\n        currentPage,\n        pageSize,\n        totalItems,\n        totalPages,\n        startItem,\n        endItem,\n        recordingsLength: data.recordings.length\n      });\n\n      setPagination(prev => ({\n        ...prev,\n        totalItems,\n        totalPages,\n        startItem,\n        endItem\n      }));\n    }\n  };\n\n  // Handle date range change\n  const handleDateRangeChange = (e) => {\n    const newDateRange = e.target.value;\n\n    setFilters(prev => ({\n      ...prev,\n      dateRange: newDateRange\n    }));\n\n    if (newDateRange === 'custom') {\n      // If custom is selected, make sure we have default dates\n      if (!filters.startDate || !filters.endDate) {\n        const now = new Date();\n        const sevenDaysAgo = new Date(now);\n        sevenDaysAgo.setDate(now.getDate() - 7);\n\n        setFilters(prev => ({\n          ...prev,\n          endDate: now.toISOString().split('T')[0],\n          startDate: sevenDaysAgo.toISOString().split('T')[0]\n        }));\n      }\n    }\n  };\n\n  // Update active filters\n  const updateActiveFilters = () => {\n    const activeFilters = urlUtils.getActiveFiltersDisplay(filters);\n    setHasActiveFilters(activeFilters.length > 0);\n    setActiveFiltersDisplay(activeFilters);\n  };\n\n  // Apply filters\n  const applyFilters = (resetToFirstPage = true) => {\n    // Reset to first page when applying filters (unless specified otherwise)\n    if (resetToFirstPage) {\n      setPagination(prev => ({\n        ...prev,\n        currentPage: 1\n      }));\n    }\n\n    // Update URL with filters\n    urlUtils.updateUrlWithFilters(\n      filters,\n      resetToFirstPage ? {...pagination, currentPage: 1} : pagination,\n      sortField,\n      sortDirection\n    );\n  };\n\n  // Reset filters\n  const resetFilters = () => {\n    // Create default filters\n    const defaultFilters = {\n      dateRange: 'last7days',\n      startDate: '',\n      startTime: '00:00',\n      endDate: '',\n      endTime: '23:59',\n      streamId: 'all',\n      recordingType: 'all'\n    };\n\n    // Get default date range\n    const now = new Date();\n    const sevenDaysAgo = new Date(now);\n    sevenDaysAgo.setDate(now.getDate() - 7);\n\n    defaultFilters.endDate = now.toISOString().split('T')[0];\n    defaultFilters.startDate = sevenDaysAgo.toISOString().split('T')[0];\n\n    // Reset filter state\n    setFilters(defaultFilters);\n\n    // Reset pagination to first page\n    setPagination(prev => ({\n      ...prev,\n      currentPage: 1\n    }));\n\n    // Reset sort\n    setSortField('start_time');\n    setSortDirection('desc');\n\n    // Clear all URL parameters by replacing the current URL with the base URL\n    const baseUrl = window.location.pathname;\n    window.history.pushState({ path: baseUrl }, '', baseUrl);\n  };\n\n  // Remove filter\n  const removeFilter = (key) => {\n    switch (key) {\n      case 'dateRange':\n        setFilters(prev => ({\n          ...prev,\n          dateRange: 'last7days'\n        }));\n        break;\n      case 'streamId':\n        setFilters(prev => ({\n          ...prev,\n          streamId: 'all'\n        }));\n        break;\n      case 'recordingType':\n        setFilters(prev => ({\n          ...prev,\n          recordingType: 'all'\n        }));\n        break;\n    }\n\n    applyFilters();\n  };\n\n  // Sort by field\n  const sortBy = (field) => {\n    if (sortField === field) {\n      // Toggle direction if already sorting by this field\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      // Default to descending for start_time, ascending for others\n      setSortDirection(field === 'start_time' ? 'desc' : 'asc');\n      setSortField(field);\n    }\n\n    // Reset to first page\n    setPagination(prev => ({\n      ...prev,\n      currentPage: 1\n    }));\n\n    // Update URL with new sort parameters\n    urlUtils.updateUrlWithFilters(\n      filters,\n      {...pagination, currentPage: 1},\n      field,\n      field === sortField ? (sortDirection === 'asc' ? 'desc' : 'asc') : (field === 'start_time' ? 'desc' : 'asc')\n    );\n  };\n\n  // Go to page\n  const goToPage = (page) => {\n    if (page < 1 || page > pagination.totalPages) return;\n\n    // Set the current page in pagination state\n    setPagination(prev => ({\n      ...prev,\n      currentPage: page\n    }));\n\n    // Update URL with all filters and the new page\n    urlUtils.updateUrlWithFilters(filters, {...pagination, currentPage: page}, sortField, sortDirection);\n  };\n\n  // Toggle selection of a recording\n  const toggleRecordingSelection = (recordingId) => {\n    setSelectedRecordings(prev => ({\n      ...prev,\n      [recordingId]: !prev[recordingId]\n    }));\n  };\n\n  // Toggle select all recordings\n  const toggleSelectAll = () => {\n    const newSelectAll = !selectAll;\n    setSelectAll(newSelectAll);\n\n    const newSelectedRecordings = {};\n    if (newSelectAll) {\n      // Select all recordings\n      recordings.forEach(recording => {\n        newSelectedRecordings[recording.id] = true;\n      });\n    }\n    // Always update selectedRecordings, even when deselecting all\n    setSelectedRecordings(newSelectedRecordings);\n  };\n\n  // Get count of selected recordings\n  const getSelectedCount = () => {\n    return Object.values(selectedRecordings).filter(Boolean).length;\n  };\n\n  // Open delete confirmation modal\n  const openDeleteModal = (mode) => {\n    setDeleteMode(mode);\n    setIsDeleteModalOpen(true);\n  };\n\n  // Close delete confirmation modal\n  const closeDeleteModal = () => {\n    setIsDeleteModalOpen(false);\n  };\n\n  // Handle delete confirmation\n  const handleDeleteConfirm = async () => {\n    closeDeleteModal();\n\n    // Save current URL parameters before deletion\n    const currentUrlParams = new URLSearchParams(window.location.search);\n    const currentSortField = currentUrlParams.get('sort') || sortField;\n    const currentSortDirection = currentUrlParams.get('order') || sortDirection;\n    const currentPage = parseInt(currentUrlParams.get('page'), 10) || pagination.currentPage;\n\n    if (deleteMode === 'selected') {\n      // Use the recordingsAPI to delete selected recordings\n      const result = await recordingsAPI.deleteSelectedRecordings(selectedRecordings);\n\n      // Reset selection\n      setSelectedRecordings({});\n      setSelectAll(false);\n\n      // Only reload if some recordings were deleted successfully\n      if (result.succeeded > 0) {\n        // Reload recordings with preserved parameters\n        reloadRecordingsWithPreservedParams(currentSortField, currentSortDirection, currentPage);\n      }\n    } else {\n      // Use the recordingsAPI to delete all filtered recordings\n      const result = await recordingsAPI.deleteAllFilteredRecordings(filters);\n\n      // Reset selection\n      setSelectedRecordings({});\n      setSelectAll(false);\n\n      // Only reload if some recordings were deleted successfully\n      if (result.succeeded > 0) {\n        // Reload recordings\n        loadRecordings();\n      }\n    }\n  };\n\n  // Helper function to reload recordings with preserved parameters\n  const reloadRecordingsWithPreservedParams = (sortField, sortDirection, page) => {\n    // Set the sort parameters directly\n    setSortField(sortField);\n    setSortDirection(sortDirection);\n\n    // Update pagination with the preserved page\n    setPagination(prev => ({\n      ...prev,\n      currentPage: page\n    }));\n\n    // Wait for state to update\n    setTimeout(() => {\n      // Create a new pagination object with the updated page\n      const updatedPagination = {\n        ...pagination,\n        currentPage: page\n      };\n\n      // Update URL with all filters and the preserved parameters\n      urlUtils.updateUrlWithFilters(filters, updatedPagination, sortField, sortDirection);\n\n      // Load recordings from API\n      recordingsAPI.loadRecordings(filters, updatedPagination, sortField, sortDirection)\n        .then(data => {\n          console.log('Recordings data received:', data);\n\n          // Store recordings in the component state\n          setRecordings(data.recordings || []);\n\n          // Update pagination without changing the current page\n          updatePaginationFromResponse(data, page);\n        })\n        .catch(error => {\n          console.error('Error loading recordings:', error);\n          showStatusMessage('Error loading recordings: ' + error.message);\n        });\n    }, 0);\n  };\n\n  // Delete recording using preact-query mutation\n  const { mutate: deleteRecordingMutation } = recordingsAPI.hooks.useDeleteRecording();\n\n  // Delete a single recording\n  const deleteRecording = (recording) => {\n    if (!confirm(`Are you sure you want to delete this recording from ${recording.stream}?`)) {\n      return;\n    }\n\n    // Call the mutation with the recording ID\n    deleteRecordingMutation(recording.id);\n  };\n\n  // Play recording\n  const playRecording = (recording) => {\n    recordingsAPI.playRecording(recording, showVideoModal);\n  };\n\n  // Download recording\n  const downloadRecording = (recording) => {\n    recordingsAPI.downloadRecording(recording);\n  };\n\n  return (\n    <section id=\"recordings-page\" class=\"page\">\n      <div class=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <div class=\"flex items-center\">\n          <h2 class=\"text-xl font-bold\">Recordings</h2>\n          <div class=\"ml-4 flex\">\n            <a href=\"recordings.html\" class=\"px-3 py-1 bg-blue-500 text-white rounded-l-md\">Table View</a>\n            <a href=\"timeline.html\" class=\"px-3 py-1 bg-gray-300 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-400 dark:hover:bg-gray-600 rounded-r-md\">Timeline View</a>\n          </div>\n        </div>\n        <button id=\"toggle-filters-btn\"\n                class=\"p-2 rounded-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none\"\n                title=\"Toggle Filters\"\n                onClick={toggleFilters}>\n          <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path fill-rule=\"evenodd\" d=\"M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clip-rule=\"evenodd\"></path>\n          </svg>\n        </button>\n      </div>\n\n      <div class=\"recordings-layout flex flex-col md:flex-row gap-4 w-full\">\n        <FiltersSidebar\n          filters={filters}\n          setFilters={setFilters}\n          pagination={pagination}\n          setPagination={setPagination}\n          streams={streams}\n          filtersVisible={filtersVisible}\n          applyFilters={applyFilters}\n          resetFilters={resetFilters}\n          handleDateRangeChange={handleDateRangeChange}\n          setDefaultDateRange={setDefaultDateRange}\n        />\n\n        <div class=\"recordings-content flex-1\">\n          <ActiveFilters\n            activeFiltersDisplay={activeFiltersDisplay}\n            removeFilter={removeFilter}\n            hasActiveFilters={hasActiveFilters}\n          />\n\n          <ContentLoader\n            isLoading={isLoadingRecordings}\n            hasData={hasData}\n            loadingMessage=\"Loading recordings...\"\n            emptyMessage=\"No recordings found matching your criteria\"\n          >\n            <RecordingsTable\n              recordings={recordings}\n              sortField={sortField}\n              sortDirection={sortDirection}\n              sortBy={sortBy}\n              selectedRecordings={selectedRecordings}\n              toggleRecordingSelection={toggleRecordingSelection}\n              selectAll={selectAll}\n              toggleSelectAll={toggleSelectAll}\n              getSelectedCount={getSelectedCount}\n              openDeleteModal={openDeleteModal}\n              playRecording={playRecording}\n              downloadRecording={downloadRecording}\n              deleteRecording={deleteRecording}\n              recordingsTableBodyRef={recordingsTableBodyRef}\n              pagination={pagination}\n            />\n\n            <PaginationControls\n              pagination={pagination}\n              goToPage={goToPage}\n            />\n          </ContentLoader>\n        </div>\n      </div>\n\n      <DeleteConfirmationModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={handleDeleteConfirm}\n        mode={deleteMode}\n        count={getSelectedCount()}\n      />\n    </section>\n  );\n}\n","/**\n * LightNVR Web Interface Streams Page\n * Entry point for the streams page\n */\n\nimport { render } from 'preact';\nimport { RecordingsView } from '../components/preact/RecordingsView.jsx';\nimport { QueryClientProvider, queryClient } from '../query-client.js';\nimport {Header} from \"../components/preact/Header.jsx\";\nimport {Footer} from \"../components/preact/Footer.jsx\";\n\n// Render the StreamsView component when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Get the container element\n    const container = document.getElementById('main-content');\n\n    if (container) {\n        render(\n            <QueryClientProvider client={queryClient}>\n                <Header />\n                <RecordingsView />\n                <Footer />\n            </QueryClientProvider>,\n            container\n        );\n    }\n});\n"],"names":["showStatusMessage","message","duration","statusContainer","document","getElementById","createElement","id","className","body","appendChild","messageElement","textContent","setTimeout","classList","remove","add","parentNode","removeChild","children","length","initBatchDeleteModal","modalContainer","innerHTML","modal","closeBtn","doneBtn","cancelBtn","addEventListener","closeBatchDeleteModal","cancelBatchDelete","window","event","target","showBatchDeleteModal","progressBar","style","width","status","count","percentage","succeeded","failed","resetBatchDeleteModal","FiltersSidebar","filters","setFilters","pagination","setPagination","streams","filtersVisible","applyFilters","resetFilters","handleDateRangeChange","setDefaultDateRange","jsxs","jsx","htmlFor","value","dateRange","onChange","display","type","startDate","e","prev","startTime","endDate","endTime","streamId","map","stream","name","recordingType","pageSize","parseInt","onClick","ActiveFilters","activeFiltersDisplay","removeFilter","hasActiveFilters","filter","index","label","key","updateBatchDeleteProgress","progress","console","log","current","total","percent","Math","round","offsetWidth","estimatedPercent","min","complete","error","batchDeleteRecordingsByHttpRequest","params","Promise","resolve","reject","totalCount","ids","fetch","method","headers","JSON","stringify","then","response","ok","Error","statusText","json","result","success","loadRecordings","catch","container","formatUtils","isoString","Date","toLocaleString","seconds","hours","floor","minutes","secs","toString","padStart","join","RecordingsTable","recordings","sortField","sortDirection","sortBy","selectedRecordings","toggleRecordingSelection","selectAll","toggleSelectAll","getSelectedCount","openDeleteModal","playRecording","downloadRecording","deleteRecording","recordingsTableBodyRef","disabled","checked","ref","colSpan","totalItems","recording","start_time","size","has_detections","fill","viewBox","xmlns","d","fillRule","clipRule","title","PaginationControls","goToPage","startItem","endItem","currentPage","totalPages","recordingsAPI","hooks","useStreams","useQuery","timeout","retries","retryDelay","useRecordings","URLSearchParams","append","start","end","getDateRangeFromPreset","useDeleteRecording","queryClient","useQueryClient","useMutation","mutationFn","async","url","recordingId","fetchJSON","onSuccess","invalidateQueries","queryKey","onError","useBatchDeleteRecordings","usePostMutation","successCount","errorCount","loadStreams","preset","now","today","getFullYear","getMonth","getDate","todayStart","toISOString","yesterday","setDate","yesterdayEnd","setHours","sevenDaysAgo","thirtyDaysAgo","defaultStart","data","batchSize","i","batch","slice","all","checkRecordingHasDetections","enhancedFetch","deleteSelectedRecordings","selectedIds","Object","entries","_","isSelected","wsClient","isConnected","connect","batchDeleteClient","BatchDeleteRecordingsClient","warn","deleteSelectedRecordingsHttp","deleteWithProgress","deleteAllFilteredRecordings","stream_name","detection","countError","handleOperationError","deleteAllFilteredRecordingsHttp","getClientId","timeoutPromise","race","wsError","deleteResponse","end_time","getTime","detections","getRecordingDetections","showVideoModal","videoUrl","downloadUrl","link","href","download","replace","click","urlUtils","getFiltersFromUrl","urlParams","location","search","has","page","limit","sort","order","get","activeFilters","push","updateUrlWithFilters","set","delete","newUrl","pathname","history","pushState","path","reloadUrl","onbeforeunload","replaceState","RecordingsView","setRecordings","useState","setStreams","setFiltersVisible","setSortField","setSortDirection","setHasActiveFilters","setActiveFiltersDisplay","setSelectedRecordings","setSelectAll","isDeleteModalOpen","setIsDeleteModalOpen","deleteMode","setDeleteMode","useRef","streamsData","isLoading","isLoadingStreams","streamsError","useEffect","Array","isArray","WebSocketClient","connected","clientId","originalConnect","apply","this","arguments","socket","originalOnOpen","onopen","call","originalOnError","onerror","originalOnClose","onclose","code","reason","originalOnMessage","onmessage","includes","originalHandleMessage","handleMessage","clientIdBefore","clientIdAfter","urlFilters","handleResponsiveFilters","removeEventListener","updateActiveFilters","split","recordingsData","isLoadingRecordings","recordingsError","refetch","refetchRecordings","recordingsArray","forEach","setHasData","updatePaginationFromResponse","innerWidth","hasData","pages","recordingsLength","ceil","resetToFirstPage","values","Boolean","closeDeleteModal","reloadRecordingsWithPreservedParams","updatedPagination","mutate","deleteRecordingMutation","class","toggleFilters","defaultFilters","baseUrl","newDateRange","ContentLoader","loadingMessage","emptyMessage","field","newSelectAll","newSelectedRecordings","mode","confirm","DeleteConfirmationModal","isOpen","onClose","onConfirm","currentUrlParams","currentSortField","currentSortDirection","updateUrl","paginationWithPage","render","QueryClientProvider","client","Header","Footer"],"mappings":"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"}