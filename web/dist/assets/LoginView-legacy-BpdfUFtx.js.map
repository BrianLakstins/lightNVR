{"version":3,"file":"LoginView-legacy-BpdfUFtx.js","sources":["../../js/components/preact/LoginView.js"],"sourcesContent":["/**\n * LightNVR Web Interface LoginView Component\n * Preact component for the login page\n */\n\nimport { h } from 'preact';\nimport { html } from '../../html-helper.js';\nimport { useState, useRef } from 'preact/hooks';\nimport { showStatusMessage } from './UI.js';\nimport { enhancedFetch, createRequestController } from '../../fetch-utils.js';\n\n/**\n * LoginView component\n * @returns {JSX.Element} LoginView component\n */\nexport function LoginView() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  \n  // Check URL for error, auth_required, or logout parameter\n  useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.has('error')) {\n      setErrorMessage('Invalid username or password');\n    } else if (urlParams.has('auth_required') && urlParams.has('logout')) {\n      setErrorMessage('You have been successfully logged out.');\n    } else if (urlParams.has('auth_required')) {\n      setErrorMessage('Authentication required. Please log in to continue.');\n    } else if (urlParams.has('logout')) {\n      setErrorMessage('You have been successfully logged out.');\n    }\n  }, []);\n  \n  // Request controller for cancelling requests\n  const requestControllerRef = useRef(null);\n\n  // Handle successful login\n  const handleSuccessfulLogin = () => {\n    // Get redirect URL from query parameter if it exists\n    const urlParams = new URLSearchParams(window.location.search);\n    const redirectUrl = urlParams.get('redirect');\n\n    // Redirect to the original URL or index page\n    if (redirectUrl) {\n      window.location.href = redirectUrl;\n    } else {\n      window.location.href = '/index.html?t=' + new Date().getTime();\n    }\n  };\n\n  // Handle login form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!username || !password) {\n      setErrorMessage('Please enter both username and password');\n      return;\n    }\n    \n    setIsLoggingIn(true);\n    setErrorMessage('');\n    \n    try {\n      // Store credentials in localStorage for future requests\n      const authString = btoa(`${username}:${password}`);\n      localStorage.setItem('auth', authString);\n      \n      // Make login request\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Basic ${authString}`\n        },\n        body: JSON.stringify({ username, password }),\n        timeout: 10000\n      });\n      \n      if (response.ok || response.status === 302) {\n        // Successful login\n        handleSuccessfulLogin();\n      } else {\n        // Failed login\n        setIsLoggingIn(false);\n        setErrorMessage('Invalid username or password');\n        localStorage.removeItem('auth');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      \n      // If it's a timeout error, proceed anyway with stored credentials\n      if (error.message === 'Request timed out' && localStorage.getItem('auth')) {\n        console.log('Login request timed out, proceeding with stored credentials');\n        handleSuccessfulLogin();\n      } \n      // For other errors, also try to proceed if we have credentials\n      else if (localStorage.getItem('auth')) {\n        console.log('Login API error, but proceeding with stored credentials');\n        handleSuccessfulLogin();\n      } else {\n        setIsLoggingIn(false);\n        setErrorMessage('Login failed. Please try again.');\n      }\n    }\n  };\n  \n  return html`\n    <section id=\"login-page\" class=\"page flex items-center justify-center min-h-screen\">\n      <div class=\"login-container w-full max-w-md p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg\">\n        <div class=\"text-center mb-8\">\n          <h1 class=\"text-2xl font-bold\">LightNVR</h1>\n          <p class=\"text-gray-600 dark:text-gray-400\">Please sign in to continue</p>\n        </div>\n        \n        ${errorMessage && html`\n          <div class=${`mb-4 p-3 rounded-lg ${\n            errorMessage.includes('successfully logged out') \n              ? 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-200' \n              : 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-200'\n          }`}>\n            ${errorMessage}\n          </div>\n        `}\n        \n        <form id=\"login-form\" class=\"space-y-6\" action=\"/api/auth/login\" method=\"POST\" onSubmit=${handleSubmit}>\n          <div class=\"form-group\">\n            <label for=\"username\" class=\"block text-sm font-medium mb-1\">Username</label>\n            <input \n              type=\"text\" \n              id=\"username\" \n              name=\"username\"\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n              placeholder=\"Enter your username\" \n              value=${username}\n              onChange=${e => setUsername(e.target.value)}\n              required\n              autocomplete=\"username\"\n            />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\" class=\"block text-sm font-medium mb-1\">Password</label>\n            <input \n              type=\"password\" \n              id=\"password\" \n              name=\"password\"\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n              placeholder=\"Enter your password\" \n              value=${password}\n              onChange=${e => setPassword(e.target.value)}\n              required\n              autocomplete=\"current-password\"\n            />\n          </div>\n          <div class=\"form-group\">\n            <button \n              type=\"submit\" \n              class=\"w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              disabled=${isLoggingIn}\n            >\n              ${isLoggingIn ? 'Signing in...' : 'Sign In'}\n            </button>\n          </div>\n        </form>\n        \n        <div class=\"mt-6 text-center text-sm text-gray-600 dark:text-gray-400\">\n          <p>Default credentials: admin / admin</p>\n          <p class=\"mt-2\">You can change these in Settings after login</p>\n        </div>\n      </div>\n    </section>\n  `;\n}\n\n/**\n * Load LoginView component\n */\nexport function loadLoginView() {\n  const mainContent = document.getElementById('main-content');\n  if (!mainContent) return;\n  \n  // Render the LoginView component to the container\n  import('preact').then(({ render }) => {\n    render(html`<${LoginView} />`, mainContent);\n  });\n}\n"],"names":["LoginView","username","setUsername","useState","password","setPassword","isLoggingIn","setIsLoggingIn","errorMessage","setErrorMessage","urlParams","URLSearchParams","window","location","search","has","useRef","handleSuccessfulLogin","redirectUrl","get","href","Date","getTime","html","includes","async","e","preventDefault","authString","btoa","localStorage","setItem","response","fetch","method","headers","Authorization","body","JSON","stringify","timeout","ok","status","removeItem","error","console","message","getItem","log","target","value","mainContent","document","getElementById","__vitePreload","render","module","import","then","n","p","meta","url"],"mappings":"6JAeO,SAASA,IACd,MAAOC,EAAUC,GAAeC,EAAS,KAClCC,EAAUC,GAAeF,EAAS,KAClCG,EAAaC,GAAkBJ,GAAS,IACxCK,EAAcC,GAAmBN,EAAS,IAGjDA,GAAS,KACP,MAAMO,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QAClDJ,EAAUK,IAAI,SAChBN,EAAgB,gCACPC,EAAUK,IAAI,kBAAoBL,EAAUK,IAAI,UACzDN,EAAgB,0CACPC,EAAUK,IAAI,iBACvBN,EAAgB,uDACPC,EAAUK,IAAI,WACvBN,EAAgB,yCACtB,IAI+BO,EAAO,MAGpC,MAAMC,EAAwBA,KAE5B,MACMC,EADY,IAAIP,gBAAgBC,OAAOC,SAASC,QACxBK,IAAI,YAIhCP,OAAOC,SAASO,KADdF,GAGqB,kBAAmB,IAAIG,MAAOC,SAC3D,EA2DE,OAAOC,CAAI;;;;;;;;UAQHf,GAAgBe,CAAI;uBACP,wBACXf,EAAagB,SAAS,2BAClB,oEACA;cAEFhB;;;;kGArESiB,UAGnB,GAFAC,EAAEC,iBAEG1B,GAAaG,EAAlB,CAKAG,GAAe,GACfE,EAAgB,IAEhB,IAEE,MAAMmB,EAAaC,KAAK,GAAG5B,KAAYG,KACvC0B,aAAaC,QAAQ,OAAQH,GAG7B,MAAMI,QAAiBC,MAAM,kBAAmB,CAC9CC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAiB,SAASR,KAE5BS,KAAMC,KAAKC,UAAU,CAAEtC,WAAUG,aACjCoC,QAAS,MAGPR,EAASS,IAA0B,MAApBT,EAASU,OAE1BzB,KAGAV,GAAe,GACfE,EAAgB,gCAChBqB,aAAaa,WAAW,QAE3B,CAAC,MAAOC,GACPC,QAAQD,MAAM,eAAgBA,GAGR,sBAAlBA,EAAME,SAAmChB,aAAaiB,QAAQ,SAChEF,QAAQG,IAAI,+DACZ/B,KAGOa,aAAaiB,QAAQ,SAC5BF,QAAQG,IAAI,2DACZ/B,MAEAV,GAAe,GACfE,EAAgB,mCAExB,CA9CA,MAFMA,EAAgB,0CAgDtB;;;;;;;;;sBA8BsBR;yBACGyB,GAAKxB,EAAYwB,EAAEuB,OAAOC;;;;;;;;;;;;;sBAa7B9C;yBACGsB,GAAKrB,EAAYqB,EAAEuB,OAAOC;;;;;;;;;yBAS1B5C;;gBAETA,EAAc,gBAAkB;;;;;;;;;;;GAYhD,8BAKO,WACL,MAAM6C,EAAcC,SAASC,eAAe,gBACvCF,GAGNG,GAAA7B,UAAA,MAAA8B,OAAAA,SAACC,EAAOC,OAAA,mCAAQC,MAAAC,GAAAA,EAAAC,IAAA,MAAA,CAAAL,SAAA,QAAA,EAAAC,EAAAK,KAAAC,KAAEJ,MAAK,EAAGH,aACvBA,EAAOhC,CAAI,IAAIvB,OAAgBmD,EAAY,GAE/C"}