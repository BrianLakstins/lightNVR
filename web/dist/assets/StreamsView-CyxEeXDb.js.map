{"version":3,"mappings":"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","names":["StreamDeleteModal","streamId","streamName","onClose","onDisable","onDelete","isConfirmDelete","setIsConfirmDelete","useState","showDeleteConfirmation","handleDisable","handleDelete","html","_c","__template","_b","_a","StreamsView","queryClient","useQueryClient","modalVisible","setModalVisible","onvifModalVisible","setOnvifModalVisible","showCustomNameInput","setShowCustomNameInput","isAddingStream","setIsAddingStream","discoveredDevices","setDiscoveredDevices","deviceProfiles","setDeviceProfiles","selectedDevice","setSelectedDevice","selectedProfile","setSelectedProfile","customStreamName","setCustomStreamName","onvifCredentials","setOnvifCredentials","isDiscovering","setIsDiscovering","isLoadingProfiles","setIsLoadingProfiles","streamsResponse","isLoading","error","useQuery","detectionModelsData","streams","currentStream","setCurrentStream","isEditing","setIsEditing","deleteModalVisible","setDeleteModalVisible","streamToDelete","setStreamToDelete","hasData","detectionModels","createStreamMutation","useMutation","streamData","fetchJSON","showStatusMessage","closeModal","updateStreamMutation","saveStreamMutation","options","testStreamMutation","data","deleteStreamMutation","permanent","url","closeDeleteModal","enabled","_","variables","handleSubmit","saveStream","testStreamConnection","openDeleteModal","stream","openAddStreamModal","openEditStreamModal","response","handleInputChange","name","value","type","checked","prev","disableStream","deleteStream","handleCredentialChange","handleThresholdChange","loadDetectionModels","onvifDiscoveryMutation","getDeviceProfilesMutation","device","credentials","testOnvifConnectionMutation","getDeviceProfiles","submitOnvifDevice","startOnvifDiscovery","addOnvifDeviceAsStream","profile","testOnvifConnection","_r","ContentLoader","_d","_e","_g","model","_f","_o","_h","_j","_i","_l","_k","_n","_m","_q","_p","loadStreamsView","mainContent","__vitePreload","render","n","QueryClientProvider","_s"],"ignoreList":[],"sources":["../../js/components/preact/StreamDeleteModal.js","../../js/components/preact/StreamsView.js"],"sourcesContent":["/**\n * LightNVR Web Interface Stream Delete Modal Component\n * Preact component for the stream delete modal\n */\n\nimport { html } from '../../html-helper.js';\nimport { useState } from 'preact/hooks';\n\n/**\n * StreamDeleteModal component\n * @param {Object} props Component props\n * @param {string} props.streamId ID of the stream to delete\n * @param {string} props.streamName Name of the stream to display\n * @param {Function} props.onClose Function to call when the modal is closed\n * @param {Function} props.onDisable Function to call when the disable button is clicked\n * @param {Function} props.onDelete Function to call when the delete button is clicked\n * @returns {JSX.Element} StreamDeleteModal component\n */\nexport function StreamDeleteModal({ streamId, streamName, onClose, onDisable, onDelete }) {\n  const [isConfirmDelete, setIsConfirmDelete] = useState(false);\n  \n  // Show delete confirmation step\n  const showDeleteConfirmation = () => {\n    setIsConfirmDelete(true);\n  };\n  \n  // Handle disable stream\n  const handleDisable = () => {\n    onDisable(streamId);\n    onClose();\n  };\n  \n  // Handle delete stream\n  const handleDelete = () => {\n    onDelete(streamId);\n    onClose();\n  };\n  \n  return html`\n    <div class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300\">\n      <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full\">\n        <div class=\"flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700\">\n          <h3 class=\"text-lg font-medium\">${isConfirmDelete ? 'Confirm Permanent Deletion' : 'Stream Actions'}</h3>\n          <span class=\"text-2xl cursor-pointer\" onClick=${onClose}>×</span>\n        </div>\n        \n        <div class=\"p-6\">\n          ${!isConfirmDelete ? html`\n            <div class=\"mb-6\">\n              <h4 class=\"text-lg font-medium mb-2\">What would you like to do with \"${streamName}\"?</h4>\n              <p class=\"text-gray-600 dark:text-gray-400 mb-4\">\n                Please choose one of the following options:\n              </p>\n              \n              <div class=\"space-y-4\">\n                <div class=\"p-4 border border-yellow-200 bg-yellow-50 dark:bg-yellow-900/20 dark:border-yellow-900/30 rounded-lg\">\n                  <h5 class=\"font-medium text-yellow-800 dark:text-yellow-500 mb-2\">Disable Stream (Soft Delete)</h5>\n                  <p class=\"text-gray-600 dark:text-gray-400 mb-2\">\n                    This option will disable the stream but keep its configuration in the database. You can re-enable it later.\n                  </p>\n                  <ul class=\"list-disc list-inside text-sm text-gray-600 dark:text-gray-400 mb-3\">\n                    <li>Stream will stop processing</li>\n                    <li>Live streaming will be disabled</li>\n                    <li>Recording will be disabled</li>\n                    <li>Audio recording will be disabled</li>\n                    <li>Detection-based recording will be disabled</li>\n                    <li>Configuration is preserved</li>\n                    <li>Existing recordings are kept</li>\n                    <li>Can be re-enabled later</li>\n                  </ul>\n                  <button \n                    class=\"w-full px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700 transition-colors focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n                    onClick=${handleDisable}\n                  >\n                    Disable Stream\n                  </button>\n                </div>\n                \n                <div class=\"p-4 border border-red-200 bg-red-50 dark:bg-red-900/20 dark:border-red-900/30 rounded-lg\">\n                  <h5 class=\"font-medium text-red-800 dark:text-red-500 mb-2\">Delete Stream (Permanent)</h5>\n                  <p class=\"text-gray-600 dark:text-gray-400 mb-2\">\n                    This option will permanently delete the stream configuration from the database. This action cannot be undone.\n                  </p>\n                  <ul class=\"list-disc list-inside text-sm text-gray-600 dark:text-gray-400 mb-3\">\n                    <li>Stream will be completely removed</li>\n                    <li>Configuration is deleted</li>\n                    <li>Recordings remain accessible</li>\n                    <li>Cannot be recovered</li>\n                  </ul>\n                  <button \n                    class=\"w-full px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n                    onClick=${showDeleteConfirmation}\n                  >\n                    Delete Stream\n                  </button>\n                </div>\n              </div>\n            </div>\n          ` : html`\n            <div class=\"mb-6\">\n              <div class=\"flex items-center justify-center mb-4 text-red-600 dark:text-red-500\">\n                <svg class=\"w-12 h-12\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path fill-rule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\"></path>\n                </svg>\n              </div>\n              <h4 class=\"text-lg font-medium mb-2 text-center\">Are you sure you want to permanently delete \"${streamName}\"?</h4>\n              <p class=\"text-gray-600 dark:text-gray-400 mb-4 text-center\">\n                This action cannot be undone. The stream configuration will be permanently removed from the database.\n              </p>\n            </div>\n            \n            <div class=\"flex justify-center space-x-3\">\n              <button \n                class=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n                onClick=${() => setIsConfirmDelete(false)}\n              >\n                Cancel\n              </button>\n              <button \n                class=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n                onClick=${handleDelete}\n              >\n                Yes, Delete Permanently\n              </button>\n            </div>\n          `}\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * LightNVR Web Interface StreamsView Component\n * Preact component for the streams page\n */\n\nimport { h } from 'preact';\nimport { html } from '../../html-helper.js';\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { showStatusMessage } from './UI.js';\nimport { ContentLoader } from './LoadingIndicator.js';\nimport { StreamDeleteModal } from './StreamDeleteModal.js';\nimport {\n  useQuery,\n  useMutation,\n  useQueryClient,\n  fetchJSON\n} from '../../query-client.js';\n\n/**\n * StreamsView component\n * @returns {JSX.Element} StreamsView component\n */\nexport function StreamsView() {\n  const queryClient = useQueryClient();\n\n  // State for streams data\n  const [modalVisible, setModalVisible] = useState(false);\n  const [onvifModalVisible, setOnvifModalVisible] = useState(false);\n  const [showCustomNameInput, setShowCustomNameInput] = useState(false);\n  const [isAddingStream, setIsAddingStream] = useState(false);\n  const [discoveredDevices, setDiscoveredDevices] = useState([]);\n  const [deviceProfiles, setDeviceProfiles] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState(null);\n  const [selectedProfile, setSelectedProfile] = useState(null);\n  const [customStreamName, setCustomStreamName] = useState('');\n  const [onvifCredentials, setOnvifCredentials] = useState({ username: '', password: '' });\n  const [isDiscovering, setIsDiscovering] = useState(false);\n  const [isLoadingProfiles, setIsLoadingProfiles] = useState(false);\n\n  // Fetch streams data\n  const {\n    data: streamsResponse = [],\n    isLoading,\n    error\n  } = useQuery(['streams'], '/api/streams', {\n    timeout: 10000,\n    retries: 2,\n    retryDelay: 1000\n  });\n\n  // Fetch detection models\n  const {\n    data: detectionModelsData\n  } = useQuery(['detectionModels'], '/api/detection/models', {\n    timeout: 5000,\n    retries: 1,\n    retryDelay: 1000\n  });\n\n  // Process the response to handle both array and object formats\n  const streams = Array.isArray(streamsResponse) ? streamsResponse : (streamsResponse.streams || []);\n\n  // Log streams data for debugging\n  console.log('API Response:', streamsResponse);\n\n  // Log streams data for debugging\n  console.log('Streams data:', streams);\n  console.log('hasData:', streams && streams.length > 0);\n\n  // Default stream state\n  const [currentStream, setCurrentStream] = useState({\n    name: '',\n    url: '',\n    enabled: true,\n    streamingEnabled: true,\n    width: 1280,\n    height: 720,\n    fps: 15,\n    codec: 'h264',\n    protocol: '0',\n    priority: '5',\n    segment: 30,\n    record: true,\n    recordAudio: true,\n    detectionEnabled: false,\n    detectionModel: '',\n    detectionThreshold: 50,\n    detectionInterval: 10,\n    preBuffer: 10,\n    postBuffer: 30\n  });\n  const [isEditing, setIsEditing] = useState(false);\n\n  // State for delete modal\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\n  const [streamToDelete, setStreamToDelete] = useState(null);\n\n  // Compute hasData from streams\n  const hasData = streams && streams.length > 0;\n\n  // Extract detection models from query result\n  const detectionModels = detectionModelsData?.models || [];\n\n  // Mutations for saving stream (create or update)\n  const createStreamMutation = useMutation({\n    mutationFn: async (streamData) => {\n      return await fetchJSON('/api/streams', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(streamData),\n        timeout: 15000,\n        retries: 1,\n        retryDelay: 1000\n      });\n    },\n    onSuccess: () => {\n      showStatusMessage('Stream added successfully');\n      closeModal();\n      // Invalidate and refetch streams data\n      queryClient.invalidateQueries({ queryKey: ['streams'] });\n    },\n    onError: (error) => {\n      showStatusMessage(`Error adding stream: ${error.message}`, 5000, 'error');\n    }\n  });\n\n  const updateStreamMutation = useMutation({\n    mutationFn: async (streamData) => {\n      return await fetchJSON(`/api/streams/${encodeURIComponent(streamData.name)}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(streamData),\n        timeout: 15000,\n        retries: 1,\n        retryDelay: 1000\n      });\n    },\n    onSuccess: () => {\n      showStatusMessage('Stream updated successfully');\n      closeModal();\n      // Invalidate and refetch streams data\n      queryClient.invalidateQueries({ queryKey: ['streams'] });\n    },\n    onError: (error) => {\n      showStatusMessage(`Error updating stream: ${error.message}`, 5000, 'error');\n    }\n  });\n\n  // Helper function to use the appropriate mutation based on editing state\n  const saveStreamMutation = {\n    mutate: (streamData, options) => {\n      if (isEditing) {\n        updateStreamMutation.mutate(streamData, options);\n      } else {\n        createStreamMutation.mutate(streamData, options);\n      }\n    }\n  };\n\n  // Mutation for testing stream connection\n  const testStreamMutation = useMutation({\n    mutationFn: async (streamData) => {\n      showStatusMessage('Testing stream connection...');\n\n      return await fetchJSON('/api/streams/test', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          url: streamData.url,\n          protocol: parseInt(streamData.protocol, 10)\n        }),\n        timeout: 20000,\n        retries: 1,\n        retryDelay: 2000\n      });\n    },\n    onSuccess: (data) => {\n      if (data.success) {\n        showStatusMessage('Stream connection successful!', 3000, 'success');\n      } else {\n        showStatusMessage(`Stream connection failed: ${data.message}`, 5000, 'error');\n      }\n    },\n    onError: (error) => {\n      showStatusMessage(`Error testing stream: ${error.message}`, 5000, 'error');\n    }\n  });\n\n  // Mutation for deleting stream\n  const deleteStreamMutation = useMutation({\n    mutationFn: async ({ streamId, permanent }) => {\n      const url = permanent\n        ? `/api/streams/${encodeURIComponent(streamId)}?permanent=true`\n        : `/api/streams/${encodeURIComponent(streamId)}`;\n\n      return await fetchJSON(url, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        timeout: 10000,\n        retries: 1,\n        retryDelay: 1000\n      });\n    },\n    onSuccess: () => {\n      showStatusMessage('Stream deleted successfully');\n      closeDeleteModal();\n      // Invalidate and refetch streams data\n      queryClient.invalidateQueries({ queryKey: ['streams'] });\n    },\n    onError: (error) => {\n      showStatusMessage(`Error deleting stream: ${error.message}`, 5000, 'error');\n    }\n  });\n\n  // Mutation for toggling stream enabled state\n  const toggleStreamEnabledMutation = useMutation({\n    mutationFn: async ({ streamId, enabled }) => {\n      return await fetchJSON(`/api/streams/${encodeURIComponent(streamId)}/enable`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ enabled: !enabled }),\n        timeout: 10000,\n        retries: 1,\n        retryDelay: 1000\n      });\n    },\n    onSuccess: (_, variables) => {\n      showStatusMessage(`Stream ${variables.enabled ? 'disabled' : 'enabled'} successfully`);\n      // Invalidate and refetch streams data\n      queryClient.invalidateQueries({ queryKey: ['streams'] });\n    },\n    onError: (error) => {\n      showStatusMessage(`Error toggling stream state: ${error.message}`, 5000, 'error');\n    }\n  });\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Prepare stream data for API\n    const streamData = {\n      name: currentStream.name,\n      url: currentStream.url,\n      enabled: currentStream.enabled,\n      streaming_enabled: currentStream.streamingEnabled,\n      width: parseInt(currentStream.width, 10),\n      height: parseInt(currentStream.height, 10),\n      fps: parseInt(currentStream.fps, 10),\n      codec: currentStream.codec,\n      protocol: parseInt(currentStream.protocol, 10),\n      priority: parseInt(currentStream.priority, 10),\n      segment_duration: parseInt(currentStream.segment, 10),\n      record: currentStream.record,\n      detection_based_recording: currentStream.detectionEnabled,\n      detection_model: currentStream.detectionModel,\n      detection_threshold: parseInt(currentStream.detectionThreshold, 10),\n      detection_interval: parseInt(currentStream.detectionInterval, 10),\n      pre_detection_buffer: parseInt(currentStream.preBuffer, 10),\n      post_detection_buffer: parseInt(currentStream.postBuffer, 10),\n      record_audio: currentStream.recordAudio\n    };\n\n    // When editing, set is_deleted to false to allow undeleting soft-deleted streams\n    if (isEditing) {\n      streamData.is_deleted = false;\n    }\n\n    // Use mutation to save stream\n    saveStreamMutation.mutate(streamData);\n  };\n\n  // Save stream (wrapper for handleSubmit to use in onClick)\n  const saveStream = (e) => {\n    handleSubmit(e);\n  };\n\n  // Test stream connection\n  const testStreamConnection = () => {\n    testStreamMutation.mutate(currentStream);\n  };\n\n  // Open delete modal\n  const openDeleteModal = (stream) => {\n    setStreamToDelete(stream);\n    setDeleteModalVisible(true);\n  };\n\n  // Close delete modal\n  const closeDeleteModal = () => {\n    setDeleteModalVisible(false);\n    setStreamToDelete(null);\n  };\n\n  // Handle delete confirmation\n  const confirmDelete = () => {\n    if (streamToDelete) {\n      deleteStreamMutation.mutate(streamToDelete.name);\n    }\n  };\n\n  // Open add stream modal\n  const openAddStreamModal = () => {\n    setCurrentStream({\n      name: '',\n      url: '',\n      enabled: true,\n      streamingEnabled: true,\n      width: 1280,\n      height: 720,\n      fps: 15,\n      codec: 'h264',\n      protocol: '0',\n      priority: '5',\n      segment: 30,\n      record: true,\n      recordAudio: true,\n      detectionEnabled: false,\n      detectionModel: '',\n      detectionThreshold: 50,\n      detectionInterval: 10,\n      preBuffer: 10,\n      postBuffer: 30\n    });\n    setIsEditing(false);\n    setModalVisible(true);\n  };\n\n  // Open edit stream modal\n  const openEditStreamModal = async (streamId) => {\n    try {\n      // Use queryClient to fetch stream details\n      const stream = await queryClient.fetchQuery({\n        queryKey: ['stream', streamId],\n        queryFn: async () => {\n          const response = await fetch(`/api/streams/${encodeURIComponent(streamId)}`);\n          if (!response.ok) {\n            throw new Error(`HTTP error ${response.status}`);\n          }\n          return response.json();\n        },\n        staleTime: 10000 // 10 seconds\n      });\n\n      setCurrentStream({\n        ...stream,\n        // Convert numeric values to strings for form inputs\n        width: stream.width || 1280,\n        height: stream.height || 720,\n        fps: stream.fps || 15,\n        protocol: stream.protocol?.toString() || '0',\n        priority: stream.priority?.toString() || '5',\n        segment: stream.segment_duration || 30,\n        detectionThreshold: stream.detection_threshold || 50,\n        detectionInterval: stream.detection_interval || 10,\n        preBuffer: stream.pre_detection_buffer || 10,\n        postBuffer: stream.post_detection_buffer || 30,\n        // Map API fields to form fields\n        streamingEnabled: stream.streaming_enabled !== undefined ? stream.streaming_enabled : true,\n        isOnvif: stream.is_onvif !== undefined ? stream.is_onvif : false,\n        detectionEnabled: stream.detection_based_recording || false,\n        detectionModel: stream.detection_model || '',\n        recordAudio: stream.record_audio !== undefined ? stream.record_audio : true\n      });\n      setIsEditing(true);\n      setModalVisible(true);\n    } catch (error) {\n      console.error('Error loading stream details:', error);\n      showStatusMessage('Error loading stream details: ' + error.message);\n    }\n  };\n\n  // Close modal\n  const closeModal = () => {\n    setModalVisible(false);\n  };\n\n  // Open ONVIF discovery modal\n  const openOnvifModal = () => {\n    setDiscoveredDevices([]);\n    setDeviceProfiles([]);\n    setSelectedDevice(null);\n    setSelectedProfile(null);\n    setCustomStreamName('');\n    setOnvifModalVisible(true);\n  };\n\n  // Close ONVIF modal\n  const closeOnvifModal = () => {\n    setOnvifModalVisible(false);\n  };\n\n  // Handle form input change\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setCurrentStream(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n\n  // Disable stream (soft delete)\n  const disableStream = (streamId) => {\n    deleteStreamMutation.mutate({ streamId, permanent: false });\n  };\n\n  // Delete stream (permanent)\n  const deleteStream = (streamId) => {\n    deleteStreamMutation.mutate({ streamId, permanent: true });\n  };\n\n  // Enable/disable stream\n  const toggleStreamEnabled = (streamId, enabled) => {\n    toggleStreamEnabledMutation.mutate({ streamId, enabled });\n  };\n\n  // Handle ONVIF credential input change\n  const handleCredentialChange = (e) => {\n    const { name, value } = e.target;\n    setOnvifCredentials(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Handle threshold change\n  const handleThresholdChange = (e) => {\n    const value = e.target.value;\n    setCurrentStream(prev => ({\n      ...prev,\n      detectionThreshold: value\n    }));\n  };\n\n  // Load detection models\n  const loadDetectionModels = () => {\n    queryClient.invalidateQueries({ queryKey: ['detectionModels'] });\n  };\n\n  // ONVIF discovery mutation\n  const onvifDiscoveryMutation = useMutation({\n    mutationFn: async () => {\n      setIsDiscovering(true);\n      return await fetchJSON('/api/onvif/discovery/discover', {\n        method: 'POST',\n        timeout: 120000,\n        retries: 0,\n        body: JSON.stringify({})\n      });\n    },\n    onSuccess: (data) => {\n      setDiscoveredDevices(data.devices || []);\n      setIsDiscovering(false);\n    },\n    onError: (error) => {\n      showStatusMessage(`Error discovering ONVIF devices: ${error.message}`, 5000, 'error');\n      setIsDiscovering(false);\n    }\n  });\n\n  // Get device profiles mutation\n  const getDeviceProfilesMutation = useMutation({\n    mutationFn: async ({ device, credentials }) => {\n      setIsLoadingProfiles(true);\n      return await fetchJSON('/api/onvif/device/profiles', {\n        method: 'GET',\n        headers: {\n          'X-Device-URL': `http://${device.ip_address}/onvif/device_service`,\n          'X-Username': credentials.username,\n          'X-Password': credentials.password\n        },\n        timeout: 20000,\n        retries: 0\n      });\n    },\n    onSuccess: (data) => {\n      setDeviceProfiles(data.profiles || []);\n      setIsLoadingProfiles(false);\n    },\n    onError: (error) => {\n      showStatusMessage(`Error loading device profiles: ${error.message}`, 5000, 'error');\n      setIsLoadingProfiles(false);\n    }\n  });\n\n  // Test ONVIF connection mutation\n  const testOnvifConnectionMutation = useMutation({\n    mutationFn: async (device) => {\n      setIsLoadingProfiles(true);\n      return await fetchJSON('/api/onvif/device/test', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          url: `http://${device.ip_address}/onvif/device_service`,\n          username: onvifCredentials.username,\n          password: onvifCredentials.password\n        }),\n        timeout: 15000,\n        retries: 0\n      });\n    },\n    onSuccess: (data, variables) => {\n      if (data.success) {\n        showStatusMessage('Connection successful!', 3000, 'success');\n        getDeviceProfiles(variables);\n      } else {\n        showStatusMessage(`Connection failed: ${data.message}`, 5000, 'error');\n        setIsLoadingProfiles(false);\n      }\n    },\n    onError: (error) => {\n      showStatusMessage(`Error testing connection: ${error.message}`, 5000, 'error');\n      setIsLoadingProfiles(false);\n    }\n  });\n\n\n\n  // Submit ONVIF device\n  const submitOnvifDevice = () => {\n    if (!selectedDevice || !selectedProfile || !customStreamName.trim()) {\n      showStatusMessage('Missing required information', 5000, 'error');\n      return;\n    }\n\n    setIsAddingStream(true);\n\n    // Prepare stream data\n    const streamData = {\n      name: customStreamName.trim(),\n      url: selectedProfile.stream_uri, // Use stream_uri instead of url\n      enabled: true,\n      streaming_enabled: true,\n      width: selectedProfile.width,\n      height: selectedProfile.height,\n      fps: selectedProfile.fps || 15,\n      codec: selectedProfile.encoding === 'H264' ? 'h264' : 'h265',\n      protocol: '0', // TCP\n      priority: '5', // Medium\n      segment_duration: 30,\n      record: true,\n      record_audio: true,\n      is_onvif: true\n    };\n\n    // Log the stream data for debugging\n    console.log('Adding ONVIF stream with data:', streamData);\n\n    // Use mutation to save stream\n    saveStreamMutation.mutate(streamData, {\n      onSuccess: () => {\n        setIsAddingStream(false);\n        setShowCustomNameInput(false);\n        setOnvifModalVisible(false);\n      },\n      onError: () => {\n        setIsAddingStream(false);\n      },\n      isEditing: false,\n    });\n  };\n\n  // Start ONVIF discovery\n  const startOnvifDiscovery = () => {\n    onvifDiscoveryMutation.mutate();\n  };\n\n  // Get ONVIF device profiles\n  const getDeviceProfiles = (device) => {\n    setSelectedDevice(device);\n    setDeviceProfiles([]);\n    getDeviceProfilesMutation.mutate({\n      device,\n      credentials: onvifCredentials\n    });\n  };\n\n  // Handle custom stream name change\n  const handleStreamNameChange = (e) => {\n    setCustomStreamName(e.target.value);\n  };\n\n  // Add ONVIF device as stream with selected profile\n  const addOnvifDeviceAsStream = (profile) => {\n    setSelectedProfile(profile);\n    setCustomStreamName(`${selectedDevice.name || 'ONVIF'}_${profile.name || 'Stream'}`);\n    setShowCustomNameInput(true);\n  };\n\n  // Test ONVIF connection\n  const testOnvifConnection = (device) => {\n    testOnvifConnectionMutation.mutate(device);\n  };\n\n  return html`\n    <section id=\"streams-page\" class=\"page\">\n      <div class=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <h2 class=\"text-xl font-bold\">Streams</h2>\n        <div class=\"controls flex space-x-2\">\n          <button\n              id=\"discover-onvif-btn\"\n              class=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n              onClick=${() => setOnvifModalVisible(true)}\n          >\n            Discover ONVIF Cameras\n          </button>\n          <button\n              id=\"add-stream-btn\"\n              class=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n              onClick=${openAddStreamModal}\n          >\n            Add Stream\n          </button>\n        </div>\n      </div>\n\n      <${ContentLoader}\n          isLoading=${isLoading}\n          hasData=${hasData}\n          loadingMessage=\"Loading streams...\"\n          emptyMessage=\"No streams configured yet. Click 'Add Stream' to create one.\"\n      >\n        <div class=\"streams-container bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden\">\n          <div class=\"overflow-x-auto\">\n            <table id=\"streams-table\" class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n              <thead class=\"bg-gray-50 dark:bg-gray-700\">\n              <tr>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Name</th>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">URL</th>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Resolution</th>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">FPS</th>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Recording</th>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Actions</th>\n              </tr>\n              </thead>\n              <tbody class=\"bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700\">\n              ${streams.map(stream => html`\n                <tr key=${stream.name} class=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                  <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <div class=\"flex items-center\">\n                      <span class=${`status-indicator w-2 h-2 rounded-full mr-2 ${stream.enabled ? 'bg-green-500' : 'bg-red-500'}`}></span>\n                      ${stream.name}\n                    </div>\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap\">${stream.url}</td>\n                  <td class=\"px-6 py-4 whitespace-nowrap\">${stream.width}x${stream.height}</td>\n                  <td class=\"px-6 py-4 whitespace-nowrap\">${stream.fps}</td>\n                  <td class=\"px-6 py-4 whitespace-nowrap\">\n                    ${stream.record ? 'Enabled' : 'Disabled'}\n                    ${stream.detection_based_recording ? ' (Detection)' : ''}\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <div class=\"flex space-x-2\">\n                      <button\n                          class=\"p-1 rounded-full text-blue-600 hover:bg-blue-100 dark:text-blue-400 dark:hover:bg-blue-900 focus:outline-none\"\n                          onClick=${() => openEditStreamModal(stream.name)}\n                          title=\"Edit\"\n                      >\n                        <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path d=\"M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z\"></path>\n                        </svg>\n                      </button>\n                      <button\n                          class=\"p-1 rounded-full text-red-600 hover:bg-red-100 dark:text-red-400 dark:hover:bg-red-900 focus:outline-none\"\n                          onClick=${() => openDeleteModal(stream)}\n                          title=\"Delete\"\n                      >\n                        <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path fill-rule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clip-rule=\"evenodd\"></path>\n                        </svg>\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              `)}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      <//>\n\n      ${deleteModalVisible && streamToDelete && html`\n        <${StreamDeleteModal}\n            streamId=${streamToDelete.name}\n            streamName=${streamToDelete.name}\n            onClose=${closeDeleteModal}\n            onDisable=${disableStream}\n            onDelete=${deleteStream}\n        />\n      `}\n\n      ${modalVisible && html`\n        <div id=\"stream-modal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300\">\n          <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n            <div class=\"flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700\">\n              <h3 class=\"text-lg font-medium\">${isEditing ? 'Edit Stream' : 'Add Stream'}</h3>\n              <span class=\"text-2xl cursor-pointer\" onClick=${closeModal}>×</span>\n            </div>\n            <div class=\"p-4\">\n              <form id=\"stream-form\" class=\"space-y-4\">\n                <div class=\"form-group\">\n                  <label for=\"stream-name\" class=\"block text-sm font-medium mb-1\">Name</label>\n                  <input\n                      type=\"text\"\n                      id=\"stream-name\"\n                      name=\"name\"\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white ${isEditing ? 'bg-gray-100 dark:bg-gray-800' : ''}\"\n                      value=${currentStream.name}\n                      onChange=${handleInputChange}\n                      disabled=${isEditing}\n                      required\n                  />\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"stream-url\" class=\"block text-sm font-medium mb-1\">URL</label>\n                  <input\n                      type=\"text\"\n                      id=\"stream-url\"\n                      name=\"url\"\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      placeholder=\"rtsp://example.com/stream\"\n                      value=${currentStream.url}\n                      onChange=${handleInputChange}\n                      required\n                  />\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input\n                      type=\"checkbox\"\n                      id=\"stream-enabled\"\n                      name=\"enabled\"\n                      class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                      checked=${currentStream.enabled}\n                      onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-enabled\" class=\"ml-2 block text-sm\">Stream Active</label>\n                  <span class=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">Enable/disable all stream processing</span>\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input\n                      type=\"checkbox\"\n                      id=\"stream-streaming-enabled\"\n                      name=\"streamingEnabled\"\n                      class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                      checked=${currentStream.streamingEnabled}\n                      onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-streaming-enabled\" class=\"ml-2 block text-sm\">Live View Enabled</label>\n                  <span class=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">Enable/disable live viewing in browser</span>\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input\n                      type=\"checkbox\"\n                      id=\"stream-is-onvif\"\n                      name=\"isOnvif\"\n                      class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                      checked=${currentStream.isOnvif}\n                      onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-is-onvif\" class=\"ml-2 block text-sm\">ONVIF Camera</label>\n                  <span class=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">Mark this stream as an ONVIF camera for special handling</span>\n                </div>\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div class=\"form-group\">\n                    <label for=\"stream-width\" class=\"block text-sm font-medium mb-1\">Width</label>\n                    <input\n                        type=\"number\"\n                        id=\"stream-width\"\n                        name=\"width\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        min=\"320\"\n                        max=\"1920\"\n                        value=${currentStream.width}\n                        onChange=${handleInputChange}\n                    />\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-height\" class=\"block text-sm font-medium mb-1\">Height</label>\n                    <input\n                        type=\"number\"\n                        id=\"stream-height\"\n                        name=\"height\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        min=\"240\"\n                        max=\"1080\"\n                        value=${currentStream.height}\n                        onChange=${handleInputChange}\n                    />\n                  </div>\n                </div>\n                <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div class=\"form-group\">\n                    <label for=\"stream-fps\" class=\"block text-sm font-medium mb-1\">FPS</label>\n                    <input\n                        type=\"number\"\n                        id=\"stream-fps\"\n                        name=\"fps\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        min=\"1\"\n                        max=\"30\"\n                        value=${currentStream.fps}\n                        onChange=${handleInputChange}\n                    />\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-codec\" class=\"block text-sm font-medium mb-1\">Codec</label>\n                    <select\n                        id=\"stream-codec\"\n                        name=\"codec\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        value=${currentStream.codec}\n                        onChange=${handleInputChange}\n                    >\n                      <option value=\"h264\">H.264</option>\n                      <option value=\"h265\">H.265</option>\n                    </select>\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-protocol\" class=\"block text-sm font-medium mb-1\">Protocol</label>\n                    <select\n                        id=\"stream-protocol\"\n                        name=\"protocol\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        value=${currentStream.protocol}\n                        onChange=${handleInputChange}\n                    >\n                      <option value=\"0\">TCP</option>\n                      <option value=\"1\">UDP</option>\n                    </select>\n                    <span class=\"text-xs text-gray-500 dark:text-gray-400\">Connection protocol (ONVIF cameras use either TCP or UDP)</span>\n                  </div>\n                </div>\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div class=\"form-group\">\n                    <label for=\"stream-priority\" class=\"block text-sm font-medium mb-1\">Priority</label>\n                    <select\n                        id=\"stream-priority\"\n                        name=\"priority\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        value=${currentStream.priority}\n                        onChange=${handleInputChange}\n                    >\n                      <option value=\"1\">Low (1)</option>\n                      <option value=\"5\">Medium (5)</option>\n                      <option value=\"10\">High (10)</option>\n                    </select>\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-segment\" class=\"block text-sm font-medium mb-1\">Segment Duration (seconds)</label>\n                    <input\n                        type=\"number\"\n                        id=\"stream-segment\"\n                        name=\"segment\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        min=\"60\"\n                        max=\"3600\"\n                        value=${currentStream.segment}\n                        onChange=${handleInputChange}\n                    />\n                  </div>\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input\n                      type=\"checkbox\"\n                      id=\"stream-record\"\n                      name=\"record\"\n                      class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                      checked=${currentStream.record}\n                      onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-record\" class=\"ml-2 block text-sm\">Record</label>\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input\n                      type=\"checkbox\"\n                      id=\"stream-record-audio\"\n                      name=\"recordAudio\"\n                      class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                      checked=${currentStream.recordAudio}\n                      onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-record-audio\" class=\"ml-2 block text-sm\">Record Audio</label>\n                  <span class=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">Include audio in recordings if available in the stream</span>\n                </div>\n\n                <!-- Detection-based recording options -->\n                <div class=\"mt-6 mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">\n                  <h4 class=\"text-md font-medium\">Detection-Based Recording</h4>\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input\n                      type=\"checkbox\"\n                      id=\"stream-detection-enabled\"\n                      name=\"detectionEnabled\"\n                      class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                      checked=${currentStream.detectionEnabled}\n                      onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-detection-enabled\" class=\"ml-2 block text-sm\">Enable Detection-Based Recording</label>\n                  <span class=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">Only record when objects are detected</span>\n                </div>\n                <div class=\"form-group\" style=${currentStream.detectionEnabled ? '' : 'display: none'}>\n                  <label for=\"stream-detection-model\" class=\"block text-sm font-medium mb-1\">Detection Model</label>\n                  <div class=\"flex space-x-2\">\n                    <select\n                        id=\"stream-detection-model\"\n                        name=\"detectionModel\"\n                        class=\"flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        value=${currentStream.detectionModel}\n                        onChange=${handleInputChange}\n                    >\n                      <option value=\"\">Select a model</option>\n                      ${detectionModels.map(model => html`\n                        <option key=${model.id} value=${model.id}>${model.name}</option>\n                      `)}\n                    </select>\n                    <button\n                        id=\"refresh-models-btn\"\n                        class=\"p-2 rounded-md bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none\"\n                        title=\"Refresh Models\"\n                        onClick=${loadDetectionModels}\n                        type=\"button\"\n                    >\n                      <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\" clip-rule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                  </div>\n                </div>\n                <div class=\"form-group\" style=${currentStream.detectionEnabled ? '' : 'display: none'}>\n                  <label for=\"stream-detection-threshold\" class=\"block text-sm font-medium mb-1\">Detection Threshold</label>\n                  <div class=\"flex items-center space-x-2\">\n                    <input\n                        type=\"range\"\n                        id=\"stream-detection-threshold\"\n                        name=\"detectionThreshold\"\n                        class=\"flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"\n                        min=\"0\"\n                        max=\"100\"\n                        step=\"1\"\n                        value=${currentStream.detectionThreshold}\n                        onInput=${handleThresholdChange}\n                    />\n                    <span id=\"stream-threshold-value\" class=\"font-medium text-blue-600 dark:text-blue-400 min-w-[3rem] text-center\">\n                      ${currentStream.detectionThreshold}%\n                    </span>\n                  </div>\n                </div>\n                <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\" style=${currentStream.detectionEnabled ? '' : 'display: none'}>\n                  <div class=\"form-group\">\n                    <label for=\"stream-detection-interval\" class=\"block text-sm font-medium mb-1\">Detection Interval (frames)</label>\n                    <input\n                        type=\"number\"\n                        id=\"stream-detection-interval\"\n                        name=\"detectionInterval\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        min=\"1\"\n                        max=\"100\"\n                        value=${currentStream.detectionInterval}\n                        onChange=${handleInputChange}\n                    />\n                    <span class=\"text-xs text-gray-500 dark:text-gray-400\">Detect on every Nth frame</span>\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-pre-buffer\" class=\"block text-sm font-medium mb-1\">Pre-detection Buffer (seconds)</label>\n                    <input\n                        type=\"number\"\n                        id=\"stream-pre-buffer\"\n                        name=\"preBuffer\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        min=\"0\"\n                        max=\"60\"\n                        value=${currentStream.preBuffer}\n                        onChange=${handleInputChange}\n                    />\n                    <span class=\"text-xs text-gray-500 dark:text-gray-400\">Seconds to keep before detection</span>\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-post-buffer\" class=\"block text-sm font-medium mb-1\">Post-detection Buffer (seconds)</label>\n                    <input\n                        type=\"number\"\n                        id=\"stream-post-buffer\"\n                        name=\"postBuffer\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        min=\"0\"\n                        max=\"300\"\n                        value=${currentStream.postBuffer}\n                        onChange=${handleInputChange}\n                    />\n                    <span class=\"text-xs text-gray-500 dark:text-gray-400\">Seconds to keep after detection</span>\n                  </div>\n                </div>\n              </form>\n            </div>\n            <div class=\"flex justify-between p-4 border-t border-gray-200 dark:border-gray-700\">\n              <button\n                  id=\"stream-test-btn\"\n                  class=\"px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition-colors dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600\"\n                  onClick=${testStreamConnection}\n                  type=\"button\"\n              >\n                Test Connection\n              </button>\n              <div class=\"space-x-2\">\n                <button\n                    id=\"stream-save-btn\"\n                    class=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n                    onClick=${saveStream}\n                    type=\"button\"\n                >\n                  Save\n                </button>\n                <button\n                    id=\"stream-cancel-btn\"\n                    class=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors\"\n                    onClick=${closeModal}\n                    type=\"button\"\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      `}\n\n      ${onvifModalVisible && html`\n        <div id=\"onvif-modal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300\">\n          <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n            <div class=\"flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700\">\n              <h3 class=\"text-lg font-medium\">ONVIF Camera Discovery</h3>\n              <span class=\"text-2xl cursor-pointer\" onClick=${() => setOnvifModalVisible(false)}>×</span>\n            </div>\n            <div class=\"p-4\">\n              <div class=\"mb-4 flex justify-between items-center\">\n                <h4 class=\"text-md font-medium\">Discovered Devices</h4>\n                <button\n                    id=\"discover-btn\"\n                    class=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors focus:outline-none\"\n                    onClick=${startOnvifDiscovery}\n                    disabled=${isDiscovering}\n                    type=\"button\"\n                >\n                  ${isDiscovering ? html`\n                    <span class=\"flex items-center\">\n                      Discovering\n                      <span class=\"ml-1 flex space-x-1\">\n                        <span class=\"animate-pulse delay-0 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                        <span class=\"animate-pulse delay-150 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                        <span class=\"animate-pulse delay-300 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                      </span>\n                    </span>\n                  ` : 'Start Discovery'}\n                </button>\n              </div>\n\n              <div class=\"overflow-x-auto\">\n                <table class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                  <thead class=\"bg-gray-50 dark:bg-gray-700\">\n                  <tr>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">IP Address</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Manufacturer</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Model</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Actions</th>\n                  </tr>\n                  </thead>\n                  <tbody class=\"bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700\">\n                  ${discoveredDevices.length === 0 ? html`\n                    <tr>\n                      <td colspan=\"4\" class=\"px-6 py-4 text-center text-gray-500 dark:text-gray-400\">\n                        ${isDiscovering ? html`\n                          <div class=\"flex items-center justify-center\">\n                            <span>Discovering devices</span>\n                            <span class=\"ml-1 flex space-x-1\">\n                                <span class=\"animate-pulse delay-0 h-1.5 w-1.5 bg-gray-500 dark:bg-gray-400 rounded-full\"></span>\n                                <span class=\"animate-pulse delay-150 h-1.5 w-1.5 bg-gray-500 dark:bg-gray-400 rounded-full\"></span>\n                                <span class=\"animate-pulse delay-300 h-1.5 w-1.5 bg-gray-500 dark:bg-gray-400 rounded-full\"></span>\n                              </span>\n                          </div>\n                        ` : 'No devices discovered yet. Click \"Start Discovery\" to scan your network.'}\n                      </td>\n                    </tr>\n                  ` : discoveredDevices.map(device => html`\n                    <tr key=${device.ip_address} class=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                      <td class=\"px-6 py-4 whitespace-nowrap\">${device.ip_address}</td>\n                      <td class=\"px-6 py-4 whitespace-nowrap\">${device.manufacturer || 'Unknown'}</td>\n                      <td class=\"px-6 py-4 whitespace-nowrap\">${device.model || 'Unknown'}</td>\n                      <td class=\"px-6 py-4 whitespace-nowrap\">\n                        <button\n                            class=\"px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none\"\n                            onClick=${() => testOnvifConnection(device)}\n                            disabled=${isLoadingProfiles && selectedDevice && selectedDevice.ip_address === device.ip_address}\n                            type=\"button\"\n                        >\n                          ${isLoadingProfiles && selectedDevice && selectedDevice.ip_address === device.ip_address ? html`\n                            <span class=\"flex items-center\">\n                                Loading\n                                <span class=\"ml-1 flex space-x-1\">\n                                  <span class=\"animate-pulse delay-0 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                                  <span class=\"animate-pulse delay-150 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                                  <span class=\"animate-pulse delay-300 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                                </span>\n                              </span>\n                          ` : 'Connect'}\n                        </button>\n                      </td>\n                    </tr>\n                  `)}\n                  </tbody>\n                </table>\n              </div>\n\n              <div class=\"mt-6 mb-4\">\n                <h4 class=\"text-md font-medium mb-2\">Authentication</h4>\n                <p class=\"text-sm text-gray-500 dark:text-gray-400 mb-3\">\n                  Enter credentials to connect to the selected ONVIF device. Credentials are not needed for discovery, only for connecting to devices.\n                </p>\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div class=\"form-group\">\n                    <label for=\"onvif-username\" class=\"block text-sm font-medium mb-1\">Username</label>\n                    <input\n                        type=\"text\"\n                        id=\"onvif-username\"\n                        name=\"username\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        placeholder=\"admin\"\n                        value=${onvifCredentials.username}\n                        onChange=${handleCredentialChange}\n                    />\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"onvif-password\" class=\"block text-sm font-medium mb-1\">Password</label>\n                    <input\n                        type=\"password\"\n                        id=\"onvif-password\"\n                        name=\"password\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        placeholder=\"password\"\n                        value=${onvifCredentials.password}\n                        onChange=${handleCredentialChange}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              ${selectedDevice && deviceProfiles.length > 0 && html`\n                <div class=\"mt-6\">\n                  <h4 class=\"text-md font-medium mb-2\">Available Profiles for ${selectedDevice.ip_address}</h4>\n                  <div class=\"overflow-x-auto\">\n                    <table class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                      <thead class=\"bg-gray-50 dark:bg-gray-700\">\n                      <tr>\n                        <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Name</th>\n                        <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Resolution</th>\n                        <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Encoding</th>\n                        <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">FPS</th>\n                        <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Actions</th>\n                      </tr>\n                      </thead>\n                      <tbody class=\"bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700\">\n                      ${deviceProfiles.map(profile => html`\n                        <tr key=${profile.token} class=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                          <td class=\"px-6 py-4 whitespace-nowrap\">${profile.name}</td>\n                          <td class=\"px-6 py-4 whitespace-nowrap\">${profile.width}x${profile.height}</td>\n                          <td class=\"px-6 py-4 whitespace-nowrap\">${profile.encoding}</td>\n                          <td class=\"px-6 py-4 whitespace-nowrap\">${profile.fps}</td>\n                          <td class=\"px-6 py-4 whitespace-nowrap\">\n                            <button\n                                class=\"px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 transition-colors focus:outline-none\"\n                                onClick=${() => addOnvifDeviceAsStream(profile)}\n                                type=\"button\"\n                            >\n                              Add as Stream\n                            </button>\n                          </td>\n                        </tr>\n                      `)}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              `}\n            </div>\n            <div class=\"flex justify-end p-4 border-t border-gray-200 dark:border-gray-700\">\n              <button\n                  id=\"onvif-close-btn\"\n                  class=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors\"\n                  onClick=${() => setOnvifModalVisible(false)}\n                  type=\"button\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      `}\n\n      ${showCustomNameInput && html`\n        <div id=\"custom-name-modal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300\">\n          <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full\">\n            <div class=\"flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700\">\n              <h3 class=\"text-lg font-medium\">Stream Name</h3>\n              <span class=\"text-2xl cursor-pointer\" onClick=${() => setShowCustomNameInput(false)}>×</span>\n            </div>\n            <div class=\"p-4\">\n              <div class=\"mb-4\">\n                <label for=\"custom-stream-name\" class=\"block text-sm font-medium mb-1\">Enter a name for this stream:</label>\n                <input\n                    type=\"text\"\n                    id=\"custom-stream-name\"\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                    value=${customStreamName}\n                    onChange=${(e) => setCustomStreamName(e.target.value)}\n                />\n                <p class=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                  This name will be used to identify the stream in the system.\n                </p>\n              </div>\n            </div>\n            <div class=\"flex justify-end p-4 border-t border-gray-200 dark:border-gray-700 space-x-2\">\n              <button\n                  class=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors\"\n                  onClick=${() => setShowCustomNameInput(false)}\n                  type=\"button\"\n              >\n                Cancel\n              </button>\n              <button\n                  class=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors\"\n                  onClick=${submitOnvifDevice}\n                  type=\"button\"\n                  disabled=${!customStreamName.trim() || isAddingStream}\n              >\n                ${isAddingStream ? html`\n                  <span class=\"flex items-center\">\n                    Adding\n                    <span class=\"ml-1 flex space-x-1\">\n                      <span class=\"animate-pulse delay-0 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                      <span class=\"animate-pulse delay-150 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                      <span class=\"animate-pulse delay-300 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                    </span>\n                  </span>\n                ` : 'Add Stream'}\n              </button>\n            </div>\n          </div>\n        </div>\n      `}\n    </section>\n  `;\n}\n\n/**\n * Load StreamsView component\n */\nexport function loadStreamsView() {\n  const mainContent = document.getElementById('main-content');\n  if (!mainContent) return;\n\n  // Render the StreamsView component to the container\n  import('preact').then(({ render }) => {\n    import('../../query-client.js').then(({ QueryClientProvider, queryClient }) => {\n      render(\n        html`<${QueryClientProvider} client=${queryClient}><${StreamsView} /></${QueryClientProvider}>`,\n        mainContent\n      );\n    });\n  });\n}"],"file":"assets/StreamsView-CyxEeXDb.js"}