{"version":3,"file":"login-legacy-D9untHiV.js","sources":["../../js/components/preact/LoginView.jsx","../../js/pages/login-page.jsx"],"sourcesContent":["/**\n * LightNVR Web Interface LoginView Component\n * Preact component for the login page\n */\n\nimport { useState, useRef, useEffect } from 'preact/hooks';\n\n/**\n * LoginView component\n * @returns {JSX.Element} LoginView component\n */\nexport function LoginView() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const redirectTimerRef = useRef(null);\n\n  // Check URL for error, auth_required, or logout parameter\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.has('error')) {\n      setErrorMessage('Invalid username or password');\n    } else if (urlParams.has('auth_required') && urlParams.has('logout')) {\n      setErrorMessage('You have been successfully logged out.');\n    } else if (urlParams.has('auth_required')) {\n      setErrorMessage('Authentication required. Please log in to continue.');\n    } else if (urlParams.has('logout')) {\n      setErrorMessage('You have been successfully logged out.');\n    }\n  }, []);\n\n  // Request controller for cancelling requests\n  const requestControllerRef = useRef(null);\n\n  // Cleanup function for any timers\n  useEffect(() => {\n    return () => {\n      if (redirectTimerRef.current) {\n        clearTimeout(redirectTimerRef.current);\n      }\n    };\n  }, []);\n\n  // Function to check if browser might be blocking redirects\n  const checkBrowserRedirectSupport = () => {\n    // Check if running in a sandboxed iframe which might block navigation\n    const isSandboxed = window !== window.top;\n\n    // Check if there are any service workers that might intercept navigation\n    const hasServiceWorker = 'serviceWorker' in navigator;\n\n    // Log potential issues\n    if (isSandboxed) {\n      console.warn('Login page is running in an iframe, which might block navigation');\n    }\n\n    if (hasServiceWorker) {\n      console.log('Service Worker API is available, checking for active service workers');\n      navigator.serviceWorker.getRegistrations().then(registrations => {\n        if (registrations.length > 0) {\n          console.warn(`${registrations.length} service worker(s) detected which might intercept navigation`);\n        } else {\n          console.log('No active service workers detected');\n        }\n      });\n    }\n\n    return { isSandboxed, hasServiceWorker };\n  };\n\n  // Handle login form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!username || !password) {\n      setErrorMessage('Please enter both username and password');\n      return;\n    }\n\n    setIsLoggingIn(true);\n    setErrorMessage('');\n\n    try {\n      // Store credentials in localStorage for future requests\n      const authString = btoa(`${username}:${password}`);\n      localStorage.setItem('auth', authString);\n\n      // Make login request\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Basic ${authString}`\n        },\n        body: JSON.stringify({ username, password }),\n        timeout: 10000\n      });\n\n      if (response.ok) {\n        // Successful login\n        console.log('Login successful, proceeding to redirect');\n\n        // Try multiple redirect approaches\n        try {\n          // Get redirect URL from query parameter if it exists\n          const urlParams = new URLSearchParams(window.location.search);\n          const redirectUrl = urlParams.get('redirect');\n\n          // Add timestamp to prevent caching issues\n          const targetUrl = redirectUrl\n              ? redirectUrl\n              : `/index.html`;\n\n\n          // Set a fallback timer in case the redirect doesn't happen immediately\n          redirectTimerRef.current = setTimeout(() => {\n            console.log('Fallback: trying window.location.href');\n            window.location.href = targetUrl;\n\n            // If that also doesn't work, try replace\n            redirectTimerRef.current = setTimeout(() => {\n              console.log('Fallback: trying window.location.replace');\n              window.location.replace(targetUrl);\n            }, 500);\n          }, 500);\n        } catch (redirectError) {\n          console.error('Redirect error:', redirectError);\n          // Last resort: try a different approach\n          window.location.replace('index.html');\n        }\n      } else {\n        // Failed login\n        setIsLoggingIn(false);\n        setErrorMessage('Invalid username or password');\n        localStorage.removeItem('auth');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      // Reset login state on error\n      setIsLoggingIn(false);\n      setErrorMessage('An error occurred during login. Please try again.');\n      localStorage.removeItem('auth');\n    }\n  };\n\n  // Determine error message class based on content\n  const getErrorMessageClass = () => {\n    const baseClass = \"mb-4 p-3 rounded-lg \";\n\n    // Check for success messages\n    const isSuccess = (\n      errorMessage.includes('successfully logged out') ||\n      errorMessage.includes('Click the button below') ||\n      errorMessage.includes('Login successful')\n    );\n\n    return baseClass + (\n      isSuccess\n        ? 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-200'\n        : 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-200'\n    );\n  };\n\n  return (\n    <section id=\"login-page\" className=\"page flex items-center justify-center min-h-screen\">\n      <div className=\"login-container w-full max-w-md p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-2xl font-bold\">LightNVR</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">Please sign in to continue</p>\n        </div>\n\n        {errorMessage && (\n          <div className={getErrorMessageClass()}>\n            {errorMessage}\n          </div>\n        )}\n\n        <form id=\"login-form\" className=\"space-y-6\" action=\"/api/auth/login\" method=\"POST\" onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"username\" className=\"block text-sm font-medium mb-1\">Username</label>\n            <input\n                type=\"text\"\n                id=\"username\"\n                name=\"username\"\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                placeholder=\"Enter your username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                required\n                autoComplete=\"username\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"password\" className=\"block text-sm font-medium mb-1\">Password</label>\n            <input\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                placeholder=\"Enter your password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                autoComplete=\"current-password\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <button\n                type=\"submit\"\n                className=\"w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n                disabled={isLoggingIn}\n            >\n              {isLoggingIn ? 'Signing in...' : 'Sign In'}\n            </button>\n          </div>\n        </form>\n\n        <div className=\"mt-6 text-center text-sm text-gray-600 dark:text-gray-400\">\n          <p>Default credentials: admin / admin</p>\n          <p className=\"mt-2\">You can change these in Settings after login</p>\n        </div>\n      </div>\n    </section>\n  );\n}\n","/**\n * LightNVR Web Interface Login Page\n * Entry point for the login page\n */\n\nimport { render } from 'preact';\nimport { LoginView } from '../components/preact/LoginView.jsx';\nimport { QueryClientProvider, queryClient } from '../query-client.js';\nimport { ToastContainer } from \"../components/preact/ToastContainer.jsx\";\n\n// Render the LoginView component when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Get the container element\n  const container = document.getElementById('main-content');\n\n  if (container) {\n    // Render the LoginView component\n    render(\n      <QueryClientProvider client={queryClient}>\n        <ToastContainer />\n        <LoginView />\n      </QueryClientProvider>,\n      container\n    );\n  }\n});\n"],"names":["LoginView","username","setUsername","useState","password","setPassword","isLoggingIn","setIsLoggingIn","errorMessage","setErrorMessage","redirectTimerRef","useRef","useEffect","urlParams","URLSearchParams","window","location","search","has","current","clearTimeout","jsx","id","className","children","jsxs","includes","action","method","onSubmit","async","e","preventDefault","authString","btoa","localStorage","setItem","fetch","headers","Authorization","body","JSON","stringify","timeout","ok","console","log","redirectUrl","get","targetUrl","setTimeout","href","replace","redirectError","error","removeItem","htmlFor","type","name","placeholder","value","onChange","target","required","autoComplete","disabled","document","addEventListener","container","getElementById","render","QueryClientProvider","client","queryClient","ToastContainer"],"mappings":"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"}