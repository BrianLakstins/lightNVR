{"version":3,"file":"LoginView-legacy-86b0FSTh.js","sources":["../../js/components/preact/LoginView.js"],"sourcesContent":["/**\n * LightNVR Web Interface LoginView Component\n * Preact component for the login page\n */\n\nimport { h } from '../../preact.min.js';\nimport { html } from '../../html-helper.js';\nimport { useState, useRef } from '../../preact.hooks.module.js';\nimport { showStatusMessage } from './UI.js';\nimport { enhancedFetch, createRequestController } from '../../fetch-utils.js';\n\n/**\n * LoginView component\n * @returns {JSX.Element} LoginView component\n */\nexport function LoginView() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  \n  // Check URL for error or auth_required parameter\n  useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.has('error')) {\n      setErrorMessage('Invalid username or password');\n    } else if (urlParams.has('auth_required')) {\n      setErrorMessage('Authentication required. Please log in to continue.');\n    }\n  }, []);\n  \n  // Request controller for cancelling requests\n  const requestControllerRef = useRef(null);\n\n  // Handle login form submission\n  const handleLogin = async (e) => {\n    e.preventDefault();\n    \n    if (!username || !password) {\n      setErrorMessage('Please enter both username and password');\n      return;\n    }\n    \n    setIsLoggingIn(true);\n    \n    // Create a new request controller\n    requestControllerRef.current = createRequestController();\n    \n    // Store credentials in localStorage for future requests\n    const auth = btoa(`${username}:${password}`);\n    localStorage.setItem('auth', auth);\n    \n    try {\n      // Make a fetch request to the login API using enhanced fetch\n      const response = await enhancedFetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Basic ' + auth,\n          // Add additional headers for Firefox compatibility\n          'X-Requested-With': 'XMLHttpRequest',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({ username, password }),\n        credentials: 'include',\n        mode: 'same-origin', // Explicitly set mode for Firefox\n        signal: requestControllerRef.current?.signal,\n        timeout: 5000,     // 5 second timeout\n        retries: 1,        // Retry once\n        retryDelay: 1000   // 1 second between retries\n      });\n      \n      if (response.ok || response.status === 302) {\n        // Successful login - redirect to live page\n        window.location.href = '/index.html?t=' + new Date().getTime();\n      } else {\n        // Failed login\n        setIsLoggingIn(false);\n        setErrorMessage('Invalid username or password');\n        localStorage.removeItem('auth');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      \n      // If it's a timeout error, proceed anyway with stored credentials\n      if (error.message === 'Request timed out' && localStorage.getItem('auth')) {\n        console.log('Login request timed out, proceeding with stored credentials');\n        window.location.href = '/index.html?t=' + new Date().getTime();\n      } \n      // For other errors, also try to proceed if we have credentials\n      else if (localStorage.getItem('auth')) {\n        console.log('Login API error, but proceeding with stored credentials');\n        window.location.href = '/index.html?t=' + new Date().getTime();\n      } else {\n        setIsLoggingIn(false);\n        setErrorMessage('Login failed. Please try again.');\n      }\n    }\n  };\n  \n  return html`\n    <section id=\"login-page\" class=\"page flex items-center justify-center min-h-screen\">\n      <div class=\"login-container w-full max-w-md p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg\">\n        <div class=\"text-center mb-8\">\n          <h1 class=\"text-2xl font-bold\">LightNVR</h1>\n          <p class=\"text-gray-600 dark:text-gray-400\">Please sign in to continue</p>\n        </div>\n        \n        ${errorMessage && html`\n          <div class=\"mb-4 p-3 bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-200 rounded-lg\">\n            ${errorMessage}\n          </div>\n        `}\n        \n        <form id=\"login-form\" class=\"space-y-6\" action=\"/api/auth/login\" method=\"POST\" onSubmit=${handleLogin}>\n          <div class=\"form-group\">\n            <label for=\"username\" class=\"block text-sm font-medium mb-1\">Username</label>\n            <input \n              type=\"text\" \n              id=\"username\" \n              name=\"username\"\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n              placeholder=\"Enter your username\" \n              value=${username}\n              onChange=${e => setUsername(e.target.value)}\n              required\n              autocomplete=\"username\"\n            />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\" class=\"block text-sm font-medium mb-1\">Password</label>\n            <input \n              type=\"password\" \n              id=\"password\" \n              name=\"password\"\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n              placeholder=\"Enter your password\" \n              value=${password}\n              onChange=${e => setPassword(e.target.value)}\n              required\n              autocomplete=\"current-password\"\n            />\n          </div>\n          <div class=\"form-group\">\n            <button \n              type=\"submit\" \n              class=\"w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              disabled=${isLoggingIn}\n            >\n              ${isLoggingIn ? 'Signing in...' : 'Sign In'}\n            </button>\n          </div>\n        </form>\n        \n        <div class=\"mt-6 text-center text-sm text-gray-600 dark:text-gray-400\">\n          <p>Default credentials: admin / admin</p>\n          <p class=\"mt-2\">You can change these in Settings after login</p>\n        </div>\n      </div>\n    </section>\n  `;\n}\n\n/**\n * Load LoginView component\n */\nexport function loadLoginView() {\n  const mainContent = document.getElementById('main-content');\n  if (!mainContent) return;\n  \n  // Render the LoginView component to the container\n  import('../../preact.min.js').then(({ render }) => {\n    render(html`<${LoginView} />`, mainContent);\n  });\n}\n"],"names":["LoginView","username","setUsername","useState","password","setPassword","isLoggingIn","setIsLoggingIn","errorMessage","setErrorMessage","urlParams","URLSearchParams","window","location","search","has","requestControllerRef","useRef","html","async","e","preventDefault","current","createRequestController","auth","btoa","localStorage","setItem","response","enhancedFetch","method","headers","Authorization","Accept","body","JSON","stringify","credentials","mode","signal","timeout","retries","retryDelay","ok","status","href","Date","getTime","removeItem","error","console","message","getItem","log","target","value","mainContent","document","getElementById","__vitePreload","render","module","import","then","n","p","meta","url"],"mappings":"qNAeO,SAASA,IACd,MAAOC,EAAUC,GAAeC,EAAS,KAClCC,EAAUC,GAAeF,EAAS,KAClCG,EAAaC,GAAkBJ,GAAS,IACxCK,EAAcC,GAAmBN,EAAS,IAGjDA,GAAS,KACP,MAAMO,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QAClDJ,EAAUK,IAAI,SAChBN,EAAgB,gCACPC,EAAUK,IAAI,kBACvBN,EAAgB,sDACtB,IAIE,MAAMO,EAAuBC,EAAO,MAoEpC,OAAOC,CAAI;;;;;;;;UAQHV,GAAgBU,CAAI;;cAEhBV;;;;kGA3EQW,UAGlB,GAFAC,EAAEC,kBAEGpB,IAAaG,EAEhB,YADAK,EAAgB,2CAIlBF,GAAe,GAGfS,EAAqBM,QAAUC,IAG/B,MAAMC,EAAOC,KAAK,GAAGxB,KAAYG,KACjCsB,aAAaC,QAAQ,OAAQH,GAE7B,IAEE,MAAMI,QAAiBC,EAAc,kBAAmB,CACtDC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAiB,SAAWR,EAE5B,mBAAoB,iBACpBS,OAAU,oBAEZC,KAAMC,KAAKC,UAAU,CAAEnC,WAAUG,aACjCiC,YAAa,UACbC,KAAM,cACNC,OAAQvB,EAAqBM,SAASiB,OACtCC,QAAS,IACTC,QAAS,EACTC,WAAY,MAGVd,EAASe,IAA0B,MAApBf,EAASgB,OAE1BhC,OAAOC,SAASgC,KAAO,kBAAmB,IAAIC,MAAOC,WAGrDxC,GAAe,GACfE,EAAgB,gCAChBiB,aAAasB,WAAW,QAE3B,CAAC,MAAOC,GACPC,QAAQD,MAAM,eAAgBA,GAGR,sBAAlBA,EAAME,SAAmCzB,aAAa0B,QAAQ,SAChEF,QAAQG,IAAI,+DACZzC,OAAOC,SAASgC,KAAO,kBAAmB,IAAIC,MAAOC,WAG9CrB,aAAa0B,QAAQ,SAC5BF,QAAQG,IAAI,2DACZzC,OAAOC,SAASgC,KAAO,kBAAmB,IAAIC,MAAOC,YAErDxC,GAAe,GACfE,EAAgB,mCAExB;;;;;;;;;sBA0BsBR;yBACGmB,GAAKlB,EAAYkB,EAAEkC,OAAOC;;;;;;;;;;;;;sBAa7BnD;yBACGgB,GAAKf,EAAYe,EAAEkC,OAAOC;;;;;;;;;yBAS1BjD;;gBAETA,EAAc,gBAAkB;;;;;;;;;;;GAYhD,8BAKO,WACL,MAAMkD,EAAcC,SAASC,eAAe,gBACvCF,GAGLG,GAAAxC,UAAA,MAAAyC,OAAAA,SAAAC,EAAOC,OAAA,mCAAqBC,MAAAC,GAAAA,EAAAC,IAAA,MAAA,CAAAL,SAAA,QAAA,EAAAC,EAAAK,KAAAC,KAAEJ,MAAK,EAAGH,aACpCA,EAAO1C,CAAI,IAAIlB,OAAgBwD,EAAY,GAE/C"}