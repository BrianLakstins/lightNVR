System.register(["./query-client-legacy-DpGFWkK1.js","./layout-legacy-TbEyfw4s.js","./WebRTCVideoCell-legacy-DC2E_D5s.js","./Footer-legacy-DqOCiyV5.js"],(function(e,r){"use strict";var t,o,n,a,s,c,l,i,d,m,g,u,f,h,p,b,w,y,v,C,S,x,$,T;return{setters:[e=>{t=e.u,o=e.d,n=e.A,a=e.y,s=e.a,c=e.b,l=e.q,i=e.c,d=e.E,m=e.e,g=e.Q,u=e.k},null,e=>{f=e.c,h=e.t,p=e.W,b=e.s,w=e.L},e=>{y=e.s,v=e.a,C=e.b,S=e.c,x=e.d,$=e.H,T=e.F}],execute:function(){function e(){const e=t({mutationFn:async e=>{const{streamName:r,...t}=e,o=localStorage.getItem("auth"),n=await fetch(`/api/webrtc?src=${encodeURIComponent(r)}`,{method:"POST",headers:{"Content-Type":"application/json",...o?{Authorization:"Basic "+o}:{}},body:JSON.stringify(t),signal:e.signal});if(!n.ok)throw new Error(`Failed to send offer: ${n.status} ${n.statusText}`);const a=await n.text();try{return JSON.parse(a)}catch(s){throw console.error(`Error parsing JSON for stream ${r}:`,s),console.log(`Raw response text: ${a}`),new Error(`Failed to parse WebRTC answer: ${s.message}`)}},onError:(e,r)=>{console.error(`Error sending WebRTC offer for stream ${r.streamName}:`,e)}}),[r,d]=o([]),[m,g]=o((()=>{const e=new URLSearchParams(window.location.search).get("layout");return e||(sessionStorage.getItem("webrtc_layout")||"4")})),[u,w]=o((()=>{const e=new URLSearchParams(window.location.search).get("stream");return e||(sessionStorage.getItem("webrtc_selected_stream")||"")})),[$,T]=o(!1),[E,R]=o(!0),[k,N]=o((()=>{const e=new URLSearchParams(window.location.search).get("page");if(e)return Math.max(0,parseInt(e,10)-1);const r=sessionStorage.getItem("webrtc_current_page");return r?Math.max(0,parseInt(r,10)-1):0})),P=n(null),_=n({}),I=n({});a((()=>{y(),v(),C();const e=()=>{console.log("Preserving URL parameters before page reload");const e=new URL(window.location);k>0?e.searchParams.set("page",k+1):e.searchParams.delete("page"),"4"!==m?e.searchParams.set("layout",m):e.searchParams.delete("layout"),"1"===m&&u?e.searchParams.set("stream",u):e.searchParams.delete("stream"),window.history.replaceState({},"",e),k>0?sessionStorage.setItem("webrtc_current_page",(k+1).toString()):sessionStorage.removeItem("webrtc_current_page"),"4"!==m?sessionStorage.setItem("webrtc_layout",m):sessionStorage.removeItem("webrtc_layout"),"1"===m&&u?sessionStorage.setItem("webrtc_selected_stream",u):sessionStorage.removeItem("webrtc_selected_stream")};window.addEventListener("beforeunload",e);const t=setInterval((()=>{Object.keys(_.current).forEach((e=>{const t=_.current[e];if(t&&(console.debug(`WebRTC connection state for ${e}: ${t.connectionState}, ICE state: ${t.iceConnectionState}`),"failed"===t.iceConnectionState||"disconnected"===t.iceConnectionState)){console.warn(`WebRTC connection for ${e} is in ${t.iceConnectionState} state, will attempt reconnect`),B(e);const o=r.find((r=>r.name===e));o&&(console.log(`Attempting to reconnect WebRTC for stream ${e}`),O(o))}}))}),3e4);return()=>{window.removeEventListener("beforeunload",e),clearInterval(t),H()}}),[r,k,m,u]);const W=s(),{data:L,isLoading:j,error:D}=c("streams","/api/streams",{timeout:15e3,retries:2,retryDelay:1e3});a((()=>{R(j)}),[j]),a((()=>{L&&Array.isArray(L)&&(async()=>{try{const e=await M(L);if(e.length>0){d(e);const r=new URLSearchParams(window.location.search).get("stream");r&&e.some((e=>e.name===r))?w(r):u&&e.some((e=>e.name===u))||w(e[0].name)}else console.warn("No streams available for WebRTC view after filtering")}catch(e){console.error("Error processing streams:",e),S("Error processing streams: "+e.message)}})()}),[L,u,W]);const F=n({layout:m,selectedStream:u,currentPage:k,streamsLength:r.length});a((()=>{const e=F.current;e.layout===m&&e.selectedStream===u&&e.currentPage===k&&e.streamsLength===r.length||(console.log("Layout, selectedStream, currentPage, or streams changed, updating video grid"),A(),F.current={layout:m,selectedStream:u,currentPage:k,streamsLength:r.length})}),[m,u,r,k]),a((()=>{if(0===r.length)return;const e=setTimeout((()=>{console.log("Updating URL parameters");const e=new URL(window.location);0===k?e.searchParams.delete("page"):e.searchParams.set("page",k+1),"4"!==m?e.searchParams.set("layout",m):e.searchParams.delete("layout"),"1"===m&&u?e.searchParams.set("stream",u):e.searchParams.delete("stream"),window.history.replaceState({},"",e),k>0?sessionStorage.setItem("webrtc_current_page",(k+1).toString()):sessionStorage.removeItem("webrtc_current_page"),"4"!==m?sessionStorage.setItem("webrtc_layout",m):sessionStorage.removeItem("webrtc_layout"),"1"===m&&u?sessionStorage.setItem("webrtc_selected_stream",u):sessionStorage.removeItem("webrtc_selected_stream")}),300);return()=>clearTimeout(e)}),[k,m,u,r.length]);const M=async e=>{try{if(!e||!Array.isArray(e))return console.warn("No streams data provided to filter"),[];const r=e.map((async e=>{try{const r=e.id||e.name;return await W.fetchQuery({queryKey:["stream-details",r],queryFn:async()=>{const t=await fetch(`/api/streams/${encodeURIComponent(r)}`);if(!t.ok)throw new Error(`Failed to load details for stream ${e.name}`);return t.json()},staleTime:3e4})}catch(r){return console.error(`Error loading details for stream ${e.name}:`,r),e}})),t=await Promise.all(r);console.log("Loaded detailed streams for WebRTC view:",t);const o=t.filter((e=>e.is_deleted?(console.log(`Stream ${e.name} is soft deleted, filtering out`),!1):e.enabled?!!e.streaming_enabled||(console.log(`Stream ${e.name} is not configured for streaming, filtering out`),!1):(console.log(`Stream ${e.name} is inactive, filtering out`),!1)));return console.log("Filtered streams for WebRTC view:",o),o||[]}catch(r){return console.error("Error filtering streams for WebRTC view:",r),S("Error processing streams: "+r.message),[]}},U=()=>{switch(m){case"1":return 1;case"2":return 2;case"4":default:return 4;case"6":return 6;case"9":return 9;case"16":return 16}},V=()=>{let e=r;if("1"===m&&u)e=r.filter((e=>e.name===u));else{const t=U(),o=Math.ceil(r.length/t);if(k>=o&&o>0)return[];const n=k*t,a=Math.min(n+t,r.length);e=r.slice(n,a)}return e},A=()=>{if(!P.current)return;let e=V();if(0===e.length&&r.length>0){const e=U(),t=Math.ceil(r.length/e);if(k>=t)return void N(Math.max(0,t-1))}const t=e.map((e=>e.name));console.log(`Updating video grid for page ${k+1}, showing streams:`,t);const o=Object.keys(_.current).filter((e=>!t.includes(e)));o.length>0&&(console.log(`Cleaning up ${o.length} WebRTC connections that are no longer visible:`,o),o.forEach((e=>{B(e)})))},O=(e,r,t,o={})=>{if(!e||!r)return void console.error("Cannot initialize WebRTC player: missing stream or video element");_.current[e.name]&&(console.log(`WebRTC connection for stream ${e.name} already exists, cleaning up first`),B(e.name)),console.log(`Initializing WebRTC player for stream ${e.name}`);const n=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}],iceTransportPolicy:"all",bundlePolicy:"balanced",rtcpMuxPolicy:"require",sdpSemantics:"unified-plan"});_.current[e.name]=n,n.ontrack=n=>{console.log(`Track received for stream ${e.name}:`,n),"video"===n.track.kind&&(r.srcObject=n.streams[0],r.onloadeddata=()=>{console.log(`Video data loaded for stream ${e.name}`),o.onLoadedData&&o.onLoadedData()},r.onplaying=()=>{console.log(`Video playing for stream ${e.name}`),o.onPlaying&&o.onPlaying(),e.detection_based_recording&&e.detection_model&&t?(console.log(`Starting detection polling for stream ${e.name} now that video is playing`),b(e.name,t,r,I.current)):console.log(`Detection not enabled for stream ${e.name}`)},r.onerror=r=>{console.error(`Video error for stream ${e.name}:`,r),o.onError&&o.onError("Video playback error")})},n.onicecandidate=r=>{r.candidate&&console.log(`ICE candidate for stream ${e.name}:`,r.candidate)},n.oniceconnectionstatechange=()=>{console.log(`ICE connection state for stream ${e.name}:`,n.iceConnectionState),"failed"===n.iceConnectionState?(console.warn(`ICE failed for stream ${e.name}`),o.onError&&o.onError("WebRTC ICE connection failed")):"disconnected"===n.iceConnectionState&&console.warn(`ICE disconnected for stream ${e.name}`)},n.onconnectionstatechange=()=>{console.log(`Connection state changed for stream ${e.name}:`,n.connectionState),"failed"===n.connectionState&&(console.warn(`Connection failed for stream ${e.name}`),o.onError&&o.onError("WebRTC connection failed"))},n.addTransceiver("video",{direction:"recvonly"}),n.addTransceiver("audio",{direction:"recvonly"});const a=setTimeout((()=>{console.warn(`WebRTC setup timed out for stream ${e.name}`),o.onError&&o.onError("WebRTC setup timed out"),_.current[e.name]&&B(e.name)}),3e4),s=setTimeout((()=>{_.current[e.name]&&(!r.srcObject||r.readyState<2)&&(console.warn(`Video playback timed out for stream ${e.name}`),o.onError&&o.onError("Video playback timed out"))}),2e4),c=()=>_.current[e.name]===n;n.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:!0}).then((r=>{if(!c())throw new Error("Connection was cleaned up during offer creation");return console.log(`Created offer for stream ${e.name}`),n.setLocalDescription(r)})).then((()=>{if(!c())throw new Error("Connection was cleaned up after setting local description");return console.log(`Set local description for stream ${e.name}`),q(e.name,n.localDescription)})).then((r=>{if(!c())throw new Error("Connection was cleaned up after receiving answer");return console.log(`Received answer for stream ${e.name}`),n.setRemoteDescription(new RTCSessionDescription(r))})).then((()=>{if(!c())throw new Error("Connection was cleaned up after setting remote description");console.log(`Set remote description for stream ${e.name}`),clearTimeout(a),clearTimeout(s)})).catch((r=>{clearTimeout(a),clearTimeout(s),c()?(console.error(`Error setting up WebRTC for stream ${e.name}:`,r),o.onError&&o.onError(r.message)):console.log(`WebRTC setup for stream ${e.name} was cancelled: ${r.message}`)})),r.addEventListener("playing",(()=>{clearTimeout(s)}),{once:!0})},q=l((async(r,t)=>{try{const o={type:t.type,sdp:t.sdp};console.log(`Sending formatted offer for stream ${r}`);const n=new AbortController,a=n.signal;if(!_.current[r])return console.log(`Connection for stream ${r} no longer exists, aborting offer`),n.abort(),Promise.reject(new Error("Connection no longer exists"));_.current[r].abortController=n;const s=await e.mutateAsync({...o,streamName:r,signal:a});return _.current[r]?s:(console.log(`Connection for stream ${r} was cleaned up during offer, rejecting result`),Promise.reject(new Error("Connection was cleaned up during offer")))}catch(o){if("AbortError"===o.name)return console.log(`WebRTC offer request for stream ${r} was aborted`),Promise.reject(new Error("Request aborted"));throw console.error(`Error sending offer for stream ${r}:`,o),o}}),[e]),B=e=>{if(console.log(`Cleaning up WebRTC player for stream ${e}`),_.current[e]){const t=_.current[e];if(t.abortController){console.log(`Aborting pending WebRTC requests for stream ${e}`);try{t.abortController.abort()}catch(r){console.error(`Error aborting WebRTC request for stream ${e}:`,r)}}t.onicecandidate&&(t.onicecandidate=null),t.oniceconnectionstatechange&&(t.oniceconnectionstatechange=null),t.onconnectionstatechange&&(t.onconnectionstatechange=null),t.ontrack&&(t.ontrack=null),t.close(),delete _.current[e],console.log(`Closed WebRTC connection for stream ${e}`)}f(e,I.current)},H=()=>{console.log("Stopping all WebRTC streams"),Object.keys(_.current).forEach((e=>{B(e)})),console.log("All WebRTC streams stopped")},z=(e,t)=>{t&&(t.preventDefault(),t.stopPropagation()),console.log(`Taking snapshot of stream with ID: ${e}`);let o=e;const n=r.find((r=>r.id===e||r.name===e));if(n&&(o=n.name),!o)return console.error("Stream name not found for snapshot"),void S("Cannot take snapshot: Stream not identified");const a=`video-${o.replace(/\s+/g,"-")}`,s=document.getElementById(a);if(!s)return console.error("Video element not found for stream:",o),void S("Cannot take snapshot: Video element not found");const c=document.createElement("canvas");if(c.width=s.videoWidth,c.height=s.videoHeight,c.style.pointerEvents="none",0===c.width||0===c.height)return console.error("Invalid video dimensions:",c.width,c.height),void S("Cannot take snapshot: Video not loaded or has invalid dimensions");c.getContext("2d").drawImage(s,0,0,c.width,c.height);try{window.__snapshotCanvas=c;const e=(new Date).toISOString().replace(/[:.]/g,"-"),r=`snapshot-${o.replace(/\s+/g,"-")}-${e}.jpg`;window.__snapshotFileName=r,x(c.toDataURL("image/jpeg",.95),`Snapshot: ${o}`),S("Snapshot taken successfully")}catch(l){console.error("Error creating snapshot:",l),S("Failed to create snapshot: "+l.message)}},J=(e,r)=>{if(r&&(r.preventDefault(),r.stopPropagation()),!e)return void console.error("Stream name not provided for fullscreen toggle");console.log(`Toggling fullscreen for stream: ${e}`);const t=`video-${e.replace(/\s+/g,"-")}`,o=document.getElementById(t),n=o?o.closest(".video-cell"):null;n?document.fullscreenElement?(console.log("Exiting fullscreen mode"),document.exitFullscreen()):(console.log("Entering fullscreen mode for video cell"),n.requestFullscreen().catch((e=>{console.error(`Error attempting to enable fullscreen: ${e.message}`),S(`Could not enable fullscreen mode: ${e.message}`)}))):console.error("Stream not found:",e)};return i("section",{id:"live-page",className:"page "+($?"fullscreen-mode":""),children:[i("div",{className:"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow",children:[i("div",{className:"flex items-center space-x-2",children:[i("h2",{className:"text-xl font-bold mr-4",children:"Live View"}),i("div",{className:"flex space-x-2",children:i("button",{id:"hls-toggle-btn",className:"px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800",onClick:()=>window.location.href="/hls.html",children:"HLS View"})})]}),i("div",{className:"controls flex items-center space-x-2",children:[i("div",{className:"flex items-center",children:[i("label",{for:"layout-selector",className:"mr-2",children:"Layout:"}),i("select",{id:"layout-selector",className:"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600",value:m,onChange:e=>{const r=e.target.value;g(r),N(0)},children:[i("option",{value:"1",children:"1 Stream"}),i("option",{value:"2",children:"2 Streams"}),i("option",{value:"4",selected:!0,children:"4 Streams"}),i("option",{value:"6",children:"6 Streams"}),i("option",{value:"9",children:"9 Streams"}),i("option",{value:"16",children:"16 Streams"})]})]}),"1"===m&&i("div",{className:"flex items-center",children:[i("label",{for:"stream-selector",className:"mr-2",children:"Stream:"}),i("select",{id:"stream-selector",className:"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600",value:u,onChange:e=>{const r=e.target.value;w(r)},children:r.map((e=>i("option",{value:e.name,children:e.name},e.name)))})]}),i("button",{id:"fullscreen-btn",className:"p-2 rounded-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none",onClick:()=>h($,T),title:"Toggle Fullscreen",children:i("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",children:i("path",{d:"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"})})})]})]}),i("div",{className:"flex flex-col space-y-4",children:[i("div",{id:"video-grid",className:`video-container layout-${m}`,ref:P,children:j||E&&!j?i("div",{className:"flex justify-center items-center col-span-full row-span-full h-64 w-full",children:i("div",{className:"flex flex-col items-center justify-center py-8",children:[i("div",{className:"inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16"}),i("p",{className:"mt-4 text-gray-700 dark:text-gray-300",children:"Loading streams..."})]})}):D?i("div",{className:"placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8",children:[i("p",{className:"mb-6 text-gray-600 dark:text-gray-300 text-lg",children:["Error loading streams: ",D.message]}),i("button",{onClick:()=>window.location.reload(),className:"btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors",children:"Retry"})]}):0===r.length?i("div",{className:"placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8",children:[i("p",{className:"mb-6 text-gray-600 dark:text-gray-300 text-lg",children:"No streams configured"}),i("a",{href:"streams.html",className:"btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors",children:"Configure Streams"})]}):V().map((e=>i(p,{stream:e,onTakeSnapshot:z,onToggleFullscreen:J,webrtcConnections:_,detectionIntervals:I,initializeWebRTCPlayer:O,cleanupWebRTCPlayer:B},e.name)))}),"1"!==m&&r.length>U()?i("div",{className:"pagination-controls flex justify-center items-center space-x-4 mt-4",children:[i("button",{className:"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed",onClick:()=>{console.log("Changing to previous page"),N(Math.max(0,k-1));const e=new URL(window.location),r=k-1;r>0?(e.searchParams.set("page",r+1),sessionStorage.setItem("webrtc_current_page",(r+1).toString())):(e.searchParams.delete("page"),sessionStorage.removeItem("webrtc_current_page")),window.history.replaceState({},"",e)},disabled:0===k,children:"Previous"}),i("span",{className:"text-gray-700 dark:text-gray-300",children:["Page ",k+1," of ",Math.ceil(r.length/U())]}),i("button",{className:"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed",onClick:()=>{console.log("Changing to next page");const e=Math.min(Math.ceil(r.length/U())-1,k+1);N(e);const t=new URL(window.location);t.searchParams.set("page",e+1),sessionStorage.setItem("webrtc_current_page",(e+1).toString()),window.history.replaceState({},"",t)},disabled:k>=Math.ceil(r.length/U())-1,children:"Next"})]}):null]})]})}function r(){const[r,t]=o(!1),[n,s]=o(!0);return a((()=>{!async function(){try{const e=await fetch("/api/settings");if(!e.ok)return console.error("Failed to fetch settings:",e.status,e.statusText),void s(!1);(await e.json()).webrtc_disabled?(console.log("WebRTC is disabled, using HLS view"),t(!0)):(console.log("WebRTC is enabled, using WebRTC view"),t(!1))}catch(e){console.error("Error checking WebRTC status:",e)}finally{s(!1)}}()}),[]),n?i("div",{className:"loading",children:"Loading..."}):i(u,{children:[i($,{}),r?i(w,{isWebRTCDisabled:!0}):i(e,{}),i(T,{})]})}document.addEventListener("DOMContentLoaded",(()=>{const e=document.getElementById("main-content");e&&d(i(g,{client:m,children:i(r,{})}),e)}))}}}));
//# sourceMappingURL=index-legacy-BTeSi_rA.js.map
