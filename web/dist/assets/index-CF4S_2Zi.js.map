{"version":3,"file":"index-CF4S_2Zi.js","sources":["../../js/components/preact/WebRTCVideoCell.jsx","../../js/components/preact/WebRTCView.jsx","../../js/pages/index-page.jsx"],"sourcesContent":["/**\n * WebRTCVideoCell Component\n * A self-contained component for displaying a WebRTC video stream\n */\n\nimport { h } from 'preact';\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'preact/hooks';\nimport { DetectionOverlay, takeSnapshotWithDetections } from './DetectionOverlay.jsx';\nimport { SnapshotButton } from './SnapshotManager.jsx';\nimport { LoadingIndicator } from './LoadingIndicator.jsx';\nimport { showSnapshotPreview } from './UI.jsx';\n\n/**\n * WebRTCVideoCell component\n * @param {Object} props - Component props\n * @param {Object} props.stream - Stream object\n * @param {Function} props.onToggleFullscreen - Fullscreen toggle handler\n * @param {string} props.streamId - Stream ID for stable reference\n * @returns {JSX.Element} WebRTCVideoCell component\n */\nexport function WebRTCVideoCell({\n  stream,\n  streamId,\n  onToggleFullscreen\n}) {\n  // Component state\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [reconnectAttempts, setReconnectAttempts] = useState(0);\n  const [lastActiveTime, setLastActiveTime] = useState(Date.now());\n\n  // Refs\n  const videoRef = useRef(null);\n  const cellRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const abortControllerRef = useRef(null);\n  const timeoutsRef = useRef([]);\n  const detectionIntervalRef = useRef(null);\n  const prevStreamNameRef = useRef('');\n  const lastFrameTimeRef = useRef(Date.now());\n  const detectionOverlayRef = useRef(null);\n\n  // Clear all timeouts on unmount or when needed\n  const clearAllTimeouts = useCallback(() => {\n    timeoutsRef.current.forEach(timeoutId => clearTimeout(timeoutId));\n    timeoutsRef.current = [];\n  }, []);\n\n  // Set a timeout that will be automatically cleared on unmount\n  const setManagedTimeout = useCallback((callback, delay) => {\n    const timeoutId = setTimeout(callback, delay);\n    timeoutsRef.current.push(timeoutId);\n    return timeoutId;\n  }, []);\n\n  // Clean up WebRTC connection\n  const cleanupWebRTCConnection = useCallback(() => {\n    console.log(`Cleaning up WebRTC connection for stream ${stream?.name}`);\n\n    // Don't reset error state here as we want to keep showing errors\n    // until the user explicitly retries or the component is unmounted\n\n    // Clear all timeouts\n    clearAllTimeouts();\n\n    // Abort any pending fetch requests\n    if (abortControllerRef.current) {\n      try {\n        abortControllerRef.current.abort();\n      } catch (e) {\n        console.error(`Error aborting fetch for stream ${stream?.name}:`, e);\n      }\n      abortControllerRef.current = null;\n    }\n\n    // Detection polling is now handled by the DetectionOverlay component\n    detectionIntervalRef.current = null;\n\n    // Clean up video element\n    if (videoRef.current) {\n      const videoElement = videoRef.current;\n\n      // Remove event handlers\n      videoElement.onloadeddata = null;\n      videoElement.onplaying = null;\n      videoElement.onerror = null;\n      videoElement.onstalled = null;\n      videoElement.ontimeout = null;\n\n      // Stop all tracks in the srcObject if it exists\n      if (videoElement.srcObject) {\n        try {\n          const tracks = videoElement.srcObject.getTracks();\n          tracks.forEach(track => {\n            try {\n              track.stop();\n            } catch (trackError) {\n              console.warn(`Error stopping track for stream ${stream?.name}:`, trackError);\n            }\n          });\n        } catch (tracksError) {\n          console.warn(`Error accessing tracks for stream ${stream?.name}:`, tracksError);\n        }\n\n        // Clear the srcObject\n        videoElement.srcObject = null;\n      }\n    }\n\n    // Close the peer connection\n    if (peerConnectionRef.current) {\n      try {\n        // Remove all event listeners to prevent memory leaks\n        const pc = peerConnectionRef.current;\n        if (pc.onicecandidate) pc.onicecandidate = null;\n        if (pc.oniceconnectionstatechange) pc.oniceconnectionstatechange = null;\n        if (pc.onconnectionstatechange) pc.onconnectionstatechange = null;\n        if (pc.ontrack) pc.ontrack = null;\n\n        // Close the connection\n        pc.close();\n      } catch (closeError) {\n        console.warn(`Error closing connection for stream ${stream?.name}:`, closeError);\n      }\n\n      peerConnectionRef.current = null;\n    }\n\n    console.log(`WebRTC connection cleanup completed for stream ${stream?.name}`);\n  }, [clearAllTimeouts]);\n\n  // Send WebRTC offer to server\n  const sendOffer = useCallback(async (streamName, offer) => {\n    try {\n      // Create a new AbortController for this request\n      abortControllerRef.current = new AbortController();\n      const signal = abortControllerRef.current.signal;\n\n      // Format the offer according to go2rtc expectations\n      const formattedOffer = {\n        type: offer.type,\n        sdp: offer.sdp\n      };\n\n      console.log(`Sending WebRTC offer for stream ${streamName}`);\n\n      // Get auth token if available\n      const auth = localStorage.getItem('auth');\n\n      // Send the offer to the server\n      const response = await fetch(`/api/webrtc?src=${encodeURIComponent(streamName)}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...(auth ? { 'Authorization': 'Basic ' + auth } : {})\n        },\n        body: JSON.stringify(formattedOffer),\n        signal\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to send offer: ${response.status} ${response.statusText}`);\n      }\n\n      const text = await response.text();\n      try {\n        return JSON.parse(text);\n      } catch (jsonError) {\n        console.error(`Error parsing JSON for stream ${streamName}:`, jsonError);\n        console.log(`Raw response text: ${text}`);\n        throw new Error(`Failed to parse WebRTC answer: ${jsonError.message}`);\n      }\n    } catch (error) {\n      // Check if this was an abort error, which we can safely ignore\n      if (error.name === 'AbortError') {\n        console.log(`WebRTC offer request for stream ${streamName} was aborted`);\n        return Promise.reject(new Error('Request aborted'));\n      }\n\n      console.error(`Error sending offer for stream ${streamName}:`, error);\n      throw error;\n    }\n  }, []);\n\n  // Initialize WebRTC connection\n  const initializeWebRTCConnection = useCallback(() => {\n    if (!stream || !videoRef.current) {\n      console.error(`Cannot initialize WebRTC: missing stream or DOM elements`);\n      return;\n    }\n\n    console.log(`Initializing WebRTC connection for stream ${stream.name}`);\n    setIsLoading(true);\n\n    // Clean up any existing connection first\n    cleanupWebRTCConnection();\n\n    // Create a new RTCPeerConnection with ICE servers\n    const pc = new RTCPeerConnection({\n      iceServers: [\n        { urls: 'stun:stun.l.google.com:19302' },\n        { urls: 'stun:stun1.l.google.com:19302' },\n        { urls: 'stun:stun2.l.google.com:19302' }\n      ],\n      iceTransportPolicy: 'all',\n      bundlePolicy: 'balanced',\n      rtcpMuxPolicy: 'require',\n      sdpSemantics: 'unified-plan'\n    });\n\n    // Store the connection\n    peerConnectionRef.current = pc;\n\n    // Add event listeners\n    pc.ontrack = (event) => {\n      console.log(`Track received for stream ${stream.name}:`, event);\n\n      if (event.track.kind === 'video') {\n        const videoElement = videoRef.current;\n        if (!videoElement) return;\n\n        // Set srcObject\n        videoElement.srcObject = event.streams[0];\n\n        // Add event handlers for video element\n        videoElement.onloadeddata = () => {\n          console.log(`Video data loaded for stream ${stream.name}`);\n          // Don't set isLoading=false here, wait for onPlaying\n        };\n\n        videoElement.onplaying = () => {\n          console.log(`Video playing for stream ${stream.name}`);\n          setIsLoading(false);\n          setIsPlaying(true);\n          setLastActiveTime(Date.now());\n          lastFrameTimeRef.current = Date.now();\n\n          // Detection polling is now handled by the DetectionOverlay component\n        };\n\n        videoElement.onerror = (e) => {\n          console.error(`Video error for stream ${stream.name}:`, e);\n          setError('Video playback error: ' + (e.message || 'Unknown error'));\n          setIsLoading(false);\n        };\n\n        videoElement.onstalled = () => {\n          console.warn(`Video stalled for stream ${stream.name}`);\n          // We don't treat this as an error immediately, as it might recover\n        };\n      }\n    };\n\n    pc.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log(`ICE candidate for stream ${stream.name}:`, event.candidate);\n        // go2rtc doesn't use a separate ICE endpoint, so we don't need to send ICE candidates\n      }\n    };\n\n    pc.oniceconnectionstatechange = () => {\n      console.log(`ICE connection state for stream ${stream.name}:`, pc.iceConnectionState);\n\n      if (pc.iceConnectionState === 'failed' && peerConnectionRef.current === pc) {\n        console.warn(`ICE failed for stream ${stream.name}`);\n        setError('WebRTC ICE connection failed');\n        setIsLoading(false);\n      } else if (pc.iceConnectionState === 'disconnected') {\n        console.warn(`ICE disconnected for stream ${stream.name}`);\n\n        // Start a timer to check if it reconnects\n        setManagedTimeout(() => {\n          if (pc.iceConnectionState === 'disconnected' && peerConnectionRef.current === pc) {\n            console.warn(`ICE still disconnected for stream ${stream.name} after timeout`);\n\n            // Only attempt auto-reconnect if we haven't exceeded max attempts\n            if (reconnectAttempts < 3) {\n              console.log(`Auto-reconnecting stream ${stream.name} (attempt ${reconnectAttempts + 1})`);\n              setReconnectAttempts(prev => prev + 1);\n              initializeWebRTCConnection();\n            } else {\n              setError('WebRTC connection disconnected');\n              setIsPlaying(false);\n              setIsLoading(false);\n            }\n          }\n        }, 8000); // 8 second timeout to recover (increased from 5)\n      }\n    };\n\n    pc.onconnectionstatechange = () => {\n      console.log(`Connection state changed for stream ${stream.name}:`, pc.connectionState);\n\n      if (pc.connectionState === 'failed' && peerConnectionRef.current === pc) {\n        console.warn(`Connection failed for stream ${stream.name}`);\n        setError('WebRTC connection failed');\n        setIsLoading(false);\n      }\n    };\n\n    // Add transceivers to ensure we get both audio and video tracks\n    pc.addTransceiver('video', {direction: 'recvonly'});\n    pc.addTransceiver('audio', {direction: 'recvonly'});\n\n    // Create an offer\n    const offerOptions = {\n      offerToReceiveAudio: true,\n      offerToReceiveVideo: true\n    };\n\n    // Set up the connection\n    pc.createOffer(offerOptions)\n      .then(offer => {\n        if (peerConnectionRef.current !== pc) {\n          throw new Error('Connection was cleaned up during offer creation');\n        }\n        return pc.setLocalDescription(offer);\n      })\n      .then(() => {\n        if (peerConnectionRef.current !== pc) {\n          throw new Error('Connection was cleaned up after setting local description');\n        }\n        return sendOffer(stream.name, pc.localDescription);\n      })\n      .then(answer => {\n        if (peerConnectionRef.current !== pc) {\n          throw new Error('Connection was cleaned up after receiving answer');\n        }\n        return pc.setRemoteDescription(new RTCSessionDescription(answer));\n      })\n      .catch(error => {\n        // Only handle error if this is still the current connection\n        if (peerConnectionRef.current === pc) {\n          console.error(`Error setting up WebRTC for stream ${stream.name}:`, error);\n          setError(error.message || 'Failed to establish WebRTC connection');\n          setIsLoading(false);\n        } else {\n          console.log(`WebRTC setup for stream ${stream.name} was cancelled: ${error.message}`);\n        }\n      });\n  }, [stream.name, cleanupWebRTCConnection, sendOffer, setManagedTimeout]);\n\n  useEffect(() => {\n    if (!stream || !stream.name) return;\n\n    // Only reinitialize if the stream name changed\n    if (stream.name !== prevStreamNameRef.current) {\n      console.log(`WebRTCVideoCell: Stream name changed from ${prevStreamNameRef.current} to ${stream.name}, reinitializing`);\n      initializeWebRTCConnection();\n    }\n\n    // Update the previous stream name\n    prevStreamNameRef.current = stream.name;\n\n  }, [stream, isLoading]);\n\n  // Handle retry button click\n  const handleRetry = useCallback(() => {\n    if (!stream) return;\n\n    console.log(`Retrying connection for stream ${stream.name}`);\n    setReconnectAttempts(0); // Reset reconnect attempts on manual retry\n    setError(null); // Explicitly reset error state on retry\n    setIsLoading(true); // Show loading state again\n    initializeWebRTCConnection();\n  }, [initializeWebRTCConnection]);\n\n  return (\n    <div\n      className=\"video-cell\"\n      data-stream-name={stream.name}\n      data-stream-id={streamId}\n      ref={cellRef}\n      style={{\n        position: 'relative',\n        // Ensure the video cell doesn't interfere with navigation elements\n        pointerEvents: isLoading ? 'none' : 'auto',\n        zIndex: 1 // Lower z-index to prevent interfering with header\n      }}\n    >\n      {/* Add keyframes for spinner animation in the component */}\n      <style>\n        {`\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n        `}\n      </style>\n      {/* Video element */}\n      <video\n        id={`video-${streamId.replace(/\\s+/g, '-')}`}\n        className=\"video-element\"\n        ref={videoRef}\n        playsInline\n        autoPlay\n        muted\n        disablePictureInPicture\n        style={{ pointerEvents: 'none', width: '100%', height: '100%', objectFit: 'contain', zIndex: 1 }}\n      />\n\n      {/* Detection overlay component */}\n      {stream.detection_based_recording && stream.detection_model && (\n        <DetectionOverlay\n          ref={detectionOverlayRef}\n          streamName={stream.name}\n          videoRef={videoRef}\n          enabled={isPlaying}\n          detectionModel={stream.detection_model}\n        />\n      )}\n\n      {/* Stream name overlay */}\n      <div\n        className=\"stream-name-overlay\"\n        style={{\n          position: 'absolute',\n          top: '10px',\n          left: '10px',\n          padding: '5px 10px',\n          backgroundColor: 'rgba(0, 0, 0, 0.5)',\n          color: 'white',\n          borderRadius: '4px',\n          fontSize: '14px',\n          zIndex: 3, /* Lower z-index to ensure it doesn't block navigation */\n          pointerEvents: 'none'\n        }}\n      >\n        {stream.name}\n      </div>\n\n      {/* Stream controls */}\n      <div\n        className=\"stream-controls\"\n        style={{\n          position: 'absolute',\n          bottom: '10px',\n          right: '10px',\n          display: 'flex',\n          gap: '10px',\n          zIndex: 5, /* Lower z-index but still above video and overlays */\n          backgroundColor: 'rgba(0, 0, 0, 0.5)',\n          padding: '5px',\n          borderRadius: '4px',\n          pointerEvents: 'auto' /* Keep pointer events enabled for controls */\n        }}\n      >\n        <div\n          style={{\n            backgroundColor: 'transparent',\n            padding: '5px',\n            borderRadius: '4px',\n            position: 'relative',\n            zIndex: 1 /* Lower z-index to prevent blocking */\n          }}\n          onMouseOver={(e) => e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.2)'}\n          onMouseOut={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n        >\n          <SnapshotButton\n            streamId={streamId}\n            streamName={stream.name}\n            onSnapshot={() => {\n              if (videoRef.current) {\n                let canvasRef = null;\n\n                // Try to get canvas ref from detection overlay if available\n                if (detectionOverlayRef.current && typeof detectionOverlayRef.current.getCanvasRef === 'function') {\n                  canvasRef = detectionOverlayRef.current.getCanvasRef();\n                }\n\n                // Take snapshot with or without detections\n                if (canvasRef) {\n                  const snapshot = takeSnapshotWithDetections(videoRef, canvasRef, stream.name);\n                  if (snapshot) {\n                    showSnapshotPreview(snapshot.canvas.toDataURL('image/jpeg', 0.95), `Snapshot: ${stream.name}`);\n                  }\n                } else {\n                  // Take a simple snapshot without detections\n                  const videoElement = videoRef.current;\n                  const canvas = document.createElement('canvas');\n                  canvas.width = videoElement.videoWidth;\n                  canvas.height = videoElement.videoHeight;\n\n                  if (canvas.width > 0 && canvas.height > 0) {\n                    const ctx = canvas.getContext('2d');\n                    ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n\n                    showSnapshotPreview(canvas.toDataURL('image/jpeg', 0.95), `Snapshot: ${stream.name}`);\n                  }\n                }\n              }\n            }}\n          />\n        </div>\n        <button\n          className=\"fullscreen-btn\"\n          title=\"Toggle Fullscreen\"\n          data-id={streamId}\n          data-name={stream.name}\n          onClick={(e) => onToggleFullscreen(stream.name, e, cellRef.current)}\n          style={{\n            backgroundColor: 'transparent',\n            border: 'none',\n            padding: '5px',\n            borderRadius: '4px',\n            color: 'white',\n            cursor: 'pointer',\n            position: 'relative',\n            zIndex: 1 /* Lower z-index to prevent blocking */\n          }}\n          onMouseOver={(e) => e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.2)'}\n          onMouseOut={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\"></path></svg>\n        </button>\n      </div>\n\n      {/* Loading indicator */}\n      {isLoading && (\n        <div style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, zIndex: 5, pointerEvents: 'none' }}>\n          <LoadingIndicator message=\"Connecting...\" />\n        </div>\n      )}\n\n      {/* Error indicator */}\n      {error && (\n        <div\n          className=\"error-indicator\"\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            color: 'white',\n            zIndex: 5,\n            pointerEvents: 'auto', /* Keep pointer events enabled for error state to allow retry button clicks */\n            textAlign: 'center',\n            // Ensure the error indicator is contained within the video cell\n            overflow: 'hidden'\n          }}\n        >\n          <div\n            className=\"error-content\"\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n              width: '80%',\n              maxWidth: '300px',\n              padding: '20px',\n              borderRadius: '8px',\n              backgroundColor: 'rgba(0, 0, 0, 0.5)'\n            }}\n          >\n            <div\n              className=\"error-icon\"\n              style={{\n                fontSize: '28px',\n                marginBottom: '15px',\n                fontWeight: 'bold',\n                width: '40px',\n                height: '40px',\n                lineHeight: '40px',\n                borderRadius: '50%',\n                backgroundColor: 'rgba(220, 38, 38, 0.8)',\n                textAlign: 'center'\n              }}\n            >\n              !\n            </div>\n            <p style={{\n              marginBottom: '20px',\n              textAlign: 'center',\n              width: '100%',\n              fontSize: '14px',\n              lineHeight: '1.4'\n            }}>\n              {error}\n            </p>\n            <button\n              className=\"retry-button\"\n              onClick={handleRetry}\n              style={{\n                padding: '8px 20px',\n                backgroundColor: '#2563eb',\n                color: 'white',\n                borderRadius: '4px',\n                border: 'none',\n                cursor: 'pointer',\n                fontWeight: 'bold',\n                fontSize: '14px',\n                boxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)',\n                transition: 'background-color 0.2s ease'\n              }}\n              onMouseOver={(e) => e.currentTarget.style.backgroundColor = '#1d4ed8'}\n              onMouseOut={(e) => e.currentTarget.style.backgroundColor = '#2563eb'}\n            >\n              Retry\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","/**\n * LightNVR Web Interface WebRTCView Component\n * Preact component for the WebRTC view page\n */\n\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'preact/hooks';\nimport { setupModals, addModalStyles } from './UI.jsx';\nimport { showStatusMessage } from './ToastContainer.jsx';\nimport { useFullscreenManager, FullscreenManager } from './FullscreenManager.jsx';\nimport { useQuery, useQueryClient } from '../../query-client.js';\nimport { WebRTCVideoCell } from './WebRTCVideoCell.jsx';\nimport { SnapshotManager, useSnapshotManager } from './SnapshotManager.jsx';\n\n/**\n * WebRTCView component\n * @returns {JSX.Element} WebRTCView component\n */\nexport function WebRTCView() {\n  // Use the snapshot manager hook\n  const { takeSnapshot } = useSnapshotManager();\n\n  // Use the fullscreen manager hook\n  const { isFullscreen, setIsFullscreen, toggleFullscreen } = useFullscreenManager();\n\n  // State for streams and layout\n  const [streams, setStreams] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Initialize layout from URL or sessionStorage if available\n  const [layout, setLayout] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const layoutParam = urlParams.get('layout');\n    if (layoutParam) {\n      return layoutParam;\n    }\n    // Check sessionStorage as a backup\n    const storedLayout = sessionStorage.getItem('webrtc_layout');\n    return storedLayout || '4';\n  });\n\n  // Initialize selectedStream from URL or sessionStorage if available\n  const [selectedStream, setSelectedStream] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const streamParam = urlParams.get('stream');\n    if (streamParam) {\n      return streamParam;\n    }\n    // Check sessionStorage as a backup\n    const storedStream = sessionStorage.getItem('webrtc_selected_stream');\n    return storedStream || '';\n  });\n\n  // Initialize currentPage from URL or sessionStorage if available (URL uses 1-based indexing, internal state uses 0-based)\n  const [currentPage, setCurrentPage] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const pageParam = urlParams.get('page');\n    if (pageParam) {\n      // Convert from 1-based (URL) to 0-based (internal)\n      return Math.max(0, parseInt(pageParam, 10) - 1);\n    }\n    // Check sessionStorage as a backup\n    const storedPage = sessionStorage.getItem('webrtc_current_page');\n    if (storedPage) {\n      // Convert from 1-based (stored) to 0-based (internal)\n      return Math.max(0, parseInt(storedPage, 10) - 1);\n    }\n    return 0;\n  });\n\n  // Get query client for fetching and invalidating queries\n  const queryClient = useQueryClient();\n\n  // Set up event listeners and UI components\n  useEffect(() => {\n    // Set up modals for snapshot preview\n    setupModals();\n    addModalStyles();\n\n    // Add event listener to preserve URL parameters when page is reloaded\n    const handleBeforeUnload = () => {\n      console.log('Preserving URL parameters before page reload');\n\n      // Create a URL with the current parameters\n      const url = new URL(window.location);\n\n      // Ensure page parameter is set correctly (convert from 0-based internal to 1-based URL)\n      if (currentPage > 0) {\n        url.searchParams.set('page', currentPage + 1);\n      } else {\n        url.searchParams.delete('page');\n      }\n\n      // Ensure layout parameter is set if not default\n      if (layout !== '4') {\n        url.searchParams.set('layout', layout);\n      } else {\n        url.searchParams.delete('layout');\n      }\n\n      // Ensure stream parameter is set if in single stream mode\n      if (layout === '1' && selectedStream) {\n        url.searchParams.set('stream', selectedStream);\n      } else {\n        url.searchParams.delete('stream');\n      }\n\n      // Update URL without triggering navigation\n      window.history.replaceState({}, '', url);\n\n      // Store the current page in sessionStorage as a backup\n      if (currentPage > 0) {\n        sessionStorage.setItem('webrtc_current_page', (currentPage + 1).toString());\n      } else {\n        sessionStorage.removeItem('webrtc_current_page');\n      }\n\n      // Store layout in sessionStorage\n      if (layout !== '4') {\n        sessionStorage.setItem('webrtc_layout', layout);\n      } else {\n        sessionStorage.removeItem('webrtc_layout');\n      }\n\n      // Store selected stream in sessionStorage\n      if (layout === '1' && selectedStream) {\n        sessionStorage.setItem('webrtc_selected_stream', selectedStream);\n      } else {\n        sessionStorage.removeItem('webrtc_selected_stream');\n      }\n    };\n\n    // Register the beforeunload handler\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [streams, currentPage, layout, selectedStream]);\n\n  // Fetch streams using preact-query\n  const {\n    data: streamsData,\n    isLoading: isLoadingStreams,\n    error: streamsError\n  } = useQuery(\n    'streams',\n    '/api/streams',\n    {\n      timeout: 15000, // 15 second timeout\n      retries: 2,     // Retry twice\n      retryDelay: 1000 // 1 second between retries\n    }\n  );\n\n  // Update loading state based on streams query status\n  useEffect(() => {\n    setIsLoading(isLoadingStreams);\n  }, [isLoadingStreams]);\n\n  // Process streams data when it's loaded\n  useEffect(() => {\n    if (streamsData && Array.isArray(streamsData)) {\n      // Process the streams data\n      const processStreams = async () => {\n        try {\n          // Filter and process the streams\n          const filteredStreams = await filterStreamsForWebRTC(streamsData);\n\n          if (filteredStreams.length > 0) {\n            setStreams(filteredStreams);\n\n            // Set selectedStream based on URL parameter if it exists and is valid\n            const urlParams = new URLSearchParams(window.location.search);\n            const streamParam = urlParams.get('stream');\n\n            if (streamParam && filteredStreams.some(stream => stream.name === streamParam)) {\n              // If the stream from URL exists in the loaded streams, use it\n              setSelectedStream(streamParam);\n            } else if (!selectedStream || !filteredStreams.some(stream => stream.name === selectedStream)) {\n              // Otherwise use the first stream if selectedStream is not set or invalid\n              setSelectedStream(filteredStreams[0].name);\n            }\n          } else {\n            console.warn('No streams available for WebRTC view after filtering');\n          }\n        } catch (error) {\n          console.error('Error processing streams:', error);\n          showStatusMessage('Error processing streams: ' + error.message);\n        }\n      };\n\n      processStreams();\n    }\n  }, [streamsData, selectedStream, queryClient]);\n\n  // Update URL when layout, page, or selectedStream changes\n  useEffect(() => {\n    // Don't update URL during initial load or when streams are empty\n    if (streams.length === 0) return;\n\n    console.log('Updating URL parameters');\n    const url = new URL(window.location);\n\n    // Handle page parameter (convert from 0-based internal to 1-based URL)\n    if (currentPage === 0) {\n      url.searchParams.delete('page');\n    } else {\n      // Add 1 to convert from 0-based (internal) to 1-based (URL)\n      url.searchParams.set('page', currentPage + 1);\n    }\n\n    // Handle layout parameter\n    if (layout !== '4') { // Only set if not the default\n      url.searchParams.set('layout', layout);\n    } else {\n      // Remove layout parameter if it's the default value\n      url.searchParams.delete('layout');\n    }\n\n    // Handle selectedStream parameter\n    if (layout === '1' && selectedStream) {\n      url.searchParams.set('stream', selectedStream);\n    } else {\n      // Remove stream parameter if not in single stream mode\n      url.searchParams.delete('stream');\n    }\n\n    // Update URL without reloading the page\n    window.history.replaceState({}, '', url);\n\n    // Also update sessionStorage\n    if (currentPage > 0) {\n      sessionStorage.setItem('webrtc_current_page', (currentPage + 1).toString());\n    } else {\n      sessionStorage.removeItem('webrtc_current_page');\n    }\n\n    if (layout !== '4') {\n      sessionStorage.setItem('webrtc_layout', layout);\n    } else {\n      sessionStorage.removeItem('webrtc_layout');\n    }\n\n    if (layout === '1' && selectedStream) {\n      sessionStorage.setItem('webrtc_selected_stream', selectedStream);\n    } else {\n      sessionStorage.removeItem('webrtc_selected_stream');\n    }\n  }, [currentPage, layout, selectedStream, streams.length]);\n\n  /**\n   * Filter streams for WebRTC view\n   * @param {Array} streams - Array of streams\n   * @returns {Promise<Array>} Promise resolving to filtered array of streams\n   */\n  const filterStreamsForWebRTC = async (streams) => {\n    try {\n      if (!streams || !Array.isArray(streams)) {\n        console.warn('No streams data provided to filter');\n        return [];\n      }\n\n      // For WebRTC view, we need to fetch full details for each stream\n      const streamPromises = streams.map(async (stream) => {\n        try {\n          const streamId = stream.id || stream.name;\n\n          const streamDetails = await queryClient.fetchQuery({\n            queryKey: ['stream-details', streamId],\n            queryFn: async () => {\n              const response = await fetch(`/api/streams/${encodeURIComponent(streamId)}`);\n              if (!response.ok) {\n                throw new Error(`Failed to load details for stream ${stream.name}`);\n              }\n              return response.json();\n            },\n            staleTime: 30000 // 30 seconds\n          });\n\n          return streamDetails;\n        } catch (error) {\n          console.error(`Error loading details for stream ${stream.name}:`, error);\n          // Return the basic stream info if we can't get details\n          return stream;\n        }\n      });\n\n      const detailedStreams = await Promise.all(streamPromises);\n      console.log('Loaded detailed streams for WebRTC view:', detailedStreams);\n\n      // Filter out streams that are soft deleted, inactive, or not configured for streaming\n      const filteredStreams = detailedStreams.filter(stream => {\n        // Filter out soft deleted streams\n        if (stream.is_deleted) {\n          console.log(`Stream ${stream.name} is soft deleted, filtering out`);\n          return false;\n        }\n\n        // Filter out inactive streams\n        if (!stream.enabled) {\n          console.log(`Stream ${stream.name} is inactive, filtering out`);\n          return false;\n        }\n\n        // Filter out streams not configured for streaming\n        if (!stream.streaming_enabled) {\n          console.log(`Stream ${stream.name} is not configured for streaming, filtering out`);\n          return false;\n        }\n\n        return true;\n      });\n\n      console.log('Filtered streams for WebRTC view:', filteredStreams);\n\n      return filteredStreams || [];\n    } catch (error) {\n      console.error('Error filtering streams for WebRTC view:', error);\n      showStatusMessage('Error processing streams: ' + error.message);\n      return [];\n    }\n  };\n\n  /**\n   * Get maximum number of streams to display based on layout\n   * @returns {number} Maximum number of streams\n   */\n  const getMaxStreamsForLayout = useCallback(() => {\n    switch (layout) {\n      case '1': return 1;  // Single view\n      case '2': return 2;  // 2x1 grid\n      case '4': return 4;  // 2x2 grid\n      case '6': return 6;  // 2x3 grid\n      case '9': return 9;  // 3x3 grid\n      case '16': return 16; // 4x4 grid\n      default: return 4;\n    }\n  }, [layout]);\n\n  /**\n   * Get streams to show based on layout, selected stream, and pagination\n   * @returns {Array} Streams to show\n   */\n  const getStreamsToShow = useCallback(() => {\n    // Filter streams based on layout and selected stream\n    let streamsToShow = streams;\n\n    if (layout === '1' && selectedStream) {\n      streamsToShow = streams.filter(stream => stream.name === selectedStream);\n    } else {\n      // Apply pagination\n      const maxStreams = getMaxStreamsForLayout();\n      const totalPages = Math.ceil(streams.length / maxStreams);\n\n      // Ensure current page is valid\n      if (currentPage >= totalPages && totalPages > 0) {\n        return []; // Will be handled by the effect that watches currentPage\n      }\n\n      // Get streams for current page\n      const startIdx = currentPage * maxStreams;\n      const endIdx = Math.min(startIdx + maxStreams, streams.length);\n      streamsToShow = streams.slice(startIdx, endIdx);\n    }\n\n    return streamsToShow;\n  }, [streams, layout, selectedStream, currentPage]);\n\n  // Ensure current page is valid when streams or layout changes\n  useEffect(() => {\n    if (streams.length === 0) return;\n\n    const maxStreams = getMaxStreamsForLayout();\n    const totalPages = Math.ceil(streams.length / maxStreams);\n\n    if (currentPage >= totalPages) {\n      setCurrentPage(Math.max(0, totalPages - 1));\n    }\n  }, [streams, layout, currentPage, getMaxStreamsForLayout]);\n\n  /**\n   * Toggle fullscreen mode for a specific stream\n   * @param {string} streamName - Stream name\n   * @param {Event} event - Click event\n   * @param {HTMLElement} cellElement - The video cell element\n   */\n  const toggleStreamFullscreen = (streamName, event, cellElement) => {\n    // Prevent default button behavior\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    if (!streamName) {\n      console.error('Stream name not provided for fullscreen toggle');\n      return;\n    }\n\n    console.log(`Toggling fullscreen for stream: ${streamName}`);\n\n    if (!cellElement) {\n      console.error('Video cell element not provided for fullscreen toggle');\n      return;\n    }\n\n    if (!document.fullscreenElement) {\n      console.log('Entering fullscreen mode for video cell');\n      cellElement.requestFullscreen().catch(err => {\n        console.error(`Error attempting to enable fullscreen: ${err.message}`);\n        showStatusMessage(`Could not enable fullscreen mode: ${err.message}`);\n      });\n    } else {\n      console.log('Exiting fullscreen mode');\n      document.exitFullscreen();\n    }\n  };\n\n  // Memoize the streams to show to prevent unnecessary re-renders\n  const streamsToShow = useMemo(() => getStreamsToShow(), [streams, layout, selectedStream, currentPage, getMaxStreamsForLayout]);\n\n  return (\n    <section\n      id=\"live-page\"\n      className={`page ${isFullscreen ? 'fullscreen-mode' : ''}`}\n    >\n      {/* Include the SnapshotManager component */}\n      <SnapshotManager />\n\n      {/* Include the FullscreenManager component */}\n      <FullscreenManager\n        isFullscreen={isFullscreen}\n        setIsFullscreen={setIsFullscreen}\n        targetId=\"live-page\"\n      />\n\n      <div className=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <div className=\"flex items-center space-x-2\">\n          <h2 className=\"text-xl font-bold mr-4\">Live View</h2>\n          <div className=\"flex space-x-2\">\n            <button\n              id=\"hls-toggle-btn\"\n              className=\"px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n              onClick={() => window.location.href = '/hls.html'}\n            >\n              HLS View\n            </button>\n          </div>\n        </div>\n        <div className=\"controls flex items-center space-x-2\">\n          <div className=\"flex items-center\">\n            <label htmlFor=\"layout-selector\" className=\"mr-2\">Layout:</label>\n            <select\n              id=\"layout-selector\"\n              className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600\"\n              value={layout}\n              onChange={(e) => {\n                const newLayout = e.target.value;\n                setLayout(newLayout);\n                setCurrentPage(0); // Reset to first page when layout changes\n              }}\n            >\n              <option value=\"1\">1 Stream</option>\n              <option value=\"2\">2 Streams</option>\n              <option value=\"4\">4 Streams</option>\n              <option value=\"6\">6 Streams</option>\n              <option value=\"9\">9 Streams</option>\n              <option value=\"16\">16 Streams</option>\n            </select>\n          </div>\n\n          {layout === '1' && (\n            <div className=\"flex items-center\">\n              <label htmlFor=\"stream-selector\" className=\"mr-2\">Stream:</label>\n              <select\n                id=\"stream-selector\"\n                className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600\"\n                value={selectedStream}\n                onChange={(e) => {\n                  const newStream = e.target.value;\n                  setSelectedStream(newStream);\n                }}\n              >\n                {streams.map(stream => (\n                  <option key={stream.name} value={stream.name}>{stream.name}</option>\n                ))}\n              </select>\n            </div>\n          )}\n\n          <button\n            id=\"fullscreen-btn\"\n            className=\"p-2 rounded-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none\"\n            onClick={() => toggleFullscreen()}\n            title=\"Toggle Fullscreen\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                 stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <path\n                d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\"></path>\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      <div className=\"flex flex-col space-y-4 h-full\">\n        <div\n          id=\"video-grid\"\n          className={`video-container layout-${layout}`}\n        >\n          {isLoadingStreams ? (\n            <div className=\"flex justify-center items-center col-span-full row-span-full h-64 w-full\" style={{ pointerEvents: 'none', zIndex: 1 }}>\n              <div className=\"flex flex-col items-center justify-center py-8\">\n                <div\n                  className=\"inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16\"></div>\n                <p className=\"mt-4 text-gray-700 dark:text-gray-300\">Loading streams...</p>\n              </div>\n            </div>\n          ) : (isLoading && !isLoadingStreams) ? (\n            <div\n              className=\"flex justify-center items-center col-span-full row-span-full h-64 w-full\"\n              style={{\n                pointerEvents: 'none',\n                position: 'relative',\n                zIndex: 1\n              }}\n            >\n              <div className=\"flex flex-col items-center justify-center py-8\">\n                <div\n                  className=\"inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16\"></div>\n                <p className=\"mt-4 text-gray-700 dark:text-gray-300\">Loading streams...</p>\n              </div>\n            </div>\n          ) : (streamsError) ? (\n            <div className=\"placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8\">\n              <p className=\"mb-6 text-gray-600 dark:text-gray-300 text-lg\">Error loading streams: {streamsError.message}</p>\n              <button\n                onClick={() => window.location.reload()}\n                className=\"btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n              >\n                Retry\n              </button>\n            </div>\n          ) : streams.length === 0 ? (\n            <div className=\"placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8\">\n              <p className=\"mb-6 text-gray-600 dark:text-gray-300 text-lg\">No streams configured</p>\n              <a href=\"streams.html\" className=\"btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\">Configure Streams</a>\n            </div>\n          ) : (\n            // Render video cells using our self-contained WebRTCVideoCell component\n            streamsToShow.map(stream => (\n              <WebRTCVideoCell\n                key={stream.name}\n                stream={stream}\n                onToggleFullscreen={toggleStreamFullscreen}\n                streamId={stream.id || stream.name} // Add explicit streamId prop to prevent re-renders\n              />\n            ))\n          )}\n        </div>\n\n        {layout !== '1' && streams.length > getMaxStreamsForLayout() ? (\n          <div className=\"pagination-controls flex justify-center items-center space-x-4 mt-4\">\n            <button\n              className=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              onClick={() => {\n                console.log('Changing to previous page');\n                setCurrentPage(Math.max(0, currentPage - 1));\n              }}\n              disabled={currentPage === 0}\n            >\n              Previous\n            </button>\n\n            <span className=\"text-gray-700 dark:text-gray-300\">\n              Page {currentPage + 1} of {Math.ceil(streams.length / getMaxStreamsForLayout())}\n            </span>\n\n            <button\n              className=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              onClick={() => {\n                console.log('Changing to next page');\n                const totalPages = Math.ceil(streams.length / getMaxStreamsForLayout());\n                setCurrentPage(Math.min(totalPages - 1, currentPage + 1));\n              }}\n              disabled={currentPage >= Math.ceil(streams.length / getMaxStreamsForLayout()) - 1}\n            >\n              Next\n            </button>\n          </div>\n        ) : null}\n      </div>\n    </section>\n  );\n}\n","/**\n * LightNVR Web Interface Live View Page\n * Entry point for the live view page with WebRTC/HLS support\n */\n\nimport { render } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { LiveView } from '../components/preact/LiveView.jsx';\nimport { WebRTCView } from '../components/preact/WebRTCView.jsx';\nimport { QueryClientProvider, queryClient } from '../query-client.js';\nimport { Header } from \"../components/preact/Header.jsx\";\nimport { Footer } from \"../components/preact/Footer.jsx\";\nimport { ToastContainer } from \"../components/preact/ToastContainer.jsx\";\n\n/**\n * Main App component that conditionally renders WebRTCView or LiveView\n * based on whether WebRTC is disabled in settings\n */\nfunction App() {\n    const [isWebRTCDisabled, setIsWebRTCDisabled] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        // Check if WebRTC is disabled in settings\n        async function checkWebRTCStatus() {\n            try {\n                const response = await fetch('/api/settings');\n                if (!response.ok) {\n                    console.error('Failed to fetch settings:', response.status, response.statusText);\n                    setIsLoading(false);\n                    return;\n                }\n\n                const settings = await response.json();\n                \n                if (settings.webrtc_disabled) {\n                    console.log('WebRTC is disabled, using HLS view');\n                    setIsWebRTCDisabled(true);\n                } else {\n                    console.log('WebRTC is enabled, using WebRTC view');\n                    setIsWebRTCDisabled(false);\n                }\n            } catch (error) {\n                console.error('Error checking WebRTC status:', error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n\n        checkWebRTCStatus();\n    }, []);\n\n    if (isLoading) {\n        return <div className=\"loading\">Loading...</div>;\n    }\n\n    return (\n        <>\n            <Header />\n            <ToastContainer />\n            {isWebRTCDisabled ? <LiveView isWebRTCDisabled={true} /> : <WebRTCView />}\n            <Footer />\n        </>\n    );\n}\n\n// Render the App component when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Get the container element\n    const container = document.getElementById('main-content');\n\n    if (container) {\n        render(\n            <QueryClientProvider client={queryClient}>\n                <App />\n            </QueryClientProvider>,\n            container\n        );\n    }\n});\n"],"names":["WebRTCVideoCell","stream","streamId","onToggleFullscreen","isLoading","setIsLoading","useState","error","setError","isPlaying","setIsPlaying","reconnectAttempts","setReconnectAttempts","lastActiveTime","setLastActiveTime","videoRef","useRef","cellRef","peerConnectionRef","abortControllerRef","timeoutsRef","detectionIntervalRef","prevStreamNameRef","lastFrameTimeRef","detectionOverlayRef","clearAllTimeouts","useCallback","timeoutId","setManagedTimeout","callback","delay","cleanupWebRTCConnection","videoElement","track","trackError","tracksError","pc","closeError","sendOffer","streamName","offer","signal","formattedOffer","auth","response","text","jsonError","initializeWebRTCConnection","event","e","prev","offerOptions","answer","useEffect","handleRetry","jsxs","jsx","DetectionOverlay","SnapshotButton","canvasRef","snapshot","takeSnapshotWithDetections","showSnapshotPreview","canvas","LoadingIndicator","WebRTCView","takeSnapshot","useSnapshotManager","isFullscreen","setIsFullscreen","toggleFullscreen","useFullscreenManager","streams","setStreams","layout","setLayout","layoutParam","selectedStream","setSelectedStream","streamParam","currentPage","setCurrentPage","pageParam","storedPage","queryClient","useQueryClient","setupModals","addModalStyles","handleBeforeUnload","url","streamsData","isLoadingStreams","streamsError","useQuery","filteredStreams","filterStreamsForWebRTC","showStatusMessage","streamPromises","detailedStreams","getMaxStreamsForLayout","getStreamsToShow","streamsToShow","maxStreams","totalPages","startIdx","endIdx","toggleStreamFullscreen","cellElement","err","useMemo","SnapshotManager","FullscreenManager","newLayout","newStream","App","isWebRTCDisabled","setIsWebRTCDisabled","checkWebRTCStatus","Fragment","Header","ToastContainer","LiveView","Footer","container","render","QueryClientProvider"],"mappings":"ufAoBO,SAASA,GAAgB,CAC9B,OAAAC,EACA,SAAAC,EACA,mBAAAC,CACF,EAAG,CAED,KAAM,CAACC,EAAWC,CAAY,EAAIC,EAAS,EAAI,EACzC,CAACC,EAAOC,CAAQ,EAAIF,EAAS,IAAI,EACjC,CAACG,EAAWC,CAAY,EAAIJ,EAAS,EAAK,EAC1C,CAACK,EAAmBC,CAAoB,EAAIN,EAAS,CAAC,EACtD,CAACO,EAAgBC,CAAiB,EAAIR,EAAS,KAAK,KAAK,EAGzDS,EAAWC,EAAO,IAAI,EACtBC,EAAUD,EAAO,IAAI,EACrBE,EAAoBF,EAAO,IAAI,EAC/BG,EAAqBH,EAAO,IAAI,EAChCI,EAAcJ,EAAO,EAAE,EACvBK,EAAuBL,EAAO,IAAI,EAClCM,EAAoBN,EAAO,EAAE,EAC7BO,EAAmBP,EAAO,KAAK,IAAA,CAAK,EACpCQ,EAAsBR,EAAO,IAAI,EAGjCS,EAAmBC,EAAY,IAAM,CACzCN,EAAY,QAAQ,QAAqBO,GAAA,aAAaA,CAAS,CAAC,EAChEP,EAAY,QAAU,CAAC,CACzB,EAAG,EAAE,EAGCQ,EAAoBF,EAAY,CAACG,EAAUC,IAAU,CACnD,MAAAH,EAAY,WAAWE,EAAUC,CAAK,EAChC,OAAAV,EAAA,QAAQ,KAAKO,CAAS,EAC3BA,CACT,EAAG,EAAE,EAGCI,EAA0BL,EAAY,IAAM,CAUhD,GATA,QAAQ,IAAI,4CAA4C,OAAAzB,GAAA,YAAAA,EAAQ,KAAM,EAMrDwB,EAAA,EAGbN,EAAmB,QAAS,CAC1B,GAAA,CACFA,EAAmB,QAAQ,MAAM,QAC1B,EAAG,CACV,QAAQ,MAAM,mCAAmC,OAAAlB,GAAA,YAAAA,EAAQ,KAAI,KAAK,CAAC,CAAA,CAErEkB,EAAmB,QAAU,IAAA,CAO/B,GAHAE,EAAqB,QAAU,KAG3BN,EAAS,QAAS,CACpB,MAAMiB,EAAejB,EAAS,QAU9B,GAPAiB,EAAa,aAAe,KAC5BA,EAAa,UAAY,KACzBA,EAAa,QAAU,KACvBA,EAAa,UAAY,KACzBA,EAAa,UAAY,KAGrBA,EAAa,UAAW,CACtB,GAAA,CACaA,EAAa,UAAU,UAAU,EACzC,QAAiBC,GAAA,CAClB,GAAA,CACFA,EAAM,KAAK,QACJC,EAAY,CACnB,QAAQ,KAAK,mCAAmC,OAAAjC,GAAA,YAAAA,EAAQ,KAAI,KAAKiC,CAAU,CAAA,CAC7E,CACD,QACMC,EAAa,CACpB,QAAQ,KAAK,qCAAqC,OAAAlC,GAAA,YAAAA,EAAQ,KAAI,KAAKkC,CAAW,CAAA,CAIhFH,EAAa,UAAY,IAAA,CAC3B,CAIF,GAAId,EAAkB,QAAS,CACzB,GAAA,CAEF,MAAMkB,EAAKlB,EAAkB,QACzBkB,EAAG,iBAAgBA,EAAG,eAAiB,MACvCA,EAAG,6BAA4BA,EAAG,2BAA6B,MAC/DA,EAAG,0BAAyBA,EAAG,wBAA0B,MACzDA,EAAG,UAASA,EAAG,QAAU,MAG7BA,EAAG,MAAM,QACFC,EAAY,CACnB,QAAQ,KAAK,uCAAuC,OAAApC,GAAA,YAAAA,EAAQ,KAAI,KAAKoC,CAAU,CAAA,CAGjFnB,EAAkB,QAAU,IAAA,CAG9B,QAAQ,IAAI,kDAAkD,OAAAjB,GAAA,YAAAA,EAAQ,KAAM,CAAA,EAC3E,CAACwB,CAAgB,CAAC,EAGfa,EAAYZ,EAAY,MAAOa,EAAYC,IAAU,CACrD,GAAA,CAEiBrB,EAAA,QAAU,IAAI,gBAC3B,MAAAsB,EAAStB,EAAmB,QAAQ,OAGpCuB,EAAiB,CACrB,KAAMF,EAAM,KACZ,IAAKA,EAAM,GACb,EAEQ,QAAA,IAAI,mCAAmC,OAAAD,EAAY,EAGrD,MAAAI,EAAO,aAAa,QAAQ,MAAM,EAGlCC,EAAW,MAAM,MAAM,mBAAmB,0BAAmBL,CAAU,GAAK,CAChF,OAAQ,OACR,QAAS,CACP,eAAgB,mBAChB,GAAII,EAAO,CAAE,cAAiB,SAAWA,CAAA,EAAS,CAAA,CACpD,EACA,KAAM,KAAK,UAAUD,CAAc,EACnC,OAAAD,CAAA,CACD,EAEG,GAAA,CAACG,EAAS,GACN,MAAA,IAAI,MAAM,yBAAyB,OAAAA,EAAS,OAAM,KAAI,OAAAA,EAAS,WAAY,EAG7E,MAAAC,EAAO,MAAMD,EAAS,KAAK,EAC7B,GAAA,CACK,OAAA,KAAK,MAAMC,CAAI,QACfC,EAAW,CAClB,cAAQ,MAAM,iCAAiC,OAAAP,EAAU,KAAKO,CAAS,EAC/D,QAAA,IAAI,sBAAsB,OAAAD,EAAM,EAClC,IAAI,MAAM,kCAAkC,OAAAC,EAAU,QAAS,CAAA,QAEhEvC,EAAO,CAEVA,GAAAA,EAAM,OAAS,aACT,eAAA,IAAI,mCAAmC,OAAAgC,EAAU,eAAc,EAChE,QAAQ,OAAO,IAAI,MAAM,iBAAiB,CAAC,EAGpD,cAAQ,MAAM,kCAAkC,OAAAA,EAAU,KAAKhC,CAAK,EAC9DA,CAAA,CAEV,EAAG,EAAE,EAGCwC,EAA6BrB,EAAY,IAAM,CACnD,GAAI,CAACzB,GAAU,CAACc,EAAS,QAAS,CAChC,QAAQ,MAAM,0DAA0D,EACxE,MAAA,CAGF,QAAQ,IAAI,6CAA6C,OAAAd,EAAO,KAAM,EACtEI,EAAa,EAAI,EAGO0B,EAAA,EAGlB,MAAAK,EAAK,IAAI,kBAAkB,CAC/B,WAAY,CACV,CAAE,KAAM,8BAA+B,EACvC,CAAE,KAAM,+BAAgC,EACxC,CAAE,KAAM,+BAAgC,CAC1C,EACA,mBAAoB,MACpB,aAAc,WACd,cAAe,UACf,aAAc,cAAA,CACf,EAGDlB,EAAkB,QAAUkB,EAGzBA,EAAA,QAAWY,GAAU,CAGlB,GAFJ,QAAQ,IAAI,6BAA6B,OAAA/C,EAAO,KAAI,KAAK+C,CAAK,EAE1DA,EAAM,MAAM,OAAS,QAAS,CAChC,MAAMhB,EAAejB,EAAS,QAC9B,GAAI,CAACiB,EAAc,OAGNA,EAAA,UAAYgB,EAAM,QAAQ,CAAC,EAGxChB,EAAa,aAAe,IAAM,CAChC,QAAQ,IAAI,gCAAgC,OAAA/B,EAAO,KAAM,CAE3D,EAEA+B,EAAa,UAAY,IAAM,CAC7B,QAAQ,IAAI,4BAA4B,OAAA/B,EAAO,KAAM,EACrDI,EAAa,EAAK,EAClBK,EAAa,EAAI,EACCI,EAAA,KAAK,KAAK,EACXS,EAAA,QAAU,KAAK,IAAI,CAGtC,EAEaS,EAAA,QAAWiB,GAAM,CAC5B,QAAQ,MAAM,0BAA0B,OAAAhD,EAAO,KAAI,KAAKgD,CAAC,EAChDzC,EAAA,0BAA4ByC,EAAE,SAAW,gBAAgB,EAClE5C,EAAa,EAAK,CACpB,EAEA2B,EAAa,UAAY,IAAM,CAC7B,QAAQ,KAAK,4BAA4B,OAAA/B,EAAO,KAAM,CAExD,CAAA,CAEJ,EAEGmC,EAAA,eAAkBY,GAAU,CACzBA,EAAM,WACR,QAAQ,IAAI,4BAA4B,OAAA/C,EAAO,KAAI,KAAK+C,EAAM,SAAS,CAG3E,EAEAZ,EAAG,2BAA6B,IAAM,CACpC,QAAQ,IAAI,mCAAmC,OAAAnC,EAAO,KAAI,KAAKmC,EAAG,kBAAkB,EAEhFA,EAAG,qBAAuB,UAAYlB,EAAkB,UAAYkB,GACtE,QAAQ,KAAK,yBAAyB,OAAAnC,EAAO,KAAM,EACnDO,EAAS,8BAA8B,EACvCH,EAAa,EAAK,GACT+B,EAAG,qBAAuB,iBACnC,QAAQ,KAAK,+BAA+B,OAAAnC,EAAO,KAAM,EAGzD2B,EAAkB,IAAM,CAClBQ,EAAG,qBAAuB,gBAAkBlB,EAAkB,UAAYkB,IAC5E,QAAQ,KAAK,qCAAqC,OAAAnC,EAAO,KAAI,iBAAgB,EAGzEU,EAAoB,GACtB,QAAQ,IAAI,4BAA4B,OAAAV,EAAO,KAAI,cAAa,OAAAU,EAAoB,EAAC,IAAG,EACnEC,EAAAsC,GAAQA,EAAO,CAAC,EACVH,EAAA,IAE3BvC,EAAS,gCAAgC,EACzCE,EAAa,EAAK,EAClBL,EAAa,EAAK,KAGrB,GAAI,EAEX,EAEA+B,EAAG,wBAA0B,IAAM,CACjC,QAAQ,IAAI,uCAAuC,OAAAnC,EAAO,KAAI,KAAKmC,EAAG,eAAe,EAEjFA,EAAG,kBAAoB,UAAYlB,EAAkB,UAAYkB,IACnE,QAAQ,KAAK,gCAAgC,OAAAnC,EAAO,KAAM,EAC1DO,EAAS,0BAA0B,EACnCH,EAAa,EAAK,EAEtB,EAGA+B,EAAG,eAAe,QAAS,CAAC,UAAW,WAAW,EAClDA,EAAG,eAAe,QAAS,CAAC,UAAW,WAAW,EAGlD,MAAMe,EAAe,CACnB,oBAAqB,GACrB,oBAAqB,EACvB,EAGAf,EAAG,YAAYe,CAAY,EACxB,KAAcX,GAAA,CACT,GAAAtB,EAAkB,UAAYkB,EAC1B,MAAA,IAAI,MAAM,iDAAiD,EAE5D,OAAAA,EAAG,oBAAoBI,CAAK,CAAA,CACpC,EACA,KAAK,IAAM,CACN,GAAAtB,EAAkB,UAAYkB,EAC1B,MAAA,IAAI,MAAM,2DAA2D,EAE7E,OAAOE,EAAUrC,EAAO,KAAMmC,EAAG,gBAAgB,CAAA,CAClD,EACA,KAAegB,GAAA,CACV,GAAAlC,EAAkB,UAAYkB,EAC1B,MAAA,IAAI,MAAM,kDAAkD,EAEpE,OAAOA,EAAG,qBAAqB,IAAI,sBAAsBgB,CAAM,CAAC,CAAA,CACjE,EACA,MAAM7C,GAAS,CAEVW,EAAkB,UAAYkB,GAChC,QAAQ,MAAM,sCAAsC,OAAAnC,EAAO,KAAI,KAAKM,CAAK,EAChEA,EAAAA,EAAM,SAAW,uCAAuC,EACjEF,EAAa,EAAK,GAElB,QAAQ,IAAI,2BAA2B,OAAAJ,EAAO,KAAI,oBAAmBM,OAAAA,EAAM,QAAS,CACtF,CACD,CAAA,EACF,CAACN,EAAO,KAAM8B,EAAyBO,EAAWV,CAAiB,CAAC,EAEvEyB,EAAU,IAAM,CACV,CAACpD,GAAU,CAACA,EAAO,OAGnBA,EAAO,OAASqB,EAAkB,UACpC,QAAQ,IAAI,6CAA6C,OAAAA,EAAkB,QAAO,QAAO,OAAArB,EAAO,KAAI,mBAAkB,EAC3F8C,EAAA,GAI7BzB,EAAkB,QAAUrB,EAAO,KAAA,EAElC,CAACA,EAAQG,CAAS,CAAC,EAGhB,MAAAkD,EAAc5B,EAAY,IAAM,CAC/BzB,IAEL,QAAQ,IAAI,kCAAkC,OAAAA,EAAO,KAAM,EAC3DW,EAAqB,CAAC,EACtBJ,EAAS,IAAI,EACbH,EAAa,EAAI,EACU0C,EAAA,EAAA,EAC1B,CAACA,CAA0B,CAAC,EAG7B,OAAAQ,EAAC,MAAA,CACC,UAAU,aACV,mBAAkBtD,EAAO,KACzB,iBAAgBC,EAChB,IAAKe,EACL,MAAO,CACL,SAAU,WAEV,cAAeb,EAAY,OAAS,OACpC,OAAQ,CACV,EAGA,SAAA,CAAAoD,EAAC,QACE,CAAA,SAAA,qJAMH,EAEAA,EAAC,QAAA,CACC,GAAI,SAAS,OAAAtD,EAAS,QAAQ,OAAQ,GAAG,GACzC,UAAU,gBACV,IAAKa,EACL,YAAW,GACX,SAAQ,GACR,MAAK,GACL,wBAAuB,GACvB,MAAO,CAAE,cAAe,OAAQ,MAAO,OAAQ,OAAQ,OAAQ,UAAW,UAAW,OAAQ,CAAE,CAAA,CACjG,EAGCd,EAAO,2BAA6BA,EAAO,iBAC1CuD,EAACC,EAAA,CACC,IAAKjC,EACL,WAAYvB,EAAO,KACnB,SAAAc,EACA,QAASN,EACT,eAAgBR,EAAO,eAAA,CACzB,EAIFuD,EAAC,MAAA,CACC,UAAU,sBACV,MAAO,CACL,SAAU,WACV,IAAK,OACL,KAAM,OACN,QAAS,WACT,gBAAiB,qBACjB,MAAO,QACP,aAAc,MACd,SAAU,OACV,OAAQ,EACR,cAAe,MACjB,EAEC,SAAOvD,EAAA,IAAA,CACV,EAGAsD,EAAC,MAAA,CACC,UAAU,kBACV,MAAO,CACL,SAAU,WACV,OAAQ,OACR,MAAO,OACP,QAAS,OACT,IAAK,OACL,OAAQ,EACR,gBAAiB,qBACjB,QAAS,MACT,aAAc,MACd,cAAe,MACjB,EAEA,SAAA,CAAAC,EAAC,MAAA,CACC,MAAO,CACL,gBAAiB,cACjB,QAAS,MACT,aAAc,MACd,SAAU,WACV,OAAQ,CACV,EACA,YAAc,GAAM,EAAE,cAAc,MAAM,gBAAkB,2BAC5D,WAAa,GAAM,EAAE,cAAc,MAAM,gBAAkB,cAE3D,SAAAA,EAACE,GAAA,CACC,SAAAxD,EACA,WAAYD,EAAO,KACnB,WAAY,IAAM,CAChB,GAAIc,EAAS,QAAS,CACpB,IAAI4C,EAAY,KAQhB,GALInC,EAAoB,SAAW,OAAOA,EAAoB,QAAQ,cAAiB,aACzEmC,EAAAnC,EAAoB,QAAQ,aAAa,GAInDmC,EAAW,CACb,MAAMC,EAAWC,EAA2B9C,EAAU4C,EAAW1D,EAAO,IAAI,EACxE2D,GACkBE,EAAAF,EAAS,OAAO,UAAU,aAAc,GAAI,EAAG,aAAa,OAAA3D,EAAO,KAAM,CAC/F,KACK,CAEL,MAAM+B,EAAejB,EAAS,QACxBgD,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,MAAQ/B,EAAa,WAC5B+B,EAAO,OAAS/B,EAAa,YAEzB+B,EAAO,MAAQ,GAAKA,EAAO,OAAS,IAC1BA,EAAO,WAAW,IAAI,EAC9B,UAAU/B,EAAc,EAAG,EAAG+B,EAAO,MAAOA,EAAO,MAAM,EAEzCD,EAAAC,EAAO,UAAU,aAAc,GAAI,EAAG,aAAa,OAAA9D,EAAO,KAAM,EACtF,CACF,CACF,CACF,CAAA,CACF,CACF,EACAuD,EAAC,SAAA,CACC,UAAU,iBACV,MAAM,oBACN,UAAStD,EACT,YAAWD,EAAO,KAClB,QAAU,GAAME,EAAmBF,EAAO,KAAM,EAAGgB,EAAQ,OAAO,EAClE,MAAO,CACL,gBAAiB,cACjB,OAAQ,OACR,QAAS,MACT,aAAc,MACd,MAAO,QACP,OAAQ,UACR,SAAU,WACV,OAAQ,CACV,EACA,YAAc,GAAM,EAAE,cAAc,MAAM,gBAAkB,2BAC5D,WAAa,GAAM,EAAE,cAAc,MAAM,gBAAkB,cAE3D,SAAAuC,EAAC,MAAI,CAAA,MAAM,6BAA6B,MAAM,KAAK,OAAO,KAAK,QAAQ,YAAY,KAAK,OAAO,OAAO,QAAQ,eAAa,IAAI,iBAAe,QAAQ,kBAAgB,QAAQ,SAACA,EAAA,OAAA,CAAK,EAAE,+FAAgG,CAAA,CAAO,CAAA,CAAA,CAAA,CAC/R,CAAA,CACF,EAGCpD,GACEoD,EAAA,MAAA,CAAI,MAAO,CAAE,SAAU,WAAY,IAAK,EAAG,KAAM,EAAG,MAAO,EAAG,OAAQ,EAAG,OAAQ,EAAG,cAAe,MAAA,EAClG,SAACA,EAAAQ,GAAA,CAAiB,QAAQ,eAAA,CAAgB,CAC5C,CAAA,EAIDzD,GACCiD,EAAC,MAAA,CACC,UAAU,kBACV,MAAO,CACL,SAAU,WACV,IAAK,EACL,KAAM,EACN,MAAO,EACP,OAAQ,EACR,MAAO,OACP,OAAQ,OACR,QAAS,OACT,cAAe,SACf,eAAgB,SAChB,WAAY,SACZ,gBAAiB,qBACjB,MAAO,QACP,OAAQ,EACR,cAAe,OACf,UAAW,SAEX,SAAU,QACZ,EAEA,SAAAD,EAAC,MAAA,CACC,UAAU,gBACV,MAAO,CACL,QAAS,OACT,cAAe,SACf,eAAgB,SAChB,WAAY,SACZ,MAAO,MACP,SAAU,QACV,QAAS,OACT,aAAc,MACd,gBAAiB,oBACnB,EAEA,SAAA,CAAAC,EAAC,MAAA,CACC,UAAU,aACV,MAAO,CACL,SAAU,OACV,aAAc,OACd,WAAY,OACZ,MAAO,OACP,OAAQ,OACR,WAAY,OACZ,aAAc,MACd,gBAAiB,yBACjB,UAAW,QACb,EACD,SAAA,GAAA,CAED,EACAA,EAAC,KAAE,MAAO,CACR,aAAc,OACd,UAAW,SACX,MAAO,OACP,SAAU,OACV,WAAY,KAAA,EAEX,SACHjD,EAAA,EACAiD,EAAC,SAAA,CACC,UAAU,eACV,QAASF,EACT,MAAO,CACL,QAAS,WACT,gBAAiB,UACjB,MAAO,QACP,aAAc,MACd,OAAQ,OACR,OAAQ,UACR,WAAY,OACZ,SAAU,OACV,UAAW,+BACX,WAAY,4BACd,EACA,YAAc,GAAM,EAAE,cAAc,MAAM,gBAAkB,UAC5D,WAAa,GAAM,EAAE,cAAc,MAAM,gBAAkB,UAC5D,SAAA,OAAA,CAAA,CAED,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,CAEJ,CCrlBO,SAASW,IAAa,CAErB,KAAA,CAAE,aAAAC,CAAa,EAAIC,GAAmB,EAGtC,CAAE,aAAAC,EAAc,gBAAAC,EAAiB,iBAAAC,CAAA,EAAqBC,EAAqB,EAG3E,CAACC,EAASC,CAAU,EAAInE,EAAS,CAAA,CAAE,EACnC,CAACF,EAAWC,CAAY,EAAIC,EAAS,EAAI,EAGzC,CAACoE,EAAQC,CAAS,EAAIrE,EAAS,IAAM,CAEnC,MAAAsE,EADY,IAAI,gBAAgB,OAAO,SAAS,MAAM,EAC9B,IAAI,QAAQ,EAC1C,OAAIA,GAIiB,eAAe,QAAQ,eAAe,GACpC,GAAA,CACxB,EAGK,CAACC,EAAgBC,CAAiB,EAAIxE,EAAS,IAAM,CAEnD,MAAAyE,EADY,IAAI,gBAAgB,OAAO,SAAS,MAAM,EAC9B,IAAI,QAAQ,EAC1C,OAAIA,GAIiB,eAAe,QAAQ,wBAAwB,GAC7C,EAAA,CACxB,EAGK,CAACC,EAAaC,CAAc,EAAI3E,EAAS,IAAM,CAE7C,MAAA4E,EADY,IAAI,gBAAgB,OAAO,SAAS,MAAM,EAChC,IAAI,MAAM,EACtC,GAAIA,EAEF,OAAO,KAAK,IAAI,EAAG,SAASA,EAAW,EAAE,EAAI,CAAC,EAG1C,MAAAC,EAAa,eAAe,QAAQ,qBAAqB,EAC/D,OAAIA,EAEK,KAAK,IAAI,EAAG,SAASA,EAAY,EAAE,EAAI,CAAC,EAE1C,CAAA,CACR,EAGKC,EAAcC,EAAe,EAGnChC,EAAU,IAAM,CAEFiC,GAAA,EACGC,GAAA,EAGf,MAAMC,EAAqB,IAAM,CAC/B,QAAQ,IAAI,8CAA8C,EAG1D,MAAMC,EAAM,IAAI,IAAI,OAAO,QAAQ,EAG/BT,EAAc,EAChBS,EAAI,aAAa,IAAI,OAAQT,EAAc,CAAC,EAExCS,EAAA,aAAa,OAAO,MAAM,EAI5Bf,IAAW,IACTe,EAAA,aAAa,IAAI,SAAUf,CAAM,EAEjCe,EAAA,aAAa,OAAO,QAAQ,EAI9Bf,IAAW,KAAOG,EAChBY,EAAA,aAAa,IAAI,SAAUZ,CAAc,EAEzCY,EAAA,aAAa,OAAO,QAAQ,EAIlC,OAAO,QAAQ,aAAa,CAAA,EAAI,GAAIA,CAAG,EAGnCT,EAAc,EAChB,eAAe,QAAQ,uBAAwBA,EAAc,GAAG,UAAU,EAE1E,eAAe,WAAW,qBAAqB,EAI7CN,IAAW,IACE,eAAA,QAAQ,gBAAiBA,CAAM,EAE9C,eAAe,WAAW,eAAe,EAIvCA,IAAW,KAAOG,EACL,eAAA,QAAQ,yBAA0BA,CAAc,EAE/D,eAAe,WAAW,wBAAwB,CAEtD,EAGO,cAAA,iBAAiB,eAAgBW,CAAkB,EAGnD,IAAM,CACJ,OAAA,oBAAoB,eAAgBA,CAAkB,CAC/D,GACC,CAAChB,EAASQ,EAAaN,EAAQG,CAAc,CAAC,EAG3C,KAAA,CACJ,KAAMa,EACN,UAAWC,EACX,MAAOC,CAAA,EACLC,EACF,UACA,eACA,CACE,QAAS,KACT,QAAS,EACT,WAAY,GAAA,CAEhB,EAGAxC,EAAU,IAAM,CACdhD,EAAasF,CAAgB,CAAA,EAC5B,CAACA,CAAgB,CAAC,EAGrBtC,EAAU,IAAM,CACVqC,GAAe,MAAM,QAAQA,CAAW,IAEnB,SAAY,CAC7B,GAAA,CAEI,MAAAI,EAAkB,MAAMC,EAAuBL,CAAW,EAE5D,GAAAI,EAAgB,OAAS,EAAG,CAC9BrB,EAAWqB,CAAe,EAIpB,MAAAf,EADY,IAAI,gBAAgB,OAAO,SAAS,MAAM,EAC9B,IAAI,QAAQ,EAEtCA,GAAee,EAAgB,QAAe7F,EAAO,OAAS8E,CAAW,EAE3ED,EAAkBC,CAAW,GACpB,CAACF,GAAkB,CAACiB,EAAgB,KAAe7F,GAAAA,EAAO,OAAS4E,CAAc,IAExEC,EAAAgB,EAAgB,CAAC,EAAE,IAAI,CAC3C,MAEA,QAAQ,KAAK,sDAAsD,QAE9DvF,EAAO,CACN,QAAA,MAAM,4BAA6BA,CAAK,EAC9ByF,EAAA,6BAA+BzF,EAAM,OAAO,CAAA,CAElE,GAEe,CAEhB,EAAA,CAACmF,EAAab,EAAgBO,CAAW,CAAC,EAG7C/B,EAAU,IAAM,CAEV,GAAAmB,EAAQ,SAAW,EAAG,OAE1B,QAAQ,IAAI,yBAAyB,EACrC,MAAMiB,EAAM,IAAI,IAAI,OAAO,QAAQ,EAG/BT,IAAgB,EACdS,EAAA,aAAa,OAAO,MAAM,EAG9BA,EAAI,aAAa,IAAI,OAAQT,EAAc,CAAC,EAI1CN,IAAW,IACTe,EAAA,aAAa,IAAI,SAAUf,CAAM,EAGjCe,EAAA,aAAa,OAAO,QAAQ,EAI9Bf,IAAW,KAAOG,EAChBY,EAAA,aAAa,IAAI,SAAUZ,CAAc,EAGzCY,EAAA,aAAa,OAAO,QAAQ,EAIlC,OAAO,QAAQ,aAAa,CAAA,EAAI,GAAIA,CAAG,EAGnCT,EAAc,EAChB,eAAe,QAAQ,uBAAwBA,EAAc,GAAG,UAAU,EAE1E,eAAe,WAAW,qBAAqB,EAG7CN,IAAW,IACE,eAAA,QAAQ,gBAAiBA,CAAM,EAE9C,eAAe,WAAW,eAAe,EAGvCA,IAAW,KAAOG,EACL,eAAA,QAAQ,yBAA0BA,CAAc,EAE/D,eAAe,WAAW,wBAAwB,CACpD,EACC,CAACG,EAAaN,EAAQG,EAAgBL,EAAQ,MAAM,CAAC,EAOlD,MAAAuB,EAAyB,MAAOvB,GAAY,CAC5C,GAAA,CACF,GAAI,CAACA,GAAW,CAAC,MAAM,QAAQA,CAAO,EACpC,eAAQ,KAAK,oCAAoC,EAC1C,CAAC,EAIV,MAAMyB,EAAiBzB,EAAQ,IAAI,MAAOvE,GAAW,CAC/C,GAAA,CACI,MAAAC,EAAWD,EAAO,IAAMA,EAAO,KAc9B,OAZe,MAAMmF,EAAY,WAAW,CACjD,SAAU,CAAC,iBAAkBlF,CAAQ,EACrC,QAAS,SAAY,CACnB,MAAM0C,EAAW,MAAM,MAAM,gBAAgB,0BAAmB1C,CAAQ,EAAG,EACvE,GAAA,CAAC0C,EAAS,GACZ,MAAM,IAAI,MAAM,qCAAqC,OAAA3C,EAAO,KAAM,EAEpE,OAAO2C,EAAS,KAAK,CACvB,EACA,UAAW,GAAA,CACZ,QAGMrC,EAAO,CACd,eAAQ,MAAM,oCAAoC,OAAAN,EAAO,KAAI,KAAKM,CAAK,EAEhEN,CAAA,CACT,CACD,EAEKiG,EAAkB,MAAM,QAAQ,IAAID,CAAc,EAChD,QAAA,IAAI,2CAA4CC,CAAe,EAGjE,MAAAJ,EAAkBI,EAAgB,OAAiBjG,GAEnDA,EAAO,YACT,QAAQ,IAAI,UAAU,OAAAA,EAAO,KAAI,kCAAiC,EAC3D,IAIJA,EAAO,QAMPA,EAAO,kBAKL,IAJL,QAAQ,IAAI,UAAU,OAAAA,EAAO,KAAI,kDAAiD,EAC3E,KAPP,QAAQ,IAAI,UAAU,OAAAA,EAAO,KAAI,8BAA6B,EACvD,GAUV,EAEO,eAAA,IAAI,oCAAqC6F,CAAe,EAEzDA,GAAmB,CAAC,QACpBvF,EAAO,CACN,eAAA,MAAM,2CAA4CA,CAAK,EAC7CyF,EAAA,6BAA+BzF,EAAM,OAAO,EACvD,CAAC,CAAA,CAEZ,EAMM4F,EAAyBzE,EAAY,IAAM,CAC/C,OAAQgD,EAAQ,CACd,IAAK,IAAY,MAAA,GACjB,IAAK,IAAY,MAAA,GACjB,IAAK,IAAY,MAAA,GACjB,IAAK,IAAY,MAAA,GACjB,IAAK,IAAY,MAAA,GACjB,IAAK,KAAa,MAAA,IAClB,QAAgB,MAAA,EAAA,CAClB,EACC,CAACA,CAAM,CAAC,EAML0B,EAAmB1E,EAAY,IAAM,CAEzC,IAAI2E,EAAgB7B,EAEhB,GAAAE,IAAW,KAAOG,EACpBwB,EAAgB7B,EAAQ,OAAiBvE,GAAAA,EAAO,OAAS4E,CAAc,MAClE,CAEL,MAAMyB,EAAaH,EAAuB,EACpCI,EAAa,KAAK,KAAK/B,EAAQ,OAAS8B,CAAU,EAGpD,GAAAtB,GAAeuB,GAAcA,EAAa,EAC5C,MAAO,CAAC,EAIV,MAAMC,EAAWxB,EAAcsB,EACzBG,EAAS,KAAK,IAAID,EAAWF,EAAY9B,EAAQ,MAAM,EAC7D6B,EAAgB7B,EAAQ,MAAMgC,EAAUC,CAAM,CAAA,CAGzCJ,OAAAA,GACN,CAAC7B,EAASE,EAAQG,EAAgBG,CAAW,CAAC,EAGjD3B,EAAU,IAAM,CACV,GAAAmB,EAAQ,SAAW,EAAG,OAE1B,MAAM8B,EAAaH,EAAuB,EACpCI,EAAa,KAAK,KAAK/B,EAAQ,OAAS8B,CAAU,EAEpDtB,GAAeuB,GACjBtB,EAAe,KAAK,IAAI,EAAGsB,EAAa,CAAC,CAAC,GAE3C,CAAC/B,EAASE,EAAQM,EAAamB,CAAsB,CAAC,EAQzD,MAAMO,EAAyB,CAACnE,EAAYS,EAAO2D,IAAgB,CAOjE,GALI3D,IACFA,EAAM,eAAe,EACrBA,EAAM,gBAAgB,GAGpB,CAACT,EAAY,CACf,QAAQ,MAAM,gDAAgD,EAC9D,MAAA,CAKF,GAFQ,QAAA,IAAI,mCAAmC,OAAAA,EAAY,EAEvD,CAACoE,EAAa,CAChB,QAAQ,MAAM,uDAAuD,EACrE,MAAA,CAGG,SAAS,mBAOZ,QAAQ,IAAI,yBAAyB,EACrC,SAAS,eAAe,IAPxB,QAAQ,IAAI,yCAAyC,EACzCA,EAAA,kBAAA,EAAoB,MAAaC,GAAA,CAC3C,QAAQ,MAAM,0CAA0C,OAAAA,EAAI,QAAS,EACnDZ,EAAA,qCAAqC,OAAAY,EAAI,QAAS,CAAA,CACrE,EAKL,EAGMP,EAAgBQ,EAAQ,IAAMT,IAAoB,CAAC5B,EAASE,EAAQG,EAAgBG,EAAamB,CAAsB,CAAC,EAG5H,OAAA5C,EAAC,UAAA,CACC,GAAG,YACH,UAAW,QAAQ,OAAAa,EAAe,kBAAoB,IAGtD,SAAA,CAAAZ,EAACsD,GAAgB,EAAA,EAGjBtD,EAACuD,GAAA,CACC,aAAA3C,EACA,gBAAAC,EACA,SAAS,WAAA,CACX,EAEAd,EAAC,MAAI,CAAA,UAAU,qGACb,SAAA,CAACA,EAAA,MAAA,CAAI,UAAU,8BACb,SAAA,CAACC,EAAA,KAAA,CAAG,UAAU,yBAAyB,SAAS,YAAA,EAChDA,EAAC,MAAI,CAAA,UAAU,iBACb,SAAAA,EAAC,SAAA,CACC,GAAG,iBACH,UAAU,6LACV,QAAS,IAAM,OAAO,SAAS,KAAO,YACvC,SAAA,UAAA,CAAA,CAGH,CAAA,CAAA,EACF,EACAD,EAAC,MAAI,CAAA,UAAU,uCACb,SAAA,CAACA,EAAA,MAAA,CAAI,UAAU,oBACb,SAAA,CAAAC,EAAC,QAAM,CAAA,QAAQ,kBAAkB,UAAU,OAAO,SAAO,UAAA,EACzDD,EAAC,SAAA,CACC,GAAG,kBACH,UAAU,2JACV,MAAOmB,EACP,SAAWzB,GAAM,CACT,MAAA+D,EAAY/D,EAAE,OAAO,MAC3B0B,EAAUqC,CAAS,EACnB/B,EAAe,CAAC,CAClB,EAEA,SAAA,CAACzB,EAAA,SAAA,CAAO,MAAM,IAAI,SAAQ,WAAA,EACzBA,EAAA,SAAA,CAAO,MAAM,IAAI,SAAS,YAAA,EAC1BA,EAAA,SAAA,CAAO,MAAM,IAAI,SAAS,YAAA,EAC1BA,EAAA,SAAA,CAAO,MAAM,IAAI,SAAS,YAAA,EAC1BA,EAAA,SAAA,CAAO,MAAM,IAAI,SAAS,YAAA,EAC1BA,EAAA,SAAA,CAAO,MAAM,KAAK,SAAU,YAAA,CAAA,CAAA,CAAA,CAAA,CAC/B,EACF,EAECkB,IAAW,KACTnB,EAAA,MAAA,CAAI,UAAU,oBACb,SAAA,CAAAC,EAAC,QAAM,CAAA,QAAQ,kBAAkB,UAAU,OAAO,SAAO,UAAA,EACzDA,EAAC,SAAA,CACC,GAAG,kBACH,UAAU,2JACV,MAAOqB,EACP,SAAW5B,GAAM,CACT,MAAAgE,EAAYhE,EAAE,OAAO,MAC3B6B,EAAkBmC,CAAS,CAC7B,EAEC,SAAQzC,EAAA,IACPvE,GAAAuD,EAAC,SAAyB,CAAA,MAAOvD,EAAO,KAAO,SAAOA,EAAA,IAAA,EAAzCA,EAAO,IAAuC,CAC5D,CAAA,CAAA,CACH,EACF,EAGFuD,EAAC,SAAA,CACC,GAAG,iBACH,UAAU,4GACV,QAAS,IAAMc,EAAiB,EAChC,MAAM,oBAEN,SAAAd,EAAC,MAAA,CAAI,MAAM,6BAA6B,MAAM,KAAK,OAAO,KAAK,QAAQ,YAAY,KAAK,OACnF,OAAO,eAAe,YAAY,IAAI,cAAc,QAAQ,eAAe,QAC9E,SAAAA,EAAC,OAAA,CACC,EAAE,+FAAA,CAAA,CAAgG,CAAA,CACtG,CAAA,CACF,CACF,CAAA,CAAA,EACF,EAEAD,EAAC,MAAI,CAAA,UAAU,iCACb,SAAA,CAAAC,EAAC,MAAA,CACC,GAAG,aACH,UAAW,0BAA0B,OAAAkB,GAEpC,SACCiB,EAAAnC,EAAC,MAAI,CAAA,UAAU,2EAA2E,MAAO,CAAE,cAAe,OAAQ,OAAQ,CAAE,EAClI,SAACD,EAAA,MAAA,CAAI,UAAU,iDACb,SAAA,CAAAC,EAAC,MAAA,CACC,UAAU,yIAAA,CAA0I,EACrJA,EAAA,IAAA,CAAE,UAAU,wCAAwC,SAAkB,oBAAA,CAAA,CAAA,CAAA,CACzE,CACF,CAAA,EACGpD,GAAa,CAACuF,EACjBnC,EAAC,MAAA,CACC,UAAU,2EACV,MAAO,CACL,cAAe,OACf,SAAU,WACV,OAAQ,CACV,EAEA,SAAAD,EAAC,MAAI,CAAA,UAAU,iDACb,SAAA,CAAAC,EAAC,MAAA,CACC,UAAU,yIAAA,CAA0I,EACrJA,EAAA,IAAA,CAAE,UAAU,wCAAwC,SAAkB,oBAAA,CAAA,CAAA,CACzE,CAAA,CAAA,CAAA,EAECoC,EACFrC,EAAA,MAAA,CAAI,UAAU,mJACb,SAAA,CAACA,EAAA,IAAA,CAAE,UAAU,gDAAgD,SAAA,CAAA,0BAAwBqC,EAAa,OAAA,EAAQ,EAC1GpC,EAAC,SAAA,CACC,QAAS,IAAM,OAAO,SAAS,OAAO,EACtC,UAAU,2FACX,SAAA,OAAA,CAAA,CAED,EACF,EACEgB,EAAQ,SAAW,EACpBjB,EAAA,MAAA,CAAI,UAAU,mJACb,SAAA,CAACC,EAAA,IAAA,CAAE,UAAU,gDAAgD,SAAqB,wBAAA,IACjF,IAAE,CAAA,KAAK,eAAe,UAAU,2FAA2F,SAAiB,mBAAA,CAAA,CAAA,EAC/I,EAGA6C,EAAc,IACZpG,GAAAuD,EAACxD,GAAA,CAEC,OAAAC,EACA,mBAAoByG,EACpB,SAAUzG,EAAO,IAAMA,EAAO,IAAA,EAHzBA,EAAO,IAKf,CAAA,CAAA,CAEL,EAECyE,IAAW,KAAOF,EAAQ,OAAS2B,IAClC5C,EAAC,MAAI,CAAA,UAAU,sEACb,SAAA,CAAAC,EAAC,SAAA,CACC,UAAU,0OACV,QAAS,IAAM,CACb,QAAQ,IAAI,2BAA2B,EACvCyB,EAAe,KAAK,IAAI,EAAGD,EAAc,CAAC,CAAC,CAC7C,EACA,SAAUA,IAAgB,EAC3B,SAAA,UAAA,CAED,EAEAzB,EAAC,OAAK,CAAA,UAAU,mCAAmC,SAAA,CAAA,QAC3CyB,EAAc,EAAE,OAAK,KAAK,KAAKR,EAAQ,OAAS2B,EAAwB,CAAA,CAAA,EAChF,EAEA3C,EAAC,SAAA,CACC,UAAU,0OACV,QAAS,IAAM,CACb,QAAQ,IAAI,uBAAuB,EACnC,MAAM+C,EAAa,KAAK,KAAK/B,EAAQ,OAAS2B,GAAwB,EACtElB,EAAe,KAAK,IAAIsB,EAAa,EAAGvB,EAAc,CAAC,CAAC,CAC1D,EACA,SAAUA,GAAe,KAAK,KAAKR,EAAQ,OAAS2B,EAAwB,CAAA,EAAI,EACjF,SAAA,MAAA,CAAA,CAED,CAAA,CACF,EACE,IAAA,CACN,CAAA,CAAA,CAAA,CACF,CAEJ,CChkBA,SAASe,IAAM,CACX,KAAM,CAACC,EAAkBC,CAAmB,EAAI9G,EAAS,EAAK,EACxD,CAACF,EAAWC,CAAY,EAAIC,EAAS,EAAI,EAgC/C,OA9BA+C,EAAU,IAAM,CAEZ,eAAegE,GAAoB,CAC3B,GAAA,CACM,MAAAzE,EAAW,MAAM,MAAM,eAAe,EACxC,GAAA,CAACA,EAAS,GAAI,CACd,QAAQ,MAAM,4BAA6BA,EAAS,OAAQA,EAAS,UAAU,EAC/EvC,EAAa,EAAK,EAClB,MAAA,EAGa,MAAMuC,EAAS,KAAK,GAExB,iBACT,QAAQ,IAAI,oCAAoC,EAChDwE,EAAoB,EAAI,IAExB,QAAQ,IAAI,sCAAsC,EAClDA,EAAoB,EAAK,SAExB7G,EAAO,CACJ,QAAA,MAAM,gCAAiCA,CAAK,CAAA,QACtD,CACEF,EAAa,EAAK,CAAA,CACtB,CAGcgH,EAAA,CACtB,EAAG,EAAE,EAEDjH,EACQoD,EAAA,MAAA,CAAI,UAAU,UAAU,SAAU,aAAA,EAKtCD,EAAA+D,EAAA,CAAA,SAAA,CAAA9D,EAAC+D,GAAO,EAAA,IACPC,EAAe,EAAA,EACfL,EAAoB3D,EAAAiE,GAAA,CAAS,iBAAkB,EAAM,CAAA,IAAMxD,GAAW,EAAA,IACtEyD,GAAO,CAAA,CAAA,CAAA,EACZ,CAER,CAGA,SAAS,iBAAiB,mBAAoB,IAAM,CAE1C,MAAAC,EAAY,SAAS,eAAe,cAAc,EAEpDA,GACAC,IACKC,EAAoB,CAAA,OAAQzC,EACzB,SAAA5B,EAAC0D,IAAI,CAAA,EACT,EACAS,CACJ,CAER,CAAC"}