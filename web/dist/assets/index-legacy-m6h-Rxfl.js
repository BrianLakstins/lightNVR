System.register(["./query-client-legacy-BQ_U5NnD.js","./layout-legacy-CDxh3f01.js","./LiveView-legacy-CUsitYEw.js","./Footer-legacy-D3FOamIQ.js"],(function(e,t){"use strict";var o,n,r,s,a,l,i,c,d,m,u,g,h,f,p,y,b,v,w;return{setters:[e=>{o=e.d,n=e.A,r=e.y,s=e.u,a=e.E,l=e.q,i=e.Q,c=e.k},null,e=>{d=e.s,m=e.c,u=e.t,g=e.L},e=>{h=e.s,f=e.a,p=e.b,y=e.c,b=e.d,v=e.H,w=e.F}],execute:function(){function e(){const[e,t]=o([]),[a,l]=o((()=>new URLSearchParams(window.location.search).get("layout")||"4")),[i,c]=o((()=>new URLSearchParams(window.location.search).get("stream")||"")),[g,v]=o(!1),[w,x]=o(!0),[C,k]=o((()=>{const e=new URLSearchParams(window.location.search).get("page");return e?Math.max(0,parseInt(e,10)-1):0})),$=n(null),E=n({}),S=n({});r((()=>{h(),f(),p();const t=setInterval((()=>{Object.keys(E.current).forEach((t=>{const o=E.current[t];if(o&&(console.debug(`WebRTC connection state for ${t}: ${o.connectionState}, ICE state: ${o.iceConnectionState}`),"failed"===o.iceConnectionState||"disconnected"===o.iceConnectionState)){console.warn(`WebRTC connection for ${t} is in ${o.iceConnectionState} state, will attempt reconnect`),W(t);const n=e.find((e=>e.name===t));n&&(console.log(`Attempting to reconnect WebRTC for stream ${t}`),L(n))}}))}),3e4);return()=>{clearInterval(t),M()}}),[e]),r((()=>{x(!0);const e=setTimeout((()=>{console.warn("Stream loading timed out"),x(!1),y("Loading streams timed out. Please try refreshing the page.")}),15e3);T().then((o=>{if(clearTimeout(e),o&&o.length>0){t(o);const e=new URLSearchParams(window.location.search).get("stream");e&&o.some((t=>t.name===e))?c(e):i&&o.some((e=>e.name===i))||c(o[0].name)}else console.warn("No streams returned from API");x(!1)})).catch((t=>{clearTimeout(e),console.error("Error loading streams:",t),y("Error loading streams: "+t.message),x(!1)}))}),[]),r((()=>{R()}),[a,i,e,C]);const T=async()=>{try{const e=new Promise(((e,t)=>{setTimeout((()=>t(new Error("Request timed out"))),5e3)})),t=fetch("/api/streams"),o=await Promise.race([t,e]);if(!o.ok)throw new Error("Failed to load streams");const n=new Promise(((e,t)=>{setTimeout((()=>t(new Error("JSON parsing timed out"))),3e3)})),r=o.json(),s=(await Promise.race([r,n])||[]).map((e=>{const t=new Promise(((t,o)=>{setTimeout((()=>o(new Error(`Timeout fetching details for stream ${e.name}`))),3e3)})),o=fetch(`/api/streams/${encodeURIComponent(e.id||e.name)}`).then((t=>{if(!t.ok)throw new Error(`Failed to load details for stream ${e.name}`);return t.json()}));return Promise.race([o,t]).catch((t=>(console.error(`Error loading details for stream ${e.name}:`,t),e)))})),a=await Promise.all(s);console.log("Loaded detailed streams for WebRTC view:",a);const l=a.filter((e=>e.is_deleted?(console.log(`Stream ${e.name} is soft deleted, filtering out`),!1):e.enabled?!!e.streaming_enabled||(console.log(`Stream ${e.name} is not configured for HLS, filtering out`),!1):(console.log(`Stream ${e.name} is inactive, filtering out`),!1)));return console.log("Filtered streams for WebRTC view:",l),l||[]}catch(e){return console.error("Error loading streams for WebRTC view:",e),y("Error loading streams: "+e.message),[]}},N=()=>{switch(a){case"1":return 1;case"2":return 2;case"4":default:return 4;case"6":return 6;case"9":return 9;case"16":return 16}},R=()=>{if(!$.current)return;const t=$.current.querySelector(".placeholder");if($.current.innerHTML="",t&&0===e.length)return $.current.appendChild(t),void setTimeout((()=>{document.body.contains(preventClickOverlay)&&document.body.removeChild(preventClickOverlay)}),100);let o=e;if("1"===a&&i)o=e.filter((e=>e.name===i));else{const t=N(),n=Math.ceil(e.length/t);if(C>=n)return void k(Math.max(0,n-1));const r=C*t,s=Math.min(r+t,e.length);o=e.slice(r,s)}const n=o.map((e=>e.name));Object.keys(E.current).forEach((e=>{n.includes(e)||(console.log(`Cleaning up WebRTC connection for stream ${e} as it's not on the current page`),W(e))})),o.forEach(((e,t)=>{I(e),E.current[e.name]?console.log(`WebRTC connection for stream ${e.name} already exists, reusing`):setTimeout((()=>{L(e)}),500*t)})),setTimeout((()=>{document.body.contains(preventClickOverlay)&&document.body.removeChild(preventClickOverlay)}),100)},I=e=>{const t=e.id||e.name,o=document.createElement("div");o.className="video-cell",o.dataset.streamName=e.name,o.dataset.streamId=t,o.style.position="relative";const n=document.createElement("video");n.id=`video-${e.name.replace(/\s+/g,"-")}`,n.className="video-element",n.playsInline=!0,n.autoplay=!0,n.muted=!0,n.style.pointerEvents="none";const r=document.createElement("div");r.className="loading-indicator",r.innerHTML='\n      <div className="spinner"></div>\n      <p>Connecting...</p>\n    ',r.style.position="absolute",r.style.top="0",r.style.left="0",r.style.width="100%",r.style.height="100%",r.style.display="flex",r.style.flexDirection="column",r.style.justifyContent="center",r.style.alignItems="center",r.style.backgroundColor="rgba(0, 0, 0, 0.7)",r.style.color="white",r.style.zIndex="20",r.style.pointerEvents="none";const s=document.createElement("div");s.className="error-indicator",s.style.display="none",s.style.position="absolute",s.style.top="0",s.style.left="0",s.style.width="100%",s.style.height="100%",s.style.flexDirection="column",s.style.justifyContent="center",s.style.alignItems="center",s.style.backgroundColor="rgba(0, 0, 0, 0.7)",s.style.color="white",s.style.zIndex="20";const a=document.createElement("div");a.className="stream-name-overlay",a.textContent=e.name,a.style.position="absolute",a.style.top="10px",a.style.left="10px",a.style.padding="5px 10px",a.style.backgroundColor="rgba(0, 0, 0, 0.5)",a.style.color="white",a.style.borderRadius="4px",a.style.fontSize="14px",a.style.zIndex="15",a.style.pointerEvents="none";const l=document.createElement("div");l.className="stream-controls",l.innerHTML=`\n      <button class="snapshot-btn" title="Take Snapshot" data-id="${t}" data-name="${e.name}">\n        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"></path><circle cx="12" cy="13" r="4"></circle></svg>\n      </button>\n      <button class="fullscreen-btn" title="Toggle Fullscreen" data-id="${t}" data-name="${e.name}">\n        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"></path></svg>\n      </button>\n    `,l.style.position="absolute",l.style.bottom="10px",l.style.right="10px",l.style.display="flex",l.style.gap="10px",l.style.zIndex="30",l.style.backgroundColor="rgba(0, 0, 0, 0.5)",l.style.padding="5px",l.style.borderRadius="4px",l.style.pointerEvents="auto";const i=document.createElement("canvas");i.id=`canvas-${e.name.replace(/\s+/g,"-")}`,i.className="detection-overlay",i.style.position="absolute",i.style.top="0",i.style.left="0",i.style.width="100%",i.style.height="100%",i.style.pointerEvents="none",i.style.zIndex="5",o.appendChild(n),o.appendChild(r),o.appendChild(s),o.appendChild(a),o.appendChild(l),o.appendChild(i),$.current.appendChild(o),o.querySelectorAll("button").forEach((e=>{e.style.position="relative",e.style.zIndex="30",e.style.pointerEvents="auto",e.style.cursor="pointer",e.style.backgroundColor="transparent",e.style.border="none",e.style.padding="5px",e.style.borderRadius="4px",e.style.color="white",e.style.transition="background-color 0.2s",e.addEventListener("mouseover",(()=>{e.style.backgroundColor="rgba(255, 255, 255, 0.2)"})),e.addEventListener("mouseout",(()=>{e.style.backgroundColor="transparent"}))}));const c=o.querySelector(".snapshot-btn");c&&c.addEventListener("click",(o=>{console.log("Snapshot button clicked for stream:",e.name),o.preventDefault(),o.stopPropagation(),O(t,o)}));const d=o.querySelector(".fullscreen-btn");d&&d.addEventListener("click",(t=>{console.log("Fullscreen button clicked for stream:",e.name),t.preventDefault(),t.stopPropagation(),F(e.name)}))},L=e=>{const t=`video-${e.name.replace(/\s+/g,"-")}`,o=document.getElementById(t),n=o?o.closest(".video-cell"):null;if(!o||!n)return;const r=n.querySelector(".loading-indicator");r&&(r.style.display="flex");const s=`canvas-${e.name.replace(/\s+/g,"-")}`;let a=document.getElementById(s);a||(a=document.createElement("canvas"),a.id=s,a.className="detection-overlay",a.style.position="absolute",a.style.top="0",a.style.left="0",a.style.width="100%",a.style.height="100%",a.style.pointerEvents="none",n.appendChild(a));const l=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}],iceTransportPolicy:"all",bundlePolicy:"balanced",rtcpMuxPolicy:"require",sdpSemantics:"unified-plan"});E.current[e.name]=l,l.ontrack=t=>{console.log(`Track received for stream ${e.name}:`,t),"video"===t.track.kind&&(o.srcObject=t.streams[0],o.onloadeddata=()=>{r&&(r.style.display="none")})},l.onicecandidate=t=>{t.candidate&&console.log(`ICE candidate for stream ${e.name}:`,t.candidate)},l.oniceconnectionstatechange=()=>{console.log(`ICE connection state for stream ${e.name}:`,l.iceConnectionState),"failed"!==l.iceConnectionState&&"disconnected"!==l.iceConnectionState||P(e.name,"WebRTC connection failed")},l.addTransceiver("video",{direction:"recvonly"}),l.addTransceiver("audio",{direction:"recvonly"});const i=setTimeout((()=>{console.warn(`WebRTC setup timed out for stream ${e.name}`),P(e.name,"WebRTC setup timed out"),E.current[e.name]&&W(e.name)}),15e3);l.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:!0}).then((t=>(console.log(`Created offer for stream ${e.name}:`,t),console.log(`Original SDP for stream ${e.name}:`,t.sdp),t.sdp.includes("a=ice-ufrag:")&&t.sdp.includes("a=ice-pwd:")||console.warn(`SDP for stream ${e.name} is missing ice-ufrag or ice-pwd!`),console.log(`Using original offer for stream ${e.name}`),l.setLocalDescription(t)))).then((()=>(console.log(`Set local description for stream ${e.name}`),j(e.name,l.localDescription)))).then((t=>(console.log(`Received answer for stream ${e.name}:`,t),l.setRemoteDescription(new RTCSessionDescription(t))))).then((()=>{console.log(`Set remote description for stream ${e.name}`),clearTimeout(i),console.log(`Stream ${e.name} detection settings:`,{detection_based_recording:e.detection_based_recording,detection_model:e.detection_model,detection_threshold:e.detection_threshold}),e.detection_based_recording&&e.detection_model?(console.log(`Starting detection polling for stream ${e.name}`),d(e.name,a,o,S.current)):console.log(`Detection not enabled for stream ${e.name}`)})).catch((t=>{clearTimeout(i),console.error(`Error setting up WebRTC for stream ${e.name}:`,t),P(e.name,t.message)}))},j=async(e,t)=>{try{const s=localStorage.getItem("auth"),a={type:t.type,sdp:t.sdp};console.log(`Sending formatted offer for stream ${e}:`,a);const l=new AbortController,i=l.signal,c=setTimeout((()=>{console.warn(`Aborting WebRTC offer request for stream ${e} due to timeout`),l.abort()}),8e3);try{const t=await fetch(`/api/webrtc?src=${encodeURIComponent(e)}`,{method:"POST",headers:{"Content-Type":"application/json",...s?{Authorization:"Basic "+s}:{}},body:JSON.stringify(a),signal:i});if(clearTimeout(c),!t.ok)throw new Error(`Failed to send offer: ${t.status} ${t.statusText}`);const r=new AbortController,l=(r.signal,setTimeout((()=>{console.warn(`Aborting JSON parsing for stream ${e} due to timeout`),r.abort()}),5e3));try{const n=await t.text();clearTimeout(l);try{return JSON.parse(n)}catch(o){throw console.error(`Error parsing JSON for stream ${e}:`,o),console.log(`Raw response text: ${n}`),new Error(`Failed to parse WebRTC answer: ${o.message}`)}}catch(n){if(clearTimeout(l),"AbortError"===n.name)throw new Error(`WebRTC answer parsing timed out for stream ${e}`);throw n}}catch(r){if(clearTimeout(c),"AbortError"===r.name)throw new Error(`WebRTC offer request timed out for stream ${e}`);throw r}}catch(s){throw console.error(`Error sending offer for stream ${e}:`,s),s}},P=(e,t)=>{console.error(`WebRTC error for stream ${e}:`,t);const o=`video-${e.replace(/\s+/g,"-")}`,n=document.getElementById(o);if(!n)return;const r=n.closest(".video-cell");if(!r)return;const s=r.querySelector(".loading-indicator");s&&(s.style.display="none");let a=r.querySelector(".error-indicator");a||(a=document.createElement("div"),a.className="error-indicator",a.style.position="absolute",a.style.top="0",a.style.left="0",a.style.width="100%",a.style.height="100%",a.style.display="flex",a.style.flexDirection="column",a.style.justifyContent="center",a.style.alignItems="center",a.style.backgroundColor="rgba(0, 0, 0, 0.7)",a.style.color="white",a.style.zIndex="20",r.appendChild(a)),a.innerHTML=`\n      <div className="error-icon">!</div>\n      <p>${t||"WebRTC connection failed"}</p>\n      <button className="retry-button mt-4 px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">Retry</button>\n    `,a.style.display="flex",a.style.pointerEvents="auto";const l=a.querySelector(".retry-button");l&&(l.style.position="relative",l.style.zIndex="30",l.style.pointerEvents="auto",l.addEventListener("click",(()=>{s&&(s.style.display="flex"),a.style.display="none",W(e),fetch(`/api/streams/${encodeURIComponent(e)}`).then((e=>e.json())).then((e=>{L(e)})).catch((e=>{console.error("Error fetching stream info:",e),a.style.display="flex";const t=a.querySelector("p");t&&(t.textContent="Could not reconnect: "+e.message),s&&(s.style.display="none")}))})))},W=e=>{E.current[e]&&(E.current[e].close(),delete E.current[e]);const t=`video-${e.replace(/\s+/g,"-")}`,o=document.getElementById(t);o&&(o.srcObject=null),m(e,S.current)},M=()=>{Object.keys(E.current).forEach((e=>{W(e)}))},O=(t,o)=>{console.log(`Taking snapshot of stream with ID: ${t}`,o);const n=document.querySelector(`.snapshot-btn[data-id="${t}"]`);let r;if(n)r=n.getAttribute("data-name"),console.log(`Found stream name from button attribute: ${r}`);else{const n=o?o.currentTarget||o.target:null;console.log("Clicked button:",n);const s=n?n.closest(".video-cell"):null;if(console.log("Video cell:",s),s&&(r=s.dataset.streamName,console.log(`Found stream name from video cell: ${r}`)),!r){const o=e.find((e=>e.id===t||e.name===t));o&&(r=o.name,console.log(`Found stream name from streams array: ${r}`))}}if(!r)return console.error("Stream name not found for snapshot"),void y("Cannot take snapshot: Stream not identified");const s=`video-${r.replace(/\s+/g,"-")}`,a=document.getElementById(s);if(!a)return console.error("Video element not found for stream:",r),void y("Cannot take snapshot: Video element not found");const l=document.createElement("canvas");if(l.width=a.videoWidth,l.height=a.videoHeight,l.style.pointerEvents="none",0===l.width||0===l.height)return console.error("Invalid video dimensions:",l.width,l.height),void y("Cannot take snapshot: Video not loaded or has invalid dimensions");l.getContext("2d").drawImage(a,0,0,l.width,l.height);try{window.__snapshotCanvas=l;const e=(new Date).toISOString().replace(/[:.]/g,"-"),t=`snapshot-${r.replace(/\s+/g,"-")}-${e}.jpg`;window.__snapshotFileName=t,b(l.toDataURL("image/jpeg",.95),`Snapshot: ${r}`),y("Snapshot taken successfully")}catch(i){console.error("Error creating snapshot:",i),y("Failed to create snapshot: "+i.message)}},F=e=>{console.log(`Toggling fullscreen for stream: ${e}`);const t=`video-${e.replace(/\s+/g,"-")}`,o=document.getElementById(t),n=o?o.closest(".video-cell"):null;n?document.fullscreenElement?(console.log("Exiting fullscreen mode"),document.exitFullscreen()):(console.log("Entering fullscreen mode for video cell"),n.requestFullscreen().catch((e=>{console.error(`Error attempting to enable fullscreen: ${e.message}`),y(`Could not enable fullscreen mode: ${e.message}`)}))):console.error("Stream not found:",e)};return s("section",{id:"live-page",className:"page "+(g?"fullscreen-mode":""),children:[s("div",{className:"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow",children:[s("div",{className:"flex items-center space-x-2",children:[s("h2",{className:"text-xl font-bold mr-4",children:"Live View"}),s("div",{className:"flex space-x-2",children:s("button",{id:"hls-toggle-btn",className:"px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800",onClick:()=>window.location.href="/hls.html",children:"HLS View"})})]}),s("div",{className:"controls flex items-center space-x-2",children:[s("div",{className:"flex items-center",children:[s("label",{for:"layout-selector",className:"mr-2",children:"Layout:"}),s("select",{id:"layout-selector",className:"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600",value:a,onChange:e=>{const t=e.target.value;l(t),k(0)},children:[s("option",{value:"1",children:"1 Stream"}),s("option",{value:"2",children:"2 Streams"}),s("option",{value:"4",selected:!0,children:"4 Streams"}),s("option",{value:"6",children:"6 Streams"}),s("option",{value:"9",children:"9 Streams"}),s("option",{value:"16",children:"16 Streams"})]})]}),"1"===a&&s("div",{className:"flex items-center",children:[s("label",{for:"stream-selector",className:"mr-2",children:"Stream:"}),s("select",{id:"stream-selector",className:"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600",value:i,onChange:e=>{const t=e.target.value;c(t)},children:e.map((e=>s("option",{value:e.name,children:e.name},e.name)))})]}),s("button",{id:"fullscreen-btn",className:"p-2 rounded-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none",onClick:()=>u(g,v),title:"Toggle Fullscreen",children:s("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",children:s("path",{d:"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"})})})]})]}),s("div",{className:"flex flex-col space-y-4",children:[s("div",{id:"video-grid",className:`video-container layout-${a}`,ref:$,children:w?s("div",{className:"flex justify-center items-center col-span-full row-span-full h-64 w-full",children:s("div",{className:"flex flex-col items-center justify-center py-8",children:[s("div",{className:"inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16"}),s("p",{className:"mt-4 text-gray-700 dark:text-gray-300",children:"Loading streams..."})]})}):0===e.length?s("div",{className:"placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8",children:[s("p",{className:"mb-6 text-gray-600 dark:text-gray-300 text-lg",children:"No streams configured"}),s("a",{href:"streams.html",className:"btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors",children:"Configure Streams"})]}):null}),"1"!==a&&e.length>N()?s("div",{className:"pagination-controls flex justify-center items-center space-x-4 mt-4",children:[s("button",{className:"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed",onClick:()=>k(Math.max(0,C-1)),disabled:0===C,children:"Previous"}),s("span",{className:"text-gray-700 dark:text-gray-300",children:["Page ",C+1," of ",Math.ceil(e.length/N())]}),s("button",{className:"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed",onClick:()=>k(Math.min(Math.ceil(e.length/N())-1,C+1)),disabled:C>=Math.ceil(e.length/N())-1,children:"Next"})]}):null]})]})}function t(){const[t,n]=o(!1),[a,l]=o(!0);return r((()=>{!async function(){try{const e=await fetch("/api/settings");if(!e.ok)return console.error("Failed to fetch settings:",e.status,e.statusText),void l(!1);(await e.json()).webrtc_disabled?(console.log("WebRTC is disabled, using HLS view"),n(!0)):(console.log("WebRTC is enabled, using WebRTC view"),n(!1))}catch(e){console.error("Error checking WebRTC status:",e)}finally{l(!1)}}()}),[]),a?s("div",{className:"loading",children:"Loading..."}):s(c,{children:[s(v,{}),t?s(g,{isWebRTCDisabled:!0}):s(e,{}),s(w,{})]})}document.addEventListener("DOMContentLoaded",(()=>{const e=document.getElementById("main-content");e&&a(s(i,{client:l,children:s(t,{})}),e)}))}}}));
//# sourceMappingURL=index-legacy-m6h-Rxfl.js.map
