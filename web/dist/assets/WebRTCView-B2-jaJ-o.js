const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./preact-app-CkdDI2CE.js","./preact-app-B50Zg-w-.css"])))=>i.map(i=>d[i]);
var B=Object.freeze,ee=Object.defineProperty;var v=(u,b)=>B(ee(u,"raw",{value:B(b||u.slice())}));import{d as C,A as P,y as j,h as w,_ as te,s as oe,a as ne,b as re,c as y,e as se}from"./preact-app-CkdDI2CE.js";import{t as le,e as ie,s as ae,c as ce}from"./DetectionOverlay-BXkMcXRw.js";var F,V,q,A,D,z;function de(){const[u,b]=C([]),[p,G]=C("4"),[$,_]=C(""),[L,W]=C(!1),[U,S]=C(!0),[h,T]=C(0),x=P(null),g=P({}),M=P({});j(()=>{oe(),ne(),re();const e=n=>{if(n.key==="Escape"){console.log("Escape key pressed, current fullscreen state:",L);const r=document.getElementById("live-page");r&&r.classList.contains("fullscreen-mode")&&(console.log("Detected fullscreen mode via DOM, exiting fullscreen"),ie(null,W))}};document.addEventListener("keydown",e);const l=()=>{O()},o=()=>{document.hidden?(console.log("Page hidden, pausing WebRTC streams"),Object.keys(g.current).forEach(n=>{const r=g.current[n];if(r&&r.connectionState!=="closed"){const t="video-".concat(n.replace(/\s+/g,"-")),s=document.getElementById(t);s&&s.pause()}})):(console.log("Page visible, resuming WebRTC streams"),Object.keys(g.current).forEach(n=>{const r=g.current[n];if(r&&r.connectionState!=="closed"){const t="video-".concat(n.replace(/\s+/g,"-")),s=document.getElementById(t);s&&s.play().catch(i=>{console.warn("Could not resume video for ".concat(n,":"),i)})}}))};window.addEventListener("beforeunload",l),document.addEventListener("visibilitychange",o);const a=setInterval(()=>{Object.keys(g.current).forEach(n=>{const r=g.current[n];if(r&&(console.debug("WebRTC connection state for ".concat(n,": ").concat(r.connectionState,", ICE state: ").concat(r.iceConnectionState)),r.iceConnectionState==="failed"||r.iceConnectionState==="disconnected")){console.warn("WebRTC connection for ".concat(n," is in ").concat(r.iceConnectionState," state, will attempt reconnect")),k(n);const t=u.find(s=>s.name===n);t&&(console.log("Attempting to reconnect WebRTC for stream ".concat(n)),I(t))}})},3e4);return()=>{document.removeEventListener("keydown",e),window.removeEventListener("beforeunload",l),document.removeEventListener("visibilitychange",o),clearInterval(a),O()}},[u]),j(()=>{S(!0);const e=setTimeout(()=>{console.warn("Stream loading timed out"),S(!1),y("Loading streams timed out. Please try refreshing the page.")},15e3);J().then(l=>{clearTimeout(e),l&&l.length>0?(b(l),_(l[0].name)):console.warn("No streams returned from API"),S(!1)}).catch(l=>{clearTimeout(e),console.error("Error loading streams:",l),y("Error loading streams: "+l.message),S(!1)})},[]),j(()=>{K()},[p,$,u,h]);const J=async()=>{try{const e=new Promise((d,c)=>{setTimeout(()=>c(new Error("Request timed out")),5e3)}),l=fetch("/api/streams"),o=await Promise.race([l,e]);if(!o.ok)throw new Error("Failed to load streams");const a=new Promise((d,c)=>{setTimeout(()=>c(new Error("JSON parsing timed out")),3e3)}),n=o.json(),t=(await Promise.race([n,a])||[]).map(d=>{const c=new Promise((f,Z)=>{setTimeout(()=>Z(new Error("Timeout fetching details for stream ".concat(d.name))),3e3)}),m=fetch("/api/streams/".concat(encodeURIComponent(d.id||d.name))).then(f=>{if(!f.ok)throw new Error("Failed to load details for stream ".concat(d.name));return f.json()});return Promise.race([m,c]).catch(f=>(console.error("Error loading details for stream ".concat(d.name,":"),f),d))}),s=await Promise.all(t);console.log("Loaded detailed streams for WebRTC view:",s);const i=s.filter(d=>d.is_deleted?(console.log("Stream ".concat(d.name," is soft deleted, filtering out")),!1):d.enabled?d.streaming_enabled?!0:(console.log("Stream ".concat(d.name," is not configured for HLS, filtering out")),!1):(console.log("Stream ".concat(d.name," is inactive, filtering out")),!1));return console.log("Filtered streams for WebRTC view:",i),i||[]}catch(e){return console.error("Error loading streams for WebRTC view:",e),y("Error loading streams: "+e.message),[]}},E=()=>{switch(p){case"1":return 1;case"2":return 2;case"4":return 4;case"6":return 6;case"9":return 9;case"16":return 16;default:return 4}},K=()=>{if(!x.current)return;const e=x.current.querySelector(".placeholder");if(x.current.innerHTML="",e&&u.length===0){x.current.appendChild(e);return}let l=u;if(p==="1"&&$)l=u.filter(o=>o.name===$);else{const o=E(),a=Math.ceil(u.length/o);if(h>=a){T(Math.max(0,a-1));return}const n=h*o,r=Math.min(n+o,u.length);l=u.slice(n,r)}l.forEach((o,a)=>{N(o),setTimeout(()=>{I(o)},a*500)})},N=e=>{const l=e.id||e.name,o=document.createElement("div");o.className="video-cell",o.dataset.streamName=e.name,o.style.position="relative";const a=document.createElement("video");a.id="video-".concat(e.name.replace(/\s+/g,"-")),a.className="video-element",a.playsInline=!0,a.autoplay=!0,a.muted=!0,a.style.pointerEvents="none";const n=document.createElement("div");n.className="loading-indicator",n.innerHTML='\n      <div class="spinner"></div>\n      <p>Connecting...</p>\n    ',n.style.position="absolute",n.style.top="0",n.style.left="0",n.style.width="100%",n.style.height="100%",n.style.display="flex",n.style.flexDirection="column",n.style.justifyContent="center",n.style.alignItems="center",n.style.backgroundColor="rgba(0, 0, 0, 0.7)",n.style.color="white",n.style.zIndex="20";const r=document.createElement("div");r.className="error-indicator",r.style.display="none",r.style.position="absolute",r.style.top="0",r.style.left="0",r.style.width="100%",r.style.height="100%",r.style.flexDirection="column",r.style.justifyContent="center",r.style.alignItems="center",r.style.backgroundColor="rgba(0, 0, 0, 0.7)",r.style.color="white",r.style.zIndex="20";const t=document.createElement("div");t.className="stream-name-overlay",t.textContent=e.name,t.style.position="absolute",t.style.top="10px",t.style.left="10px",t.style.padding="5px 10px",t.style.backgroundColor="rgba(0, 0, 0, 0.5)",t.style.color="white",t.style.borderRadius="4px",t.style.fontSize="14px",t.style.zIndex="15";const s=document.createElement("div");s.className="stream-controls",s.innerHTML='\n      <button class="snapshot-btn" title="Take Snapshot" data-id="'.concat(l,'" data-name="').concat(e.name,'">\n        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"></path><circle cx="12" cy="13" r="4"></circle></svg>\n      </button>\n      <button class="fullscreen-btn" title="Toggle Fullscreen" data-id="').concat(l,'" data-name="').concat(e.name,'">\n        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"></path></svg>\n      </button>\n    '),s.style.position="absolute",s.style.bottom="10px",s.style.right="10px",s.style.display="flex",s.style.gap="10px",s.style.zIndex="30";const i=document.createElement("canvas");i.id="canvas-".concat(e.name.replace(/\s+/g,"-")),i.className="detection-overlay",i.style.position="absolute",i.style.top="0",i.style.left="0",i.style.width="100%",i.style.height="100%",i.style.pointerEvents="none",i.style.zIndex="5",o.appendChild(a),o.appendChild(n),o.appendChild(r),o.appendChild(t),o.appendChild(s),o.appendChild(i),x.current.appendChild(o),o.querySelectorAll("button").forEach(f=>{f.style.position="relative",f.style.zIndex="30",f.style.pointerEvents="auto"});const c=o.querySelector(".snapshot-btn");c&&c.addEventListener("click",f=>{X(l)});const m=o.querySelector(".fullscreen-btn");m&&m.addEventListener("click",()=>{Y(e.name)})},I=e=>{const l="video-".concat(e.name.replace(/\s+/g,"-")),o=document.getElementById(l),a=o?o.closest(".video-cell"):null;if(!o||!a)return;const n=a.querySelector(".loading-indicator");n&&(n.style.display="flex");const r="canvas-".concat(e.name.replace(/\s+/g,"-"));let t=document.getElementById(r);t||(t=document.createElement("canvas"),t.id=r,t.className="detection-overlay",t.style.position="absolute",t.style.top="0",t.style.left="0",t.style.width="100%",t.style.height="100%",t.style.pointerEvents="none",a.appendChild(t));const s=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}],iceTransportPolicy:"all",bundlePolicy:"balanced",rtcpMuxPolicy:"require",sdpSemantics:"unified-plan"});g.current[e.name]=s,s.ontrack=c=>{console.log("Track received for stream ".concat(e.name,":"),c),c.track.kind==="video"&&(o.srcObject=c.streams[0],o.onloadeddata=()=>{n&&(n.style.display="none")})},s.onicecandidate=c=>{c.candidate&&console.log("ICE candidate for stream ".concat(e.name,":"),c.candidate)},s.oniceconnectionstatechange=()=>{console.log("ICE connection state for stream ".concat(e.name,":"),s.iceConnectionState),(s.iceConnectionState==="failed"||s.iceConnectionState==="disconnected")&&R(e.name,"WebRTC connection failed")},s.addTransceiver("video",{direction:"recvonly"}),s.addTransceiver("audio",{direction:"recvonly"});const i={offerToReceiveAudio:!0,offerToReceiveVideo:!0},d=setTimeout(()=>{console.warn("WebRTC setup timed out for stream ".concat(e.name)),R(e.name,"WebRTC setup timed out"),g.current[e.name]&&k(e.name)},15e3);s.createOffer(i).then(c=>(console.log("Created offer for stream ".concat(e.name,":"),c),console.log("Original SDP for stream ".concat(e.name,":"),c.sdp),(!c.sdp.includes("a=ice-ufrag:")||!c.sdp.includes("a=ice-pwd:"))&&console.warn("SDP for stream ".concat(e.name," is missing ice-ufrag or ice-pwd!")),console.log("Using original offer for stream ".concat(e.name)),s.setLocalDescription(c))).then(()=>(console.log("Set local description for stream ".concat(e.name)),Q(e.name,s.localDescription))).then(c=>(console.log("Received answer for stream ".concat(e.name,":"),c),s.setRemoteDescription(new RTCSessionDescription(c)))).then(()=>{console.log("Set remote description for stream ".concat(e.name)),clearTimeout(d),console.log("Stream ".concat(e.name," detection settings:"),{detection_based_recording:e.detection_based_recording,detection_model:e.detection_model,detection_threshold:e.detection_threshold}),e.detection_based_recording&&e.detection_model?(console.log("Starting detection polling for stream ".concat(e.name)),ae(e.name,t,o,M.current)):console.log("Detection not enabled for stream ".concat(e.name))}).catch(c=>{clearTimeout(d),console.error("Error setting up WebRTC for stream ".concat(e.name,":"),c),R(e.name,c.message)})},Q=async(e,l)=>{try{const o=localStorage.getItem("auth"),a={type:l.type,sdp:l.sdp};console.log("Sending formatted offer for stream ".concat(e,":"),a);const n=new AbortController,r=n.signal,t=setTimeout(()=>{console.warn("Aborting WebRTC offer request for stream ".concat(e," due to timeout")),n.abort()},8e3);try{const s=await fetch("/api/webrtc?src=".concat(encodeURIComponent(e)),{method:"POST",headers:{"Content-Type":"application/json",...o?{Authorization:"Basic "+o}:{}},body:JSON.stringify(a),signal:r});if(clearTimeout(t),!s.ok)throw new Error("Failed to send offer: ".concat(s.status," ").concat(s.statusText));const i=new AbortController,d=i.signal,c=setTimeout(()=>{console.warn("Aborting JSON parsing for stream ".concat(e," due to timeout")),i.abort()},5e3);try{const m=await s.text();clearTimeout(c);try{return JSON.parse(m)}catch(f){throw console.error("Error parsing JSON for stream ".concat(e,":"),f),console.log("Raw response text: ".concat(m)),new Error("Failed to parse WebRTC answer: ".concat(f.message))}}catch(m){throw clearTimeout(c),m.name==="AbortError"?new Error("WebRTC answer parsing timed out for stream ".concat(e)):m}}catch(s){throw clearTimeout(t),s.name==="AbortError"?new Error("WebRTC offer request timed out for stream ".concat(e)):s}}catch(o){throw console.error("Error sending offer for stream ".concat(e,":"),o),o}},R=(e,l)=>{console.error("WebRTC error for stream ".concat(e,":"),l);const o="video-".concat(e.replace(/\s+/g,"-")),a=document.getElementById(o);if(!a)return;const n=a.closest(".video-cell");if(!n)return;const r=n.querySelector(".loading-indicator");r&&(r.style.display="none");let t=n.querySelector(".error-indicator");t||(t=document.createElement("div"),t.className="error-indicator",t.style.position="absolute",t.style.top="0",t.style.left="0",t.style.width="100%",t.style.height="100%",t.style.display="flex",t.style.flexDirection="column",t.style.justifyContent="center",t.style.alignItems="center",t.style.backgroundColor="rgba(0, 0, 0, 0.7)",t.style.color="white",t.style.zIndex="20",n.appendChild(t)),t.innerHTML='\n      <div class="error-icon">!</div>\n      <p>'.concat(l||"WebRTC connection failed",'</p>\n      <button class="retry-button mt-4 px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">Retry</button>\n    '),t.style.display="flex";const s=t.querySelector(".retry-button");s&&(s.style.position="relative",s.style.zIndex="30",s.style.pointerEvents="auto",s.addEventListener("click",()=>{r&&(r.style.display="flex"),t.style.display="none",k(e),fetch("/api/streams/".concat(encodeURIComponent(e))).then(i=>i.json()).then(i=>{I(i)}).catch(i=>{console.error("Error fetching stream info:",i),t.style.display="flex";const d=t.querySelector("p");d&&(d.textContent="Could not reconnect: "+i.message),r&&(r.style.display="none")})}))},k=e=>{g.current[e]&&(g.current[e].close(),delete g.current[e]);const l="video-".concat(e.replace(/\s+/g,"-")),o=document.getElementById(l);o&&(o.srcObject=null),ce(e,M.current)},O=()=>{Object.keys(g.current).forEach(e=>{k(e)})},X=e=>{const l=document.querySelector('.snapshot-btn[data-id="'.concat(e,'"]'));let o;if(l)o=l.getAttribute("data-name");else{const i=(event.currentTarget||event.target).closest(".video-cell");i&&(o=i.dataset.streamName)}if(!o){console.error("Stream name not found for snapshot"),y("Cannot take snapshot: Stream not identified");return}const a="video-".concat(o.replace(/\s+/g,"-")),n=document.getElementById(a);if(!n){console.error("Video element not found for stream:",o),y("Cannot take snapshot: Video element not found");return}const r=document.createElement("canvas");if(r.width=n.videoWidth,r.height=n.videoHeight,r.width===0||r.height===0){console.error("Invalid video dimensions:",r.width,r.height),y("Cannot take snapshot: Video not loaded or has invalid dimensions");return}r.getContext("2d").drawImage(n,0,0,r.width,r.height);try{window.__snapshotCanvas=r;const s=new Date().toISOString().replace(/[:.]/g,"-"),i="snapshot-".concat(o.replace(/\s+/g,"-"),"-").concat(s,".jpg");window.__snapshotFileName=i,se(r.toDataURL("image/jpeg",.95),"Snapshot: ".concat(o)),y("Snapshot taken successfully")}catch(s){console.error("Error creating snapshot:",s),y("Failed to create snapshot: "+s.message)}},Y=e=>{const l="video-".concat(e.replace(/\s+/g,"-")),o=document.getElementById(l),a=o?o.closest(".video-cell"):null;if(!a){console.error("Stream not found:",e);return}document.fullscreenElement?document.exitFullscreen():a.requestFullscreen().catch(n=>{console.error("Error attempting to enable fullscreen: ".concat(n.message)),y("Could not enable fullscreen mode: ".concat(n.message))})};return w(z||(z=v(['\n    <section id="live-page" class="page">\n      <div class="page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow">\n        <div class="flex items-center space-x-2">\n          <h2 class="text-xl font-bold mr-4">Live View</h2>\n          <div class="flex space-x-2">\n            <button \n              id="hls-toggle-btn" \n              class="px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"\n              onClick=','\n            >\n              HLS View\n            </button>\n            <button \n              id="fullscreen-btn" \n              class="px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"\n              onClick=','\n            >\n              Fullscreen\n            </button>\n          </div>\n        </div>\n        <div class="controls flex items-center space-x-2">\n          <select \n            id="layout-selector" \n            class="px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600"\n            value=',"\n            onChange=",'\n          >\n            <option value="1">Single View</option>\n            <option value="2">2x1 Grid</option>\n            <option value="4" selected>2x2 Grid</option>\n            <option value="6">2x3 Grid</option>\n            <option value="9">3x3 Grid</option>\n            <option value="16">4x4 Grid</option>\n          </select>\n          \n          ','\n        </div>\n      </div>\n      \n      <div class="flex flex-col space-y-4">\n        <div \n          id="video-grid" \n          class=',"\n          ref=","\n        >\n          ","\n          <!-- Video cells will be dynamically added by the updateVideoGrid function -->\n        </div>\n        \n        ","\n      </div>\n    </section>\n  "])),()=>window.location.href="/hls.html",()=>le(L,W),p,e=>{G(e.target.value),T(0)},p==="1"&&w(V||(V=v(['\n            <select \n              id="stream-selector" \n              class="px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600"\n              value=',"\n              onChange=","\n            >\n              ","\n            </select>\n          "])),$,e=>_(e.target.value),u.map(e=>w(F||(F=v(["\n                <option key="," value=",">","</option>\n              "])),e.name,e.name,e.name))),"video-container layout-".concat(p),x,U?w(q||(q=v(['\n            <div class="flex justify-center items-center col-span-full row-span-full h-64 w-full">\n              <div class="flex flex-col items-center justify-center py-8">\n                <div class="inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16"></div>\n                <p class="mt-4 text-gray-700 dark:text-gray-300">Loading streams...</p>\n              </div>\n            </div>\n          ']))):u.length===0?w(A||(A=v(['\n            <div class="placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8">\n              <p class="mb-6 text-gray-600 dark:text-gray-300 text-lg">No streams configured</p>\n              <a href="streams.html" class="btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">Configure Streams</a>\n            </div>\n          ']))):null,p!=="1"&&u.length>E()?w(D||(D=v(['\n          <div class="pagination-controls flex justify-center items-center space-x-4 mt-4">\n            <button \n              class="px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"\n              onClick=',"\n              disabled=",'\n            >\n              Previous\n            </button>\n            <span class="text-gray-700 dark:text-gray-300">\n              Page '," of ",'\n            </span>\n            <button \n              class="px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"\n              onClick=',"\n              disabled=","\n            >\n              Next\n            </button>\n          </div>\n        "])),()=>T(Math.max(0,h-1)),h===0,h+1,Math.ceil(u.length/E()),()=>T(Math.min(Math.ceil(u.length/E())-1,h+1)),h>=Math.ceil(u.length/E())-1):null)}var H;function me(){const u=document.getElementById("main-content");u&&te(async()=>{const{render:b}=await import("./preact-app-CkdDI2CE.js").then(p=>p.p);return{render:b}},__vite__mapDeps([0,1]),import.meta.url).then(({render:b})=>{b(w(H||(H=v(["<"," />"])),de),u)})}export{de as WebRTCView,me as loadWebRTCView};
//# sourceMappingURL=WebRTCView-B2-jaJ-o.js.map
