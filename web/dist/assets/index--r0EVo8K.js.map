{"version":3,"file":"index--r0EVo8K.js","sources":["../../js/components/preact/WebRTCView.jsx","../../js/pages/index-page.jsx"],"sourcesContent":["/**\n * LightNVR Web Interface WebRTCView Component\n * Preact component for the WebRTC view page\n */\n\n\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { showStatusMessage, showSnapshotPreview, setupModals, addStatusMessageStyles, addModalStyles } from './UI.js';\nimport { toggleFullscreen, exitFullscreenMode } from './FullscreenManager.js';\nimport { startDetectionPolling, cleanupDetectionPolling } from './DetectionOverlay.js';\n\n/**\n * WebRTCView component\n * @returns {JSX.Element} WebRTCView component\n */\nexport function WebRTCView() {\n  const [streams, setStreams] = useState([]);\n  // Initialize layout from URL if available\n  const [layout, setLayout] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get('layout') || '4';\n  });\n  // Initialize selectedStream from URL if available\n  const [selectedStream, setSelectedStream] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get('stream') || '';\n  });\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  // Initialize currentPage from URL if available (URL uses 1-based indexing, internal state uses 0-based)\n  const [currentPage, setCurrentPage] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const pageParam = urlParams.get('page');\n    // Convert from 1-based (URL) to 0-based (internal)\n    return pageParam ? Math.max(0, parseInt(pageParam, 10) - 1) : 0;\n  });\n  const videoGridRef = useRef(null);\n  const webrtcConnections = useRef({});\n  const detectionIntervals = useRef({});\n\n  // Set up event listeners and UI components\n  useEffect(() => {\n    // Set up modals for snapshot preview\n    setupModals();\n    addStatusMessageStyles();\n    addModalStyles();\n\n    // Set up periodic connection check\n    const connectionCheckInterval = setInterval(() => {\n      Object.keys(webrtcConnections.current).forEach(streamName => {\n        const pc = webrtcConnections.current[streamName];\n        if (pc) {\n          // Log connection state for debugging\n          console.debug(`WebRTC connection state for ${streamName}: ${pc.connectionState}, ICE state: ${pc.iceConnectionState}`);\n\n          // If connection is failed or disconnected for too long, try to reconnect\n          if (pc.iceConnectionState === 'failed' || pc.iceConnectionState === 'disconnected') {\n            console.warn(`WebRTC connection for ${streamName} is in ${pc.iceConnectionState} state, will attempt reconnect`);\n\n            // Clean up the old connection\n            cleanupWebRTCPlayer(streamName);\n\n            // Find the stream info and reinitialize\n            const stream = streams.find(s => s.name === streamName);\n            if (stream) {\n              console.log(`Attempting to reconnect WebRTC for stream ${streamName}`);\n              initializeWebRTCPlayer(stream);\n            }\n          }\n        }\n      });\n    }, 30000); // Check every 30 seconds\n\n    // Cleanup\n    return () => {\n      // No need to remove handleEscape as it's now handled in FullscreenManager.js\n      clearInterval(connectionCheckInterval);\n      stopAllWebRTCStreams();\n    };\n  }, [streams]); // Add streams as dependency to ensure we have the latest stream data\n\n  // Load streams after the component has rendered and videoGridRef is available\n  useEffect(() => {\n      // Set loading state initially\n      setIsLoading(true);\n\n      // Create a timeout to handle potential stalls in loading\n      const timeoutId = setTimeout(() => {\n        console.warn('Stream loading timed out');\n        setIsLoading(false);\n        showStatusMessage('Loading streams timed out. Please try refreshing the page.');\n      }, 15000); // 15 second timeout\n\n      // Load streams from API with timeout handling\n      loadStreams()\n        .then((streamData) => {\n          clearTimeout(timeoutId);\n          if (streamData && streamData.length > 0) {\n            setStreams(streamData);\n\n            // Set selectedStream based on URL parameter if it exists and is valid\n            const urlParams = new URLSearchParams(window.location.search);\n            const streamParam = urlParams.get('stream');\n\n            if (streamParam && streamData.some(stream => stream.name === streamParam)) {\n              // If the stream from URL exists in the loaded streams, use it\n              setSelectedStream(streamParam);\n            } else if (!selectedStream || !streamData.some(stream => stream.name === selectedStream)) {\n              // Otherwise use the first stream if selectedStream is not set or invalid\n              setSelectedStream(streamData[0].name);\n            }\n          } else {\n            console.warn('No streams returned from API');\n          }\n          setIsLoading(false);\n        })\n        .catch((error) => {\n          clearTimeout(timeoutId);\n          console.error('Error loading streams:', error);\n          showStatusMessage('Error loading streams: ' + error.message);\n          setIsLoading(false);\n        });\n  }, []);\n\n  useEffect(() => {\n    updateVideoGrid();\n  }, [layout, selectedStream, streams, currentPage]);\n\n  /**\n   * Load streams from API\n   * @returns {Promise<Array>} Promise resolving to array of streams\n   */\n  const loadStreams = async () => {\n    try {\n      // Create a timeout promise to handle potential stalls\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('Request timed out')), 5000); // 5 second timeout\n      });\n\n      // Fetch streams from API with timeout\n      const fetchPromise = fetch('/api/streams');\n      const response = await Promise.race([fetchPromise, timeoutPromise]);\n\n      if (!response.ok) {\n        throw new Error('Failed to load streams');\n      }\n\n      // Create another timeout for the JSON parsing\n      const jsonTimeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('JSON parsing timed out')), 3000); // 3 second timeout\n      });\n\n      const jsonPromise = response.json();\n      const data = await Promise.race([jsonPromise, jsonTimeoutPromise]);\n\n      // For WebRTC view, we need to fetch full details for each stream\n      const streamPromises = (data || []).map(stream => {\n        // Create a timeout promise for this stream's details fetch\n        const detailsTimeoutPromise = new Promise((_, reject) => {\n          setTimeout(() => reject(new Error(`Timeout fetching details for stream ${stream.name}`)), 3000);\n        });\n\n        // Fetch stream details with timeout\n        const detailsFetchPromise = fetch(`/api/streams/${encodeURIComponent(stream.id || stream.name)}`)\n          .then(response => {\n            if (!response.ok) {\n              throw new Error(`Failed to load details for stream ${stream.name}`);\n            }\n            return response.json();\n          });\n\n        // Race the fetch against the timeout\n        return Promise.race([detailsFetchPromise, detailsTimeoutPromise])\n          .catch(error => {\n            console.error(`Error loading details for stream ${stream.name}:`, error);\n            // Return the basic stream info if we can't get details\n            return stream;\n          });\n      });\n\n      const detailedStreams = await Promise.all(streamPromises);\n      console.log('Loaded detailed streams for WebRTC view:', detailedStreams);\n\n      // Filter out streams that are soft deleted, inactive, or not configured for HLS\n      const filteredStreams = detailedStreams.filter(stream => {\n        // Filter out soft deleted streams\n        if (stream.is_deleted) {\n          console.log(`Stream ${stream.name} is soft deleted, filtering out`);\n          return false;\n        }\n\n        // Filter out inactive streams\n        if (!stream.enabled) {\n          console.log(`Stream ${stream.name} is inactive, filtering out`);\n          return false;\n        }\n\n        // Filter out streams not configured for HLS\n        if (!stream.streaming_enabled) {\n          console.log(`Stream ${stream.name} is not configured for HLS, filtering out`);\n          return false;\n        }\n\n        return true;\n      });\n\n      console.log('Filtered streams for WebRTC view:', filteredStreams);\n\n      return filteredStreams || [];\n    } catch (error) {\n      console.error('Error loading streams for WebRTC view:', error);\n      showStatusMessage('Error loading streams: ' + error.message);\n\n      return [];\n    }\n  };\n\n  /**\n   * Get maximum number of streams to display based on layout\n   * @returns {number} Maximum number of streams\n   */\n  const getMaxStreamsForLayout = () => {\n    switch (layout) {\n      case '1': return 1;  // Single view\n      case '2': return 2;  // 2x1 grid\n      case '4': return 4;  // 2x2 grid\n      case '6': return 6;  // 2x3 grid\n      case '9': return 9;  // 3x3 grid\n      case '16': return 16; // 4x4 grid\n      default: return 4;\n    }\n  };\n\n  /**\n   * Update video grid based on layout, streams, and pagination\n   */\n  const updateVideoGrid = () => {\n    if (!videoGridRef.current) return;\n\n    // Clear existing content except placeholder\n    const placeholder = videoGridRef.current.querySelector('.placeholder');\n    videoGridRef.current.innerHTML = '';\n\n    // If placeholder exists and no streams, add it back\n    if (placeholder && streams.length === 0) {\n      videoGridRef.current.appendChild(placeholder);\n      // Remove the overlay after a short delay\n      setTimeout(() => {\n        if (document.body.contains(preventClickOverlay)) {\n          document.body.removeChild(preventClickOverlay);\n        }\n      }, 100);\n      return;\n    }\n\n    // Filter streams based on layout and selected stream\n    let streamsToShow = streams;\n    if (layout === '1' && selectedStream) {\n      streamsToShow = streams.filter(stream => stream.name === selectedStream);\n    } else {\n      // Apply pagination\n      const maxStreams = getMaxStreamsForLayout();\n      const totalPages = Math.ceil(streams.length / maxStreams);\n\n      // Ensure current page is valid\n      if (currentPage >= totalPages) {\n        setCurrentPage(Math.max(0, totalPages - 1));\n        return; // Will re-render with corrected page\n      }\n\n      // Get streams for current page\n      const startIdx = currentPage * maxStreams;\n      const endIdx = Math.min(startIdx + maxStreams, streams.length);\n      streamsToShow = streams.slice(startIdx, endIdx);\n    }\n\n    // Get the names of streams that should be shown\n    const streamsToShowNames = streamsToShow.map(stream => stream.name);\n\n    // Clean up connections for streams that are no longer visible\n    Object.keys(webrtcConnections.current).forEach(streamName => {\n      if (!streamsToShowNames.includes(streamName)) {\n        console.log(`Cleaning up WebRTC connection for stream ${streamName} as it's not on the current page`);\n        cleanupWebRTCPlayer(streamName);\n      }\n    });\n\n    // Stagger initialization of WebRTC connections\n    streamsToShow.forEach((stream, index) => {\n      // Create video cell immediately for UI responsiveness\n      createVideoCell(stream);\n\n      // Only initialize WebRTC if it's not already connected\n      if (!webrtcConnections.current[stream.name]) {\n        // Stagger the actual WebRTC initialization\n        setTimeout(() => {\n          initializeWebRTCPlayer(stream);\n        }, index * 500); // 500ms delay between each stream initialization\n      } else {\n        console.log(`WebRTC connection for stream ${stream.name} already exists, reusing`);\n      }\n    });\n\n    // Remove the overlay after all cells are created\n    setTimeout(() => {\n      if (document.body.contains(preventClickOverlay)) {\n        document.body.removeChild(preventClickOverlay);\n      }\n    }, 100);\n  };\n\n  /**\n   * Create video cell without initializing WebRTC\n   * @param {Object} stream - Stream object\n   */\n  const createVideoCell = (stream) => {\n    // Ensure we have an ID for the stream (use name as fallback if needed)\n    const streamId = stream.id || stream.name;\n\n    const videoCell = document.createElement('div');\n    videoCell.className = 'video-cell';\n    videoCell.dataset.streamName = stream.name;\n    videoCell.dataset.streamId = streamId;\n    videoCell.style.position = 'relative'; // Create stacking context\n\n    // Create video element\n    const videoElement = document.createElement('video');\n    videoElement.id = `video-${stream.name.replace(/\\s+/g, '-')}`;\n    videoElement.className = 'video-element';\n    videoElement.playsInline = true;\n    videoElement.autoplay = true;\n    videoElement.muted = true;\n    videoElement.style.pointerEvents = 'none'; // Allow clicks to pass through to controls\n\n    // Create loading indicator\n    const loadingIndicator = document.createElement('div');\n    loadingIndicator.className = 'loading-indicator';\n    loadingIndicator.innerHTML = `\n      <div className=\"spinner\"></div>\n      <p>Connecting...</p>\n    `;\n    loadingIndicator.style.position = 'absolute';\n    loadingIndicator.style.top = '0';\n    loadingIndicator.style.left = '0';\n    loadingIndicator.style.width = '100%';\n    loadingIndicator.style.height = '100%';\n    loadingIndicator.style.display = 'flex';\n    loadingIndicator.style.flexDirection = 'column';\n    loadingIndicator.style.justifyContent = 'center';\n    loadingIndicator.style.alignItems = 'center';\n    loadingIndicator.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n    loadingIndicator.style.color = 'white';\n    loadingIndicator.style.zIndex = '20'; // Above video but below controls\n    loadingIndicator.style.pointerEvents = 'none'; // Ensure loading indicator doesn't capture clicks\n\n    // Create error indicator (hidden by default)\n    const errorIndicator = document.createElement('div');\n    errorIndicator.className = 'error-indicator';\n    errorIndicator.style.display = 'none';\n    errorIndicator.style.position = 'absolute';\n    errorIndicator.style.top = '0';\n    errorIndicator.style.left = '0';\n    errorIndicator.style.width = '100%';\n    errorIndicator.style.height = '100%';\n    errorIndicator.style.flexDirection = 'column';\n    errorIndicator.style.justifyContent = 'center';\n    errorIndicator.style.alignItems = 'center';\n    errorIndicator.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n    errorIndicator.style.color = 'white';\n    errorIndicator.style.zIndex = '20'; // Above video but below controls\n    // We'll set pointerEvents to 'auto' only when it's visible to allow retry button clicks\n\n    // Create stream name overlay\n    const streamNameOverlay = document.createElement('div');\n    streamNameOverlay.className = 'stream-name-overlay';\n    streamNameOverlay.textContent = stream.name;\n    streamNameOverlay.style.position = 'absolute';\n    streamNameOverlay.style.top = '10px';\n    streamNameOverlay.style.left = '10px';\n    streamNameOverlay.style.padding = '5px 10px';\n    streamNameOverlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n    streamNameOverlay.style.color = 'white';\n    streamNameOverlay.style.borderRadius = '4px';\n    streamNameOverlay.style.fontSize = '14px';\n    streamNameOverlay.style.zIndex = '15'; // Above video but below controls\n    streamNameOverlay.style.pointerEvents = 'none'; // Ensure stream name doesn't capture clicks\n\n    // Create stream controls\n    const streamControls = document.createElement('div');\n    streamControls.className = 'stream-controls';\n    streamControls.innerHTML = `\n      <button class=\"snapshot-btn\" title=\"Take Snapshot\" data-id=\"${streamId}\" data-name=\"${stream.name}\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z\"></path><circle cx=\"12\" cy=\"13\" r=\"4\"></circle></svg>\n      </button>\n      <button class=\"fullscreen-btn\" title=\"Toggle Fullscreen\" data-id=\"${streamId}\" data-name=\"${stream.name}\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\"></path></svg>\n      </button>\n    `;\n    streamControls.style.position = 'absolute';\n    streamControls.style.bottom = '10px';\n    streamControls.style.right = '10px';\n    streamControls.style.display = 'flex';\n    streamControls.style.gap = '10px';\n    streamControls.style.zIndex = '30'; // Above everything else\n    streamControls.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n    streamControls.style.padding = '5px';\n    streamControls.style.borderRadius = '4px';\n    streamControls.style.pointerEvents = 'auto'; // Ensure clicks are registered\n\n    // Add canvas for detection overlay\n    const canvasOverlay = document.createElement('canvas');\n    canvasOverlay.id = `canvas-${stream.name.replace(/\\s+/g, '-')}`;\n    canvasOverlay.className = 'detection-overlay';\n    canvasOverlay.style.position = 'absolute';\n    canvasOverlay.style.top = '0';\n    canvasOverlay.style.left = '0';\n    canvasOverlay.style.width = '100%';\n    canvasOverlay.style.height = '100%';\n    canvasOverlay.style.pointerEvents = 'none'; // Allow clicks to pass through\n    canvasOverlay.style.zIndex = '5'; // Above video but below controls\n\n    // Assemble the video cell\n    videoCell.appendChild(videoElement);\n    videoCell.appendChild(loadingIndicator);\n    videoCell.appendChild(errorIndicator);\n    videoCell.appendChild(streamNameOverlay);\n    videoCell.appendChild(streamControls);\n    videoCell.appendChild(canvasOverlay);\n\n    // Add to grid\n    videoGridRef.current.appendChild(videoCell);\n\n    // Make sure all buttons have proper z-index and pointer events\n    const allButtons = videoCell.querySelectorAll('button');\n    allButtons.forEach(button => {\n      button.style.position = 'relative';\n      button.style.zIndex = '30';\n      button.style.pointerEvents = 'auto';\n      button.style.cursor = 'pointer';\n      button.style.backgroundColor = 'transparent';\n      button.style.border = 'none';\n      button.style.padding = '5px';\n      button.style.borderRadius = '4px';\n      button.style.color = 'white';\n      button.style.transition = 'background-color 0.2s';\n\n      // Add hover effect\n      button.addEventListener('mouseover', () => {\n        button.style.backgroundColor = 'rgba(255, 255, 255, 0.2)';\n      });\n\n      button.addEventListener('mouseout', () => {\n        button.style.backgroundColor = 'transparent';\n      });\n    });\n\n    // Add event listeners for buttons\n    const snapshotBtn = videoCell.querySelector('.snapshot-btn');\n    if (snapshotBtn) {\n      snapshotBtn.addEventListener('click', (event) => {\n        console.log('Snapshot button clicked for stream:', stream.name);\n        event.preventDefault();\n        event.stopPropagation();\n        takeSnapshot(streamId, event);\n      });\n    }\n\n    const fullscreenBtn = videoCell.querySelector('.fullscreen-btn');\n    if (fullscreenBtn) {\n      fullscreenBtn.addEventListener('click', (event) => {\n        console.log('Fullscreen button clicked for stream:', stream.name);\n        event.preventDefault();\n        event.stopPropagation();\n        toggleStreamFullscreen(stream.name);\n      });\n    }\n  };\n\n  /**\n   * Initialize WebRTC player for a stream\n   * @param {Object} stream - Stream object\n   */\n  const initializeWebRTCPlayer = (stream) => {\n    const videoElementId = `video-${stream.name.replace(/\\s+/g, '-')}`;\n    const videoElement = document.getElementById(videoElementId);\n    const videoCell = videoElement ? videoElement.closest('.video-cell') : null;\n\n    if (!videoElement || !videoCell) return;\n\n    // Show loading state\n    const loadingIndicator = videoCell.querySelector('.loading-indicator');\n    if (loadingIndicator) {\n      loadingIndicator.style.display = 'flex';\n    }\n\n    // Create canvas overlay for detection bounding boxes\n    const canvasId = `canvas-${stream.name.replace(/\\s+/g, '-')}`;\n    let canvasOverlay = document.getElementById(canvasId);\n\n    if (!canvasOverlay) {\n      canvasOverlay = document.createElement('canvas');\n      canvasOverlay.id = canvasId;\n      canvasOverlay.className = 'detection-overlay';\n      canvasOverlay.style.position = 'absolute';\n      canvasOverlay.style.top = '0';\n      canvasOverlay.style.left = '0';\n      canvasOverlay.style.width = '100%';\n      canvasOverlay.style.height = '100%';\n      canvasOverlay.style.pointerEvents = 'none'; // Allow clicks to pass through\n      videoCell.appendChild(canvasOverlay);\n    }\n\n    // Create a new RTCPeerConnection with ICE servers\n    const pc = new RTCPeerConnection({\n      iceServers: [\n        { urls: 'stun:stun.l.google.com:19302' }\n      ],\n      // Add additional configuration to ensure proper ICE credentials\n      iceTransportPolicy: 'all',\n      bundlePolicy: 'balanced',\n      rtcpMuxPolicy: 'require',\n      sdpSemantics: 'unified-plan'\n    });\n\n    // Store the connection for cleanup\n    webrtcConnections.current[stream.name] = pc;\n\n    // Add event listeners\n    pc.ontrack = (event) => {\n      console.log(`Track received for stream ${stream.name}:`, event);\n      if (event.track.kind === 'video') {\n        videoElement.srcObject = event.streams[0];\n\n        // Hide loading indicator when video starts playing\n        videoElement.onloadeddata = () => {\n          if (loadingIndicator) {\n            loadingIndicator.style.display = 'none';\n          }\n        };\n      }\n    };\n\n    pc.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log(`ICE candidate for stream ${stream.name}:`, event.candidate);\n        // go2rtc doesn't use a separate ICE endpoint, so we don't need to send ICE candidates\n      }\n    };\n\n    pc.oniceconnectionstatechange = () => {\n      console.log(`ICE connection state for stream ${stream.name}:`, pc.iceConnectionState);\n      if (pc.iceConnectionState === 'failed' || pc.iceConnectionState === 'disconnected') {\n        // Handle connection failure\n        handleWebRTCError(stream.name, 'WebRTC connection failed');\n      }\n    };\n\n    // Add transceivers to ensure we get both audio and video tracks\n    pc.addTransceiver('video', {direction: 'recvonly'});\n    pc.addTransceiver('audio', {direction: 'recvonly'});\n\n    // Create an offer with specific codec requirements\n    const offerOptions = {\n      offerToReceiveAudio: true,\n      offerToReceiveVideo: true\n    };\n\n    // Create a timeout for the entire WebRTC setup process\n    const setupTimeoutId = setTimeout(() => {\n      console.warn(`WebRTC setup timed out for stream ${stream.name}`);\n      handleWebRTCError(stream.name, 'WebRTC setup timed out');\n\n      // Clean up the connection if it exists\n      if (webrtcConnections.current[stream.name]) {\n        cleanupWebRTCPlayer(stream.name);\n      }\n    }, 15000); // 15 second timeout for the entire setup process\n\n    pc.createOffer(offerOptions)\n      .then(offer => {\n        console.log(`Created offer for stream ${stream.name}:`, offer);\n\n        // Log the original SDP to ensure it has ice-ufrag and ice-pwd\n        console.log(`Original SDP for stream ${stream.name}:`, offer.sdp);\n\n        // Check if the SDP has ice-ufrag and ice-pwd\n        if (!offer.sdp.includes('a=ice-ufrag:') || !offer.sdp.includes('a=ice-pwd:')) {\n          console.warn(`SDP for stream ${stream.name} is missing ice-ufrag or ice-pwd!`);\n        }\n\n        // We'll use the original offer without modifications to preserve ice-ufrag and ice-pwd\n        console.log(`Using original offer for stream ${stream.name}`);\n        return pc.setLocalDescription(offer);\n      })\n      .then(() => {\n        console.log(`Set local description for stream ${stream.name}`);\n        // Send the offer to the server\n        return sendOffer(stream.name, pc.localDescription);\n      })\n      .then(answer => {\n        console.log(`Received answer for stream ${stream.name}:`, answer);\n        // Set the remote description\n        return pc.setRemoteDescription(new RTCSessionDescription(answer));\n      })\n      .then(() => {\n        console.log(`Set remote description for stream ${stream.name}`);\n\n        // Clear the setup timeout since we've successfully set up the connection\n        clearTimeout(setupTimeoutId);\n\n        // Start detection polling if detection is enabled for this stream\n        console.log(`Stream ${stream.name} detection settings:`, {\n          detection_based_recording: stream.detection_based_recording,\n          detection_model: stream.detection_model,\n          detection_threshold: stream.detection_threshold\n        });\n\n        if (stream.detection_based_recording && stream.detection_model) {\n          console.log(`Starting detection polling for stream ${stream.name}`);\n          startDetectionPolling(stream.name, canvasOverlay, videoElement, detectionIntervals.current);\n        } else {\n          console.log(`Detection not enabled for stream ${stream.name}`);\n        }\n      })\n      .catch(error => {\n        // Clear the setup timeout\n        clearTimeout(setupTimeoutId);\n\n        console.error(`Error setting up WebRTC for stream ${stream.name}:`, error);\n        handleWebRTCError(stream.name, error.message);\n      });\n  };\n\n  /**\n   * Send WebRTC offer to server\n   * @param {string} streamName - Stream name\n   * @param {RTCSessionDescription} offer - WebRTC offer\n   * @returns {Promise<RTCSessionDescription>} Promise resolving to WebRTC answer\n   */\n  const sendOffer = async (streamName, offer) => {\n    try {\n      // Get auth from localStorage\n      const auth = localStorage.getItem('auth');\n\n      // Send the offer to the server\n      // Format the offer according to go2rtc expectations\n      const formattedOffer = {\n        type: offer.type,\n        sdp: offer.sdp\n      };\n\n      console.log(`Sending formatted offer for stream ${streamName}:`, formattedOffer);\n\n      // Create an AbortController for the fetch request\n      const controller = new AbortController();\n      const signal = controller.signal;\n\n      // Set a timeout to abort the fetch after 8 seconds\n      const timeoutId = setTimeout(() => {\n        console.warn(`Aborting WebRTC offer request for stream ${streamName} due to timeout`);\n        controller.abort();\n      }, 8000);\n\n      try {\n        // Note: Session cookie is automatically included in fetch requests\n        // We only need to add the Authorization header if we have it in localStorage\n        const response = await fetch(`/api/webrtc?src=${encodeURIComponent(streamName)}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            ...(auth ? { 'Authorization': 'Basic ' + auth } : {})\n          },\n          body: JSON.stringify(formattedOffer),\n          signal: signal\n        });\n\n        // Clear the timeout since the request completed\n        clearTimeout(timeoutId);\n\n        if (!response.ok) {\n          throw new Error(`Failed to send offer: ${response.status} ${response.statusText}`);\n        }\n\n        // Create another AbortController for the JSON parsing\n        const jsonController = new AbortController();\n        const jsonSignal = jsonController.signal;\n\n        // Set a timeout to abort the JSON parsing after 5 seconds\n        const jsonTimeoutId = setTimeout(() => {\n          console.warn(`Aborting JSON parsing for stream ${streamName} due to timeout`);\n          jsonController.abort();\n        }, 5000);\n\n        try {\n          // Use a separate try/catch for the JSON parsing\n          const text = await response.text();\n\n          // Clear the JSON timeout\n          clearTimeout(jsonTimeoutId);\n\n          // Try to parse the JSON\n          try {\n            const answer = JSON.parse(text);\n            return answer;\n          } catch (jsonError) {\n            console.error(`Error parsing JSON for stream ${streamName}:`, jsonError);\n            console.log(`Raw response text: ${text}`);\n            throw new Error(`Failed to parse WebRTC answer: ${jsonError.message}`);\n          }\n        } catch (textError) {\n          // Clear the JSON timeout if it hasn't been cleared yet\n          clearTimeout(jsonTimeoutId);\n\n          if (textError.name === 'AbortError') {\n            throw new Error(`WebRTC answer parsing timed out for stream ${streamName}`);\n          }\n          throw textError;\n        }\n      } catch (fetchError) {\n        // Clear the timeout if it hasn't been cleared yet\n        clearTimeout(timeoutId);\n\n        if (fetchError.name === 'AbortError') {\n          throw new Error(`WebRTC offer request timed out for stream ${streamName}`);\n        }\n        throw fetchError;\n      }\n    } catch (error) {\n      console.error(`Error sending offer for stream ${streamName}:`, error);\n      throw error;\n    }\n  };\n\n  // ICE candidates are handled internally by the browser for go2rtc\n\n  /**\n   * Handle WebRTC error\n   * @param {string} streamName - Stream name\n   * @param {string} message - Error message\n   */\n  const handleWebRTCError = (streamName, message) => {\n    console.error(`WebRTC error for stream ${streamName}:`, message);\n\n    // Find the video cell\n    const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n    const videoElement = document.getElementById(videoElementId);\n    if (!videoElement) return;\n\n    const videoCell = videoElement.closest('.video-cell');\n    if (!videoCell) return;\n\n    // Hide loading indicator\n    const loadingIndicator = videoCell.querySelector('.loading-indicator');\n    if (loadingIndicator) {\n      loadingIndicator.style.display = 'none';\n    }\n\n    // Create error indicator if it doesn't exist\n    let errorIndicator = videoCell.querySelector('.error-indicator');\n    if (!errorIndicator) {\n      errorIndicator = document.createElement('div');\n      errorIndicator.className = 'error-indicator';\n      errorIndicator.style.position = 'absolute';\n      errorIndicator.style.top = '0';\n      errorIndicator.style.left = '0';\n      errorIndicator.style.width = '100%';\n      errorIndicator.style.height = '100%';\n      errorIndicator.style.display = 'flex';\n      errorIndicator.style.flexDirection = 'column';\n      errorIndicator.style.justifyContent = 'center';\n      errorIndicator.style.alignItems = 'center';\n      errorIndicator.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n      errorIndicator.style.color = 'white';\n      errorIndicator.style.zIndex = '20'; // Above video but below controls\n      videoCell.appendChild(errorIndicator);\n    }\n\n    errorIndicator.innerHTML = `\n      <div className=\"error-icon\">!</div>\n      <p>${message || 'WebRTC connection failed'}</p>\n      <button className=\"retry-button mt-4 px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\">Retry</button>\n    `;\n    errorIndicator.style.display = 'flex';\n    errorIndicator.style.pointerEvents = 'auto'; // Enable pointer events when visible to allow retry button clicks\n\n    // Make sure retry button is clickable\n    const retryButton = errorIndicator.querySelector('.retry-button');\n    if (retryButton) {\n      retryButton.style.position = 'relative';\n      retryButton.style.zIndex = '30';\n      retryButton.style.pointerEvents = 'auto';\n\n      retryButton.addEventListener('click', () => {\n        // Show loading indicator\n        if (loadingIndicator) {\n          loadingIndicator.style.display = 'flex';\n        }\n\n        // Hide error indicator\n        errorIndicator.style.display = 'none';\n\n        // Cleanup existing connection\n        cleanupWebRTCPlayer(streamName);\n\n        // Fetch stream info again and reinitialize\n        fetch(`/api/streams/${encodeURIComponent(streamName)}`)\n          .then(response => response.json())\n          .then(streamInfo => {\n            // Reinitialize\n            initializeWebRTCPlayer(streamInfo);\n          })\n          .catch(error => {\n            console.error('Error fetching stream info:', error);\n\n            // Show error indicator again with new message\n            errorIndicator.style.display = 'flex';\n            const errorMsg = errorIndicator.querySelector('p');\n            if (errorMsg) {\n              errorMsg.textContent = 'Could not reconnect: ' + error.message;\n            }\n\n            // Hide loading indicator\n            if (loadingIndicator) {\n              loadingIndicator.style.display = 'none';\n            }\n          });\n      });\n    }\n  };\n\n  /**\n   * Cleanup WebRTC player\n   * @param {string} streamName - Stream name\n   */\n  const cleanupWebRTCPlayer = (streamName) => {\n    // Close and remove the RTCPeerConnection\n    if (webrtcConnections.current[streamName]) {\n      webrtcConnections.current[streamName].close();\n      delete webrtcConnections.current[streamName];\n    }\n\n    // Reset video element\n    const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n    const videoElement = document.getElementById(videoElementId);\n    if (videoElement) {\n      videoElement.srcObject = null;\n    }\n\n    // Clean up detection polling\n    cleanupDetectionPolling(streamName, detectionIntervals.current);\n  };\n\n  /**\n   * Stop all WebRTC streams\n   */\n  const stopAllWebRTCStreams = () => {\n    // Close all RTCPeerConnections\n    Object.keys(webrtcConnections.current).forEach(streamName => {\n      cleanupWebRTCPlayer(streamName);\n    });\n  };\n\n/**\n * Take snapshot of a stream\n * @param {string} streamId - Stream ID\n * @param {Event} event - Click event\n */\nconst takeSnapshot = (streamId, event) => {\n  console.log(`Taking snapshot of stream with ID: ${streamId}`, event);\n\n  // Find the stream by button element\n  const streamElement = document.querySelector(`.snapshot-btn[data-id=\"${streamId}\"]`);\n  let streamName;\n\n  if (streamElement) {\n    // Get the stream name from the data attribute\n    streamName = streamElement.getAttribute('data-name');\n    console.log(`Found stream name from button attribute: ${streamName}`);\n  } else {\n    // If we can't find by data-id (which might be missing in the new UI),\n    // try to find the parent video cell and get the stream name\n    const clickedButton = event ? (event.currentTarget || event.target) : null;\n    console.log('Clicked button:', clickedButton);\n\n    const videoCell = clickedButton ? clickedButton.closest('.video-cell') : null;\n    console.log('Video cell:', videoCell);\n\n    if (videoCell) {\n      streamName = videoCell.dataset.streamName;\n      console.log(`Found stream name from video cell: ${streamName}`);\n    }\n\n    // If still not found, try to find the stream by ID in the streams array\n    if (!streamName) {\n      const stream = streams.find(s => s.id === streamId || s.name === streamId);\n      if (stream) {\n        streamName = stream.name;\n        console.log(`Found stream name from streams array: ${streamName}`);\n      }\n    }\n  }\n\n  if (!streamName) {\n    console.error('Stream name not found for snapshot');\n    showStatusMessage('Cannot take snapshot: Stream not identified');\n    return;\n  }\n\n  // Find the video element\n  const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n  const videoElement = document.getElementById(videoElementId);\n  if (!videoElement) {\n    console.error('Video element not found for stream:', streamName);\n    showStatusMessage('Cannot take snapshot: Video element not found');\n    return;\n  }\n\n  // Create a canvas element to capture the frame\n  const canvas = document.createElement('canvas');\n  canvas.width = videoElement.videoWidth;\n  canvas.height = videoElement.videoHeight;\n  canvas.style.pointerEvents = 'none'; // Ensure canvas doesn't capture clicks\n\n  // Check if we have valid dimensions\n  if (canvas.width === 0 || canvas.height === 0) {\n    console.error('Invalid video dimensions:', canvas.width, canvas.height);\n    showStatusMessage('Cannot take snapshot: Video not loaded or has invalid dimensions');\n    return;\n  }\n\n  // Draw the current frame to the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n\n  try {\n    // Save the canvas to global scope for direct access in the overlay\n    window.__snapshotCanvas = canvas;\n\n    // Generate a filename\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const fileName = `snapshot-${streamName.replace(/\\s+/g, '-')}-${timestamp}.jpg`;\n    window.__snapshotFileName = fileName;\n\n    // Show the standard preview\n    showSnapshotPreview(canvas.toDataURL('image/jpeg', 0.95), `Snapshot: ${streamName}`);\n\n    // Show success message\n    showStatusMessage('Snapshot taken successfully');\n  } catch (error) {\n    console.error('Error creating snapshot:', error);\n    showStatusMessage('Failed to create snapshot: ' + error.message);\n  }\n};\n\n  /**\n   * Toggle fullscreen mode for a specific stream\n   * @param {string} streamName - Stream name\n   */\n  const toggleStreamFullscreen = (streamName) => {\n    console.log(`Toggling fullscreen for stream: ${streamName}`);\n    const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n    const videoElement = document.getElementById(videoElementId);\n    const videoCell = videoElement ? videoElement.closest('.video-cell') : null;\n\n    if (!videoCell) {\n      console.error('Stream not found:', streamName);\n      return;\n    }\n\n    if (!document.fullscreenElement) {\n      console.log('Entering fullscreen mode for video cell');\n      videoCell.requestFullscreen().catch(err => {\n        console.error(`Error attempting to enable fullscreen: ${err.message}`);\n        showStatusMessage(`Could not enable fullscreen mode: ${err.message}`);\n      });\n    } else {\n      console.log('Exiting fullscreen mode');\n      document.exitFullscreen();\n    }\n  };\n\n  return (\n    <section id=\"live-page\" className={`page ${isFullscreen ? 'fullscreen-mode' : ''}`}>\n      <div className=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <div className=\"flex items-center space-x-2\">\n          <h2 className=\"text-xl font-bold mr-4\">Live View</h2>\n          <div className=\"flex space-x-2\">\n            <button\n              id=\"hls-toggle-btn\"\n              className=\"px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n              onClick={() => window.location.href = '/hls.html'}\n            >\n              HLS View\n            </button>\n          </div>\n        </div>\n        <div className=\"controls flex items-center space-x-2\">\n          <div className=\"flex items-center\">\n            <label for=\"layout-selector\" className=\"mr-2\">Layout:</label>\n            <select\n                id=\"layout-selector\"\n                className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600\"\n                value={layout}\n                onChange={(e) => {\n                  const newLayout = e.target.value;\n                  setLayout(newLayout);\n                  setCurrentPage(0); // Reset to first page when layout changes\n                  // URL will be updated by the useEffect hook\n                }}\n            >\n              <option value=\"1\">1 Stream</option>\n              <option value=\"2\">2 Streams</option>\n              <option value=\"4\" selected>4 Streams</option>\n              <option value=\"6\">6 Streams</option>\n              <option value=\"9\">9 Streams</option>\n              <option value=\"16\">16 Streams</option>\n            </select>\n          </div>\n\n          {layout === '1' && (\n              <div className=\"flex items-center\">\n                <label for=\"stream-selector\" className=\"mr-2\">Stream:</label>\n                <select\n                    id=\"stream-selector\"\n                    className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600\"\n                    value={selectedStream}\n                    onChange={(e) => {\n                      const newStream = e.target.value;\n                      setSelectedStream(newStream);\n                      // URL will be updated by the useEffect hook\n                    }}\n                >\n                  {streams.map(stream =>\n                      <option key={stream.name} value={stream.name}>{stream.name}</option>\n                  )}\n                </select>\n              </div>\n          )}\n\n          <button\n              id=\"fullscreen-btn\"\n              className=\"p-2 rounded-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none\"\n              onClick={() => toggleFullscreen(isFullscreen, setIsFullscreen)}\n              title=\"Toggle Fullscreen\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                 stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <path\n                  d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\"></path>\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      <div className=\"flex flex-col space-y-4\">\n        <div\n            id=\"video-grid\"\n            className={`video-container layout-${layout}`}\n            ref={videoGridRef}\n        >\n          {isLoading ? (\n              <div className=\"flex justify-center items-center col-span-full row-span-full h-64 w-full\">\n                <div className=\"flex flex-col items-center justify-center py-8\">\n                  <div\n                      className=\"inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16\"></div>\n                  <p className=\"mt-4 text-gray-700 dark:text-gray-300\">Loading streams...</p>\n              </div>\n            </div>\n          ) : streams.length === 0 ? (\n            <div className=\"placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8\">\n              <p className=\"mb-6 text-gray-600 dark:text-gray-300 text-lg\">No streams configured</p>\n              <a href=\"streams.html\" className=\"btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\">Configure Streams</a>\n            </div>\n          ) : null}\n          {/* Video cells will be dynamically added by the updateVideoGrid function */}\n        </div>\n\n        {layout !== '1' && streams.length > getMaxStreamsForLayout() ? (\n          <div className=\"pagination-controls flex justify-center items-center space-x-4 mt-4\">\n            <button\n              className=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              onClick={() => setCurrentPage(Math.max(0, currentPage - 1))}\n              disabled={currentPage === 0}\n            >\n              Previous\n            </button>\n            <span className=\"text-gray-700 dark:text-gray-300\">\n              Page {currentPage + 1} of {Math.ceil(streams.length / getMaxStreamsForLayout())}\n            </span>\n            <button\n              className=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              onClick={() => setCurrentPage(Math.min(Math.ceil(streams.length / getMaxStreamsForLayout()) - 1, currentPage + 1))}\n              disabled={currentPage >= Math.ceil(streams.length / getMaxStreamsForLayout()) - 1}\n            >\n              Next\n            </button>\n          </div>\n        ) : null}\n      </div>\n    </section>\n  );\n}\n","/**\n * LightNVR Web Interface Live View Page\n * Entry point for the live view page with WebRTC/HLS support\n */\n\nimport { render } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { LiveView } from '../components/preact/LiveView.jsx';\nimport { WebRTCView } from '../components/preact/WebRTCView.jsx';\nimport { QueryClientProvider, queryClient } from '../query-client.js';\nimport { Header } from \"../components/preact/Header.jsx\";\nimport { Footer } from \"../components/preact/Footer.jsx\";\n\n/**\n * Main App component that conditionally renders WebRTCView or LiveView\n * based on whether WebRTC is disabled in settings\n */\nfunction App() {\n    const [isWebRTCDisabled, setIsWebRTCDisabled] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        // Check if WebRTC is disabled in settings\n        async function checkWebRTCStatus() {\n            try {\n                const response = await fetch('/api/settings');\n                if (!response.ok) {\n                    console.error('Failed to fetch settings:', response.status, response.statusText);\n                    setIsLoading(false);\n                    return;\n                }\n\n                const settings = await response.json();\n                \n                if (settings.webrtc_disabled) {\n                    console.log('WebRTC is disabled, using HLS view');\n                    setIsWebRTCDisabled(true);\n                } else {\n                    console.log('WebRTC is enabled, using WebRTC view');\n                    setIsWebRTCDisabled(false);\n                }\n            } catch (error) {\n                console.error('Error checking WebRTC status:', error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n\n        checkWebRTCStatus();\n    }, []);\n\n    if (isLoading) {\n        return <div className=\"loading\">Loading...</div>;\n    }\n\n    return (\n        <>\n            <Header />\n            {isWebRTCDisabled ? <LiveView isWebRTCDisabled={true} /> : <WebRTCView />}\n            <Footer />\n        </>\n    );\n}\n\n// Render the App component when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Get the container element\n    const container = document.getElementById('main-content');\n\n    if (container) {\n        render(\n            <QueryClientProvider client={queryClient}>\n                <App />\n            </QueryClientProvider>,\n            container\n        );\n    }\n});\n"],"names":["WebRTCView","streams","setStreams","useState","layout","setLayout","selectedStream","setSelectedStream","isFullscreen","setIsFullscreen","isLoading","setIsLoading","currentPage","setCurrentPage","pageParam","videoGridRef","useRef","webrtcConnections","detectionIntervals","useEffect","setupModals","addStatusMessageStyles","addModalStyles","connectionCheckInterval","streamName","pc","cleanupWebRTCPlayer","stream","initializeWebRTCPlayer","stopAllWebRTCStreams","timeoutId","showStatusMessage","loadStreams","streamData","streamParam","error","updateVideoGrid","timeoutPromise","_","reject","fetchPromise","response","jsonTimeoutPromise","jsonPromise","streamPromises","detailsTimeoutPromise","detailsFetchPromise","detailedStreams","filteredStreams","getMaxStreamsForLayout","placeholder","streamsToShow","maxStreams","totalPages","startIdx","endIdx","streamsToShowNames","index","createVideoCell","streamId","videoCell","videoElement","loadingIndicator","errorIndicator","streamNameOverlay","streamControls","canvasOverlay","button","snapshotBtn","event","takeSnapshot","fullscreenBtn","toggleStreamFullscreen","videoElementId","canvasId","handleWebRTCError","offerOptions","setupTimeoutId","offer","sendOffer","answer","startDetectionPolling","auth","formattedOffer","controller","signal","jsonController","jsonSignal","jsonTimeoutId","text","jsonError","textError","fetchError","message","retryButton","streamInfo","errorMsg","cleanupDetectionPolling","streamElement","clickedButton","s","canvas","timestamp","fileName","showSnapshotPreview","err","jsxs","jsx","newLayout","newStream","toggleFullscreen","App","isWebRTCDisabled","setIsWebRTCDisabled","checkWebRTCStatus","Fragment","Header","LiveView","Footer","container","render","QueryClientProvider","queryClient"],"mappings":"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"}