{"version":3,"file":"index-legacy-CcYWSvU-.js","sources":["../../js/components/preact/WebRTCVideoCell.jsx","../../js/components/preact/WebRTCView.jsx","../../js/pages/index-page.jsx"],"sourcesContent":["/**\n * WebRTCVideoCell Component\n * A self-contained component for displaying a WebRTC video stream\n */\n\nimport { h } from 'preact';\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'preact/hooks';\nimport { DetectionOverlay, takeSnapshotWithDetections } from './DetectionOverlay.jsx';\nimport { SnapshotButton } from './SnapshotManager.jsx';\nimport { LoadingIndicator } from './LoadingIndicator.jsx';\nimport { showSnapshotPreview } from './UI.jsx';\n\n/**\n * WebRTCVideoCell component\n * @param {Object} props - Component props\n * @param {Object} props.stream - Stream object\n * @param {Function} props.onToggleFullscreen - Fullscreen toggle handler\n * @param {string} props.streamId - Stream ID for stable reference\n * @returns {JSX.Element} WebRTCVideoCell component\n */\nexport function WebRTCVideoCell({\n  stream,\n  streamId,\n  onToggleFullscreen\n}) {\n  // Component state\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [reconnectAttempts, setReconnectAttempts] = useState(0);\n  const [lastActiveTime, setLastActiveTime] = useState(Date.now());\n\n  // Refs\n  const videoRef = useRef(null);\n  const cellRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const abortControllerRef = useRef(null);\n  const timeoutsRef = useRef([]);\n  const detectionIntervalRef = useRef(null);\n  const prevStreamNameRef = useRef('');\n  const lastFrameTimeRef = useRef(Date.now());\n  const detectionOverlayRef = useRef(null);\n\n  // Clear all timeouts on unmount or when needed\n  const clearAllTimeouts = useCallback(() => {\n    timeoutsRef.current.forEach(timeoutId => clearTimeout(timeoutId));\n    timeoutsRef.current = [];\n  }, []);\n\n  // Set a timeout that will be automatically cleared on unmount\n  const setManagedTimeout = useCallback((callback, delay) => {\n    const timeoutId = setTimeout(callback, delay);\n    timeoutsRef.current.push(timeoutId);\n    return timeoutId;\n  }, []);\n\n  // Clean up WebRTC connection\n  const cleanupWebRTCConnection = useCallback(() => {\n    console.log(`Cleaning up WebRTC connection for stream ${stream?.name}`);\n\n    // Don't reset error state here as we want to keep showing errors\n    // until the user explicitly retries or the component is unmounted\n\n    // Clear all timeouts\n    clearAllTimeouts();\n\n    // Abort any pending fetch requests\n    if (abortControllerRef.current) {\n      try {\n        abortControllerRef.current.abort();\n      } catch (e) {\n        console.error(`Error aborting fetch for stream ${stream?.name}:`, e);\n      }\n      abortControllerRef.current = null;\n    }\n\n    // Detection polling is now handled by the DetectionOverlay component\n    detectionIntervalRef.current = null;\n\n    // Clean up video element\n    if (videoRef.current) {\n      const videoElement = videoRef.current;\n\n      // Remove event handlers\n      videoElement.onloadeddata = null;\n      videoElement.onplaying = null;\n      videoElement.onerror = null;\n      videoElement.onstalled = null;\n      videoElement.ontimeout = null;\n\n      // Stop all tracks in the srcObject if it exists\n      if (videoElement.srcObject) {\n        try {\n          const tracks = videoElement.srcObject.getTracks();\n          tracks.forEach(track => {\n            try {\n              track.stop();\n            } catch (trackError) {\n              console.warn(`Error stopping track for stream ${stream?.name}:`, trackError);\n            }\n          });\n        } catch (tracksError) {\n          console.warn(`Error accessing tracks for stream ${stream?.name}:`, tracksError);\n        }\n\n        // Clear the srcObject\n        videoElement.srcObject = null;\n      }\n    }\n\n    // Close the peer connection\n    if (peerConnectionRef.current) {\n      try {\n        // Remove all event listeners to prevent memory leaks\n        const pc = peerConnectionRef.current;\n        if (pc.onicecandidate) pc.onicecandidate = null;\n        if (pc.oniceconnectionstatechange) pc.oniceconnectionstatechange = null;\n        if (pc.onconnectionstatechange) pc.onconnectionstatechange = null;\n        if (pc.ontrack) pc.ontrack = null;\n\n        // Close the connection\n        pc.close();\n      } catch (closeError) {\n        console.warn(`Error closing connection for stream ${stream?.name}:`, closeError);\n      }\n\n      peerConnectionRef.current = null;\n    }\n\n    console.log(`WebRTC connection cleanup completed for stream ${stream?.name}`);\n  }, [clearAllTimeouts]);\n\n  // Send WebRTC offer to server\n  const sendOffer = useCallback(async (streamName, offer) => {\n    try {\n      // Create a new AbortController for this request\n      abortControllerRef.current = new AbortController();\n      const signal = abortControllerRef.current.signal;\n\n      // Format the offer according to go2rtc expectations\n      const formattedOffer = {\n        type: offer.type,\n        sdp: offer.sdp\n      };\n\n      console.log(`Sending WebRTC offer for stream ${streamName}`);\n\n      // Get auth token if available\n      const auth = localStorage.getItem('auth');\n\n      // Send the offer to the server\n      const response = await fetch(`/api/webrtc?src=${encodeURIComponent(streamName)}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...(auth ? { 'Authorization': 'Basic ' + auth } : {})\n        },\n        body: JSON.stringify(formattedOffer),\n        signal\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to send offer: ${response.status} ${response.statusText}`);\n      }\n\n      const text = await response.text();\n      try {\n        return JSON.parse(text);\n      } catch (jsonError) {\n        console.error(`Error parsing JSON for stream ${streamName}:`, jsonError);\n        console.log(`Raw response text: ${text}`);\n        throw new Error(`Failed to parse WebRTC answer: ${jsonError.message}`);\n      }\n    } catch (error) {\n      // Check if this was an abort error, which we can safely ignore\n      if (error.name === 'AbortError') {\n        console.log(`WebRTC offer request for stream ${streamName} was aborted`);\n        return Promise.reject(new Error('Request aborted'));\n      }\n\n      console.error(`Error sending offer for stream ${streamName}:`, error);\n      throw error;\n    }\n  }, []);\n\n  // Initialize WebRTC connection\n  const initializeWebRTCConnection = useCallback(() => {\n    if (!stream || !videoRef.current) {\n      console.error(`Cannot initialize WebRTC: missing stream or DOM elements`);\n      return;\n    }\n\n    console.log(`Initializing WebRTC connection for stream ${stream.name}`);\n    setIsLoading(true);\n\n    // Clean up any existing connection first\n    cleanupWebRTCConnection();\n\n    // Create a new RTCPeerConnection with ICE servers\n    const pc = new RTCPeerConnection({\n      iceServers: [\n        { urls: 'stun:stun.l.google.com:19302' },\n        { urls: 'stun:stun1.l.google.com:19302' },\n        { urls: 'stun:stun2.l.google.com:19302' }\n      ],\n      iceTransportPolicy: 'all',\n      bundlePolicy: 'balanced',\n      rtcpMuxPolicy: 'require',\n      sdpSemantics: 'unified-plan'\n    });\n\n    // Store the connection\n    peerConnectionRef.current = pc;\n\n    // Add event listeners\n    pc.ontrack = (event) => {\n      console.log(`Track received for stream ${stream.name}:`, event);\n\n      if (event.track.kind === 'video') {\n        const videoElement = videoRef.current;\n        if (!videoElement) return;\n\n        // Set srcObject\n        videoElement.srcObject = event.streams[0];\n\n        // Add event handlers for video element\n        videoElement.onloadeddata = () => {\n          console.log(`Video data loaded for stream ${stream.name}`);\n          // Don't set isLoading=false here, wait for onPlaying\n        };\n\n        videoElement.onplaying = () => {\n          console.log(`Video playing for stream ${stream.name}`);\n          setIsLoading(false);\n          setIsPlaying(true);\n          setLastActiveTime(Date.now());\n          lastFrameTimeRef.current = Date.now();\n\n          // Detection polling is now handled by the DetectionOverlay component\n        };\n\n        videoElement.onerror = (e) => {\n          console.error(`Video error for stream ${stream.name}:`, e);\n          setError('Video playback error: ' + (e.message || 'Unknown error'));\n          setIsLoading(false);\n        };\n\n        videoElement.onstalled = () => {\n          console.warn(`Video stalled for stream ${stream.name}`);\n          // We don't treat this as an error immediately, as it might recover\n        };\n      }\n    };\n\n    pc.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log(`ICE candidate for stream ${stream.name}:`, event.candidate);\n        // go2rtc doesn't use a separate ICE endpoint, so we don't need to send ICE candidates\n      }\n    };\n\n    pc.oniceconnectionstatechange = () => {\n      console.log(`ICE connection state for stream ${stream.name}:`, pc.iceConnectionState);\n\n      if (pc.iceConnectionState === 'failed' && peerConnectionRef.current === pc) {\n        console.warn(`ICE failed for stream ${stream.name}`);\n        setError('WebRTC ICE connection failed');\n        setIsLoading(false);\n      } else if (pc.iceConnectionState === 'disconnected') {\n        console.warn(`ICE disconnected for stream ${stream.name}`);\n\n        // Start a timer to check if it reconnects\n        setManagedTimeout(() => {\n          if (pc.iceConnectionState === 'disconnected' && peerConnectionRef.current === pc) {\n            console.warn(`ICE still disconnected for stream ${stream.name} after timeout`);\n\n            // Only attempt auto-reconnect if we haven't exceeded max attempts\n            if (reconnectAttempts < 3) {\n              console.log(`Auto-reconnecting stream ${stream.name} (attempt ${reconnectAttempts + 1})`);\n              setReconnectAttempts(prev => prev + 1);\n              initializeWebRTCConnection();\n            } else {\n              setError('WebRTC connection disconnected');\n              setIsPlaying(false);\n              setIsLoading(false);\n            }\n          }\n        }, 8000); // 8 second timeout to recover (increased from 5)\n      }\n    };\n\n    pc.onconnectionstatechange = () => {\n      console.log(`Connection state changed for stream ${stream.name}:`, pc.connectionState);\n\n      if (pc.connectionState === 'failed' && peerConnectionRef.current === pc) {\n        console.warn(`Connection failed for stream ${stream.name}`);\n        setError('WebRTC connection failed');\n        setIsLoading(false);\n      }\n    };\n\n    // Add transceivers to ensure we get both audio and video tracks\n    pc.addTransceiver('video', {direction: 'recvonly'});\n    pc.addTransceiver('audio', {direction: 'recvonly'});\n\n    // Create an offer\n    const offerOptions = {\n      offerToReceiveAudio: true,\n      offerToReceiveVideo: true\n    };\n\n    // Set up the connection\n    pc.createOffer(offerOptions)\n      .then(offer => {\n        if (peerConnectionRef.current !== pc) {\n          throw new Error('Connection was cleaned up during offer creation');\n        }\n        return pc.setLocalDescription(offer);\n      })\n      .then(() => {\n        if (peerConnectionRef.current !== pc) {\n          throw new Error('Connection was cleaned up after setting local description');\n        }\n        return sendOffer(stream.name, pc.localDescription);\n      })\n      .then(answer => {\n        if (peerConnectionRef.current !== pc) {\n          throw new Error('Connection was cleaned up after receiving answer');\n        }\n        return pc.setRemoteDescription(new RTCSessionDescription(answer));\n      })\n      .catch(error => {\n        // Only handle error if this is still the current connection\n        if (peerConnectionRef.current === pc) {\n          console.error(`Error setting up WebRTC for stream ${stream.name}:`, error);\n          setError(error.message || 'Failed to establish WebRTC connection');\n          setIsLoading(false);\n        } else {\n          console.log(`WebRTC setup for stream ${stream.name} was cancelled: ${error.message}`);\n        }\n      });\n  }, [stream.name, cleanupWebRTCConnection, sendOffer, setManagedTimeout]);\n\n  useEffect(() => {\n    if (!stream || !stream.name) return;\n\n    // Only reinitialize if the stream name changed\n    if (stream.name !== prevStreamNameRef.current) {\n      console.log(`WebRTCVideoCell: Stream name changed from ${prevStreamNameRef.current} to ${stream.name}, reinitializing`);\n      initializeWebRTCConnection();\n    }\n\n    // Update the previous stream name\n    prevStreamNameRef.current = stream.name;\n\n  }, [stream, isLoading]);\n\n  // Handle retry button click\n  const handleRetry = useCallback(() => {\n    if (!stream) return;\n\n    console.log(`Retrying connection for stream ${stream.name}`);\n    setReconnectAttempts(0); // Reset reconnect attempts on manual retry\n    setError(null); // Explicitly reset error state on retry\n    setIsLoading(true); // Show loading state again\n    initializeWebRTCConnection();\n  }, [initializeWebRTCConnection]);\n\n  return (\n    <div\n      className=\"video-cell\"\n      data-stream-name={stream.name}\n      data-stream-id={streamId}\n      ref={cellRef}\n      style={{\n        position: 'relative',\n        // Ensure the video cell doesn't interfere with navigation elements\n        pointerEvents: isLoading ? 'none' : 'auto',\n        zIndex: 1 // Lower z-index to prevent interfering with header\n      }}\n    >\n      {/* Add keyframes for spinner animation in the component */}\n      <style>\n        {`\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n        `}\n      </style>\n      {/* Video element */}\n      <video\n        id={`video-${streamId.replace(/\\s+/g, '-')}`}\n        className=\"video-element\"\n        ref={videoRef}\n        playsInline\n        autoPlay\n        muted\n        disablePictureInPicture\n        style={{ pointerEvents: 'none', width: '100%', height: '100%', objectFit: 'contain', zIndex: 1 }}\n      />\n\n      {/* Detection overlay component */}\n      {stream.detection_based_recording && stream.detection_model && (\n        <DetectionOverlay\n          ref={detectionOverlayRef}\n          streamName={stream.name}\n          videoRef={videoRef}\n          enabled={isPlaying}\n          detectionModel={stream.detection_model}\n        />\n      )}\n\n      {/* Stream name overlay */}\n      <div\n        className=\"stream-name-overlay\"\n        style={{\n          position: 'absolute',\n          top: '10px',\n          left: '10px',\n          padding: '5px 10px',\n          backgroundColor: 'rgba(0, 0, 0, 0.5)',\n          color: 'white',\n          borderRadius: '4px',\n          fontSize: '14px',\n          zIndex: 3, /* Lower z-index to ensure it doesn't block navigation */\n          pointerEvents: 'none'\n        }}\n      >\n        {stream.name}\n      </div>\n\n      {/* Stream controls */}\n      <div\n        className=\"stream-controls\"\n        style={{\n          position: 'absolute',\n          bottom: '10px',\n          right: '10px',\n          display: 'flex',\n          gap: '10px',\n          zIndex: 5, /* Lower z-index but still above video and overlays */\n          backgroundColor: 'rgba(0, 0, 0, 0.5)',\n          padding: '5px',\n          borderRadius: '4px',\n          pointerEvents: 'auto' /* Keep pointer events enabled for controls */\n        }}\n      >\n        <div\n          style={{\n            backgroundColor: 'transparent',\n            padding: '5px',\n            borderRadius: '4px',\n            position: 'relative',\n            zIndex: 1 /* Lower z-index to prevent blocking */\n          }}\n          onMouseOver={(e) => e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.2)'}\n          onMouseOut={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n        >\n          <SnapshotButton\n            streamId={streamId}\n            streamName={stream.name}\n            onSnapshot={() => {\n              if (videoRef.current) {\n                let canvasRef = null;\n\n                // Try to get canvas ref from detection overlay if available\n                if (detectionOverlayRef.current && typeof detectionOverlayRef.current.getCanvasRef === 'function') {\n                  canvasRef = detectionOverlayRef.current.getCanvasRef();\n                }\n\n                // Take snapshot with or without detections\n                if (canvasRef) {\n                  const snapshot = takeSnapshotWithDetections(videoRef, canvasRef, stream.name);\n                  if (snapshot) {\n                    showSnapshotPreview(snapshot.canvas.toDataURL('image/jpeg', 0.95), `Snapshot: ${stream.name}`);\n                  }\n                } else {\n                  // Take a simple snapshot without detections\n                  const videoElement = videoRef.current;\n                  const canvas = document.createElement('canvas');\n                  canvas.width = videoElement.videoWidth;\n                  canvas.height = videoElement.videoHeight;\n\n                  if (canvas.width > 0 && canvas.height > 0) {\n                    const ctx = canvas.getContext('2d');\n                    ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n\n                    showSnapshotPreview(canvas.toDataURL('image/jpeg', 0.95), `Snapshot: ${stream.name}`);\n                  }\n                }\n              }\n            }}\n          />\n        </div>\n        <button\n          className=\"fullscreen-btn\"\n          title=\"Toggle Fullscreen\"\n          data-id={streamId}\n          data-name={stream.name}\n          onClick={(e) => onToggleFullscreen(stream.name, e, cellRef.current)}\n          style={{\n            backgroundColor: 'transparent',\n            border: 'none',\n            padding: '5px',\n            borderRadius: '4px',\n            color: 'white',\n            cursor: 'pointer',\n            position: 'relative',\n            zIndex: 1 /* Lower z-index to prevent blocking */\n          }}\n          onMouseOver={(e) => e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.2)'}\n          onMouseOut={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\"></path></svg>\n        </button>\n      </div>\n\n      {/* Loading indicator */}\n      {isLoading && (\n        <div style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, zIndex: 5, pointerEvents: 'none' }}>\n          <LoadingIndicator message=\"Connecting...\" />\n        </div>\n      )}\n\n      {/* Error indicator */}\n      {error && (\n        <div\n          className=\"error-indicator\"\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            color: 'white',\n            zIndex: 5,\n            pointerEvents: 'auto', /* Keep pointer events enabled for error state to allow retry button clicks */\n            textAlign: 'center',\n            // Ensure the error indicator is contained within the video cell\n            overflow: 'hidden'\n          }}\n        >\n          <div\n            className=\"error-content\"\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n              width: '80%',\n              maxWidth: '300px',\n              padding: '20px',\n              borderRadius: '8px',\n              backgroundColor: 'rgba(0, 0, 0, 0.5)'\n            }}\n          >\n            <div\n              className=\"error-icon\"\n              style={{\n                fontSize: '28px',\n                marginBottom: '15px',\n                fontWeight: 'bold',\n                width: '40px',\n                height: '40px',\n                lineHeight: '40px',\n                borderRadius: '50%',\n                backgroundColor: 'rgba(220, 38, 38, 0.8)',\n                textAlign: 'center'\n              }}\n            >\n              !\n            </div>\n            <p style={{\n              marginBottom: '20px',\n              textAlign: 'center',\n              width: '100%',\n              fontSize: '14px',\n              lineHeight: '1.4'\n            }}>\n              {error}\n            </p>\n            <button\n              className=\"retry-button\"\n              onClick={handleRetry}\n              style={{\n                padding: '8px 20px',\n                backgroundColor: '#2563eb',\n                color: 'white',\n                borderRadius: '4px',\n                border: 'none',\n                cursor: 'pointer',\n                fontWeight: 'bold',\n                fontSize: '14px',\n                boxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)',\n                transition: 'background-color 0.2s ease'\n              }}\n              onMouseOver={(e) => e.currentTarget.style.backgroundColor = '#1d4ed8'}\n              onMouseOut={(e) => e.currentTarget.style.backgroundColor = '#2563eb'}\n            >\n              Retry\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","/**\n * LightNVR Web Interface WebRTCView Component\n * Preact component for the WebRTC view page\n */\n\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'preact/hooks';\nimport { setupModals, addModalStyles } from './UI.jsx';\nimport { showStatusMessage } from './ToastContainer.jsx';\nimport { useFullscreenManager, FullscreenManager } from './FullscreenManager.jsx';\nimport { useQuery, useQueryClient } from '../../query-client.js';\nimport { WebRTCVideoCell } from './WebRTCVideoCell.jsx';\nimport { SnapshotManager, useSnapshotManager } from './SnapshotManager.jsx';\n\n/**\n * WebRTCView component\n * @returns {JSX.Element} WebRTCView component\n */\nexport function WebRTCView() {\n  // Use the snapshot manager hook\n  const { takeSnapshot } = useSnapshotManager();\n\n  // Use the fullscreen manager hook\n  const { isFullscreen, setIsFullscreen, toggleFullscreen } = useFullscreenManager();\n\n  // State for streams and layout\n  const [streams, setStreams] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Initialize layout from URL or sessionStorage if available\n  const [layout, setLayout] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const layoutParam = urlParams.get('layout');\n    if (layoutParam) {\n      return layoutParam;\n    }\n    // Check sessionStorage as a backup\n    const storedLayout = sessionStorage.getItem('webrtc_layout');\n    return storedLayout || '4';\n  });\n\n  // Initialize selectedStream from URL or sessionStorage if available\n  const [selectedStream, setSelectedStream] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const streamParam = urlParams.get('stream');\n    if (streamParam) {\n      return streamParam;\n    }\n    // Check sessionStorage as a backup\n    const storedStream = sessionStorage.getItem('webrtc_selected_stream');\n    return storedStream || '';\n  });\n\n  // Initialize currentPage from URL or sessionStorage if available (URL uses 1-based indexing, internal state uses 0-based)\n  const [currentPage, setCurrentPage] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const pageParam = urlParams.get('page');\n    if (pageParam) {\n      // Convert from 1-based (URL) to 0-based (internal)\n      return Math.max(0, parseInt(pageParam, 10) - 1);\n    }\n    // Check sessionStorage as a backup\n    const storedPage = sessionStorage.getItem('webrtc_current_page');\n    if (storedPage) {\n      // Convert from 1-based (stored) to 0-based (internal)\n      return Math.max(0, parseInt(storedPage, 10) - 1);\n    }\n    return 0;\n  });\n\n  // Get query client for fetching and invalidating queries\n  const queryClient = useQueryClient();\n\n  // Set up event listeners and UI components\n  useEffect(() => {\n    // Set up modals for snapshot preview\n    setupModals();\n    addModalStyles();\n\n    // Add event listener to preserve URL parameters when page is reloaded\n    const handleBeforeUnload = () => {\n      console.log('Preserving URL parameters before page reload');\n\n      // Create a URL with the current parameters\n      const url = new URL(window.location);\n\n      // Ensure page parameter is set correctly (convert from 0-based internal to 1-based URL)\n      if (currentPage > 0) {\n        url.searchParams.set('page', currentPage + 1);\n      } else {\n        url.searchParams.delete('page');\n      }\n\n      // Ensure layout parameter is set if not default\n      if (layout !== '4') {\n        url.searchParams.set('layout', layout);\n      } else {\n        url.searchParams.delete('layout');\n      }\n\n      // Ensure stream parameter is set if in single stream mode\n      if (layout === '1' && selectedStream) {\n        url.searchParams.set('stream', selectedStream);\n      } else {\n        url.searchParams.delete('stream');\n      }\n\n      // Update URL without triggering navigation\n      window.history.replaceState({}, '', url);\n\n      // Store the current page in sessionStorage as a backup\n      if (currentPage > 0) {\n        sessionStorage.setItem('webrtc_current_page', (currentPage + 1).toString());\n      } else {\n        sessionStorage.removeItem('webrtc_current_page');\n      }\n\n      // Store layout in sessionStorage\n      if (layout !== '4') {\n        sessionStorage.setItem('webrtc_layout', layout);\n      } else {\n        sessionStorage.removeItem('webrtc_layout');\n      }\n\n      // Store selected stream in sessionStorage\n      if (layout === '1' && selectedStream) {\n        sessionStorage.setItem('webrtc_selected_stream', selectedStream);\n      } else {\n        sessionStorage.removeItem('webrtc_selected_stream');\n      }\n    };\n\n    // Register the beforeunload handler\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [streams, currentPage, layout, selectedStream]);\n\n  // Fetch streams using preact-query\n  const {\n    data: streamsData,\n    isLoading: isLoadingStreams,\n    error: streamsError\n  } = useQuery(\n    'streams',\n    '/api/streams',\n    {\n      timeout: 15000, // 15 second timeout\n      retries: 2,     // Retry twice\n      retryDelay: 1000 // 1 second between retries\n    }\n  );\n\n  // Update loading state based on streams query status\n  useEffect(() => {\n    setIsLoading(isLoadingStreams);\n  }, [isLoadingStreams]);\n\n  // Process streams data when it's loaded\n  useEffect(() => {\n    if (streamsData && Array.isArray(streamsData)) {\n      // Process the streams data\n      const processStreams = async () => {\n        try {\n          // Filter and process the streams\n          const filteredStreams = await filterStreamsForWebRTC(streamsData);\n\n          if (filteredStreams.length > 0) {\n            setStreams(filteredStreams);\n\n            // Set selectedStream based on URL parameter if it exists and is valid\n            const urlParams = new URLSearchParams(window.location.search);\n            const streamParam = urlParams.get('stream');\n\n            if (streamParam && filteredStreams.some(stream => stream.name === streamParam)) {\n              // If the stream from URL exists in the loaded streams, use it\n              setSelectedStream(streamParam);\n            } else if (!selectedStream || !filteredStreams.some(stream => stream.name === selectedStream)) {\n              // Otherwise use the first stream if selectedStream is not set or invalid\n              setSelectedStream(filteredStreams[0].name);\n            }\n          } else {\n            console.warn('No streams available for WebRTC view after filtering');\n          }\n        } catch (error) {\n          console.error('Error processing streams:', error);\n          showStatusMessage('Error processing streams: ' + error.message);\n        }\n      };\n\n      processStreams();\n    }\n  }, [streamsData, selectedStream, queryClient]);\n\n  // Update URL when layout, page, or selectedStream changes\n  useEffect(() => {\n    // Don't update URL during initial load or when streams are empty\n    if (streams.length === 0) return;\n\n    console.log('Updating URL parameters');\n    const url = new URL(window.location);\n\n    // Handle page parameter (convert from 0-based internal to 1-based URL)\n    if (currentPage === 0) {\n      url.searchParams.delete('page');\n    } else {\n      // Add 1 to convert from 0-based (internal) to 1-based (URL)\n      url.searchParams.set('page', currentPage + 1);\n    }\n\n    // Handle layout parameter\n    if (layout !== '4') { // Only set if not the default\n      url.searchParams.set('layout', layout);\n    } else {\n      // Remove layout parameter if it's the default value\n      url.searchParams.delete('layout');\n    }\n\n    // Handle selectedStream parameter\n    if (layout === '1' && selectedStream) {\n      url.searchParams.set('stream', selectedStream);\n    } else {\n      // Remove stream parameter if not in single stream mode\n      url.searchParams.delete('stream');\n    }\n\n    // Update URL without reloading the page\n    window.history.replaceState({}, '', url);\n\n    // Also update sessionStorage\n    if (currentPage > 0) {\n      sessionStorage.setItem('webrtc_current_page', (currentPage + 1).toString());\n    } else {\n      sessionStorage.removeItem('webrtc_current_page');\n    }\n\n    if (layout !== '4') {\n      sessionStorage.setItem('webrtc_layout', layout);\n    } else {\n      sessionStorage.removeItem('webrtc_layout');\n    }\n\n    if (layout === '1' && selectedStream) {\n      sessionStorage.setItem('webrtc_selected_stream', selectedStream);\n    } else {\n      sessionStorage.removeItem('webrtc_selected_stream');\n    }\n  }, [currentPage, layout, selectedStream, streams.length]);\n\n  /**\n   * Filter streams for WebRTC view\n   * @param {Array} streams - Array of streams\n   * @returns {Promise<Array>} Promise resolving to filtered array of streams\n   */\n  const filterStreamsForWebRTC = async (streams) => {\n    try {\n      if (!streams || !Array.isArray(streams)) {\n        console.warn('No streams data provided to filter');\n        return [];\n      }\n\n      // For WebRTC view, we need to fetch full details for each stream\n      const streamPromises = streams.map(async (stream) => {\n        try {\n          const streamId = stream.id || stream.name;\n\n          const streamDetails = await queryClient.fetchQuery({\n            queryKey: ['stream-details', streamId],\n            queryFn: async () => {\n              const response = await fetch(`/api/streams/${encodeURIComponent(streamId)}`);\n              if (!response.ok) {\n                throw new Error(`Failed to load details for stream ${stream.name}`);\n              }\n              return response.json();\n            },\n            staleTime: 30000 // 30 seconds\n          });\n\n          return streamDetails;\n        } catch (error) {\n          console.error(`Error loading details for stream ${stream.name}:`, error);\n          // Return the basic stream info if we can't get details\n          return stream;\n        }\n      });\n\n      const detailedStreams = await Promise.all(streamPromises);\n      console.log('Loaded detailed streams for WebRTC view:', detailedStreams);\n\n      // Filter out streams that are soft deleted, inactive, or not configured for streaming\n      const filteredStreams = detailedStreams.filter(stream => {\n        // Filter out soft deleted streams\n        if (stream.is_deleted) {\n          console.log(`Stream ${stream.name} is soft deleted, filtering out`);\n          return false;\n        }\n\n        // Filter out inactive streams\n        if (!stream.enabled) {\n          console.log(`Stream ${stream.name} is inactive, filtering out`);\n          return false;\n        }\n\n        // Filter out streams not configured for streaming\n        if (!stream.streaming_enabled) {\n          console.log(`Stream ${stream.name} is not configured for streaming, filtering out`);\n          return false;\n        }\n\n        return true;\n      });\n\n      console.log('Filtered streams for WebRTC view:', filteredStreams);\n\n      return filteredStreams || [];\n    } catch (error) {\n      console.error('Error filtering streams for WebRTC view:', error);\n      showStatusMessage('Error processing streams: ' + error.message);\n      return [];\n    }\n  };\n\n  /**\n   * Get maximum number of streams to display based on layout\n   * @returns {number} Maximum number of streams\n   */\n  const getMaxStreamsForLayout = useCallback(() => {\n    switch (layout) {\n      case '1': return 1;  // Single view\n      case '2': return 2;  // 2x1 grid\n      case '4': return 4;  // 2x2 grid\n      case '6': return 6;  // 2x3 grid\n      case '9': return 9;  // 3x3 grid\n      case '16': return 16; // 4x4 grid\n      default: return 4;\n    }\n  }, [layout]);\n\n  /**\n   * Get streams to show based on layout, selected stream, and pagination\n   * @returns {Array} Streams to show\n   */\n  const getStreamsToShow = useCallback(() => {\n    // Filter streams based on layout and selected stream\n    let streamsToShow = streams;\n\n    if (layout === '1' && selectedStream) {\n      streamsToShow = streams.filter(stream => stream.name === selectedStream);\n    } else {\n      // Apply pagination\n      const maxStreams = getMaxStreamsForLayout();\n      const totalPages = Math.ceil(streams.length / maxStreams);\n\n      // Ensure current page is valid\n      if (currentPage >= totalPages && totalPages > 0) {\n        return []; // Will be handled by the effect that watches currentPage\n      }\n\n      // Get streams for current page\n      const startIdx = currentPage * maxStreams;\n      const endIdx = Math.min(startIdx + maxStreams, streams.length);\n      streamsToShow = streams.slice(startIdx, endIdx);\n    }\n\n    return streamsToShow;\n  }, [streams, layout, selectedStream, currentPage]);\n\n  // Ensure current page is valid when streams or layout changes\n  useEffect(() => {\n    if (streams.length === 0) return;\n\n    const maxStreams = getMaxStreamsForLayout();\n    const totalPages = Math.ceil(streams.length / maxStreams);\n\n    if (currentPage >= totalPages) {\n      setCurrentPage(Math.max(0, totalPages - 1));\n    }\n  }, [streams, layout, currentPage, getMaxStreamsForLayout]);\n\n  /**\n   * Toggle fullscreen mode for a specific stream\n   * @param {string} streamName - Stream name\n   * @param {Event} event - Click event\n   * @param {HTMLElement} cellElement - The video cell element\n   */\n  const toggleStreamFullscreen = (streamName, event, cellElement) => {\n    // Prevent default button behavior\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    if (!streamName) {\n      console.error('Stream name not provided for fullscreen toggle');\n      return;\n    }\n\n    console.log(`Toggling fullscreen for stream: ${streamName}`);\n\n    if (!cellElement) {\n      console.error('Video cell element not provided for fullscreen toggle');\n      return;\n    }\n\n    if (!document.fullscreenElement) {\n      console.log('Entering fullscreen mode for video cell');\n      cellElement.requestFullscreen().catch(err => {\n        console.error(`Error attempting to enable fullscreen: ${err.message}`);\n        showStatusMessage(`Could not enable fullscreen mode: ${err.message}`);\n      });\n    } else {\n      console.log('Exiting fullscreen mode');\n      document.exitFullscreen();\n    }\n  };\n\n  // Memoize the streams to show to prevent unnecessary re-renders\n  const streamsToShow = useMemo(() => getStreamsToShow(), [streams, layout, selectedStream, currentPage, getMaxStreamsForLayout]);\n\n  return (\n    <section\n      id=\"live-page\"\n      className={`page ${isFullscreen ? 'fullscreen-mode' : ''}`}\n    >\n      {/* Include the SnapshotManager component */}\n      <SnapshotManager />\n\n      {/* Include the FullscreenManager component */}\n      <FullscreenManager\n        isFullscreen={isFullscreen}\n        setIsFullscreen={setIsFullscreen}\n        targetId=\"live-page\"\n      />\n\n      <div className=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <div className=\"flex items-center space-x-2\">\n          <h2 className=\"text-xl font-bold mr-4\">Live View</h2>\n          <div className=\"flex space-x-2\">\n            <button\n              id=\"hls-toggle-btn\"\n              className=\"px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n              onClick={() => window.location.href = '/hls.html'}\n            >\n              HLS View\n            </button>\n          </div>\n        </div>\n        <div className=\"controls flex items-center space-x-2\">\n          <div className=\"flex items-center\">\n            <label htmlFor=\"layout-selector\" className=\"mr-2\">Layout:</label>\n            <select\n              id=\"layout-selector\"\n              className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600\"\n              value={layout}\n              onChange={(e) => {\n                const newLayout = e.target.value;\n                setLayout(newLayout);\n                setCurrentPage(0); // Reset to first page when layout changes\n              }}\n            >\n              <option value=\"1\">1 Stream</option>\n              <option value=\"2\">2 Streams</option>\n              <option value=\"4\">4 Streams</option>\n              <option value=\"6\">6 Streams</option>\n              <option value=\"9\">9 Streams</option>\n              <option value=\"16\">16 Streams</option>\n            </select>\n          </div>\n\n          {layout === '1' && (\n            <div className=\"flex items-center\">\n              <label htmlFor=\"stream-selector\" className=\"mr-2\">Stream:</label>\n              <select\n                id=\"stream-selector\"\n                className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600\"\n                value={selectedStream}\n                onChange={(e) => {\n                  const newStream = e.target.value;\n                  setSelectedStream(newStream);\n                }}\n              >\n                {streams.map(stream => (\n                  <option key={stream.name} value={stream.name}>{stream.name}</option>\n                ))}\n              </select>\n            </div>\n          )}\n\n          <button\n            id=\"fullscreen-btn\"\n            className=\"p-2 rounded-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none\"\n            onClick={() => toggleFullscreen()}\n            title=\"Toggle Fullscreen\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                 stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <path\n                d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\"></path>\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      <div className=\"flex flex-col space-y-4 h-full\">\n        <div\n          id=\"video-grid\"\n          className={`video-container layout-${layout}`}\n        >\n          {isLoadingStreams ? (\n            <div className=\"flex justify-center items-center col-span-full row-span-full h-64 w-full\" style={{ pointerEvents: 'none', zIndex: 1 }}>\n              <div className=\"flex flex-col items-center justify-center py-8\">\n                <div\n                  className=\"inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16\"></div>\n                <p className=\"mt-4 text-gray-700 dark:text-gray-300\">Loading streams...</p>\n              </div>\n            </div>\n          ) : (isLoading && !isLoadingStreams) ? (\n            <div\n              className=\"flex justify-center items-center col-span-full row-span-full h-64 w-full\"\n              style={{\n                pointerEvents: 'none',\n                position: 'relative',\n                zIndex: 1\n              }}\n            >\n              <div className=\"flex flex-col items-center justify-center py-8\">\n                <div\n                  className=\"inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16\"></div>\n                <p className=\"mt-4 text-gray-700 dark:text-gray-300\">Loading streams...</p>\n              </div>\n            </div>\n          ) : (streamsError) ? (\n            <div className=\"placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8\">\n              <p className=\"mb-6 text-gray-600 dark:text-gray-300 text-lg\">Error loading streams: {streamsError.message}</p>\n              <button\n                onClick={() => window.location.reload()}\n                className=\"btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n              >\n                Retry\n              </button>\n            </div>\n          ) : streams.length === 0 ? (\n            <div className=\"placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8\">\n              <p className=\"mb-6 text-gray-600 dark:text-gray-300 text-lg\">No streams configured</p>\n              <a href=\"streams.html\" className=\"btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\">Configure Streams</a>\n            </div>\n          ) : (\n            // Render video cells using our self-contained WebRTCVideoCell component\n            streamsToShow.map(stream => (\n              <WebRTCVideoCell\n                key={stream.name}\n                stream={stream}\n                onToggleFullscreen={toggleStreamFullscreen}\n                streamId={stream.id || stream.name} // Add explicit streamId prop to prevent re-renders\n              />\n            ))\n          )}\n        </div>\n\n        {layout !== '1' && streams.length > getMaxStreamsForLayout() ? (\n          <div className=\"pagination-controls flex justify-center items-center space-x-4 mt-4\">\n            <button\n              className=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              onClick={() => {\n                console.log('Changing to previous page');\n                setCurrentPage(Math.max(0, currentPage - 1));\n              }}\n              disabled={currentPage === 0}\n            >\n              Previous\n            </button>\n\n            <span className=\"text-gray-700 dark:text-gray-300\">\n              Page {currentPage + 1} of {Math.ceil(streams.length / getMaxStreamsForLayout())}\n            </span>\n\n            <button\n              className=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              onClick={() => {\n                console.log('Changing to next page');\n                const totalPages = Math.ceil(streams.length / getMaxStreamsForLayout());\n                setCurrentPage(Math.min(totalPages - 1, currentPage + 1));\n              }}\n              disabled={currentPage >= Math.ceil(streams.length / getMaxStreamsForLayout()) - 1}\n            >\n              Next\n            </button>\n          </div>\n        ) : null}\n      </div>\n    </section>\n  );\n}\n","/**\n * LightNVR Web Interface Live View Page\n * Entry point for the live view page with WebRTC/HLS support\n */\n\nimport { render } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { LiveView } from '../components/preact/LiveView.jsx';\nimport { WebRTCView } from '../components/preact/WebRTCView.jsx';\nimport { QueryClientProvider, queryClient } from '../query-client.js';\nimport { Header } from \"../components/preact/Header.jsx\";\nimport { Footer } from \"../components/preact/Footer.jsx\";\nimport { ToastContainer } from \"../components/preact/ToastContainer.jsx\";\n\n/**\n * Main App component that conditionally renders WebRTCView or LiveView\n * based on whether WebRTC is disabled in settings\n */\nfunction App() {\n    const [isWebRTCDisabled, setIsWebRTCDisabled] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        // Check if WebRTC is disabled in settings\n        async function checkWebRTCStatus() {\n            try {\n                const response = await fetch('/api/settings');\n                if (!response.ok) {\n                    console.error('Failed to fetch settings:', response.status, response.statusText);\n                    setIsLoading(false);\n                    return;\n                }\n\n                const settings = await response.json();\n                \n                if (settings.webrtc_disabled) {\n                    console.log('WebRTC is disabled, using HLS view');\n                    setIsWebRTCDisabled(true);\n                } else {\n                    console.log('WebRTC is enabled, using WebRTC view');\n                    setIsWebRTCDisabled(false);\n                }\n            } catch (error) {\n                console.error('Error checking WebRTC status:', error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n\n        checkWebRTCStatus();\n    }, []);\n\n    if (isLoading) {\n        return <div className=\"loading\">Loading...</div>;\n    }\n\n    return (\n        <>\n            <Header />\n            <ToastContainer />\n            {isWebRTCDisabled ? <LiveView isWebRTCDisabled={true} /> : <WebRTCView />}\n            <Footer />\n        </>\n    );\n}\n\n// Render the App component when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Get the container element\n    const container = document.getElementById('main-content');\n\n    if (container) {\n        render(\n            <QueryClientProvider client={queryClient}>\n                <App />\n            </QueryClientProvider>,\n            container\n        );\n    }\n});\n"],"names":["WebRTCVideoCell","stream","streamId","onToggleFullscreen","isLoading","setIsLoading","useState","error","setError","isPlaying","setIsPlaying","reconnectAttempts","setReconnectAttempts","lastActiveTime","setLastActiveTime","Date","now","videoRef","useRef","cellRef","peerConnectionRef","abortControllerRef","timeoutsRef","detectionIntervalRef","prevStreamNameRef","lastFrameTimeRef","detectionOverlayRef","clearAllTimeouts","useCallback","current","forEach","timeoutId","clearTimeout","setManagedTimeout","callback","delay","setTimeout","push","cleanupWebRTCConnection","console","log","name","abort","e","videoElement","onloadeddata","onplaying","onerror","onstalled","ontimeout","srcObject","getTracks","track","stop","trackError","warn","tracksError","pc","onicecandidate","oniceconnectionstatechange","onconnectionstatechange","ontrack","close","closeError","sendOffer","async","streamName","offer","AbortController","signal","formattedOffer","type","sdp","auth","localStorage","getItem","response","fetch","encodeURIComponent","method","headers","Authorization","body","JSON","stringify","ok","Error","status","statusText","text","parse","jsonError","message","Promise","reject","initializeWebRTCConnection","RTCPeerConnection","iceServers","urls","iceTransportPolicy","bundlePolicy","rtcpMuxPolicy","sdpSemantics","event","kind","streams","candidate","iceConnectionState","prev","connectionState","addTransceiver","direction","createOffer","offerToReceiveAudio","offerToReceiveVideo","then","setLocalDescription","localDescription","answer","setRemoteDescription","RTCSessionDescription","catch","useEffect","handleRetry","jsxs","className","ref","style","position","pointerEvents","zIndex","children","jsx","id","replace","playsInline","autoPlay","muted","disablePictureInPicture","width","height","objectFit","detection_based_recording","detection_model","DetectionOverlay","enabled","detectionModel","top","left","padding","backgroundColor","color","borderRadius","fontSize","bottom","right","display","gap","onMouseOver","currentTarget","onMouseOut","SnapshotButton","onSnapshot","canvasRef","getCanvasRef","snapshot","takeSnapshotWithDetections","showSnapshotPreview","canvas","toDataURL","document","createElement","videoWidth","videoHeight","getContext","drawImage","title","onClick","border","cursor","xmlns","viewBox","fill","stroke","d","LoadingIndicator","flexDirection","justifyContent","alignItems","textAlign","overflow","maxWidth","marginBottom","fontWeight","lineHeight","boxShadow","transition","WebRTCView","takeSnapshot","useSnapshotManager","isFullscreen","setIsFullscreen","toggleFullscreen","useFullscreenManager","setStreams","layout","setLayout","layoutParam","URLSearchParams","window","location","search","get","sessionStorage","selectedStream","setSelectedStream","streamParam","currentPage","setCurrentPage","pageParam","Math","max","parseInt","storedPage","queryClient","useQueryClient","setupModals","addModalStyles","handleBeforeUnload","url","URL","searchParams","set","delete","history","replaceState","setItem","toString","removeItem","addEventListener","removeEventListener","data","streamsData","isLoadingStreams","streamsError","useQuery","timeout","retries","retryDelay","Array","isArray","filteredStreams","filterStreamsForWebRTC","length","some","showStatusMessage","processStreams","streamPromises","map","fetchQuery","queryKey","queryFn","json","staleTime","detailedStreams","all","filter","is_deleted","streaming_enabled","getMaxStreamsForLayout","getStreamsToShow","streamsToShow","maxStreams","totalPages","ceil","startIdx","endIdx","min","slice","toggleStreamFullscreen","cellElement","preventDefault","stopPropagation","fullscreenElement","exitFullscreen","requestFullscreen","err","useMemo","SnapshotManager","FullscreenManager","targetId","href","htmlFor","value","onChange","newLayout","target","newStream","strokeWidth","strokeLinecap","strokeLinejoin","reload","disabled","App","isWebRTCDisabled","setIsWebRTCDisabled","webrtc_disabled","checkWebRTCStatus","Fragment","Header","ToastContainer","LiveView","Footer","container","getElementById","render","QueryClientProvider","client"],"mappings":"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"}