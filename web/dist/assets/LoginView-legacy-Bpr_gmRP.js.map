{"version":3,"file":"LoginView-legacy-Bpr_gmRP.js","sources":["../../js/components/preact/LoginView.js"],"sourcesContent":["/**\n * LightNVR Web Interface LoginView Component\n * Preact component for the login page\n */\n\nimport { h } from 'preact';\nimport { html } from '../../html-helper.js';\nimport { useState, useRef, useEffect } from 'preact/hooks';\nimport { showStatusMessage } from './UI.js';\nimport { enhancedFetch, createRequestController } from '../../fetch-utils.js';\n\n/**\n * LoginView component\n * @returns {JSX.Element} LoginView component\n */\nexport function LoginView() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [redirectAttempts, setRedirectAttempts] = useState(0);\n  const redirectTimerRef = useRef(null);\n\n  // Check URL for error, auth_required, or logout parameter\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.has('error')) {\n      setErrorMessage('Invalid username or password');\n    } else if (urlParams.has('auth_required') && urlParams.has('logout')) {\n      setErrorMessage('You have been successfully logged out.');\n    } else if (urlParams.has('auth_required')) {\n      setErrorMessage('Authentication required. Please log in to continue.');\n    } else if (urlParams.has('logout')) {\n      setErrorMessage('You have been successfully logged out.');\n    }\n  }, []);\n\n  // Request controller for cancelling requests\n  const requestControllerRef = useRef(null);\n\n  // Cleanup function for any timers\n  useEffect(() => {\n    return () => {\n      if (redirectTimerRef.current) {\n        clearTimeout(redirectTimerRef.current);\n      }\n    };\n  }, []);\n\n  // Handle successful login with improved reliability\n  const handleSuccessfulLogin = () => {\n    // Get redirect URL from query parameter if it exists\n    const urlParams = new URLSearchParams(window.location.search);\n    const redirectUrl = urlParams.get('redirect');\n\n    // Add timestamp to prevent caching issues\n    const timestamp = new Date().getTime();\n    const targetUrl = redirectUrl\n        ? `${redirectUrl}${redirectUrl.includes('?') ? '&' : '?'}t=${timestamp}`\n        : `/index.html?t=${timestamp}`;\n\n    console.log(`Login successful, redirecting to: ${targetUrl}`);\n\n    // First, try using window.location.href\n    try {\n      window.location.href = targetUrl;\n    } catch (error) {\n      console.error('Error redirecting via location.href:', error);\n    }\n\n    // Set a backup timeout to check if redirection happened\n    redirectTimerRef.current = setTimeout(() => {\n      // Check if we're still on the login page\n      if (window.location.pathname.includes('login.html')) {\n        console.log('Still on login page, trying alternate redirection method');\n\n        // Increment redirect attempts\n        setRedirectAttempts(prev => {\n          const newCount = prev + 1;\n\n          // If we've tried multiple times, try different approaches\n          if (newCount <= 3) {\n            try {\n              // Try window.location assign\n              window.location.assign(targetUrl);\n\n              // Also try reload as a fallback\n              redirectTimerRef.current = setTimeout(() => {\n                if (window.location.pathname.includes('login.html')) {\n                  console.log('Still on login page after assign, trying location.replace');\n                  window.location.replace(targetUrl);\n                }\n              }, 1000);\n            } catch (error) {\n              console.error('Error during alternate redirection:', error);\n\n              // Last resort - show a manual redirect button\n              if (newCount >= 3) {\n                showStatusMessage('Please click the \"Go to Dashboard\" button to continue', 'info', 10000);\n                setErrorMessage('Login successful! Click the button below to continue.');\n\n                // Create a redirect button (this will be handled by showing the message in the UI)\n                const redirectButton = document.createElement('button');\n                redirectButton.textContent = 'Go to Dashboard';\n                redirectButton.className = 'w-full px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors';\n                redirectButton.onclick = () => {\n                  window.location = targetUrl;\n                };\n\n                // Find the login form and append the button\n                const loginForm = document.getElementById('login-form');\n                if (loginForm && loginForm.parentNode) {\n                  loginForm.parentNode.appendChild(redirectButton);\n                }\n              }\n            }\n          }\n          return newCount;\n        });\n      }\n    }, 500); // Check after 500ms if redirection worked\n  };\n\n  // Handle login form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!username || !password) {\n      setErrorMessage('Please enter both username and password');\n      return;\n    }\n\n    setIsLoggingIn(true);\n    setErrorMessage('');\n\n    try {\n      // Store credentials in localStorage for future requests\n      const authString = btoa(`${username}:${password}`);\n      localStorage.setItem('auth', authString);\n\n      // Make login request\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Basic ${authString}`\n        },\n        body: JSON.stringify({ username, password }),\n        timeout: 10000\n      });\n\n      if (response.ok || response.status === 302) {\n        // Successful login\n        console.log('Login successful, proceeding to redirect');\n        // Set a flag to indicate authenticated status\n        sessionStorage.setItem('auth_confirmed', 'true');\n        handleSuccessfulLogin();\n      } else {\n        // Failed login\n        setIsLoggingIn(false);\n        setErrorMessage('Invalid username or password');\n        localStorage.removeItem('auth');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n\n      // If it's a timeout error, proceed anyway with stored credentials\n      if (error.message === 'Request timed out' && localStorage.getItem('auth')) {\n        console.log('Login request timed out, proceeding with stored credentials');\n        handleSuccessfulLogin();\n      }\n      // For other errors, also try to proceed if we have credentials\n      else if (localStorage.getItem('auth')) {\n        console.log('Login API error, but proceeding with stored credentials');\n        handleSuccessfulLogin();\n      } else {\n        setIsLoggingIn(false);\n        setErrorMessage('Login failed. Please try again.');\n      }\n    }\n  };\n\n  return html`\n    <section id=\"login-page\" class=\"page flex items-center justify-center min-h-screen\">\n      <div class=\"login-container w-full max-w-md p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg\">\n        <div class=\"text-center mb-8\">\n          <h1 class=\"text-2xl font-bold\">LightNVR</h1>\n          <p class=\"text-gray-600 dark:text-gray-400\">Please sign in to continue</p>\n        </div>\n\n        ${errorMessage && html`\n          <div class=${`mb-4 p-3 rounded-lg ${\n              errorMessage.includes('successfully logged out') || errorMessage.includes('Click the button below')\n                  ? 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-200'\n                  : 'bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-200'\n          }`}>\n            ${errorMessage}\n          </div>\n        `}\n\n        <form id=\"login-form\" class=\"space-y-6\" action=\"/api/auth/login\" method=\"POST\" onSubmit=${handleSubmit}>\n          <div class=\"form-group\">\n            <label for=\"username\" class=\"block text-sm font-medium mb-1\">Username</label>\n            <input\n                type=\"text\"\n                id=\"username\"\n                name=\"username\"\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                placeholder=\"Enter your username\"\n                value=${username}\n                onChange=${e => setUsername(e.target.value)}\n                required\n                autocomplete=\"username\"\n            />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\" class=\"block text-sm font-medium mb-1\">Password</label>\n            <input\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                placeholder=\"Enter your password\"\n                value=${password}\n                onChange=${e => setPassword(e.target.value)}\n                required\n                autocomplete=\"current-password\"\n            />\n          </div>\n          <div class=\"form-group\">\n            <button\n                type=\"submit\"\n                class=\"w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n                disabled=${isLoggingIn}\n            >\n              ${isLoggingIn ? 'Signing in...' : 'Sign In'}\n            </button>\n          </div>\n        </form>\n\n        <div class=\"mt-6 text-center text-sm text-gray-600 dark:text-gray-400\">\n          <p>Default credentials: admin / admin</p>\n          <p class=\"mt-2\">You can change these in Settings after login</p>\n        </div>\n      </div>\n    </section>\n  `;\n}\n\n/**\n * Load LoginView component\n */\nexport function loadLoginView() {\n  const mainContent = document.getElementById('main-content');\n  if (!mainContent) return;\n\n  // Render the LoginView component to the container\n  import('preact').then(({ render }) => {\n    render(html`<${LoginView} />`, mainContent);\n  });\n}"],"names":["LoginView","username","setUsername","useState","password","setPassword","isLoggingIn","setIsLoggingIn","errorMessage","setErrorMessage","redirectAttempts","setRedirectAttempts","redirectTimerRef","useRef","useEffect","urlParams","URLSearchParams","window","location","search","has","current","clearTimeout","handleSuccessfulLogin","redirectUrl","get","timestamp","Date","getTime","targetUrl","includes","console","log","href","error","setTimeout","pathname","prev","newCount","assign","replace","showStatusMessage","redirectButton","document","createElement","textContent","className","onclick","loginForm","getElementById","parentNode","appendChild","html","async","e","preventDefault","authString","btoa","localStorage","setItem","response","fetch","method","headers","Authorization","body","JSON","stringify","timeout","ok","status","sessionStorage","removeItem","message","getItem","target","value","mainContent","__vitePreload","render","module","import","then","n","p","meta","url"],"mappings":"6KAeO,SAASA,IACd,MAAOC,EAAUC,GAAeC,EAAS,KAClCC,EAAUC,GAAeF,EAAS,KAClCG,EAAaC,GAAkBJ,GAAS,IACxCK,EAAcC,GAAmBN,EAAS,KAC1CO,EAAkBC,GAAuBR,EAAS,GACnDS,EAAmBC,EAAO,MAGhCC,GAAU,KACR,MAAMC,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QAClDJ,EAAUK,IAAI,SAChBX,EAAgB,gCACPM,EAAUK,IAAI,kBAAoBL,EAAUK,IAAI,UACzDX,EAAgB,0CACPM,EAAUK,IAAI,iBACvBX,EAAgB,uDACPM,EAAUK,IAAI,WACvBX,EAAgB,yCACtB,GACK,IAG0BI,EAAO,MAGpCC,GAAU,IACD,KACDF,EAAiBS,SACnBC,aAAaV,EAAiBS,QACtC,GAEK,IAGH,MAAME,EAAwBA,KAE5B,MACMC,EADY,IAAIR,gBAAgBC,OAAOC,SAASC,QACxBM,IAAI,YAG5BC,GAAY,IAAIC,MAAOC,UACvBC,EAAYL,EACZ,GAAGA,IAAcA,EAAYM,SAAS,KAAO,IAAM,QAAQJ,IAC3D,iBAAiBA,IAEvBK,QAAQC,IAAI,qCAAqCH,KAGjD,IACEZ,OAAOC,SAASe,KAAOJ,CACxB,CAAC,MAAOK,GACPH,QAAQG,MAAM,uCAAwCA,EAC5D,CAGItB,EAAiBS,QAAUc,YAAW,KAEhClB,OAAOC,SAASkB,SAASN,SAAS,gBACpCC,QAAQC,IAAI,4DAGZrB,GAAoB0B,IAClB,MAAMC,EAAWD,EAAO,EAGxB,GAAIC,GAAY,EACd,IAEErB,OAAOC,SAASqB,OAAOV,GAGvBjB,EAAiBS,QAAUc,YAAW,KAChClB,OAAOC,SAASkB,SAASN,SAAS,gBACpCC,QAAQC,IAAI,6DACZf,OAAOC,SAASsB,QAAQX,GAC1C,GACiB,IACJ,CAAC,MAAOK,GAIP,GAHAH,QAAQG,MAAM,sCAAuCA,GAGjDI,GAAY,EAAG,CACjBG,EAAkB,wDAAyD,OAAQ,KACnFhC,EAAgB,yDAGhB,MAAMiC,EAAiBC,SAASC,cAAc,UAC9CF,EAAeG,YAAc,kBAC7BH,EAAeI,UAAY,wFAC3BJ,EAAeK,QAAU,KACvB9B,OAAOC,SAAWW,CAAS,EAI7B,MAAMmB,EAAYL,SAASM,eAAe,cACtCD,GAAaA,EAAUE,YACzBF,EAAUE,WAAWC,YAAYT,EAEnD,CACA,CAEU,OAAOJ,CAAQ,IAEzB,GACO,IAAI,EA8DT,OAAOc,CAAI;;;;;;;;UAQH5C,GAAgB4C,CAAI;uBACP,wBACT5C,EAAasB,SAAS,4BAA8BtB,EAAasB,SAAS,0BACpE,oEACA;cAENtB;;;;kGAxES6C,UAGnB,GAFAC,EAAEC,iBAEGtD,GAAaG,EAAlB,CAKAG,GAAe,GACfE,EAAgB,IAEhB,IAEE,MAAM+C,EAAaC,KAAK,GAAGxD,KAAYG,KACvCsD,aAAaC,QAAQ,OAAQH,GAG7B,MAAMI,QAAiBC,MAAM,kBAAmB,CAC9CC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAiB,SAASR,KAE5BS,KAAMC,KAAKC,UAAU,CAAElE,WAAUG,aACjCgE,QAAS,MAGPR,EAASS,IAA0B,MAApBT,EAASU,QAE1BvC,QAAQC,IAAI,4CAEZuC,eAAeZ,QAAQ,iBAAkB,QACzCpC,MAGAhB,GAAe,GACfE,EAAgB,gCAChBiD,aAAac,WAAW,QAE3B,CAAC,MAAOtC,GACPH,QAAQG,MAAM,eAAgBA,GAGR,sBAAlBA,EAAMuC,SAAmCf,aAAagB,QAAQ,SAChE3C,QAAQC,IAAI,+DACZT,KAGOmC,aAAagB,QAAQ,SAC5B3C,QAAQC,IAAI,2DACZT,MAEAhB,GAAe,GACfE,EAAgB,mCAExB,CAjDA,MAFMA,EAAgB,0CAmDtB;;;;;;;;;wBA8BwBR;2BACGqD,GAAKpD,EAAYoD,EAAEqB,OAAOC;;;;;;;;;;;;;wBAa7BxE;2BACGkD,GAAKjD,EAAYiD,EAAEqB,OAAOC;;;;;;;;;2BAS1BtE;;gBAEXA,EAAc,gBAAkB;;;;;;;;;;;GAYhD,8BAKO,WACL,MAAMuE,EAAclC,SAASM,eAAe,gBACvC4B,GAGNC,GAAAzB,UAAA,MAAA0B,OAAAA,SAACC,EAAOC,OAAA,mCAAQC,MAAAC,GAAAA,EAAAC,IAAA,MAAA,CAAAL,SAAA,QAAA,EAAAC,EAAAK,KAAAC,KAAEJ,MAAK,EAAGH,aACvBA,EAAO3B,CAAI,IAAIpD,OAAgB6E,EAAY,GAE/C"}