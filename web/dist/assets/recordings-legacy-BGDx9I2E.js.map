{"version":3,"file":"recordings-legacy-BGDx9I2E.js","sources":["../../js/components/batch-delete-modal.js"],"sourcesContent":["/**\n * Batch Delete Modal Component\n * Displays progress of batch delete operations with WebSocket updates\n */\n\n/**\n * Show a status message to the user\n * @param {string} message - Message to display\n * @param {number} duration - Duration in milliseconds (default: 3000)\n */\nfunction showStatusMessage(message, duration = 3000) {\n    // Check if a status message container already exists\n    let statusContainer = document.getElementById('status-message-container');\n    \n    // Create container if it doesn't exist\n    if (!statusContainer) {\n        statusContainer = document.createElement('div');\n        statusContainer.id = 'status-message-container';\n        statusContainer.className = 'fixed bottom-4 left-1/2 transform -translate-x-1/2 z-50 flex flex-col items-center';\n        document.body.appendChild(statusContainer);\n    }\n    \n    // Create message element\n    const messageElement = document.createElement('div');\n    messageElement.className = 'bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg mb-2 transition-all duration-300 opacity-0 transform translate-y-2';\n    messageElement.textContent = message;\n    \n    // Add to container\n    statusContainer.appendChild(messageElement);\n    \n    // Trigger animation to show message\n    setTimeout(() => {\n        messageElement.classList.remove('opacity-0', 'translate-y-2');\n    }, 10);\n    \n    // Set timeout to remove message\n    setTimeout(() => {\n        // Trigger animation to hide message\n        messageElement.classList.add('opacity-0', 'translate-y-2');\n        \n        // Remove element after animation completes\n        setTimeout(() => {\n            if (messageElement.parentNode === statusContainer) {\n                statusContainer.removeChild(messageElement);\n            }\n            \n            // Remove container if no more messages\n            if (statusContainer.children.length === 0) {\n                document.body.removeChild(statusContainer);\n            }\n        }, 300);\n    }, duration);\n}\n\n/**\n * Show loading indicator on an element\n * @param {HTMLElement} element - Element to show loading on\n */\nfunction showLoading(element) {\n    if (!element) return;\n    \n    // Add loading class\n    element.classList.add('loading');\n    \n    // Create loading overlay if it doesn't exist\n    let loadingOverlay = element.querySelector('.loading-overlay');\n    if (!loadingOverlay) {\n        loadingOverlay = document.createElement('div');\n        loadingOverlay.className = 'loading-overlay';\n        loadingOverlay.innerHTML = '<div class=\"loading-spinner\"></div>';\n        element.appendChild(loadingOverlay);\n    }\n    \n    // Show loading overlay\n    loadingOverlay.style.display = 'flex';\n}\n\n/**\n * Hide loading indicator on an element\n * @param {HTMLElement} element - Element to hide loading from\n */\nfunction hideLoading(element) {\n    if (!element) return;\n    \n    // Remove loading class\n    element.classList.remove('loading');\n    \n    // Hide loading overlay\n    const loadingOverlay = element.querySelector('.loading-overlay');\n    if (loadingOverlay) {\n        loadingOverlay.style.display = 'none';\n    }\n}\n\n/**\n * Initialize the batch delete modal\n */\nfunction initBatchDeleteModal() {\n    // Create modal container if it doesn't exist\n    let modalContainer = document.getElementById('batch-delete-modal-container');\n    if (!modalContainer) {\n        modalContainer = document.createElement('div');\n        modalContainer.id = 'batch-delete-modal-container';\n        document.body.appendChild(modalContainer);\n    }\n\n    // Create modal HTML\n    modalContainer.innerHTML = `\n        <div id=\"batch-delete-modal\" class=\"modal hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center z-50\">\n            <div class=\"modal-content relative bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md mx-auto p-6 w-full\">\n                <div class=\"modal-header flex justify-between items-center mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">\n                    <h3 id=\"batch-delete-modal-title\" class=\"text-xl font-bold text-gray-900 dark:text-white\">Batch Delete Progress</h3>\n                    <button id=\"batch-delete-close-btn\" class=\"close text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 text-2xl font-bold\">&times;</button>\n                </div>\n                <div class=\"modal-body\">\n                    <div id=\"batch-delete-status\" class=\"mb-4 text-gray-700 dark:text-gray-300\">\n                        Preparing to delete recordings...\n                    </div>\n                    <div class=\"progress-container bg-gray-200 dark:bg-gray-700 rounded-full h-4 mb-4\">\n                        <div id=\"batch-delete-progress-bar\" class=\"bg-green-500 h-4 rounded-full text-center text-xs text-white\" style=\"width: 0%\"></div>\n                    </div>\n                    <div class=\"flex justify-between text-sm text-gray-600 dark:text-gray-400 mb-6\">\n                        <div id=\"batch-delete-count\">0 / 0</div>\n                        <div id=\"batch-delete-percentage\">0%</div>\n                    </div>\n                    <div id=\"batch-delete-details\" class=\"mb-4\">\n                        <div class=\"flex justify-between mb-2\">\n                            <span class=\"text-gray-700 dark:text-gray-300\">Succeeded:</span>\n                            <span id=\"batch-delete-succeeded\" class=\"font-bold text-green-600 dark:text-green-400\">0</span>\n                        </div>\n                        <div class=\"flex justify-between\">\n                            <span class=\"text-gray-700 dark:text-gray-300\">Failed:</span>\n                            <span id=\"batch-delete-failed\" class=\"font-bold text-red-600 dark:text-red-400\">0</span>\n                        </div>\n                    </div>\n                    <div id=\"batch-delete-message\" class=\"text-sm italic text-gray-600 dark:text-gray-400 mb-4\"></div>\n                </div>\n                <div class=\"modal-footer flex justify-end pt-2 border-t border-gray-200 dark:border-gray-700\">\n                    <button id=\"batch-delete-done-btn\" class=\"btn btn-primary hidden\">Done</button>\n                    <button id=\"batch-delete-cancel-btn\" class=\"btn btn-secondary\">Cancel</button>\n                </div>\n            </div>\n        </div>\n    `;\n\n    // Get modal elements\n    const modal = document.getElementById('batch-delete-modal');\n    const closeBtn = document.getElementById('batch-delete-close-btn');\n    const doneBtn = document.getElementById('batch-delete-done-btn');\n    const cancelBtn = document.getElementById('batch-delete-cancel-btn');\n\n    // Setup close button event handlers\n    if (closeBtn) {\n        closeBtn.addEventListener('click', closeBatchDeleteModal);\n    }\n\n    if (doneBtn) {\n        doneBtn.addEventListener('click', closeBatchDeleteModal);\n    }\n\n    if (cancelBtn) {\n        cancelBtn.addEventListener('click', cancelBatchDelete);\n    }\n\n    // Close on click outside\n    window.addEventListener('click', (event) => {\n        if (event.target === modal) {\n            closeBatchDeleteModal();\n        }\n    });\n}\n\n/**\n * Show the batch delete modal\n */\nfunction showBatchDeleteModal() {\n    const modal = document.getElementById('batch-delete-modal');\n    if (!modal) {\n        initBatchDeleteModal();\n    }\n\n    // Reset modal state\n    resetBatchDeleteModal();\n\n    // Show modal\n    modal.classList.remove('hidden');\n}\n\n/**\n * Close the batch delete modal\n */\nfunction closeBatchDeleteModal() {\n    const modal = document.getElementById('batch-delete-modal');\n    if (modal) {\n        modal.classList.add('hidden');\n    }\n}\n\n/**\n * Reset the batch delete modal state\n */\nfunction resetBatchDeleteModal() {\n    // Reset progress bar\n    const progressBar = document.getElementById('batch-delete-progress-bar');\n    if (progressBar) {\n        progressBar.style.width = '0%';\n    }\n\n    // Reset status text\n    const status = document.getElementById('batch-delete-status');\n    if (status) {\n        status.textContent = 'Preparing to delete recordings...';\n    }\n\n    // Reset count and percentage\n    const count = document.getElementById('batch-delete-count');\n    if (count) {\n        count.textContent = '0 / 0';\n    }\n\n    const percentage = document.getElementById('batch-delete-percentage');\n    if (percentage) {\n        percentage.textContent = '0%';\n    }\n\n    // Reset success/fail counts\n    const succeeded = document.getElementById('batch-delete-succeeded');\n    if (succeeded) {\n        succeeded.textContent = '0';\n    }\n\n    const failed = document.getElementById('batch-delete-failed');\n    if (failed) {\n        failed.textContent = '0';\n    }\n\n    // Reset message\n    const message = document.getElementById('batch-delete-message');\n    if (message) {\n        message.textContent = '';\n    }\n\n    // Hide done button, show cancel button\n    const doneBtn = document.getElementById('batch-delete-done-btn');\n    if (doneBtn) {\n        doneBtn.classList.add('hidden');\n    }\n\n    const cancelBtn = document.getElementById('batch-delete-cancel-btn');\n    if (cancelBtn) {\n        cancelBtn.classList.remove('hidden');\n    }\n}\n\n/**\n * Update batch delete progress\n * \n * @param {Object} progress Progress data from WebSocket\n */\nfunction updateBatchDeleteProgress(progress) {\n    console.log('Updating batch delete progress UI:', progress);\n    \n    // Update progress bar\n    const progressBar = document.getElementById('batch-delete-progress-bar');\n    if (progressBar) {\n        console.log(`Updating progress bar: current=${progress.current}, total=${progress.total}`);\n        \n        if (progress.total > 0) {\n            // We have a known total, show percentage\n            const percent = Math.round((progress.current / progress.total) * 100);\n            console.log(`Setting progress bar width to ${percent}%`);\n            progressBar.style.width = `${percent}%`;\n            progressBar.classList.remove('animate-pulse');\n            \n            // Force a reflow to ensure the browser updates the UI\n            void progressBar.offsetWidth;\n        } else if (progress.current > 0) {\n            // We don't know the total but have processed some items\n            // Show an indeterminate but growing progress bar\n            const estimatedPercent = Math.min(90, progress.current / 10);\n            console.log(`Setting progress bar width to ${estimatedPercent}% (estimated)`);\n            progressBar.style.width = `${estimatedPercent}%`;\n            progressBar.classList.add('animate-pulse');\n            \n            // Force a reflow to ensure the browser updates the UI\n            void progressBar.offsetWidth;\n        } else if (progress.complete) {\n            // Operation is complete but we don't know the total\n            console.log('Setting progress bar to 100% (complete)');\n            progressBar.style.width = '100%';\n            progressBar.classList.remove('animate-pulse');\n            \n            // Force a reflow to ensure the browser updates the UI\n            void progressBar.offsetWidth;\n        } else {\n            // Indeterminate progress\n            console.log('Setting progress bar to 50% (indeterminate)');\n            progressBar.style.width = '50%';\n            progressBar.classList.add('animate-pulse');\n            \n            // Force a reflow to ensure the browser updates the UI\n            void progressBar.offsetWidth;\n        }\n    }\n\n    // Update status text\n    const status = document.getElementById('batch-delete-status');\n    if (status && progress.status) {\n        status.textContent = progress.status;\n    }\n\n    // Update count and percentage\n    const count = document.getElementById('batch-delete-count');\n    if (count) {\n        if (progress.total > 0) {\n            count.textContent = `${progress.current} / ${progress.total}`;\n        } else {\n            count.textContent = `${progress.current} / ?`;\n        }\n    }\n\n    const percentage = document.getElementById('batch-delete-percentage');\n    if (percentage) {\n        if (progress.total > 0) {\n            const percent = Math.round((progress.current / progress.total) * 100);\n            percentage.textContent = `${percent}%`;\n        } else if (progress.complete) {\n            percentage.textContent = '100%';\n        } else {\n            percentage.textContent = 'In progress';\n        }\n    }\n\n    // Update success/fail counts\n    const succeeded = document.getElementById('batch-delete-succeeded');\n    if (succeeded) {\n        succeeded.textContent = progress.succeeded || '0';\n    }\n\n    const failed = document.getElementById('batch-delete-failed');\n    if (failed) {\n        failed.textContent = progress.failed || '0';\n    }\n\n    // If complete, show done button, hide cancel button\n    if (progress.complete) {\n        const doneBtn = document.getElementById('batch-delete-done-btn');\n        if (doneBtn) {\n            doneBtn.classList.remove('hidden');\n        }\n\n        const cancelBtn = document.getElementById('batch-delete-cancel-btn');\n        if (cancelBtn) {\n            cancelBtn.classList.add('hidden');\n        }\n\n        // Update status if not already set\n        if (status && (!progress.status || progress.status === 'Preparing to delete recordings...')) {\n            status.textContent = 'Batch delete operation complete';\n        }\n        \n        // Ensure progress bar shows 100%\n        if (progressBar) {\n            progressBar.style.width = '100%';\n            progressBar.classList.remove('animate-pulse');\n        }\n    }\n}\n\n// Make updateBatchDeleteProgress globally accessible\nwindow.updateBatchDeleteProgress = updateBatchDeleteProgress;\n\n/**\n * Cancel batch delete operation\n */\nfunction cancelBatchDelete() {\n    // Close modal\n    closeBatchDeleteModal();\n\n    // Show status message\n    showStatusMessage('Batch delete operation cancelled', 5000);\n}\n\n/**\n * Initialize batch delete client\n * \n * @returns {BatchDeleteRecordingsClient} Batch delete client\n */\nfunction initBatchDeleteClient() {\n    // Use the global WebSocket client that was initialized in preact-app.js\n    // If it doesn't exist for some reason, create it\n    if (!window.wsClient) {\n        console.log('Creating WebSocket client in batch-delete-modal.js (fallback)');\n        window.wsClient = new WebSocketClient();\n    } else {\n        console.log('Using existing WebSocket client from preact-app.js');\n    }\n\n    // Create batch delete client if it doesn't exist\n    if (!window.batchDeleteClient) {\n        console.log('Creating BatchDeleteRecordingsClient');\n        window.batchDeleteClient = new BatchDeleteRecordingsClient(window.wsClient);\n\n        // Set up event handlers\n        window.batchDeleteClient.onProgress((payload) => {\n            console.log('Batch delete progress:', payload);\n            updateBatchDeleteProgress(payload);\n        });\n\n        window.batchDeleteClient.onResult((payload) => {\n            console.log('Batch delete result:', payload);\n            // Update final progress\n            updateBatchDeleteProgress({\n                current: payload.total,\n                total: payload.total,\n                succeeded: payload.succeeded,\n                failed: payload.failed,\n                complete: true\n            });\n\n            // Show status message\n            const message = payload.success\n                ? `Successfully deleted ${payload.succeeded} recordings`\n                : `Deleted ${payload.succeeded} recordings with ${payload.failed} failures`;\n            \n            showStatusMessage(message, 5000);\n\n            // Reload recordings after a short delay\n            setTimeout(() => {\n                loadRecordings();\n            }, 1000);\n        });\n\n        window.batchDeleteClient.onError((payload) => {\n            console.error('Batch delete error:', payload);\n            // Show error message\n            showStatusMessage(`Error: ${payload.error || 'Unknown error'}`, 5000);\n\n            // Close modal\n            closeBatchDeleteModal();\n        });\n    }\n\n    return window.batchDeleteClient;\n}\n\n/**\n * Delete recordings by HTTP request (fallback when WebSocket is not available)\n * \n * @param {Object} params Delete parameters (ids or filter)\n * @returns {Promise<Object>} Promise that resolves when the operation is complete\n */\nfunction batchDeleteRecordingsByHttpRequest(params) {\n    console.log('Using HTTP fallback for batch delete with params:', params);\n    \n    return new Promise((resolve, reject) => {\n        // Show modal\n        showBatchDeleteModal();\n        \n        // Update progress to show we're using HTTP\n        updateBatchDeleteProgress({\n            current: 0,\n            total: params.ids ? params.ids.length : 0,\n            status: 'Using HTTP fallback for batch delete operation',\n            succeeded: 0,\n            failed: 0\n        });\n        \n        // Send HTTP request\n        fetch('/api/recordings/batch-delete', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(params)\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error ${response.status}: ${response.statusText}`);\n            }\n            return response.json();\n        })\n        .then(result => {\n            console.log('HTTP batch delete result:', result);\n            \n            // Update final progress\n            updateBatchDeleteProgress({\n                current: result.total || 0,\n                total: result.total || 0,\n                succeeded: result.succeeded || 0,\n                failed: result.failed || 0,\n                complete: true\n            });\n            \n            // Show status message\n            const message = result.success\n                ? `Successfully deleted ${result.succeeded} recordings`\n                : `Deleted ${result.succeeded} recordings with ${result.failed} failures`;\n            \n            showStatusMessage(message, 5000);\n            \n            // Reload recordings after a short delay\n            setTimeout(() => {\n                if (typeof loadRecordings === 'function') {\n                    loadRecordings();\n                }\n            }, 1000);\n            \n            resolve(result);\n        })\n        .catch(error => {\n            console.error('HTTP batch delete error:', error);\n            \n            // Show error message\n            showStatusMessage(`Error: ${error.message || 'Unknown error'}`, 5000);\n            \n            // Close modal\n            closeBatchDeleteModal();\n            \n            reject(error);\n        });\n    });\n}\n\n/**\n * Delete multiple recordings by IDs\n * \n * @param {Array<number>} ids Recording IDs to delete\n */\nfunction batchDeleteRecordings(ids) {\n    if (!ids || ids.length === 0) {\n        showStatusMessage('No recordings selected for deletion', 5000);\n        return;\n    }\n\n    // Confirm deletion\n    if (!confirm(`Are you sure you want to delete ${ids.length} recordings?`)) {\n        return;\n    }\n\n    // Initialize batch delete client\n    const batchDeleteClient = initBatchDeleteClient();\n\n    // Show modal\n    showBatchDeleteModal();\n\n    // Start batch delete operation\n    batchDeleteClient.deleteWithProgress({ ids })\n        .catch(error => {\n            console.error('Error starting batch delete:', error);\n            showStatusMessage(`Error: ${error.message || 'Failed to start batch delete operation'}`, 5000);\n            closeBatchDeleteModal();\n        });\n}\n\n/**\n * Delete recordings by filter\n * \n * @param {Object} filter Filter to delete by\n */\nfunction batchDeleteRecordingsByFilter(filter) {\n    if (!filter) {\n        showStatusMessage('No filter specified for deletion', 5000);\n        return;\n    }\n\n    // Confirm deletion\n    if (!confirm('Are you sure you want to delete all recordings matching the current filter?')) {\n        return;\n    }\n\n    // Initialize batch delete client\n    const batchDeleteClient = initBatchDeleteClient();\n\n    // Show modal\n    showBatchDeleteModal();\n\n    // Start batch delete operation\n    batchDeleteClient.deleteWithProgress({ filter })\n        .catch(error => {\n            console.error('Error starting batch delete:', error);\n            showStatusMessage(`Error: ${error.message || 'Failed to start batch delete operation'}`, 5000);\n            closeBatchDeleteModal();\n        });\n}\n\n// Initialize batch delete modal when the page loads\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('Initializing batch delete modal');\n    initBatchDeleteModal();\n    \n    // Make sure the modal is visible in the DOM\n    const modalContainer = document.getElementById('batch-delete-modal-container');\n    if (!modalContainer) {\n        console.error('Batch delete modal container not found, creating it');\n        const container = document.createElement('div');\n        container.id = 'batch-delete-modal-container';\n        document.body.appendChild(container);\n        initBatchDeleteModal();\n    }\n    \n    // Make sure the global function is available\n    if (typeof window.updateBatchDeleteProgress !== 'function') {\n        console.error('updateBatchDeleteProgress function not available, setting it up');\n        window.updateBatchDeleteProgress = updateBatchDeleteProgress;\n    }\n    \n    // Make sure the global function is available\n    if (typeof window.showBatchDeleteModal !== 'function') {\n        console.error('showBatchDeleteModal function not available, setting it up');\n        window.showBatchDeleteModal = showBatchDeleteModal;\n    }\n});\n\n// Make functions globally available\nwindow.showBatchDeleteModal = showBatchDeleteModal;\nwindow.updateBatchDeleteProgress = updateBatchDeleteProgress;\nwindow.initBatchDeleteModal = initBatchDeleteModal;\n"],"names":["initBatchDeleteModal","modalContainer","document","getElementById","createElement","id","body","appendChild","innerHTML","modal","closeBtn","doneBtn","cancelBtn","addEventListener","closeBatchDeleteModal","cancelBatchDelete","window","event","target","showBatchDeleteModal","progressBar","style","width","status","textContent","count","percentage","succeeded","failed","message","classList","add","remove","resetBatchDeleteModal","updateBatchDeleteProgress","progress","console","log","current","total","percent","Math","round","offsetWidth","estimatedPercent","min","complete","duration","statusContainer","className","messageElement","setTimeout","parentNode","removeChild","children","length","showStatusMessage","error","container"],"mappings":"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"}