{"version":3,"file":"index-legacy-CZstn9n5.js","sources":["../../js/components/preact/WebRTCView.jsx","../../js/pages/index-page.jsx"],"sourcesContent":["/**\n * LightNVR Web Interface WebRTCView Component\n * Preact component for the WebRTC view page\n */\n\n\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { showStatusMessage, showSnapshotPreview, setupModals, addStatusMessageStyles, addModalStyles } from './UI.js';\nimport { toggleFullscreen, exitFullscreenMode } from './FullscreenManager.js';\nimport { startDetectionPolling, cleanupDetectionPolling } from './DetectionOverlay.js';\n\n/**\n * WebRTCView component\n * @returns {JSX.Element} WebRTCView component\n */\nexport function WebRTCView() {\n  const [streams, setStreams] = useState([]);\n  // Initialize layout from URL if available\n  const [layout, setLayout] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get('layout') || '4';\n  });\n  // Initialize selectedStream from URL if available\n  const [selectedStream, setSelectedStream] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get('stream') || '';\n  });\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  // Initialize currentPage from URL if available (URL uses 1-based indexing, internal state uses 0-based)\n  const [currentPage, setCurrentPage] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const pageParam = urlParams.get('page');\n    // Convert from 1-based (URL) to 0-based (internal)\n    return pageParam ? Math.max(0, parseInt(pageParam, 10) - 1) : 0;\n  });\n  const videoGridRef = useRef(null);\n  const webrtcConnections = useRef({});\n  const detectionIntervals = useRef({});\n\n  // Set up event listeners and UI components\n  useEffect(() => {\n    // Set up modals for snapshot preview\n    setupModals();\n    addStatusMessageStyles();\n    addModalStyles();\n\n    // Set up periodic connection check\n    const connectionCheckInterval = setInterval(() => {\n      Object.keys(webrtcConnections.current).forEach(streamName => {\n        const pc = webrtcConnections.current[streamName];\n        if (pc) {\n          // Log connection state for debugging\n          console.debug(`WebRTC connection state for ${streamName}: ${pc.connectionState}, ICE state: ${pc.iceConnectionState}`);\n\n          // If connection is failed or disconnected for too long, try to reconnect\n          if (pc.iceConnectionState === 'failed' || pc.iceConnectionState === 'disconnected') {\n            console.warn(`WebRTC connection for ${streamName} is in ${pc.iceConnectionState} state, will attempt reconnect`);\n\n            // Clean up the old connection\n            cleanupWebRTCPlayer(streamName);\n\n            // Find the stream info and reinitialize\n            const stream = streams.find(s => s.name === streamName);\n            if (stream) {\n              console.log(`Attempting to reconnect WebRTC for stream ${streamName}`);\n              initializeWebRTCPlayer(stream);\n            }\n          }\n        }\n      });\n    }, 30000); // Check every 30 seconds\n\n    // Cleanup\n    return () => {\n      // No need to remove handleEscape as it's now handled in FullscreenManager.js\n      clearInterval(connectionCheckInterval);\n      stopAllWebRTCStreams();\n    };\n  }, [streams]); // Add streams as dependency to ensure we have the latest stream data\n\n  // Load streams after the component has rendered and videoGridRef is available\n  useEffect(() => {\n      // Set loading state initially\n      setIsLoading(true);\n\n      // Create a timeout to handle potential stalls in loading\n      const timeoutId = setTimeout(() => {\n        console.warn('Stream loading timed out');\n        setIsLoading(false);\n        showStatusMessage('Loading streams timed out. Please try refreshing the page.');\n      }, 15000); // 15 second timeout\n\n      // Load streams from API with timeout handling\n      loadStreams()\n        .then((streamData) => {\n          clearTimeout(timeoutId);\n          if (streamData && streamData.length > 0) {\n            setStreams(streamData);\n\n            // Set selectedStream based on URL parameter if it exists and is valid\n            const urlParams = new URLSearchParams(window.location.search);\n            const streamParam = urlParams.get('stream');\n\n            if (streamParam && streamData.some(stream => stream.name === streamParam)) {\n              // If the stream from URL exists in the loaded streams, use it\n              setSelectedStream(streamParam);\n            } else if (!selectedStream || !streamData.some(stream => stream.name === selectedStream)) {\n              // Otherwise use the first stream if selectedStream is not set or invalid\n              setSelectedStream(streamData[0].name);\n            }\n          } else {\n            console.warn('No streams returned from API');\n          }\n          setIsLoading(false);\n        })\n        .catch((error) => {\n          clearTimeout(timeoutId);\n          console.error('Error loading streams:', error);\n          showStatusMessage('Error loading streams: ' + error.message);\n          setIsLoading(false);\n        });\n  }, []);\n\n  /**\n   * Load streams from API\n   * @returns {Promise<Array>} Promise resolving to array of streams\n   */\n  const loadStreams = async () => {\n    try {\n      // Create a timeout promise to handle potential stalls\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('Request timed out')), 5000); // 5 second timeout\n      });\n\n      // Fetch streams from API with timeout\n      const fetchPromise = fetch('/api/streams');\n      const response = await Promise.race([fetchPromise, timeoutPromise]);\n\n      if (!response.ok) {\n        throw new Error('Failed to load streams');\n      }\n\n      // Create another timeout for the JSON parsing\n      const jsonTimeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('JSON parsing timed out')), 3000); // 3 second timeout\n      });\n\n      const jsonPromise = response.json();\n      const data = await Promise.race([jsonPromise, jsonTimeoutPromise]);\n\n      // For WebRTC view, we need to fetch full details for each stream\n      const streamPromises = (data || []).map(stream => {\n        // Create a timeout promise for this stream's details fetch\n        const detailsTimeoutPromise = new Promise((_, reject) => {\n          setTimeout(() => reject(new Error(`Timeout fetching details for stream ${stream.name}`)), 3000);\n        });\n\n        // Fetch stream details with timeout\n        const detailsFetchPromise = fetch(`/api/streams/${encodeURIComponent(stream.id || stream.name)}`)\n          .then(response => {\n            if (!response.ok) {\n              throw new Error(`Failed to load details for stream ${stream.name}`);\n            }\n            return response.json();\n          });\n\n        // Race the fetch against the timeout\n        return Promise.race([detailsFetchPromise, detailsTimeoutPromise])\n          .catch(error => {\n            console.error(`Error loading details for stream ${stream.name}:`, error);\n            // Return the basic stream info if we can't get details\n            return stream;\n          });\n      });\n\n      const detailedStreams = await Promise.all(streamPromises);\n      console.log('Loaded detailed streams for WebRTC view:', detailedStreams);\n\n      // Filter out streams that are soft deleted, inactive, or not configured for HLS\n      const filteredStreams = detailedStreams.filter(stream => {\n        // Filter out soft deleted streams\n        if (stream.is_deleted) {\n          console.log(`Stream ${stream.name} is soft deleted, filtering out`);\n          return false;\n        }\n\n        // Filter out inactive streams\n        if (!stream.enabled) {\n          console.log(`Stream ${stream.name} is inactive, filtering out`);\n          return false;\n        }\n\n        // Filter out streams not configured for HLS\n        if (!stream.streaming_enabled) {\n          console.log(`Stream ${stream.name} is not configured for HLS, filtering out`);\n          return false;\n        }\n\n        return true;\n      });\n\n      console.log('Filtered streams for WebRTC view:', filteredStreams);\n\n      return filteredStreams || [];\n    } catch (error) {\n      console.error('Error loading streams for WebRTC view:', error);\n      showStatusMessage('Error loading streams: ' + error.message);\n\n      return [];\n    }\n  };\n\n  /**\n   * Get maximum number of streams to display based on layout\n   * @returns {number} Maximum number of streams\n   */\n  const getMaxStreamsForLayout = () => {\n    switch (layout) {\n      case '1': return 1;  // Single view\n      case '2': return 2;  // 2x1 grid\n      case '4': return 4;  // 2x2 grid\n      case '6': return 6;  // 2x3 grid\n      case '9': return 9;  // 3x3 grid\n      case '16': return 16; // 4x4 grid\n      default: return 4;\n    }\n  };\n\n  /**\n   * Update video grid based on layout, streams, and pagination\n   */\n  const updateVideoGrid = () => {\n    if (!videoGridRef.current) return;\n\n    // Create a transparent overlay to prevent clicks during grid updates\n    const preventClickOverlay = document.createElement('div');\n    preventClickOverlay.style.position = 'fixed';\n    preventClickOverlay.style.top = '0';\n    preventClickOverlay.style.left = '0';\n    preventClickOverlay.style.width = '100%';\n    preventClickOverlay.style.height = '100%';\n    preventClickOverlay.style.zIndex = '9999';\n    preventClickOverlay.style.backgroundColor = 'transparent';\n    preventClickOverlay.style.pointerEvents = 'auto';\n    document.body.appendChild(preventClickOverlay);\n\n    // Clear existing content except placeholder\n    const placeholder = videoGridRef.current.querySelector('.placeholder');\n    videoGridRef.current.innerHTML = '';\n\n    // If placeholder exists and no streams, add it back\n    if (placeholder && streams.length === 0) {\n      videoGridRef.current.appendChild(placeholder);\n      // Remove the overlay after a short delay\n      setTimeout(() => {\n        if (document.body.contains(preventClickOverlay)) {\n          document.body.removeChild(preventClickOverlay);\n        }\n      }, 100);\n      return;\n    }\n\n    // Filter streams based on layout and selected stream\n    let streamsToShow = streams;\n    if (layout === '1' && selectedStream) {\n      streamsToShow = streams.filter(stream => stream.name === selectedStream);\n    } else {\n      // Apply pagination\n      const maxStreams = getMaxStreamsForLayout();\n      const totalPages = Math.ceil(streams.length / maxStreams);\n\n      // Ensure current page is valid\n      if (currentPage >= totalPages) {\n        setCurrentPage(Math.max(0, totalPages - 1));\n        return; // Will re-render with corrected page\n      }\n\n      // Get streams for current page\n      const startIdx = currentPage * maxStreams;\n      const endIdx = Math.min(startIdx + maxStreams, streams.length);\n      streamsToShow = streams.slice(startIdx, endIdx);\n    }\n\n    // Get the names of streams that should be shown\n    const streamsToShowNames = streamsToShow.map(stream => stream.name);\n\n    // Clean up connections for streams that are no longer visible\n    Object.keys(webrtcConnections.current).forEach(streamName => {\n      if (!streamsToShowNames.includes(streamName)) {\n        console.log(`Cleaning up WebRTC connection for stream ${streamName} as it's not on the current page`);\n        cleanupWebRTCPlayer(streamName);\n      }\n    });\n\n    // Stagger initialization of WebRTC connections\n    streamsToShow.forEach((stream, index) => {\n      // Create video cell immediately for UI responsiveness\n      createVideoCell(stream);\n\n      // Only initialize WebRTC if it's not already connected\n      if (!webrtcConnections.current[stream.name]) {\n        // Stagger the actual WebRTC initialization\n        setTimeout(() => {\n          initializeWebRTCPlayer(stream);\n        }, index * 500); // 500ms delay between each stream initialization\n      } else {\n        console.log(`WebRTC connection for stream ${stream.name} already exists, reusing`);\n      }\n    });\n\n    // Remove the overlay after all cells are created\n    setTimeout(() => {\n      if (document.body.contains(preventClickOverlay)) {\n        document.body.removeChild(preventClickOverlay);\n      }\n    }, 100);\n  };\n\n  /**\n   * Create video cell without initializing WebRTC\n   * @param {Object} stream - Stream object\n   */\n  const createVideoCell = (stream) => {\n    // Ensure we have an ID for the stream (use name as fallback if needed)\n    const streamId = stream.id || stream.name;\n\n    const videoCell = document.createElement('div');\n    videoCell.className = 'video-cell';\n    videoCell.dataset.streamName = stream.name;\n    videoCell.dataset.streamId = streamId;\n    videoCell.style.position = 'relative'; // Create stacking context\n\n    // Create video element\n    const videoElement = document.createElement('video');\n    videoElement.id = `video-${stream.name.replace(/\\s+/g, '-')}`;\n    videoElement.className = 'video-element';\n    videoElement.playsInline = true;\n    videoElement.autoplay = true;\n    videoElement.muted = true;\n    videoElement.style.pointerEvents = 'none'; // Allow clicks to pass through to controls\n\n    // Create loading indicator\n    const loadingIndicator = document.createElement('div');\n    loadingIndicator.className = 'loading-indicator';\n    loadingIndicator.innerHTML = `\n      <div className=\"spinner\"></div>\n      <p>Connecting...</p>\n    `;\n    loadingIndicator.style.position = 'absolute';\n    loadingIndicator.style.top = '0';\n    loadingIndicator.style.left = '0';\n    loadingIndicator.style.width = '100%';\n    loadingIndicator.style.height = '100%';\n    loadingIndicator.style.display = 'flex';\n    loadingIndicator.style.flexDirection = 'column';\n    loadingIndicator.style.justifyContent = 'center';\n    loadingIndicator.style.alignItems = 'center';\n    loadingIndicator.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n    loadingIndicator.style.color = 'white';\n    loadingIndicator.style.zIndex = '20'; // Above video but below controls\n    loadingIndicator.style.pointerEvents = 'none'; // Ensure loading indicator doesn't capture clicks\n\n    // Create error indicator (hidden by default)\n    const errorIndicator = document.createElement('div');\n    errorIndicator.className = 'error-indicator';\n    errorIndicator.style.display = 'none';\n    errorIndicator.style.position = 'absolute';\n    errorIndicator.style.top = '0';\n    errorIndicator.style.left = '0';\n    errorIndicator.style.width = '100%';\n    errorIndicator.style.height = '100%';\n    errorIndicator.style.flexDirection = 'column';\n    errorIndicator.style.justifyContent = 'center';\n    errorIndicator.style.alignItems = 'center';\n    errorIndicator.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n    errorIndicator.style.color = 'white';\n    errorIndicator.style.zIndex = '20'; // Above video but below controls\n    // We'll set pointerEvents to 'auto' only when it's visible to allow retry button clicks\n\n    // Create stream name overlay\n    const streamNameOverlay = document.createElement('div');\n    streamNameOverlay.className = 'stream-name-overlay';\n    streamNameOverlay.textContent = stream.name;\n    streamNameOverlay.style.position = 'absolute';\n    streamNameOverlay.style.top = '10px';\n    streamNameOverlay.style.left = '10px';\n    streamNameOverlay.style.padding = '5px 10px';\n    streamNameOverlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n    streamNameOverlay.style.color = 'white';\n    streamNameOverlay.style.borderRadius = '4px';\n    streamNameOverlay.style.fontSize = '14px';\n    streamNameOverlay.style.zIndex = '15'; // Above video but below controls\n    streamNameOverlay.style.pointerEvents = 'none'; // Ensure stream name doesn't capture clicks\n\n    // Create stream controls\n    const streamControls = document.createElement('div');\n    streamControls.className = 'stream-controls';\n    streamControls.innerHTML = `\n      <button class=\"snapshot-btn\" title=\"Take Snapshot\" data-id=\"${streamId}\" data-name=\"${stream.name}\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z\"></path><circle cx=\"12\" cy=\"13\" r=\"4\"></circle></svg>\n      </button>\n      <button class=\"fullscreen-btn\" title=\"Toggle Fullscreen\" data-id=\"${streamId}\" data-name=\"${stream.name}\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\"></path></svg>\n      </button>\n    `;\n    streamControls.style.position = 'absolute';\n    streamControls.style.bottom = '10px';\n    streamControls.style.right = '10px';\n    streamControls.style.display = 'flex';\n    streamControls.style.gap = '10px';\n    streamControls.style.zIndex = '30'; // Above everything else\n    streamControls.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n    streamControls.style.padding = '5px';\n    streamControls.style.borderRadius = '4px';\n    streamControls.style.pointerEvents = 'auto'; // Ensure clicks are registered\n\n    // Add canvas for detection overlay\n    const canvasOverlay = document.createElement('canvas');\n    canvasOverlay.id = `canvas-${stream.name.replace(/\\s+/g, '-')}`;\n    canvasOverlay.className = 'detection-overlay';\n    canvasOverlay.style.position = 'absolute';\n    canvasOverlay.style.top = '0';\n    canvasOverlay.style.left = '0';\n    canvasOverlay.style.width = '100%';\n    canvasOverlay.style.height = '100%';\n    canvasOverlay.style.pointerEvents = 'none'; // Allow clicks to pass through\n    canvasOverlay.style.zIndex = '5'; // Above video but below controls\n\n    // Assemble the video cell\n    videoCell.appendChild(videoElement);\n    videoCell.appendChild(loadingIndicator);\n    videoCell.appendChild(errorIndicator);\n    videoCell.appendChild(streamNameOverlay);\n    videoCell.appendChild(streamControls);\n    videoCell.appendChild(canvasOverlay);\n\n    // Add to grid\n    videoGridRef.current.appendChild(videoCell);\n\n    // Make sure all buttons have proper z-index and pointer events\n    const allButtons = videoCell.querySelectorAll('button');\n    allButtons.forEach(button => {\n      button.style.position = 'relative';\n      button.style.zIndex = '30';\n      button.style.pointerEvents = 'auto';\n      button.style.cursor = 'pointer';\n      button.style.backgroundColor = 'transparent';\n      button.style.border = 'none';\n      button.style.padding = '5px';\n      button.style.borderRadius = '4px';\n      button.style.color = 'white';\n      button.style.transition = 'background-color 0.2s';\n\n      // Add hover effect\n      button.addEventListener('mouseover', () => {\n        button.style.backgroundColor = 'rgba(255, 255, 255, 0.2)';\n      });\n\n      button.addEventListener('mouseout', () => {\n        button.style.backgroundColor = 'transparent';\n      });\n    });\n\n    // Add event listeners for buttons\n    const snapshotBtn = videoCell.querySelector('.snapshot-btn');\n    if (snapshotBtn) {\n      snapshotBtn.addEventListener('click', (event) => {\n        console.log('Snapshot button clicked for stream:', stream.name);\n        event.preventDefault();\n        event.stopPropagation();\n        takeSnapshot(streamId, event);\n      });\n    }\n\n    const fullscreenBtn = videoCell.querySelector('.fullscreen-btn');\n    if (fullscreenBtn) {\n      fullscreenBtn.addEventListener('click', (event) => {\n        console.log('Fullscreen button clicked for stream:', stream.name);\n        event.preventDefault();\n        event.stopPropagation();\n        toggleStreamFullscreen(stream.name);\n      });\n    }\n  };\n\n  /**\n   * Initialize WebRTC player for a stream\n   * @param {Object} stream - Stream object\n   */\n  const initializeWebRTCPlayer = (stream) => {\n    const videoElementId = `video-${stream.name.replace(/\\s+/g, '-')}`;\n    const videoElement = document.getElementById(videoElementId);\n    const videoCell = videoElement ? videoElement.closest('.video-cell') : null;\n\n    if (!videoElement || !videoCell) return;\n\n    // Show loading state\n    const loadingIndicator = videoCell.querySelector('.loading-indicator');\n    if (loadingIndicator) {\n      loadingIndicator.style.display = 'flex';\n    }\n\n    // Create canvas overlay for detection bounding boxes\n    const canvasId = `canvas-${stream.name.replace(/\\s+/g, '-')}`;\n    let canvasOverlay = document.getElementById(canvasId);\n\n    if (!canvasOverlay) {\n      canvasOverlay = document.createElement('canvas');\n      canvasOverlay.id = canvasId;\n      canvasOverlay.className = 'detection-overlay';\n      canvasOverlay.style.position = 'absolute';\n      canvasOverlay.style.top = '0';\n      canvasOverlay.style.left = '0';\n      canvasOverlay.style.width = '100%';\n      canvasOverlay.style.height = '100%';\n      canvasOverlay.style.pointerEvents = 'none'; // Allow clicks to pass through\n      videoCell.appendChild(canvasOverlay);\n    }\n\n    // Create a new RTCPeerConnection with ICE servers\n    const pc = new RTCPeerConnection({\n      iceServers: [\n        { urls: 'stun:stun.l.google.com:19302' }\n      ],\n      // Add additional configuration to ensure proper ICE credentials\n      iceTransportPolicy: 'all',\n      bundlePolicy: 'balanced',\n      rtcpMuxPolicy: 'require',\n      sdpSemantics: 'unified-plan'\n    });\n\n    // Store the connection for cleanup\n    webrtcConnections.current[stream.name] = pc;\n\n    // Add event listeners\n    pc.ontrack = (event) => {\n      console.log(`Track received for stream ${stream.name}:`, event);\n      if (event.track.kind === 'video') {\n        videoElement.srcObject = event.streams[0];\n\n        // Hide loading indicator when video starts playing\n        videoElement.onloadeddata = () => {\n          if (loadingIndicator) {\n            loadingIndicator.style.display = 'none';\n          }\n        };\n      }\n    };\n\n    pc.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log(`ICE candidate for stream ${stream.name}:`, event.candidate);\n        // go2rtc doesn't use a separate ICE endpoint, so we don't need to send ICE candidates\n      }\n    };\n\n    pc.oniceconnectionstatechange = () => {\n      console.log(`ICE connection state for stream ${stream.name}:`, pc.iceConnectionState);\n      if (pc.iceConnectionState === 'failed' || pc.iceConnectionState === 'disconnected') {\n        // Handle connection failure\n        handleWebRTCError(stream.name, 'WebRTC connection failed');\n      }\n    };\n\n    // Add transceivers to ensure we get both audio and video tracks\n    pc.addTransceiver('video', {direction: 'recvonly'});\n    pc.addTransceiver('audio', {direction: 'recvonly'});\n\n    // Create an offer with specific codec requirements\n    const offerOptions = {\n      offerToReceiveAudio: true,\n      offerToReceiveVideo: true\n    };\n\n    // Create a timeout for the entire WebRTC setup process\n    const setupTimeoutId = setTimeout(() => {\n      console.warn(`WebRTC setup timed out for stream ${stream.name}`);\n      handleWebRTCError(stream.name, 'WebRTC setup timed out');\n\n      // Clean up the connection if it exists\n      if (webrtcConnections.current[stream.name]) {\n        cleanupWebRTCPlayer(stream.name);\n      }\n    }, 15000); // 15 second timeout for the entire setup process\n\n    pc.createOffer(offerOptions)\n      .then(offer => {\n        console.log(`Created offer for stream ${stream.name}:`, offer);\n\n        // Log the original SDP to ensure it has ice-ufrag and ice-pwd\n        console.log(`Original SDP for stream ${stream.name}:`, offer.sdp);\n\n        // Check if the SDP has ice-ufrag and ice-pwd\n        if (!offer.sdp.includes('a=ice-ufrag:') || !offer.sdp.includes('a=ice-pwd:')) {\n          console.warn(`SDP for stream ${stream.name} is missing ice-ufrag or ice-pwd!`);\n        }\n\n        // We'll use the original offer without modifications to preserve ice-ufrag and ice-pwd\n        console.log(`Using original offer for stream ${stream.name}`);\n        return pc.setLocalDescription(offer);\n      })\n      .then(() => {\n        console.log(`Set local description for stream ${stream.name}`);\n        // Send the offer to the server\n        return sendOffer(stream.name, pc.localDescription);\n      })\n      .then(answer => {\n        console.log(`Received answer for stream ${stream.name}:`, answer);\n        // Set the remote description\n        return pc.setRemoteDescription(new RTCSessionDescription(answer));\n      })\n      .then(() => {\n        console.log(`Set remote description for stream ${stream.name}`);\n\n        // Clear the setup timeout since we've successfully set up the connection\n        clearTimeout(setupTimeoutId);\n\n        // Start detection polling if detection is enabled for this stream\n        console.log(`Stream ${stream.name} detection settings:`, {\n          detection_based_recording: stream.detection_based_recording,\n          detection_model: stream.detection_model,\n          detection_threshold: stream.detection_threshold\n        });\n\n        if (stream.detection_based_recording && stream.detection_model) {\n          console.log(`Starting detection polling for stream ${stream.name}`);\n          startDetectionPolling(stream.name, canvasOverlay, videoElement, detectionIntervals.current);\n        } else {\n          console.log(`Detection not enabled for stream ${stream.name}`);\n        }\n      })\n      .catch(error => {\n        // Clear the setup timeout\n        clearTimeout(setupTimeoutId);\n\n        console.error(`Error setting up WebRTC for stream ${stream.name}:`, error);\n        handleWebRTCError(stream.name, error.message);\n      });\n  };\n\n  /**\n   * Send WebRTC offer to server\n   * @param {string} streamName - Stream name\n   * @param {RTCSessionDescription} offer - WebRTC offer\n   * @returns {Promise<RTCSessionDescription>} Promise resolving to WebRTC answer\n   */\n  const sendOffer = async (streamName, offer) => {\n    try {\n      // Get auth from localStorage\n      const auth = localStorage.getItem('auth');\n\n      // Send the offer to the server\n      // Format the offer according to go2rtc expectations\n      const formattedOffer = {\n        type: offer.type,\n        sdp: offer.sdp\n      };\n\n      console.log(`Sending formatted offer for stream ${streamName}:`, formattedOffer);\n\n      // Create an AbortController for the fetch request\n      const controller = new AbortController();\n      const signal = controller.signal;\n\n      // Set a timeout to abort the fetch after 8 seconds\n      const timeoutId = setTimeout(() => {\n        console.warn(`Aborting WebRTC offer request for stream ${streamName} due to timeout`);\n        controller.abort();\n      }, 8000);\n\n      try {\n        // Note: Session cookie is automatically included in fetch requests\n        // We only need to add the Authorization header if we have it in localStorage\n        const response = await fetch(`/api/webrtc?src=${encodeURIComponent(streamName)}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            ...(auth ? { 'Authorization': 'Basic ' + auth } : {})\n          },\n          body: JSON.stringify(formattedOffer),\n          signal: signal\n        });\n\n        // Clear the timeout since the request completed\n        clearTimeout(timeoutId);\n\n        if (!response.ok) {\n          throw new Error(`Failed to send offer: ${response.status} ${response.statusText}`);\n        }\n\n        // Create another AbortController for the JSON parsing\n        const jsonController = new AbortController();\n        const jsonSignal = jsonController.signal;\n\n        // Set a timeout to abort the JSON parsing after 5 seconds\n        const jsonTimeoutId = setTimeout(() => {\n          console.warn(`Aborting JSON parsing for stream ${streamName} due to timeout`);\n          jsonController.abort();\n        }, 5000);\n\n        try {\n          // Use a separate try/catch for the JSON parsing\n          const text = await response.text();\n\n          // Clear the JSON timeout\n          clearTimeout(jsonTimeoutId);\n\n          // Try to parse the JSON\n          try {\n            const answer = JSON.parse(text);\n            return answer;\n          } catch (jsonError) {\n            console.error(`Error parsing JSON for stream ${streamName}:`, jsonError);\n            console.log(`Raw response text: ${text}`);\n            throw new Error(`Failed to parse WebRTC answer: ${jsonError.message}`);\n          }\n        } catch (textError) {\n          // Clear the JSON timeout if it hasn't been cleared yet\n          clearTimeout(jsonTimeoutId);\n\n          if (textError.name === 'AbortError') {\n            throw new Error(`WebRTC answer parsing timed out for stream ${streamName}`);\n          }\n          throw textError;\n        }\n      } catch (fetchError) {\n        // Clear the timeout if it hasn't been cleared yet\n        clearTimeout(timeoutId);\n\n        if (fetchError.name === 'AbortError') {\n          throw new Error(`WebRTC offer request timed out for stream ${streamName}`);\n        }\n        throw fetchError;\n      }\n    } catch (error) {\n      console.error(`Error sending offer for stream ${streamName}:`, error);\n      throw error;\n    }\n  };\n\n  // ICE candidates are handled internally by the browser for go2rtc\n\n  /**\n   * Handle WebRTC error\n   * @param {string} streamName - Stream name\n   * @param {string} message - Error message\n   */\n  const handleWebRTCError = (streamName, message) => {\n    console.error(`WebRTC error for stream ${streamName}:`, message);\n\n    // Find the video cell\n    const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n    const videoElement = document.getElementById(videoElementId);\n    if (!videoElement) return;\n\n    const videoCell = videoElement.closest('.video-cell');\n    if (!videoCell) return;\n\n    // Hide loading indicator\n    const loadingIndicator = videoCell.querySelector('.loading-indicator');\n    if (loadingIndicator) {\n      loadingIndicator.style.display = 'none';\n    }\n\n    // Create error indicator if it doesn't exist\n    let errorIndicator = videoCell.querySelector('.error-indicator');\n    if (!errorIndicator) {\n      errorIndicator = document.createElement('div');\n      errorIndicator.className = 'error-indicator';\n      errorIndicator.style.position = 'absolute';\n      errorIndicator.style.top = '0';\n      errorIndicator.style.left = '0';\n      errorIndicator.style.width = '100%';\n      errorIndicator.style.height = '100%';\n      errorIndicator.style.display = 'flex';\n      errorIndicator.style.flexDirection = 'column';\n      errorIndicator.style.justifyContent = 'center';\n      errorIndicator.style.alignItems = 'center';\n      errorIndicator.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n      errorIndicator.style.color = 'white';\n      errorIndicator.style.zIndex = '20'; // Above video but below controls\n      videoCell.appendChild(errorIndicator);\n    }\n\n    errorIndicator.innerHTML = `\n      <div className=\"error-icon\">!</div>\n      <p>${message || 'WebRTC connection failed'}</p>\n      <button className=\"retry-button mt-4 px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\">Retry</button>\n    `;\n    errorIndicator.style.display = 'flex';\n    errorIndicator.style.pointerEvents = 'auto'; // Enable pointer events when visible to allow retry button clicks\n\n    // Make sure retry button is clickable\n    const retryButton = errorIndicator.querySelector('.retry-button');\n    if (retryButton) {\n      retryButton.style.position = 'relative';\n      retryButton.style.zIndex = '30';\n      retryButton.style.pointerEvents = 'auto';\n\n      retryButton.addEventListener('click', () => {\n        // Show loading indicator\n        if (loadingIndicator) {\n          loadingIndicator.style.display = 'flex';\n        }\n\n        // Hide error indicator\n        errorIndicator.style.display = 'none';\n\n        // Cleanup existing connection\n        cleanupWebRTCPlayer(streamName);\n\n        // Fetch stream info again and reinitialize\n        fetch(`/api/streams/${encodeURIComponent(streamName)}`)\n          .then(response => response.json())\n          .then(streamInfo => {\n            // Reinitialize\n            initializeWebRTCPlayer(streamInfo);\n          })\n          .catch(error => {\n            console.error('Error fetching stream info:', error);\n\n            // Show error indicator again with new message\n            errorIndicator.style.display = 'flex';\n            const errorMsg = errorIndicator.querySelector('p');\n            if (errorMsg) {\n              errorMsg.textContent = 'Could not reconnect: ' + error.message;\n            }\n\n            // Hide loading indicator\n            if (loadingIndicator) {\n              loadingIndicator.style.display = 'none';\n            }\n          });\n      });\n    }\n  };\n\n  /**\n   * Cleanup WebRTC player\n   * @param {string} streamName - Stream name\n   */\n  const cleanupWebRTCPlayer = (streamName) => {\n    // Close and remove the RTCPeerConnection\n    if (webrtcConnections.current[streamName]) {\n      webrtcConnections.current[streamName].close();\n      delete webrtcConnections.current[streamName];\n    }\n\n    // Reset video element\n    const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n    const videoElement = document.getElementById(videoElementId);\n    if (videoElement) {\n      videoElement.srcObject = null;\n    }\n\n    // Clean up detection polling\n    cleanupDetectionPolling(streamName, detectionIntervals.current);\n  };\n\n  /**\n   * Stop all WebRTC streams\n   */\n  const stopAllWebRTCStreams = () => {\n    // Close all RTCPeerConnections\n    Object.keys(webrtcConnections.current).forEach(streamName => {\n      cleanupWebRTCPlayer(streamName);\n    });\n  };\n\n/**\n * Take snapshot of a stream\n * @param {string} streamId - Stream ID\n * @param {Event} event - Click event\n */\nconst takeSnapshot = (streamId, event) => {\n  console.log(`Taking snapshot of stream with ID: ${streamId}`, event);\n\n  // Find the stream by button element\n  const streamElement = document.querySelector(`.snapshot-btn[data-id=\"${streamId}\"]`);\n  let streamName;\n\n  if (streamElement) {\n    // Get the stream name from the data attribute\n    streamName = streamElement.getAttribute('data-name');\n    console.log(`Found stream name from button attribute: ${streamName}`);\n  } else {\n    // If we can't find by data-id (which might be missing in the new UI),\n    // try to find the parent video cell and get the stream name\n    const clickedButton = event ? (event.currentTarget || event.target) : null;\n    console.log('Clicked button:', clickedButton);\n\n    const videoCell = clickedButton ? clickedButton.closest('.video-cell') : null;\n    console.log('Video cell:', videoCell);\n\n    if (videoCell) {\n      streamName = videoCell.dataset.streamName;\n      console.log(`Found stream name from video cell: ${streamName}`);\n    }\n\n    // If still not found, try to find the stream by ID in the streams array\n    if (!streamName) {\n      const stream = streams.find(s => s.id === streamId || s.name === streamId);\n      if (stream) {\n        streamName = stream.name;\n        console.log(`Found stream name from streams array: ${streamName}`);\n      }\n    }\n  }\n\n  if (!streamName) {\n    console.error('Stream name not found for snapshot');\n    showStatusMessage('Cannot take snapshot: Stream not identified');\n    return;\n  }\n\n  // Find the video element\n  const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n  const videoElement = document.getElementById(videoElementId);\n  if (!videoElement) {\n    console.error('Video element not found for stream:', streamName);\n    showStatusMessage('Cannot take snapshot: Video element not found');\n    return;\n  }\n\n  // Create a canvas element to capture the frame\n  const canvas = document.createElement('canvas');\n  canvas.width = videoElement.videoWidth;\n  canvas.height = videoElement.videoHeight;\n  canvas.style.pointerEvents = 'none'; // Ensure canvas doesn't capture clicks\n\n  // Check if we have valid dimensions\n  if (canvas.width === 0 || canvas.height === 0) {\n    console.error('Invalid video dimensions:', canvas.width, canvas.height);\n    showStatusMessage('Cannot take snapshot: Video not loaded or has invalid dimensions');\n    return;\n  }\n\n  // Draw the current frame to the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n\n  try {\n    // Save the canvas to global scope for direct access in the overlay\n    window.__snapshotCanvas = canvas;\n\n    // Generate a filename\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const fileName = `snapshot-${streamName.replace(/\\s+/g, '-')}-${timestamp}.jpg`;\n    window.__snapshotFileName = fileName;\n\n    // Show the standard preview\n    showSnapshotPreview(canvas.toDataURL('image/jpeg', 0.95), `Snapshot: ${streamName}`);\n\n    // Show success message\n    showStatusMessage('Snapshot taken successfully');\n  } catch (error) {\n    console.error('Error creating snapshot:', error);\n    showStatusMessage('Failed to create snapshot: ' + error.message);\n  }\n};\n\n  /**\n   * Toggle fullscreen mode for a specific stream\n   * @param {string} streamName - Stream name\n   */\n  const toggleStreamFullscreen = (streamName) => {\n    console.log(`Toggling fullscreen for stream: ${streamName}`);\n    const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n    const videoElement = document.getElementById(videoElementId);\n    const videoCell = videoElement ? videoElement.closest('.video-cell') : null;\n\n    if (!videoCell) {\n      console.error('Stream not found:', streamName);\n      return;\n    }\n\n    if (!document.fullscreenElement) {\n      console.log('Entering fullscreen mode for video cell');\n      videoCell.requestFullscreen().catch(err => {\n        console.error(`Error attempting to enable fullscreen: ${err.message}`);\n        showStatusMessage(`Could not enable fullscreen mode: ${err.message}`);\n      });\n    } else {\n      console.log('Exiting fullscreen mode');\n      document.exitFullscreen();\n    }\n  };\n\n  return (\n    <section id=\"live-page\" className={`page ${isFullscreen ? 'fullscreen-mode' : ''}`}>\n      <div className=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <div className=\"flex items-center space-x-2\">\n          <h2 className=\"text-xl font-bold mr-4\">Live View</h2>\n          <div className=\"flex space-x-2\">\n            <button\n              id=\"hls-toggle-btn\"\n              className=\"px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n              onClick={() => window.location.href = '/hls.html'}\n            >\n              HLS View\n            </button>\n          </div>\n        </div>\n        <div className=\"controls flex items-center space-x-2\">\n          <div className=\"flex items-center\">\n            <label for=\"layout-selector\" className=\"mr-2\">Layout:</label>\n            <select\n                id=\"layout-selector\"\n                className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600\"\n                value={layout}\n                onChange={(e) => {\n                  const newLayout = e.target.value;\n                  setLayout(newLayout);\n                  setCurrentPage(0); // Reset to first page when layout changes\n                  // URL will be updated by the useEffect hook\n                }}\n            >\n              <option value=\"1\">1 Stream</option>\n              <option value=\"2\">2 Streams</option>\n              <option value=\"4\" selected>4 Streams</option>\n              <option value=\"6\">6 Streams</option>\n              <option value=\"9\">9 Streams</option>\n              <option value=\"16\">16 Streams</option>\n            </select>\n          </div>\n\n          {layout === '1' && (\n              <div className=\"flex items-center\">\n                <label for=\"stream-selector\" className=\"mr-2\">Stream:</label>\n                <select\n                    id=\"stream-selector\"\n                    className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600\"\n                    value={selectedStream}\n                    onChange={(e) => {\n                      const newStream = e.target.value;\n                      setSelectedStream(newStream);\n                      // URL will be updated by the useEffect hook\n                    }}\n                >\n                  {streams.map(stream =>\n                      <option key={stream.name} value={stream.name}>{stream.name}</option>\n                  )}\n                </select>\n              </div>\n          )}\n\n          <button\n              id=\"fullscreen-btn\"\n              className=\"p-2 rounded-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none\"\n              onClick={() => toggleFullscreen(isFullscreen, setIsFullscreen)}\n              title=\"Toggle Fullscreen\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                 stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <path\n                  d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\"></path>\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      <div className=\"flex flex-col space-y-4\">\n        <div\n            id=\"video-grid\"\n            className={`video-container layout-${layout}`}\n            ref={videoGridRef}\n        >\n          {isLoading ? (\n              <div className=\"flex justify-center items-center col-span-full row-span-full h-64 w-full\">\n                <div className=\"flex flex-col items-center justify-center py-8\">\n                  <div\n                      className=\"inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16\"></div>\n                  <p className=\"mt-4 text-gray-700 dark:text-gray-300\">Loading streams...</p>\n              </div>\n            </div>\n          ) : streams.length === 0 ? (\n            <div className=\"placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8\">\n              <p className=\"mb-6 text-gray-600 dark:text-gray-300 text-lg\">No streams configured</p>\n              <a href=\"streams.html\" className=\"btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\">Configure Streams</a>\n            </div>\n          ) : null}\n          {/* Video cells will be dynamically added by the updateVideoGrid function */}\n        </div>\n\n        {layout !== '1' && streams.length > getMaxStreamsForLayout() ? (\n          <div className=\"pagination-controls flex justify-center items-center space-x-4 mt-4\">\n            <button\n              className=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              onClick={() => setCurrentPage(Math.max(0, currentPage - 1))}\n              disabled={currentPage === 0}\n            >\n              Previous\n            </button>\n            <span className=\"text-gray-700 dark:text-gray-300\">\n              Page {currentPage + 1} of {Math.ceil(streams.length / getMaxStreamsForLayout())}\n            </span>\n            <button\n              className=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              onClick={() => setCurrentPage(Math.min(Math.ceil(streams.length / getMaxStreamsForLayout()) - 1, currentPage + 1))}\n              disabled={currentPage >= Math.ceil(streams.length / getMaxStreamsForLayout()) - 1}\n            >\n              Next\n            </button>\n          </div>\n        ) : null}\n      </div>\n    </section>\n  );\n}\n","/**\n * LightNVR Web Interface Live View Page\n * Entry point for the live view page with WebRTC/HLS support\n */\n\nimport { render } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { LiveView } from '../components/preact/LiveView.jsx';\nimport { WebRTCView } from '../components/preact/WebRTCView.jsx';\nimport { QueryClientProvider, queryClient } from '../query-client.js';\nimport { Header } from \"../components/preact/Header.jsx\";\nimport { Footer } from \"../components/preact/Footer.jsx\";\n\n/**\n * Main App component that conditionally renders WebRTCView or LiveView\n * based on whether WebRTC is disabled in settings\n */\nfunction App() {\n    const [isWebRTCDisabled, setIsWebRTCDisabled] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        // Check if WebRTC is disabled in settings\n        async function checkWebRTCStatus() {\n            try {\n                const response = await fetch('/api/settings');\n                if (!response.ok) {\n                    console.error('Failed to fetch settings:', response.status, response.statusText);\n                    setIsLoading(false);\n                    return;\n                }\n\n                const settings = await response.json();\n                \n                if (settings.webrtc_disabled) {\n                    console.log('WebRTC is disabled, using HLS view');\n                    setIsWebRTCDisabled(true);\n                } else {\n                    console.log('WebRTC is enabled, using WebRTC view');\n                    setIsWebRTCDisabled(false);\n                }\n            } catch (error) {\n                console.error('Error checking WebRTC status:', error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n\n        checkWebRTCStatus();\n    }, []);\n\n    if (isLoading) {\n        return <div className=\"loading\">Loading...</div>;\n    }\n\n    return (\n        <>\n            <Header />\n            {isWebRTCDisabled ? <LiveView isWebRTCDisabled={true} /> : <WebRTCView />}\n            <Footer />\n        </>\n    );\n}\n\n// Render the App component when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Get the container element\n    const container = document.getElementById('main-content');\n\n    if (container) {\n        render(\n            <QueryClientProvider client={queryClient}>\n                <App />\n            </QueryClientProvider>,\n            container\n        );\n    }\n});\n"],"names":["WebRTCView","streams","setStreams","useState","layout","setLayout","URLSearchParams","window","location","search","get","selectedStream","setSelectedStream","isFullscreen","setIsFullscreen","isLoading","setIsLoading","currentPage","setCurrentPage","pageParam","Math","max","parseInt","videoGridRef","useRef","webrtcConnections","detectionIntervals","useEffect","setupModals","addStatusMessageStyles","addModalStyles","connectionCheckInterval","setInterval","Object","keys","current","forEach","streamName","pc","console","debug","connectionState","iceConnectionState","warn","cleanupWebRTCPlayer","stream","find","s","name","log","initializeWebRTCPlayer","clearInterval","stopAllWebRTCStreams","timeoutId","setTimeout","showStatusMessage","loadStreams","then","streamData","clearTimeout","length","streamParam","some","catch","error","message","async","timeoutPromise","Promise","_","reject","Error","fetchPromise","fetch","response","race","ok","jsonTimeoutPromise","jsonPromise","json","streamPromises","map","detailsTimeoutPromise","detailsFetchPromise","encodeURIComponent","id","detailedStreams","all","filteredStreams","filter","is_deleted","enabled","streaming_enabled","getMaxStreamsForLayout","videoElementId","replace","videoElement","document","getElementById","videoCell","closest","loadingIndicator","querySelector","style","display","canvasId","canvasOverlay","createElement","className","position","top","left","width","height","pointerEvents","appendChild","RTCPeerConnection","iceServers","urls","iceTransportPolicy","bundlePolicy","rtcpMuxPolicy","sdpSemantics","ontrack","event","track","kind","srcObject","onloadeddata","onicecandidate","candidate","oniceconnectionstatechange","handleWebRTCError","addTransceiver","direction","setupTimeoutId","createOffer","offerToReceiveAudio","offerToReceiveVideo","offer","sdp","includes","setLocalDescription","sendOffer","localDescription","answer","setRemoteDescription","RTCSessionDescription","detection_based_recording","detection_model","detection_threshold","startDetectionPolling","auth","localStorage","getItem","formattedOffer","type","controller","AbortController","signal","abort","method","headers","Authorization","body","JSON","stringify","status","statusText","jsonController","jsonTimeoutId","text","parse","jsonError","textError","fetchError","errorIndicator","flexDirection","justifyContent","alignItems","backgroundColor","color","zIndex","innerHTML","retryButton","addEventListener","streamInfo","errorMsg","textContent","close","cleanupDetectionPolling","jsxs","children","jsx","onClick","href","for","value","onChange","e","newLayout","target","selected","newStream","toggleFullscreen","title","xmlns","viewBox","fill","stroke","d","ref","disabled","ceil","min","App","isWebRTCDisabled","setIsWebRTCDisabled","webrtc_disabled","checkWebRTCStatus","Fragment","Header","LiveView","Footer","container","render","QueryClientProvider","client","queryClient"],"mappings":"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"}