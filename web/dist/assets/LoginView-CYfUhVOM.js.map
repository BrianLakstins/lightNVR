{"version":3,"mappings":";8NAeO,SAASA,GAAY,CAC1B,KAAM,CAACC,EAAUC,CAAW,EAAIC,EAAS,EAAE,EACrC,CAACC,EAAUC,CAAW,EAAIF,EAAS,EAAE,EACrC,CAACG,EAAaC,CAAc,EAAIJ,EAAS,EAAK,EAC9C,CAACK,EAAcC,CAAe,EAAIN,EAAS,EAAE,EAGnDA,EAAS,IAAM,CACb,MAAMO,EAAY,IAAI,gBAAgB,OAAO,SAAS,MAAM,EACxDA,EAAU,IAAI,OAAO,EACvBD,EAAgB,8BAA8B,EACrCC,EAAU,IAAI,eAAe,GACtCD,EAAgB,qDAAqD,CAE3E,CAAO,EAGL,MAAME,EAAuBC,EAAO,IAAI,EAGlCC,EAAc,MAAOC,GAAM,OAG/B,GAFAA,EAAE,eAAgB,EAEd,CAACb,GAAY,CAACG,EAAU,CAC1BK,EAAgB,yCAAyC,EACzD,MACN,CAEIF,EAAe,EAAI,EAGnBI,EAAqB,QAAUI,EAAyB,EAGxD,MAAMC,EAAO,KAAK,GAAG,OAAAf,EAAQ,KAAI,OAAAG,EAAU,EAC3C,aAAa,QAAQ,OAAQY,CAAI,EAEjC,GAAI,CAEF,MAAMC,EAAW,MAAMC,EAAc,kBAAmB,CACtD,OAAQ,OACR,QAAS,CACP,eAAgB,mBAChB,cAAiB,SAAWF,EAE5B,mBAAoB,iBACpB,OAAU,kBACX,EACD,KAAM,KAAK,UAAU,CAAE,SAAAf,EAAU,SAAAG,CAAQ,CAAE,EAC3C,YAAa,UACb,KAAM,cACN,QAAQe,EAAAR,EAAqB,UAArB,YAAAQ,EAA8B,OACtC,QAAS,IACT,QAAS,EACT,WAAY,GACpB,CAAO,EAEGF,EAAS,IAAMA,EAAS,SAAW,IAErC,OAAO,SAAS,KAAO,iBAAmB,IAAI,KAAM,EAAC,QAAS,GAG9DV,EAAe,EAAK,EACpBE,EAAgB,8BAA8B,EAC9C,aAAa,WAAW,MAAM,EAEjC,OAAQW,EAAO,CACd,QAAQ,MAAM,eAAgBA,CAAK,EAG/BA,EAAM,UAAY,qBAAuB,aAAa,QAAQ,MAAM,GACtE,QAAQ,IAAI,6DAA6D,EACzE,OAAO,SAAS,KAAO,iBAAmB,IAAI,KAAM,EAAC,QAAS,GAGvD,aAAa,QAAQ,MAAM,GAClC,QAAQ,IAAI,yDAAyD,EACrE,OAAO,SAAS,KAAO,iBAAmB,IAAI,KAAM,EAAC,QAAS,IAE9Db,EAAe,EAAK,EACpBE,EAAgB,iCAAiC,EAEzD,CACG,EAED,OAAOY,EAAAC,MAAIC,EAAA,gaAYJ,+GAEoG,ggBAS/E,4BAC2B,omBAa3B,4BAC2B,geASrB,kCAEqB,8UAzC/Cf,GAAgBa,EAAAF,MAAII,EAAA,yHAEJ,kCAAZf,GAIoFK,EAS5EZ,EACGa,GAAKZ,EAAYY,EAAE,OAAO,KAAK,EAalCV,EACGU,GAAKT,EAAYS,EAAE,OAAO,KAAK,EAS/BR,EAETA,EAAc,gBAAkB,UAYhD,OAKO,SAASkB,GAAgB,CAC9B,MAAMC,EAAc,SAAS,eAAe,cAAc,EACrDA,GAGLC,EAAA,uBAAAC,CAAA,eAAO,0BAAqB,OAAAC,KAAA,iBAAAD,CAAA,2CAAE,KAAK,CAAC,CAAE,OAAAA,KAAa,CACjDA,EAAON,EAAAQ,MAAIN,EAAA,KAAa,SAATvB,GAAgByB,CAAW,CAC9C,CAAG,CACH","names":["LoginView","username","setUsername","useState","password","setPassword","isLoggingIn","setIsLoggingIn","errorMessage","setErrorMessage","urlParams","requestControllerRef","useRef","handleLogin","e","createRequestController","auth","response","enhancedFetch","_a","error","html","_b","__template","loadLoginView","mainContent","__vitePreload","render","n","_c"],"ignoreList":[],"sources":["../../js/components/preact/LoginView.js"],"sourcesContent":["/**\n * LightNVR Web Interface LoginView Component\n * Preact component for the login page\n */\n\nimport { h } from '../../preact.min.js';\nimport { html } from '../../html-helper.js';\nimport { useState, useRef } from '../../preact.hooks.module.js';\nimport { showStatusMessage } from './UI.js';\nimport { enhancedFetch, createRequestController } from '../../fetch-utils.js';\n\n/**\n * LoginView component\n * @returns {JSX.Element} LoginView component\n */\nexport function LoginView() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  \n  // Check URL for error or auth_required parameter\n  useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.has('error')) {\n      setErrorMessage('Invalid username or password');\n    } else if (urlParams.has('auth_required')) {\n      setErrorMessage('Authentication required. Please log in to continue.');\n    }\n  }, []);\n  \n  // Request controller for cancelling requests\n  const requestControllerRef = useRef(null);\n\n  // Handle login form submission\n  const handleLogin = async (e) => {\n    e.preventDefault();\n    \n    if (!username || !password) {\n      setErrorMessage('Please enter both username and password');\n      return;\n    }\n    \n    setIsLoggingIn(true);\n    \n    // Create a new request controller\n    requestControllerRef.current = createRequestController();\n    \n    // Store credentials in localStorage for future requests\n    const auth = btoa(`${username}:${password}`);\n    localStorage.setItem('auth', auth);\n    \n    try {\n      // Make a fetch request to the login API using enhanced fetch\n      const response = await enhancedFetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Basic ' + auth,\n          // Add additional headers for Firefox compatibility\n          'X-Requested-With': 'XMLHttpRequest',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({ username, password }),\n        credentials: 'include',\n        mode: 'same-origin', // Explicitly set mode for Firefox\n        signal: requestControllerRef.current?.signal,\n        timeout: 5000,     // 5 second timeout\n        retries: 1,        // Retry once\n        retryDelay: 1000   // 1 second between retries\n      });\n      \n      if (response.ok || response.status === 302) {\n        // Successful login - redirect to live page\n        window.location.href = '/index.html?t=' + new Date().getTime();\n      } else {\n        // Failed login\n        setIsLoggingIn(false);\n        setErrorMessage('Invalid username or password');\n        localStorage.removeItem('auth');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      \n      // If it's a timeout error, proceed anyway with stored credentials\n      if (error.message === 'Request timed out' && localStorage.getItem('auth')) {\n        console.log('Login request timed out, proceeding with stored credentials');\n        window.location.href = '/index.html?t=' + new Date().getTime();\n      } \n      // For other errors, also try to proceed if we have credentials\n      else if (localStorage.getItem('auth')) {\n        console.log('Login API error, but proceeding with stored credentials');\n        window.location.href = '/index.html?t=' + new Date().getTime();\n      } else {\n        setIsLoggingIn(false);\n        setErrorMessage('Login failed. Please try again.');\n      }\n    }\n  };\n  \n  return html`\n    <section id=\"login-page\" class=\"page flex items-center justify-center min-h-screen\">\n      <div class=\"login-container w-full max-w-md p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg\">\n        <div class=\"text-center mb-8\">\n          <h1 class=\"text-2xl font-bold\">LightNVR</h1>\n          <p class=\"text-gray-600 dark:text-gray-400\">Please sign in to continue</p>\n        </div>\n        \n        ${errorMessage && html`\n          <div class=\"mb-4 p-3 bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-200 rounded-lg\">\n            ${errorMessage}\n          </div>\n        `}\n        \n        <form id=\"login-form\" class=\"space-y-6\" action=\"/api/auth/login\" method=\"POST\" onSubmit=${handleLogin}>\n          <div class=\"form-group\">\n            <label for=\"username\" class=\"block text-sm font-medium mb-1\">Username</label>\n            <input \n              type=\"text\" \n              id=\"username\" \n              name=\"username\"\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n              placeholder=\"Enter your username\" \n              value=${username}\n              onChange=${e => setUsername(e.target.value)}\n              required\n              autocomplete=\"username\"\n            />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\" class=\"block text-sm font-medium mb-1\">Password</label>\n            <input \n              type=\"password\" \n              id=\"password\" \n              name=\"password\"\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n              placeholder=\"Enter your password\" \n              value=${password}\n              onChange=${e => setPassword(e.target.value)}\n              required\n              autocomplete=\"current-password\"\n            />\n          </div>\n          <div class=\"form-group\">\n            <button \n              type=\"submit\" \n              class=\"w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              disabled=${isLoggingIn}\n            >\n              ${isLoggingIn ? 'Signing in...' : 'Sign In'}\n            </button>\n          </div>\n        </form>\n        \n        <div class=\"mt-6 text-center text-sm text-gray-600 dark:text-gray-400\">\n          <p>Default credentials: admin / admin</p>\n          <p class=\"mt-2\">You can change these in Settings after login</p>\n        </div>\n      </div>\n    </section>\n  `;\n}\n\n/**\n * Load LoginView component\n */\nexport function loadLoginView() {\n  const mainContent = document.getElementById('main-content');\n  if (!mainContent) return;\n  \n  // Render the LoginView component to the container\n  import('../../preact.min.js').then(({ render }) => {\n    render(html`<${LoginView} />`, mainContent);\n  });\n}\n"],"file":"assets/LoginView-CYfUhVOM.js"}