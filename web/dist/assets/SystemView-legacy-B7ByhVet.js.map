{"version":3,"file":"SystemView-legacy-B7ByhVet.js","sources":["../../js/components/preact/system/SystemControls.js","../../js/components/preact/system/SystemInfo.js","../../js/components/preact/system/MemoryStorage.js","../../js/components/preact/system/StreamStorage.js","../../js/components/preact/system/NetworkInfo.js","../../js/components/preact/system/StreamsInfo.js","../../js/components/preact/system/LogsView.js","../../js/components/preact/system/SystemUtils.js","../../js/components/preact/system/LogsPoller.js","../../js/components/preact/SystemView.js"],"sourcesContent":["/**\n * SystemControls Component\n * Provides system restart and shutdown controls\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\n\n/**\n * SystemControls component\n * @param {Object} props Component props\n * @param {Function} props.restartSystem Function to restart the system\n * @param {Function} props.shutdownSystem Function to shut down the system\n * @param {boolean} props.isRestarting Whether the system is currently restarting\n * @param {boolean} props.isShuttingDown Whether the system is currently shutting down\n * @returns {JSX.Element} SystemControls component\n */\nexport function SystemControls({ restartSystem, shutdownSystem, isRestarting, isShuttingDown }) {\n  return html`\n    <div class=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n      <h2 class=\"text-xl font-bold\">System</h2>\n      <div class=\"controls space-x-2\">\n        <button \n          id=\"restart-btn\" \n          class=\"px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700 transition-colors focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n          onClick=${restartSystem}\n          disabled=${isRestarting || isShuttingDown}\n        >\n          Restart\n        </button>\n        <button \n          id=\"shutdown-btn\" \n          class=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n          onClick=${shutdownSystem}\n          disabled=${isRestarting || isShuttingDown}\n        >\n          Shutdown\n        </button>\n      </div>\n    </div>\n  `;\n}\n","/**\n * SystemInfo Component\n * Displays basic system information like version, uptime, and CPU details\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\n\n/**\n * SystemInfo component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @param {Function} props.formatUptime Function to format uptime\n * @returns {JSX.Element} SystemInfo component\n */\nexport function SystemInfo({ systemInfo, formatUptime }) {\n  return html`\n    <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 class=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">System Information</h3>\n      <div class=\"space-y-2\">\n        <div class=\"flex justify-between\">\n          <span class=\"font-medium\">Version:</span>\n          <span>${systemInfo.version || 'Unknown'}</span>\n        </div>\n        <div class=\"flex justify-between\">\n          <span class=\"font-medium\">Uptime:</span>\n          <span>${systemInfo.uptime ? formatUptime(systemInfo.uptime) : 'Unknown'}</span>\n        </div>\n        <div class=\"flex justify-between\">\n          <span class=\"font-medium\">CPU Model:</span>\n          <span>${systemInfo.cpu?.model || 'Unknown'}</span>\n        </div>\n        <div class=\"flex justify-between\">\n          <span class=\"font-medium\">CPU Cores:</span>\n          <span>${systemInfo.cpu?.cores || 'Unknown'}</span>\n        </div>\n        <div class=\"flex justify-between items-center\">\n          <span class=\"font-medium\">CPU Usage:</span>\n          <div class=\"w-32 bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n            <div class=\"bg-blue-600 h-2.5 rounded-full\" style=${`width: ${systemInfo.cpu?.usage || 0}%`}></div>\n          </div>\n          <span>${systemInfo.cpu?.usage ? `${systemInfo.cpu.usage.toFixed(1)}%` : 'Unknown'}</span>\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * MemoryStorage Component\n * Displays memory and storage information with progress bars\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\n\n/**\n * MemoryStorage component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @param {Function} props.formatBytes Function to format bytes to human-readable size\n * @returns {JSX.Element} MemoryStorage component\n */\nexport function MemoryStorage({ systemInfo, formatBytes }) {\n  // Get memory usage values\n  const lightNvrMemoryUsed = systemInfo.memory?.used || 0;\n  const go2rtcMemoryUsed = systemInfo.go2rtcMemory?.used || 0;\n  const totalSystemMemory = systemInfo.memory?.total || 0;\n  \n  // Calculate combined memory usage\n  const combinedMemoryUsed = lightNvrMemoryUsed + go2rtcMemoryUsed;\n  \n  // Calculate the percentage of total system memory used by both processes combined\n  const combinedMemoryPercent = totalSystemMemory ? \n    (combinedMemoryUsed / totalSystemMemory * 100).toFixed(1) : 0;\n  \n  // Calculate the percentage of each process relative to their combined usage\n  // This ensures the slivers add up to the total width of the progress bar\n  const lightNvrSlicePercent = combinedMemoryUsed ? \n    (lightNvrMemoryUsed / combinedMemoryUsed * 100).toFixed(1) : 0;\n  \n  const go2rtcSlicePercent = combinedMemoryUsed ? \n    (go2rtcMemoryUsed / combinedMemoryUsed * 100).toFixed(1) : 0;\n  \n  // These variables ensure the slivers add up to 100% of the combined usage bar\n  \n  return html`\n    <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 class=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Memory & Storage</h3>\n      <div class=\"space-y-4\">\n        <div>\n          <div class=\"flex justify-between mb-1\">\n            <span class=\"font-medium\">Process Memory:</span>\n            <div>\n              <span class=\"inline-block px-2 py-0.5 mr-1 text-xs rounded bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">\n                LightNVR: ${formatBytes(lightNvrMemoryUsed)}\n              </span>\n              <span class=\"inline-block px-2 py-0.5 text-xs rounded bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                go2rtc: ${formatBytes(go2rtcMemoryUsed)}\n              </span>\n            </div>\n          </div>\n          <div class=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1\">\n            <span>Combined: ${formatBytes(combinedMemoryUsed)} / ${formatBytes(totalSystemMemory)}</span>\n            <span>${combinedMemoryPercent}% of total memory</span>\n          </div>\n          <div class=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 overflow-hidden\">\n            <div class=\"flex h-full\" style=${`width: ${combinedMemoryPercent}%`}>\n              <div class=\"bg-blue-600 h-2.5\" style=${`width: ${lightNvrSlicePercent}%`}></div>\n              <div class=\"bg-green-500 h-2.5\" style=${`width: ${go2rtcSlicePercent}%`}></div>\n            </div>\n          </div>\n        </div>\n        <div>\n          <div class=\"flex justify-between mb-1\">\n            <span class=\"font-medium\">System Memory:</span>\n            <span>${systemInfo.systemMemory?.used ? formatBytes(systemInfo.systemMemory.used) : '0'} / ${systemInfo.systemMemory?.total ? formatBytes(systemInfo.systemMemory.total) : '0'}</span>\n          </div>\n          <div class=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n            <div class=\"bg-blue-600 h-2.5 rounded-full\" style=${`width: ${systemInfo.systemMemory?.total ? (systemInfo.systemMemory.used / systemInfo.systemMemory.total * 100).toFixed(1) : 0}%`}></div>\n          </div>\n        </div>\n        <div>\n          <div class=\"flex justify-between mb-1\">\n            <span class=\"font-medium\">LightNVR Storage:</span>\n            <span>${systemInfo.disk?.used ? formatBytes(systemInfo.disk.used) : '0'} / ${systemInfo.disk?.total ? formatBytes(systemInfo.disk.total) : '0'}</span>\n          </div>\n          <div class=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n            <div class=\"bg-blue-600 h-2.5 rounded-full\" style=${`width: ${systemInfo.disk?.total ? (systemInfo.disk.used / systemInfo.disk.total * 100).toFixed(1) : 0}%`}></div>\n          </div>\n        </div>\n        <div>\n          <div class=\"flex justify-between mb-1\">\n            <span class=\"font-medium\">System Storage:</span>\n            <span>${systemInfo.systemDisk?.used ? formatBytes(systemInfo.systemDisk.used) : '0'} / ${systemInfo.systemDisk?.total ? formatBytes(systemInfo.systemDisk.total) : '0'}</span>\n          </div>\n          <div class=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n            <div class=\"bg-blue-600 h-2.5 rounded-full\" style=${`width: ${systemInfo.systemDisk?.total ? (systemInfo.systemDisk.used / systemInfo.systemDisk.total * 100).toFixed(1) : 0}%`}></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * StreamStorage Component\n * Displays storage usage per stream with slivers in a progress bar\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\n\n/**\n * StreamStorage component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @param {Function} props.formatBytes Function to format bytes to human-readable size\n * @returns {JSX.Element} StreamStorage component\n */\nexport function StreamStorage({ systemInfo, formatBytes }) {\n  // Check if stream storage information is available\n  if (!systemInfo.streamStorage || !Array.isArray(systemInfo.streamStorage) || systemInfo.streamStorage.length === 0) {\n    return html`\n      <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n        <h3 class=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Stream Storage</h3>\n        <div class=\"text-gray-500 dark:text-gray-400 text-center py-4\">\n          No stream storage information available\n        </div>\n      </div>\n    `;\n  }\n\n  // Calculate total storage used by all streams\n  const totalStreamStorage = systemInfo.streamStorage.reduce((total, stream) => total + stream.size, 0);\n  \n  // Calculate the percentage of total disk space used by all streams\n  const totalDiskSpace = systemInfo.disk?.total || 0;\n  const totalStreamStoragePercent = totalDiskSpace ? \n    (totalStreamStorage / totalDiskSpace * 100).toFixed(1) : 0;\n  \n  // Calculate the percentage of each stream relative to the total stream storage\n  const streamStorageData = systemInfo.streamStorage.map(stream => ({\n    name: stream.name,\n    size: stream.size,\n    count: stream.count,\n    slicePercent: totalStreamStorage ? (stream.size / totalStreamStorage * 100).toFixed(1) : 0\n  }));\n  \n  // Sort streams by size (largest first)\n  streamStorageData.sort((a, b) => b.size - a.size);\n  \n  // Generate a color for each stream\n  const colors = [\n    'bg-blue-600',\n    'bg-green-500',\n    'bg-yellow-500',\n    'bg-red-500',\n    'bg-purple-500',\n    'bg-pink-500',\n    'bg-indigo-500',\n    'bg-teal-500'\n  ];\n  \n  return html`\n    <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 class=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Stream Storage</h3>\n      \n      <div class=\"space-y-4\">\n        <div>\n          <div class=\"flex justify-between mb-1\">\n            <span class=\"font-medium\">Storage per Stream:</span>\n            <div class=\"flex flex-wrap justify-end gap-1\">\n              ${streamStorageData.map((stream, index) => html`\n                <span class=\"inline-block px-2 py-0.5 text-xs rounded ${colors[index % colors.length].replace('bg-', 'bg-opacity-20 bg-')} ${colors[index % colors.length].replace('bg-', 'text-')}\">\n                  ${stream.name}: ${formatBytes(stream.size)}\n                </span>\n              `)}\n            </div>\n          </div>\n          \n          <div class=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1\">\n            <span>Combined: ${formatBytes(totalStreamStorage)} / ${formatBytes(totalDiskSpace)}</span>\n            <span>${totalStreamStoragePercent}% of total storage</span>\n          </div>\n          \n          <div class=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 overflow-hidden\">\n            <div class=\"flex h-full\" style=${`width: ${totalStreamStoragePercent}%`}>\n              ${streamStorageData.map((stream, index) => html`\n                <div class=\"${colors[index % colors.length]} h-2.5\" style=${`width: ${stream.slicePercent}%`}></div>\n              `)}\n            </div>\n          </div>\n          \n          <div class=\"mt-4\">\n            <h4 class=\"font-medium mb-2\">Stream Details:</h4>\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n              ${streamStorageData.map((stream, index) => html`\n                <a href=\"recordings.html?stream=${encodeURIComponent(stream.name)}\" \n                   class=\"flex items-center p-2 rounded bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors cursor-pointer\">\n                  <div class=\"w-3 h-3 rounded-full mr-2 ${colors[index % colors.length]}\"></div>\n                  <div>\n                    <div class=\"font-medium\">${stream.name}</div>\n                    <div class=\"text-xs text-gray-500 dark:text-gray-400\">\n                      ${formatBytes(stream.size)} (${stream.slicePercent}%) • ${stream.count} recordings\n                    </div>\n                  </div>\n                </a>\n              `)}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * NetworkInfo Component\n * Displays network interface information\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\n\n/**\n * NetworkInfo component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @returns {JSX.Element} NetworkInfo component\n */\nexport function NetworkInfo({ systemInfo }) {\n  return html`\n    <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 class=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Network Interfaces</h3>\n      <div class=\"space-y-2\">\n        ${systemInfo.network?.interfaces?.length ? systemInfo.network.interfaces.map(iface => html`\n          <div key=${iface.name} class=\"mb-2 pb-2 border-b border-gray-100 dark:border-gray-700 last:border-0\">\n            <div class=\"flex justify-between\">\n              <span class=\"font-medium\">${iface.name}:</span>\n              <span>${iface.address || 'No IP'}</span>\n            </div>\n            <div class=\"text-sm text-gray-500 dark:text-gray-400\">\n              MAC: ${iface.mac || 'Unknown'} | ${iface.up ? 'Up' : 'Down'}\n            </div>\n          </div>\n        `) : html`<div class=\"text-gray-500 dark:text-gray-400\">No network interfaces found</div>`}\n      </div>\n    </div>\n  `;\n}\n","/**\n * StreamsInfo Component\n * Displays information about streams and recordings\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\n\n/**\n * StreamsInfo component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @param {Function} props.formatBytes Function to format bytes to human-readable size\n * @returns {JSX.Element} StreamsInfo component\n */\nexport function StreamsInfo({ systemInfo, formatBytes }) {\n  return html`\n    <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 class=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Streams & Recordings</h3>\n      <div class=\"space-y-2\">\n        <div class=\"flex justify-between\">\n          <span class=\"font-medium\">Active Streams:</span>\n          <span>${systemInfo.streams?.active || 0} / ${systemInfo.streams?.total || 0}</span>\n        </div>\n        <div class=\"flex justify-between\">\n          <span class=\"font-medium\">Recordings:</span>\n          <span>${systemInfo.recordings?.count || 0}</span>\n        </div>\n        <div class=\"flex justify-between\">\n          <span class=\"font-medium\">Recordings Size:</span>\n          <span>${systemInfo.recordings?.size ? formatBytes(systemInfo.recordings.size) : '0'}</span>\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * LogsView Component\n * Displays and manages system logs\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\n\n/**\n * Format log level with appropriate styling\n * \n * @param {string} level Log level\n * @returns {JSX.Element} Formatted log level badge\n */\nfunction formatLogLevel(level) {\n  // Handle null or undefined level\n  if (level === null || level === undefined) {\n    return html`<span class=\"px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\">UNKNOWN</span>`;\n  }\n  \n  // Convert to lowercase string for case-insensitive comparison\n  const levelLower = String(level).toLowerCase().trim();\n  \n  // Match against known log levels\n  if (levelLower === 'error' || levelLower === 'err') {\n    return html`<span class=\"px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\">ERROR</span>`;\n  } else if (levelLower === 'warning' || levelLower === 'warn') {\n    return html`<span class=\"px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\">WARN</span>`;\n  } else if (levelLower === 'info') {\n    return html`<span class=\"px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">INFO</span>`;\n  } else if (levelLower === 'debug' || levelLower === 'dbg') {\n    return html`<span class=\"px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\">DEBUG</span>`;\n  } else {\n    // For any other value, display it as is (uppercase)\n    const levelText = String(level).toUpperCase();\n    return html`<span class=\"px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\">${levelText}</span>`;\n  }\n}\n\n/**\n * LogsView component\n * @param {Object} props Component props\n * @param {Array} props.logs Array of log entries\n * @param {string} props.logLevel Current log level filter\n * @param {number} props.logCount Number of logs to display\n * @param {Function} props.setLogLevel Function to set log level\n * @param {Function} props.setLogCount Function to set log count\n * @param {Function} props.loadLogs Function to load logs\n * @param {Function} props.clearLogs Function to clear logs\n * @returns {JSX.Element} LogsView component\n */\nexport function LogsView({ logs, logLevel, logCount, setLogLevel, setLogCount, loadLogs, clearLogs }) {\n  return html`\n    <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4 mb-4\">\n      <div class=\"flex justify-between items-center mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">\n        <h3 class=\"text-lg font-semibold\">System Logs</h3>\n        <div class=\"flex space-x-2\">\n          <select \n            id=\"log-level\" \n            class=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n            value=${logLevel}\n            onChange=${e => {\n              const newLevel = e.target.value;\n              console.log(`LogsView: Log level changed from ${logLevel} to ${newLevel}`);\n              setLogLevel(newLevel);\n            }}\n          >\n            <option value=\"error\">Error</option>\n            <option value=\"warning\">Warning</option>\n            <option value=\"info\">Info</option>\n            <option value=\"debug\">Debug</option>\n          </select>\n          <select \n            id=\"log-count\" \n            class=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n            value=${logCount}\n            onChange=${e => setLogCount(parseInt(e.target.value, 10))}\n          >\n            <option value=\"50\">50 lines</option>\n            <option value=\"100\">100 lines</option>\n            <option value=\"200\">200 lines</option>\n            <option value=\"500\">500 lines</option>\n          </select>\n          <button \n            id=\"refresh-logs-btn\" \n            class=\"px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n            onClick=${loadLogs}\n          >\n            Refresh\n          </button>\n          <button \n            id=\"clear-logs-btn\" \n            class=\"px-3 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n            onClick=${clearLogs}\n          >\n            Clear Logs\n          </button>\n        </div>\n      </div>\n      <div class=\"logs-container bg-gray-100 dark:bg-gray-900 rounded p-4 overflow-auto max-h-96 font-mono text-sm\">\n        ${logs.length === 0 ? html`\n          <div class=\"text-gray-500 dark:text-gray-400\">No logs found</div>\n        ` : logs.map((log, index) => html`\n          <div key=${index} class=\"log-entry mb-1 last:mb-0\">\n            <span class=\"text-gray-500 dark:text-gray-400\">${log.timestamp}</span>\n            <span class=\"mx-2\">${formatLogLevel(log.level)}</span>\n            <span class=${`log-message ${log.level === 'error' ? 'text-red-600 dark:text-red-400' : ''}`}>${log.message}</span>\n          </div>\n        `)}\n      </div>\n    </div>\n  `;\n}\n","/**\n * SystemUtils\n * Utility functions for the system components\n */\n\n/**\n * Format bytes to human-readable size\n * \n * @param {number} bytes Number of bytes\n * @param {number} decimals Number of decimal places\n * @returns {string} Formatted size string\n */\nexport function formatBytes(bytes, decimals = 1) {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  \n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/**\n * Format uptime in seconds to a human-readable string\n * \n * @param {number} seconds Uptime in seconds\n * @returns {string} Formatted uptime string\n */\nexport function formatUptime(seconds) {\n  const days = Math.floor(seconds / 86400);\n  const hours = Math.floor((seconds % 86400) / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n  \n  let result = '';\n  if (days > 0) result += `${days}d `;\n  if (hours > 0 || days > 0) result += `${hours}h `;\n  if (minutes > 0 || hours > 0 || days > 0) result += `${minutes}m `;\n  result += `${secs}s`;\n  \n  return result;\n}\n\n/**\n * Check if a log level meets the minimum required level\n * This is a JavaScript implementation of the same logic used in the backend\n * \n * @param {string} logLevel The log level to check\n * @param {string} minLevel The minimum required level\n * @returns {boolean} True if the log level meets the minimum, false otherwise\n */\nexport function log_level_meets_minimum(logLevel, minLevel) {\n  // Special case: if minLevel is debug, always return true\n  // This ensures all log levels are shown when debug is selected\n  if (String(minLevel || '').toLowerCase() === 'debug') {\n    return true;\n  }\n  \n  // Convert log levels to numeric values for comparison\n  let levelValue = 2; // Default to INFO (2)\n  let minValue = 2;   // Default to INFO (2)\n  \n  // Map log level strings to numeric values\n  // ERROR = 0, WARNING = 1, INFO = 2, DEBUG = 3\n  const logLevelLower = String(logLevel || '').toLowerCase();\n  const minLevelLower = String(minLevel || '').toLowerCase();\n  \n  if (logLevelLower === 'error') {\n    levelValue = 0;\n  } else if (logLevelLower === 'warning' || logLevelLower === 'warn') {\n    levelValue = 1;\n  } else if (logLevelLower === 'info') {\n    levelValue = 2;\n  } else if (logLevelLower === 'debug') {\n    levelValue = 3;\n  }\n  \n  if (minLevelLower === 'error') {\n    minValue = 0;\n  } else if (minLevelLower === 'warning' || minLevelLower === 'warn') {\n    minValue = 1;\n  } else if (minLevelLower === 'info') {\n    minValue = 2;\n  } else if (minLevelLower === 'debug') {\n    minValue = 3;\n  }\n  \n  // Return true if the log level is less than or equal to the minimum level\n  // Lower values are higher priority (ERROR = 0 is highest priority)\n  // We want to include all levels with higher or equal priority to the minimum\n  return levelValue <= minValue;\n}\n","/**\n * LogsPoller Component\n * Handles polling for logs via WebSocket instead of automatic updates\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\nimport { useState, useEffect, useRef } from '../../../preact.hooks.module.js';\nimport { log_level_meets_minimum } from './SystemUtils.js';\nimport { fetchJSON } from '../../../fetch-utils.js';\n\n/**\n * LogsPoller component\n * @param {Object} props Component props\n * @param {string} props.logLevel Current log level filter\n * @param {number} props.logCount Number of logs to display\n * @param {Function} props.onLogsReceived Callback function when logs are received\n * @returns {JSX.Element} LogsPoller component (invisible)\n */\nexport function LogsPoller({ logLevel, logCount, onLogsReceived }) {\n  const [isPolling, setIsPolling] = useState(false);\n  const pollingIntervalRef = useRef(null);\n  // Initialize with null, but will persist between renders\n  const lastTimestampRef = useRef(null);\n  \n  // Try to load the last timestamp from localStorage on initial render\n  useEffect(() => {\n    const savedTimestamp = localStorage.getItem('lastLogTimestamp');\n    if (savedTimestamp) {\n      console.log('Loaded last log timestamp from localStorage:', savedTimestamp);\n      lastTimestampRef.current = savedTimestamp;\n    }\n  }, []);\n  \n  // Function to fetch logs via WebSocket\n  const fetchLogs = () => {\n    if (!window.wsClient) {\n      console.log('WebSocket client not available, will retry on next poll');\n      return;\n    }\n    \n    if (!window.wsClient.isConnected()) {\n      console.log('WebSocket not connected, attempting to connect');\n      window.wsClient.connect();\n      // Skip this fetch attempt, will retry on next poll\n      return;\n    }\n    \n    // Only fetch if we're on the system page\n    if (!document.getElementById('system-page')) {\n      console.log('Not on system page, skipping log fetch');\n      return;\n    }\n    \n    console.log('Fetching logs via WebSocket with level: debug (to get all logs, will filter on frontend)');\n    \n    // Create fetch request payload\n    const payload = {\n      level: 'debug', // Always request debug level to get all logs\n      count: logCount\n    };\n    \n    // Add last timestamp if available for pagination\n    if (lastTimestampRef.current) {\n      payload.last_timestamp = lastTimestampRef.current;\n    }\n    \n    // Add client ID to the payload\n    if (window.wsClient.getClientId) {\n      payload.client_id = window.wsClient.getClientId();\n    }\n    \n    console.log('Sending fetch request with payload:', payload);\n    \n    // Send fetch request\n    try {\n      // Always use the send method which properly formats the message\n      const success = window.wsClient.send('fetch', 'system/logs', payload);\n      if (!success) {\n        console.warn('Failed to send fetch request, will retry on next poll');\n      } else {\n        console.log('Fetch request sent successfully');\n      }\n    } catch (error) {\n      console.error('Error sending fetch request:', error);\n    }\n  };\n  \n  // Set up WebSocket handler for log updates - only once on mount\n  useEffect(() => {\n    // If WebSocket client is not available, set up a check to try again later\n    if (!window.wsClient) {\n      console.log('WebSocket client not available, will check again later');\n      const checkInterval = setInterval(() => {\n        if (window.wsClient) {\n          console.log('WebSocket client now available, setting up handlers');\n          clearInterval(checkInterval);\n          setupHandlers();\n        }\n      }, 1000);\n      \n      // Clean up interval on unmount\n      return () => {\n        clearInterval(checkInterval);\n      };\n    } else {\n      // WebSocket client is available, set up handlers immediately\n      return setupHandlers();\n    }\n    \n    // Function to set up WebSocket handlers\n    function setupHandlers() {\n      console.log('Setting up WebSocket handlers for logs');\n      \n      // Handler for log updates\n      const handleLogsUpdate = (payload) => {\n        console.log('Received logs update via WebSocket:', payload);\n        \n        // Only process updates if we're on the system page\n        if (!document.getElementById('system-page')) {\n          console.log('Not on system page, ignoring log update');\n          return;\n        }\n        \n        if (payload && payload.logs && Array.isArray(payload.logs)) {\n          // Clean and normalize logs\n          const cleanedLogs = payload.logs.map(log => {\n            // Simply use the component attributes directly\n            const normalizedLog = {\n              timestamp: log.timestamp || 'Unknown',\n              level: log.level || 'info',\n              message: log.message || ''\n            };\n            \n            // Convert level to lowercase for consistency\n            if (normalizedLog.level) {\n              normalizedLog.level = normalizedLog.level.toLowerCase();\n            }\n            \n            // Normalize 'warn' to 'warning'\n            if (normalizedLog.level === 'warn') {\n              normalizedLog.level = 'warning';\n            }\n            \n            return normalizedLog;\n          });\n          \n          // Don't filter logs here - let the parent component handle filtering\n          // This ensures we're always using the most current logLevel value\n          \n          // Update last timestamp for pagination if available\n          if (payload.latest_timestamp) {\n            lastTimestampRef.current = payload.latest_timestamp;\n            // Save to localStorage for persistence between page refreshes\n            localStorage.setItem('lastLogTimestamp', payload.latest_timestamp);\n            console.log('Updated and saved last log timestamp:', payload.latest_timestamp);\n          }\n          \n          // Call the callback with all logs - parent will filter\n          if (cleanedLogs.length > 0) {\n            console.log(`Received ${cleanedLogs.length} logs via WebSocket`);\n            \n            // Get existing logs from the parent component using enhanced fetch\n            fetchJSON('/api/system/logs?level=debug&count=100', {\n              timeout: 15000, // 15 second timeout\n              retries: 1,     // Retry once\n              retryDelay: 1000 // 1 second between retries\n            })\n              .then(data => {\n                if (data.logs && Array.isArray(data.logs)) {\n                  // Combine existing logs with new logs\n                  const existingLogs = data.logs.map(log => {\n                    // Normalize existing logs\n                    const normalizedLog = {\n                      timestamp: log.timestamp || 'Unknown',\n                      level: (log.level || 'info').toLowerCase(),\n                      message: log.message || ''\n                    };\n                    \n                    // Normalize 'warn' to 'warning'\n                    if (normalizedLog.level === 'warn') {\n                      normalizedLog.level = 'warning';\n                    }\n                    \n                    return normalizedLog;\n                  });\n                  \n                  // Combine existing logs with new logs, avoiding duplicates\n                  const combinedLogs = [...existingLogs];\n                  \n                  // Add new logs that don't already exist\n                  cleanedLogs.forEach(newLog => {\n                    // Check if this log already exists\n                    const exists = combinedLogs.some(existingLog => \n                      existingLog.timestamp === newLog.timestamp && \n                      existingLog.message === newLog.message\n                    );\n                    \n                    if (!exists) {\n                      combinedLogs.push(newLog);\n                    }\n                  });\n                  \n                  // Sort logs by timestamp (newest first)\n                  combinedLogs.sort((a, b) => {\n                    return new Date(b.timestamp) - new Date(a.timestamp);\n                  });\n                  \n                  // Call the callback with combined logs - don't filter here\n                  // This ensures WebSocket debug logs are included when debug is selected in UI\n                  onLogsReceived(combinedLogs);\n                } else {\n                  // If no existing logs, just use the new logs\n                  onLogsReceived(cleanedLogs);\n                }\n              })\n              .catch(error => {\n                console.error('Error fetching existing logs:', error);\n                // If error fetching existing logs, just use the new logs\n                onLogsReceived(cleanedLogs);\n              });\n          } else {\n            console.log('No logs received via WebSocket');\n          }\n        }\n      };\n      \n      // Register handler for system logs updates - only once\n      console.log('Registering handler for system/logs via WebSocket (once on mount)');\n      window.wsClient.on('update', 'system/logs', handleLogsUpdate);\n      \n      // Clean up on unmount\n      return () => {\n        // Unregister handler\n        console.log('Unregistering handler for system/logs via WebSocket (component unmounting)');\n        window.wsClient.off('update', 'system/logs');\n        \n        // Clear polling interval\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n          pollingIntervalRef.current = null;\n        }\n      };\n    }\n  }, []); // Empty dependency array - only run once on mount\n  \n  // Start/stop polling when isPolling changes\n  useEffect(() => {\n    // Start polling\n    if (isPolling && !pollingIntervalRef.current) {\n      console.log('Starting log polling');\n      \n      // Subscribe to system logs topic\n      if (window.wsClient && typeof window.wsClient.subscribe === 'function') {\n        console.log('Subscribing to system/logs via WebSocket for polling');\n        // Include the last timestamp in the subscription if available\n        const subscriptionParams = { \n          level: 'debug',\n          ...(lastTimestampRef.current ? { since: lastTimestampRef.current } : {})\n        };\n        window.wsClient.subscribe('system/logs', subscriptionParams);\n        console.log(`Subscribed to system/logs with level: debug and last_timestamp: ${lastTimestampRef.current || 'NULL'}`);\n      }\n      \n      // Fetch logs immediately\n      fetchLogs();\n      \n      // Set up polling interval (every 5 seconds)\n      console.log('Setting up polling interval for logs (every 5 seconds)');\n      pollingIntervalRef.current = setInterval(() => {\n        console.log('Polling interval triggered, fetching logs...');\n        fetchLogs();\n      }, 5000);\n    }\n    // Stop polling\n    else if (!isPolling && pollingIntervalRef.current) {\n      console.log('Stopping log polling');\n      \n      // Unsubscribe from system logs topic\n      if (window.wsClient && typeof window.wsClient.unsubscribe === 'function') {\n        console.log('Unsubscribing from system/logs via WebSocket');\n        window.wsClient.unsubscribe('system/logs');\n      }\n      \n      clearInterval(pollingIntervalRef.current);\n      pollingIntervalRef.current = null;\n    }\n    \n    // Clean up on unmount\n    return () => {\n      if (pollingIntervalRef.current) {\n        clearInterval(pollingIntervalRef.current);\n        pollingIntervalRef.current = null;\n      }\n      \n      // Unsubscribe from system logs topic\n      if (window.wsClient && typeof window.wsClient.unsubscribe === 'function') {\n        console.log('Unsubscribing from system/logs via WebSocket on cleanup');\n        window.wsClient.unsubscribe('system/logs');\n      }\n    };\n  }, [isPolling, logLevel]);\n  \n  // Start polling when component mounts and update when log level changes\n  useEffect(() => {\n    console.log(`LogsPoller: Setting up polling with log level ${logLevel}`);\n    setIsPolling(false); // Stop any existing polling\n    \n    // Small delay to ensure any previous polling is cleaned up\n    setTimeout(() => {\n      setIsPolling(true); // Start polling with new parameters\n    }, 100);\n    \n    // Clean up on unmount\n    return () => {\n      console.log('LogsPoller: Cleaning up on unmount');\n      setIsPolling(false);\n    };\n  }, [logLevel, logCount]);\n  \n  // This component doesn't render anything visible\n  return null;\n}\n","/**\n * LightNVR Web Interface SystemView Component\n * Preact component for the system page\n */\n\nimport { h } from '../../preact.min.js';\nimport { html } from '../../html-helper.js';\nimport { useState, useEffect, useRef } from '../../preact.hooks.module.js';\nimport { showStatusMessage } from './UI.js';\nimport { ContentLoader } from './LoadingIndicator.js';\nimport { fetchJSON, enhancedFetch, createRequestController } from '../../fetch-utils.js';\n\n// Import system components\nimport { SystemControls } from './system/SystemControls.js';\nimport { SystemInfo } from './system/SystemInfo.js';\nimport { MemoryStorage } from './system/MemoryStorage.js';\nimport { StreamStorage } from './system/StreamStorage.js';\nimport { NetworkInfo } from './system/NetworkInfo.js';\nimport { StreamsInfo } from './system/StreamsInfo.js';\nimport { LogsView } from './system/LogsView.js';\nimport { LogsPoller } from './system/LogsPoller.js';\n\n// Import utility functions\nimport { formatBytes, formatUptime, log_level_meets_minimum } from './system/SystemUtils.js';\n\n/**\n * SystemView component\n * @returns {JSX.Element} SystemView component\n */\nexport function SystemView() {\n  const [systemInfo, setSystemInfo] = useState({\n    version: '',\n    uptime: '',\n    cpu: {\n      model: '',\n      cores: 0,\n      usage: 0\n    },\n    memory: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    go2rtcMemory: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    systemMemory: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    disk: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    systemDisk: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    network: {\n      interfaces: []\n    },\n    streams: {\n      active: 0,\n      total: 0\n    },\n    recordings: {\n      count: 0,\n      size: 0\n    }\n  });\n  const [logs, setLogs] = useState([]);\n  const [logLevel, setLogLevel] = useState('debug');\n  const logLevelRef = useRef('debug');\n  \n  // Wrap setLogLevel to add logging\n  const handleSetLogLevel = (newLevel) => {\n    console.log(`SystemView: Setting log level from ${logLevel} to ${newLevel}`);\n    console.log('Current stack trace:', new Error().stack);\n    \n    // Update both the state and the ref\n    setLogLevel(newLevel);\n    logLevelRef.current = newLevel;\n    \n    console.log(`SystemView: logLevelRef is now: ${logLevelRef.current}`);\n    \n    // Verify the state was updated\n    setTimeout(() => {\n      console.log(`SystemView: After setState, logLevel is now: ${logLevel}`);\n      console.log(`SystemView: After setState, logLevelRef is now: ${logLevelRef.current}`);\n    }, 0);\n  };\n  const [logCount, setLogCount] = useState(100);\n  const [isRestarting, setIsRestarting] = useState(false);\n  const [isShuttingDown, setIsShuttingDown] = useState(false);\n  \n  // State for loading and data status\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasData, setHasData] = useState(false);\n\n  // Handler for when logs are received from the LogsPoller\n  const handleLogsReceived = (newLogs) => {\n    console.log('SystemView received new logs:', newLogs.length);\n    \n    // Filter logs based on the current log level\n    const currentLogLevel = logLevelRef.current;\n    console.log(`Filtering ${newLogs.length} logs based on log level: ${currentLogLevel}`);\n    \n    const filteredLogs = newLogs.filter(log => {\n      // Ensure debug logs from WebSocket are included when debug is selected\n      const result = log_level_meets_minimum(log.level, currentLogLevel);\n      \n      // Add debug logging to help diagnose filtering issues\n      if (log.level === 'debug' && currentLogLevel === 'debug' && !result) {\n        console.warn('Debug log filtered out despite debug level selected:', log);\n      }\n      \n      return result;\n    });\n    \n    console.log(`After filtering: ${filteredLogs.length} logs match the current log level`);\n    \n    // Update the logs state with the filtered logs\n    setLogs(filteredLogs);\n    \n    // Force a re-render to ensure the UI updates\n    setTimeout(() => {\n      const logsContainer = document.querySelector('.logs-container');\n      if (logsContainer) {\n        // Scroll to the bottom of the logs container\n        logsContainer.scrollTop = logsContainer.scrollHeight;\n      }\n    }, 100);\n  };\n\n  // Request controller for cancelling requests on unmount\n  const requestControllerRef = useRef(null);\n\n  // Load system info and logs on mount\n  useEffect(() => {\n    // Create a new request controller\n    requestControllerRef.current = createRequestController();\n    \n    loadSystemInfo();\n    loadLogs();\n    \n    // No automatic polling intervals for system info - user will manually refresh when needed\n    // This prevents unnecessary network traffic and processing\n    console.log('System page loaded - no automatic polling for system info');\n    \n    // Clean up any existing WebSocket subscriptions and cancel pending requests on unmount\n    return () => {\n      if (window.wsClient && typeof window.wsClient.unsubscribe === 'function') {\n        console.log('Cleaning up any WebSocket subscriptions on unmount');\n        window.wsClient.unsubscribe('system/logs');\n      }\n      \n      if (requestControllerRef.current) {\n        requestControllerRef.current.abort();\n      }\n    };\n  }, []);\n  \n  // Load logs when log level or count changes\n  useEffect(() => {\n    console.log(`SystemView: Log level changed to ${logLevel} or count changed to ${logCount}`);\n    \n    // Only load logs via HTTP API once on initial load\n    // WebSocket polling will handle updates after that\n    if (logs.length === 0) {\n      console.log('Initial logs load via HTTP API');\n      loadLogs();\n    } else {\n      console.log('Filtering existing logs based on new log level');\n      // Filter existing logs based on the new log level from the ref\n      const currentLogLevel = logLevelRef.current;\n      console.log(`Filtering existing logs using logLevelRef.current: ${currentLogLevel}`);\n      \n      setLogs(prevLogs => {\n        // Special case for debug level - include all logs\n        return prevLogs.filter(log => {\n          return log_level_meets_minimum(log.level, currentLogLevel);\n        });\n      });\n    }\n  }, [logLevel, logCount]);\n  \n  // Load system info from API\n  const loadSystemInfo = async () => {\n    try {\n      setIsLoading(true);\n      \n      const data = await fetchJSON('/api/system/info', {\n        signal: requestControllerRef.current?.signal,\n        timeout: 15000, // 15 second timeout\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n      \n      setSystemInfo(data);\n      setHasData(true);\n    } catch (error) {\n      // Only show error if the request wasn't cancelled\n      if (error.message !== 'Request was cancelled') {\n        console.error('Error loading system info:', error);\n        // Don't show error message for this, just log it\n        setHasData(false);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Load logs from API\n  const loadLogs = async () => {\n    try {\n      // Always use debug level to get all logs, then filter on frontend\n      const currentLogLevel = logLevelRef.current;\n      console.log(`Loading logs from API with level: debug (to get all logs, will filter on frontend)`);\n      \n      const data = await fetchJSON(`/api/system/logs?level=debug&count=${logCount}`, {\n        signal: requestControllerRef.current?.signal,\n        timeout: 20000, // 20 second timeout for potentially large log data\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n      \n      // Check if we have logs\n      if (data.logs && Array.isArray(data.logs)) {\n        // Check if logs are already structured objects or raw strings\n        if (data.logs.length > 0 && typeof data.logs[0] === 'object' && data.logs[0].level) {\n        // Logs are already structured objects, filter them based on the current log level\n        let filteredLogs = data.logs.filter(log => {\n            return log_level_meets_minimum(log.level, currentLogLevel);\n          });\n        \n        console.log(`Filtered ${data.logs.length} logs to ${filteredLogs.length} based on log level ${currentLogLevel}`);\n        setLogs(filteredLogs);\n        } else {\n          // Logs are raw strings, parse them into structured objects\n          const parsedLogs = data.logs.map(logLine => {\n            // Parse log line (format: [TIMESTAMP] [LEVEL] MESSAGE)\n            let timestamp = 'Unknown';\n            let level = 'debug';\n            let message = logLine;\n            \n            // Try to extract timestamp and level using regex\n            const logRegex = /\\[(.*?)\\]\\s*\\[(.*?)\\]\\s*(.*)/;\n            const match = logLine.match(logRegex);\n            \n            if (match && match.length >= 4) {\n              timestamp = match[1];\n              level = match[2].toLowerCase();\n              message = match[3];\n              \n              // Normalize log level\n              if (level === 'warn') {\n                level = 'warning';\n              }\n            }\n            \n            return {\n              timestamp,\n              level,\n              message\n            };\n          });\n          \n          // Filter the parsed logs based on the current log level\n          let filteredLogs = parsedLogs.filter(log => {\n              return log_level_meets_minimum(log.level, currentLogLevel);\n            });\n          \n          console.log(`Filtered ${parsedLogs.length} parsed logs to ${filteredLogs.length} based on log level ${currentLogLevel}`);\n          setLogs(filteredLogs);\n        }\n      } else {\n        setLogs([]);\n      }\n    } catch (error) {\n      console.error('Error loading logs:', error);\n      showStatusMessage('Error loading logs: ' + error.message);\n    }\n  };\n  \n  // Clear logs\n  const clearLogs = async () => {\n    if (!confirm('Are you sure you want to clear all logs?')) {\n      return;\n    }\n    \n    try {\n      showStatusMessage('Clearing logs...');\n      \n      await enhancedFetch('/api/system/logs/clear', {\n        method: 'POST',\n        signal: requestControllerRef.current?.signal,\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n      \n      showStatusMessage('Logs cleared successfully');\n      loadLogs(); // Reload logs after clearing\n    } catch (error) {\n      console.error('Error clearing logs:', error);\n      showStatusMessage('Error clearing logs: ' + error.message);\n    }\n  };\n  \n  // Restart system\n  const restartSystem = async () => {\n    if (!confirm('Are you sure you want to restart the system?')) {\n      return;\n    }\n    \n    try {\n      setIsRestarting(true);\n      showStatusMessage('Restarting system...');\n      \n      await enhancedFetch('/api/system/restart', {\n        method: 'POST',\n        signal: requestControllerRef.current?.signal,\n        timeout: 30000, // 30 second timeout for system restart\n        retries: 0      // No retries for system restart\n      });\n      \n      showStatusMessage('System is restarting. Please wait...');\n      \n      // Wait for system to restart\n      setTimeout(() => {\n        window.location.reload();\n      }, 10000);\n    } catch (error) {\n      console.error('Error restarting system:', error);\n      showStatusMessage('Error restarting system: ' + error.message);\n      setIsRestarting(false);\n    }\n  };\n  \n  // Shutdown system\n  const shutdownSystem = async () => {\n    if (!confirm('Are you sure you want to shut down the system?')) {\n      return;\n    }\n    \n    try {\n      setIsShuttingDown(true);\n      showStatusMessage('Shutting down system...');\n      \n      await enhancedFetch('/api/system/shutdown', {\n        method: 'POST',\n        signal: requestControllerRef.current?.signal,\n        timeout: 30000, // 30 second timeout for system shutdown\n        retries: 0      // No retries for system shutdown\n      });\n      \n      showStatusMessage('System is shutting down. You will need to manually restart it.');\n    } catch (error) {\n      console.error('Error shutting down system:', error);\n      showStatusMessage('Error shutting down system: ' + error.message);\n      setIsShuttingDown(false);\n    }\n  };\n  \n  // Check if WebSocket client is initialized\n  useEffect(() => {\n    if (!window.wsClient) {\n      console.log('WebSocket client not available in SystemView, it should be initialized in preact-app.js');\n    } else {\n      console.log('WebSocket client is available in SystemView');\n    }\n  }, []);\n\n  return html`\n    <section id=\"system-page\" class=\"page\">\n      <${SystemControls} \n        restartSystem=${restartSystem} \n        shutdownSystem=${shutdownSystem} \n        isRestarting=${isRestarting} \n        isShuttingDown=${isShuttingDown} \n      />\n      \n      <${ContentLoader}\n        isLoading=${isLoading}\n        hasData=${hasData}\n        loadingMessage=\"Loading system information...\"\n        emptyMessage=\"System information not available. Please try again later.\"\n      >\n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n          <${SystemInfo} systemInfo=${systemInfo} formatUptime=${formatUptime} />\n          <${MemoryStorage} systemInfo=${systemInfo} formatBytes=${formatBytes} />\n        </div>\n        \n        <div class=\"grid grid-cols-1 gap-4 mb-4\">\n          <${StreamStorage} systemInfo=${systemInfo} formatBytes=${formatBytes} />\n        </div>\n        \n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n          <${NetworkInfo} systemInfo=${systemInfo} />\n          <${StreamsInfo} systemInfo=${systemInfo} formatBytes=${formatBytes} />\n        </div>\n        \n        <${LogsView} \n          logs=${logs} \n          logLevel=${logLevel} \n          logCount=${logCount} \n          setLogLevel=${handleSetLogLevel} \n          setLogCount=${setLogCount} \n          loadLogs=${loadLogs} \n          clearLogs=${clearLogs} \n        />\n        \n        <${LogsPoller}\n          logLevel=${logLevel}\n          logCount=${logCount}\n          onLogsReceived=${handleLogsReceived}\n        />\n      <//>\n    </section>\n  `;\n}\n\n/**\n * Load SystemView component\n */\nexport function loadSystemView() {\n  const mainContent = document.getElementById('main-content');\n  if (!mainContent) return;\n  \n  // Render the SystemView component to the container\n  import('../../preact.min.js').then(({ render }) => {\n    render(html`<${SystemView} />`, mainContent);\n    \n    // Refresh system info immediately after rendering\n    setTimeout(() => {\n      const event = new CustomEvent('refresh-system-info');\n      window.dispatchEvent(event);\n    }, 100);\n  });\n}\n\n// Add a global event listener for refreshing system info\nwindow.addEventListener('load', () => {\n  window.addEventListener('refresh-system-info', async () => {\n    try {\n      const response = await enhancedFetch('/api/system/info', {\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n      \n      if (response.ok) {\n        console.log('System info refreshed');\n      }\n    } catch (error) {\n      console.error('Error refreshing system info:', error);\n    }\n  });\n});\n"],"names":["SystemControls","restartSystem","shutdownSystem","isRestarting","isShuttingDown","html","SystemInfo","systemInfo","formatUptime","version","uptime","cpu","model","cores","usage","toFixed","MemoryStorage","formatBytes","lightNvrMemoryUsed","memory","used","go2rtcMemoryUsed","go2rtcMemory","totalSystemMemory","total","combinedMemoryUsed","combinedMemoryPercent","lightNvrSlicePercent","go2rtcSlicePercent","systemMemory","disk","systemDisk","StreamStorage","streamStorage","Array","isArray","length","totalStreamStorage","reduce","stream","size","totalDiskSpace","totalStreamStoragePercent","streamStorageData","map","name","count","slicePercent","sort","a","b","colors","index","replace","encodeURIComponent","NetworkInfo","network","interfaces","iface","address","mac","up","StreamsInfo","streams","active","recordings","LogsView","logs","logLevel","logCount","setLogLevel","setLogCount","loadLogs","clearLogs","e","newLevel","target","value","console","log","parseInt","timestamp","level","levelLower","String","toLowerCase","trim","levelText","toUpperCase","formatLogLevel","message","bytes","decimals","dm","i","Math","floor","parseFloat","pow","seconds","days","hours","minutes","result","log_level_meets_minimum","minLevel","levelValue","minValue","logLevelLower","minLevelLower","LogsPoller","onLogsReceived","isPolling","setIsPolling","useState","pollingIntervalRef","useRef","lastTimestampRef","useEffect","savedTimestamp","localStorage","getItem","current","fetchLogs","window","wsClient","isConnected","connect","document","getElementById","payload","last_timestamp","getClientId","client_id","send","warn","error","setupHandlers","checkInterval","setInterval","clearInterval","on","cleanedLogs","normalizedLog","latest_timestamp","setItem","fetchJSON","timeout","retries","retryDelay","then","data","combinedLogs","forEach","newLog","some","existingLog","push","Date","catch","off","subscribe","subscriptionParams","since","unsubscribe","setTimeout","SystemView","setSystemInfo","free","setLogs","logLevelRef","setIsRestarting","setIsShuttingDown","isLoading","setIsLoading","hasData","setHasData","requestControllerRef","createRequestController","loadSystemInfo","abort","currentLogLevel","prevLogs","filter","async","signal","filteredLogs","parsedLogs","logLine","match","showStatusMessage","confirm","enhancedFetch","method","location","reload","ContentLoader","Error","stack","newLogs","logsContainer","querySelector","scrollTop","scrollHeight","mainContent","__vitePreload","render","module","import","n","p","meta","url","event","CustomEvent","dispatchEvent","addEventListener","ok"],"mappings":"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"}