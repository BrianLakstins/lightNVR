System.register(["./preact-app-legacy-C7F2kZGB.js","./LoadingIndicator-legacy-DtGf-R_9.js","./DetectionOverlay-legacy-DXR2TurU.js"],(function(e,t){"use strict";var n,o,r,a,l,s,i,c,d,u,m,p,g;return{setters:[e=>{n=e.c,o=e.e,r=e.d,a=e.A,l=e.y,s=e.h,i=e._},e=>{c=e.L},e=>{d=e.c,u=e.s,m=e.a,p=e.t,g=e.e}],execute:function(){function f(e,t,n){const o=`video-${e.name.replace(/\s+/g,"-")}`,r=document.getElementById(o),a=r?r.closest(".video-cell"):null;if(!r||!a)return;const l=`canvas-${e.name.replace(/\s+/g,"-")}`;let s=document.getElementById(l);s||(s=document.createElement("canvas"),s.id=l,s.className="detection-overlay",s.style.position="absolute",s.style.top="0",s.style.left="0",s.style.width="100%",s.style.height="100%",s.style.pointerEvents="none",a.appendChild(s)),console.log(`Stream ${e.name} detection settings:`,{detection_based_recording:e.detection_based_recording,detection_model:e.detection_model,detection_threshold:e.detection_threshold}),e.detection_based_recording&&e.detection_model?(console.log(`Starting detection polling for stream ${e.name}`),u(e.name,s,r,n)):console.log(`Detection not enabled for stream ${e.name}`);const i=a.querySelector(".loading-indicator");i&&(i.style.display="flex");const c=Date.now(),d=`/hls/${encodeURIComponent(e.name)}/index.m3u8?_t=${c}`;if(localStorage.getItem("auth"),console.log(`Initializing video player for stream ${e.name}`),r.canPlayType("application/vnd.apple.mpegurl"))console.log(`Using native HLS support for stream ${e.name}`),r.src=d,r.addEventListener("loadedmetadata",(function(){console.log(`Metadata loaded for stream ${e.name}`),i&&(i.style.display="none")})),r.addEventListener("error",(t=>{console.error(`Video error for stream ${e.name}:`,r.error),h(e.name,r.error?r.error.message:"Unknown error")})),r.play().catch((e=>{console.warn("Auto-play prevented:",e),y(a,r)}));else if(window.Hls&&window.Hls.isSupported()){const o=localStorage.getItem("auth"),l=/iPhone|iPad|iPod|Android/i.test(navigator.userAgent),s=new window.Hls({maxBufferLength:l?30:20,maxMaxBufferLength:l?60:30,liveSyncDurationCount:l?4:3,liveMaxLatencyDurationCount:l?10:6,liveDurationInfinity:!1,lowLatencyMode:!1,enableWorker:!0,fragLoadingTimeOut:l?6e4:3e4,manifestLoadingTimeOut:l?6e4:3e4,levelLoadingTimeOut:l?6e4:3e4,backBufferLength:l?60:30,startLevel:l?0:-1,abrEwmaDefaultEstimate:l?1e6:5e5,abrBandWidthFactor:l?.5:.7,abrBandWidthUpFactor:l?.3:.5,xhrSetup:function(e,t){o&&e.setRequestHeader("Authorization","Basic "+o),e.withCredentials=!0}});s.loadSource(d),s.attachMedia(r),s.on(window.Hls.Events.MANIFEST_PARSED,(()=>{console.log(`Manifest parsed for stream ${e.name}`),/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)?(console.log(`Mobile device detected for stream ${e.name}, using muted autoplay`),r.muted=!0,setTimeout((()=>{i&&(i.style.display="none"),r.play().then((()=>{console.log(`Autoplay succeeded for stream ${e.name} on mobile`)})).catch((t=>{console.warn(`Autoplay failed for stream ${e.name} on mobile:`,t),y(a,r)}))}),500)):(i&&(i.style.display="none"),r.play().catch((e=>{console.warn("Auto-play prevented:",e),y(a,r)})))})),s.on(window.Hls.Events.ERROR,((a,i)=>{if(console.warn("HLS error:",i),i.fatal){console.error("Fatal HLS error:",i),s.destroy();const a=r.closest(".video-cell"),c=a.querySelector(".loading-indicator");if(c&&"Starting stream..."===c.querySelector("span").textContent)console.log(`Stream ${e.name} failed to load after enabling, retrying in 2 seconds...`),c.querySelector("span").textContent="Retrying connection...",setTimeout((()=>{console.log(`Retrying stream ${e.name} after failure`),fetch(`/api/streams/${encodeURIComponent(e.name)}`).then((e=>e.json())).then((o=>{v(e.name,t,n),f(o,t,n)})).catch((t=>{console.error(`Error fetching stream info for retry: ${t}`),h(e.name,"Failed to reconnect after enabling")}))}),2e3);else{if(console.log(`Implementing standard retry for stream ${e.name}`),c){c.style.display="flex";const e=c.querySelector("span");e&&(e.textContent="Reconnecting to stream...")}setTimeout((()=>{try{const n=Date.now(),s=`/hls/${encodeURIComponent(e.name)}/index.m3u8?_t=${n}`,i=new window.Hls({maxBufferLength:l?30:20,maxMaxBufferLength:l?60:30,liveSyncDurationCount:l?4:3,liveMaxLatencyDurationCount:l?10:6,liveDurationInfinity:!1,lowLatencyMode:!1,enableWorker:!0,fragLoadingTimeOut:l?6e4:3e4,manifestLoadingTimeOut:l?6e4:3e4,levelLoadingTimeOut:l?6e4:3e4,backBufferLength:l?60:30,startLevel:l?0:-1,abrEwmaDefaultEstimate:l?1e6:5e5,abrBandWidthFactor:l?.5:.7,abrBandWidthUpFactor:l?.3:.5,xhrSetup:function(e,t){o&&e.setRequestHeader("Authorization","Basic "+o),e.withCredentials=!0}});i.loadSource(s),i.attachMedia(r),a&&(a.hlsPlayer&&a.hlsPlayer.destroy(),a.hlsPlayer=i),t[e.name]={hls:i,refreshTimer:t[e.name]?t[e.name].refreshTimer:null},i.on(window.Hls.Events.MEDIA_ATTACHED,(()=>{console.log(`New HLS instance attached for stream ${e.name}`),c&&(c.style.display="none"),y(a,r)})),i.on(window.Hls.Events.ERROR,((t,n)=>{n.fatal&&(console.error("Fatal error in recovery HLS instance:",n),i.destroy(),h(e.name,"Failed to reconnect after multiple attempts"))}))}catch(n){console.error("Error during HLS recovery:",n),h(e.name,"Failed to reconnect: "+n.message)}}),3e3)}}else if(i.type===window.Hls.ErrorTypes.NETWORK_ERROR){if(console.warn("Network error, attempting to recover:",i),r.currentTime>0)try{s.recoverMediaError(),r.currentTime=r.duration-1}catch(c){console.error("Error during recovery seek:",c)}if(i.details===window.Hls.ErrorDetails.FRAG_LOAD_ERROR||i.details===window.Hls.ErrorDetails.FRAG_LOAD_TIMEOUT)try{const e=s.currentLevel;e>0&&(console.log(`Switching from level ${e} to level 0 due to fragment error`),s.currentLevel=0)}catch(c){console.error("Error during level switching:",c)}}else if(i.type===window.Hls.ErrorTypes.MEDIA_ERROR){console.warn("Media error, attempting to recover:",i);try{s.recoverMediaError()}catch(c){console.error("Error during media error recovery:",c)}}}));const c=setInterval((()=>{if(a&&a.hlsPlayer){console.log(`Refreshing HLS stream for ${e.name}`);const t=Date.now(),n=`/hls/${encodeURIComponent(e.name)}/index.m3u8?_t=${t}`;a.hlsPlayer.autoLevelCapping?console.log(`Skipping refresh for ${e.name} as it appears to be in recovery mode`):a.hlsPlayer.loadSource(n)}else clearInterval(c)}),3e4);a.hlsPlayer=s,a.refreshTimer=c,t[e.name]={hls:s,refreshTimer:c}}else h(e.name,"HLS not supported by your browser")}function y(e,t){if(e.querySelector(".play-overlay"))return;const o=document.createElement("div");o.className="play-overlay";const r=document.createElement("div");if(r.className="play-button",r.innerHTML='\n    <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">\n      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"></path>\n    </svg>\n  ',/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)){const e=document.createElement("div");e.className="tap-message",e.textContent="Tap to play",e.style.color="white",e.style.marginTop="10px",e.style.fontSize="14px",r.appendChild(e)}o.appendChild(r),e.appendChild(o);const a=function(){o.style.pointerEvents="none";const a=e.querySelector(".loading-indicator");a&&(a.style.display="flex"),r.style.transform="scale(0.9)",t.play().then((()=>{o.remove(),a&&(a.style.display="none")})).catch((e=>{console.error("Play failed:",e),o.style.pointerEvents="auto",r.style.transform="",a&&(a.style.display="none"),n("Auto-play blocked by browser. Please try again or check your browser settings."),/iPhone|iPad|iPod/i.test(navigator.userAgent)&&(t.muted=!0,n("Video muted to allow playback on iOS. Tap again to play."))}))};o.addEventListener("click",a),o.addEventListener("touchend",(function(e){e.preventDefault(),a()}))}function h(e,t){const n=`video-${e.replace(/\s+/g,"-")}`,o=document.getElementById(n),r=o?o.closest(".video-cell"):null;if(!r)return;const a=r.querySelector(".loading-indicator");a&&(a.style.display="none");let l=r.querySelector(".error-indicator");l||(l=document.createElement("div"),l.className="error-indicator",r.appendChild(l)),l.innerHTML=`\n    <div class="error-icon">!</div>\n    <p>${t||"Stream connection failed"}</p>\n    <button class="retry-button mt-4 px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">Retry</button>\n  `;const s=l.querySelector(".retry-button");s&&s.addEventListener("click",(()=>{a&&(a.style.display="flex"),l.style.display="none",fetch(`/api/streams/${encodeURIComponent(e)}`).then((e=>e.json())).then((t=>{v(e,videoPlayers,detectionIntervals),f(t,videoPlayers,detectionIntervals)})).catch((e=>{console.error("Error fetching stream info:",e),l.style.display="flex";const t=l.querySelector("p");t&&(t.textContent="Could not reconnect: "+e.message),a&&(a.style.display="none")}))}))}function v(e,t,n){const o=`video-${e.replace(/\s+/g,"-")}`,r=document.getElementById(o),a=r?r.closest(".video-cell"):null;if(!a)return;a.hlsPlayer&&(a.hlsPlayer.destroy(),delete a.hlsPlayer),a.refreshTimer&&(clearInterval(a.refreshTimer),delete a.refreshTimer),r&&(r.pause(),r.removeAttribute("src"),r.load());const l=a.querySelector(".loading-indicator");l&&(l.style.display="none");const s=a.querySelector(".error-indicator");s&&s.remove();const i=a.querySelector(".play-overlay");if(i&&i.remove(),d(e,n),t[e]){const{hls:n,refreshTimer:o}=t[e];n&&n.destroy(),o&&clearInterval(o),delete t[e]}}function w(e,t,n){e.forEach((e=>{v(e.name,t,n)}))}function b(){const e=document.getElementById("snapshot-preview-overlay");if(!e)return void setTimeout(b,100);const t=e.querySelectorAll("button");let o=null;for(const n of t)if(n.textContent.includes("Download")){o=n;break}if(!o)return void setTimeout(b,100);const r=o.cloneNode(!0);o.parentNode.replaceChild(r,o),r.addEventListener("click",(()=>{if(!window.__snapshotCanvas)return console.error("No snapshot canvas available"),void n("Download failed: No snapshot data available");var e,t;e=window.__snapshotCanvas,t=window.__snapshotFileName||"snapshot.jpg",e.toBlob((function(e){if(!e)return console.error("Failed to create blob from canvas"),void n("Download failed: Unable to create image data");console.log("Created blob:",e.size,"bytes");const o=URL.createObjectURL(e);console.log("Created blob URL:",o);const r=document.createElement("a");r.href=o,r.download=t,r.style.position="absolute",r.style.top="0",r.style.left="0",r.style.opacity="0.01",document.body.appendChild(r),console.log("Added download link to document"),setTimeout((()=>{console.log("Clicking download link"),r.click(),setTimeout((()=>{document.body.contains(r)&&document.body.removeChild(r),URL.revokeObjectURL(o),console.log("Cleaned up download resources")}),1e4)}),100),n("Download started")}),"image/jpeg",.95)})),console.log("Download button enhanced")}function E(e,t,r,a,l,s){if(!e)return;const i=e.querySelector(".placeholder");if(e.innerHTML="",i&&0===t.length)return void e.appendChild(i);let c=t;"1"===r&&a&&(c=t.filter((e=>e.name===a))),c.forEach((t=>{const r=t.id||t.name,a=document.createElement("div");a.className="video-cell",a.innerHTML=`\n      <video id="video-${t.name.replace(/\s+/g,"-")}" autoplay muted></video>\n      <div class="stream-info">\n        <span>${t.name}</span>\n        <span>${t.width}x${t.height} · ${t.fps}fps</span>\n        <div class="stream-controls">\n          <button class="snapshot-btn" data-id="${r}" data-name="${t.name}">\n            <span>📷</span> Snapshot\n          </button>\n          <button class="fullscreen-btn" data-id="${r}" data-name="${t.name}">\n            <span>⛶</span> Fullscreen\n          </button>\n        </div>\n      </div>\n      <div class="loading-indicator">\n        <div class="loading-spinner"></div>\n        <span>Connecting...</span>\n      </div>\n    `,e.appendChild(a),f(t,l,s);const i=a.querySelector(".snapshot-btn");i&&i.addEventListener("click",(()=>{!function(e){const t=document.querySelector(`.snapshot-btn[data-id="${e}"]`);if(!t)return void console.error("Stream element not found for ID:",e);const r=t.getAttribute("data-name");if(!r)return void console.error("Stream name not found for ID:",e);const a=`video-${r.replace(/\s+/g,"-")}`,l=document.getElementById(a);if(!l)return void console.error("Video element not found for stream:",r);const s=document.createElement("canvas");if(s.width=l.videoWidth,s.height=l.videoHeight,0===s.width||0===s.height)return console.error("Invalid video dimensions:",s.width,s.height),void n("Cannot take snapshot: Video not loaded or has invalid dimensions");s.getContext("2d").drawImage(l,0,0,s.width,s.height);try{window.__snapshotCanvas=s;const e=(new Date).toISOString().replace(/[:.]/g,"-"),t=`snapshot-${r.replace(/\s+/g,"-")}-${e}.jpg`;window.__snapshotFileName=t,o(s.toDataURL("image/jpeg",.95),`Snapshot: ${r}`),setTimeout((()=>b()),100),n("Snapshot taken successfully")}catch(i){console.error("Error creating snapshot:",i),n("Failed to create snapshot: "+i.message)}}(r)}));const c=a.querySelector(".fullscreen-btn");c&&c.addEventListener("click",(()=>{m(t.name)}))}))}function $(){const[e,t]=r([]),[o,i]=r("4"),[d,u]=r(""),[m,f]=r(!1),[y,h]=r(!0),v=a(null),b=a({}),$=a({});return l((()=>{const t=e=>{if("Escape"===e.key){console.log("Escape key pressed, current fullscreen state:",m);const e=document.getElementById("live-page");e&&e.classList.contains("fullscreen-mode")&&(console.log("Detected fullscreen mode via DOM, exiting fullscreen"),g(null,f))}};document.addEventListener("keydown",t);const n=()=>{w(e,b.current,$.current)};return window.addEventListener("beforeunload",n),()=>{document.removeEventListener("keydown",t),window.removeEventListener("beforeunload",n),w(e,b.current,$.current)}}),[]),l((()=>{v.current&&(h(!0),async function(e,t){try{const n=await fetch("/api/streams");if(!n.ok)throw new Error("Failed to load streams");const o=(await n.json()||[]).map((e=>fetch(`/api/streams/${encodeURIComponent(e.id||e.name)}`).then((t=>{if(!t.ok)throw new Error(`Failed to load details for stream ${e.name}`);return t.json()})).catch((t=>(console.error(`Error loading details for stream ${e.name}:`,t),e))))),r=await Promise.all(o);return console.log("Loaded detailed streams for live view:",r),e(r||[]),r.length>0&&t(r[0].name),r}catch(o){return console.error("Error loading streams for live view:",o),n("Error loading streams: "+o.message),[]}}(t,u,v.current).then((()=>{h(!1)})).catch((()=>{h(!1)})))}),[v.current]),l((()=>{E(v.current,e,o,d,b.current,$.current)}),[o,d,e]),s`
    <section id="live-page" class="page">
      <div class="page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow">
        <div class="flex items-center space-x-2">
          <h2 class="text-xl font-bold mr-4">Live View</h2>
          <div class="flex space-x-2">
            <button 
              id="webrtc-toggle-btn" 
              class="px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
              onClick=${()=>window.location.href="/index.html"}
            >
              Live View (WebRTC)
            </button>
            <button 
              id="fullscreen-btn" 
              class="px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
              onClick=${()=>p(m,f)}
            >
              Fullscreen
            </button>
          </div>
        </div>
        <div class="controls flex items-center space-x-2">
          <select 
            id="layout-selector" 
            class="px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600"
            value=${o}
            onChange=${e=>i(e.target.value)}
          >
            <option value="1">Single View</option>
            <option value="4" selected>2x2 Grid</option>
            <option value="9">3x3 Grid</option>
            <option value="16">4x4 Grid</option>
          </select>
          
          ${"1"===o&&s`
            <select 
              id="stream-selector" 
              class="px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600"
              value=${d}
              onChange=${e=>u(e.target.value)}
            >
              ${e.map((e=>s`
                <option key=${e.name} value=${e.name}>${e.name}</option>
              `))}
            </select>
          `}
        </div>
      </div>
      
      <div 
        id="video-grid" 
        class=${`video-container layout-${o}`}
        ref=${v}
      >
        ${y?s`
          <div class="flex justify-center items-center col-span-full row-span-full h-64 w-full">
            <${c} message="Loading streams..." size="lg" />
          </div>
        `:0===e.length?s`
          <div class="placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8">
            <p class="mb-6 text-gray-600 dark:text-gray-300 text-lg">No streams configured</p>
            <a href="streams.html" class="btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">Configure Streams</a>
          </div>
        `:null}
        <!-- Video cells will be dynamically added by the updateVideoGrid function -->
      </div>
    </section>
  `}e({LiveView:$,loadLiveView:function(){const e=document.getElementById("main-content");e&&i((async()=>{const{render:e}=await t.import("./preact-app-legacy-C7F2kZGB.js").then((e=>e.p));return{render:e}}),void 0,t.meta.url).then((({render:t})=>{t(s`<${$} />`,e)}))}})}}}));
//# sourceMappingURL=LiveView-legacy-lO41AljE.js.map
