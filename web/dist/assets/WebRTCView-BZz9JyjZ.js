const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./preact-app-FWUGqQo_.js","./preact-app-EtKUVNvg.css"])))=>i.map(i=>d[i]);
var F=Object.freeze,Z=Object.defineProperty;var h=(d,b)=>F(Z(d,"raw",{value:F(b||d.slice())}));import{d as $,A as P,y as _,h as y,_ as N,s as ee,a as te,b as oe,c as v,e as ne}from"./preact-app-FWUGqQo_.js";import{t as re,e as se,s as ie,c as ce}from"./DetectionOverlay-CWN1kWeE.js";var B,q,A,D,V,G;function le(){const[d,b]=$([]),[m,H]=$("4"),[S,L]=$(""),[W,j]=$(!1),[J,T]=$(!0),[p,I]=$(0),w=P(null),u=P({}),O=P({});_(()=>{ee(),te(),oe();const e=o=>{if(o.key==="Escape"){console.log("Escape key pressed, current fullscreen state:",W);const t=document.getElementById("live-page");t&&t.classList.contains("fullscreen-mode")&&(console.log("Detected fullscreen mode via DOM, exiting fullscreen"),se(null,j))}};document.addEventListener("keydown",e);const c=()=>{M()},i=()=>{document.hidden?(console.log("Page hidden, pausing WebRTC streams"),Object.keys(u.current).forEach(o=>{const t=u.current[o];if(t&&t.connectionState!=="closed"){const s="video-".concat(o.replace(/\s+/g,"-")),n=document.getElementById(s);n&&n.pause()}})):(console.log("Page visible, resuming WebRTC streams"),Object.keys(u.current).forEach(o=>{const t=u.current[o];if(t&&t.connectionState!=="closed"){const s="video-".concat(o.replace(/\s+/g,"-")),n=document.getElementById(s);n&&n.play().catch(l=>{console.warn("Could not resume video for ".concat(o,":"),l)})}}))};window.addEventListener("beforeunload",c),document.addEventListener("visibilitychange",i);const r=setInterval(()=>{Object.keys(u.current).forEach(o=>{const t=u.current[o];if(t&&(console.debug("WebRTC connection state for ".concat(o,": ").concat(t.connectionState,", ICE state: ").concat(t.iceConnectionState)),t.iceConnectionState==="failed"||t.iceConnectionState==="disconnected")){console.warn("WebRTC connection for ".concat(o," is in ").concat(t.iceConnectionState," state, will attempt reconnect")),C(o);const s=d.find(n=>n.name===o);s&&(console.log("Attempting to reconnect WebRTC for stream ".concat(o)),k(s))}})},3e4);return()=>{document.removeEventListener("keydown",e),window.removeEventListener("beforeunload",c),document.removeEventListener("visibilitychange",i),clearInterval(r),M()}},[d]),_(()=>{T(!0);const e=setTimeout(()=>{console.warn("Stream loading timed out"),T(!1),v("Loading streams timed out. Please try refreshing the page.")},15e3);z().then(c=>{clearTimeout(e),c&&c.length>0?(b(c),L(c[0].name)):console.warn("No streams returned from API"),T(!1)}).catch(c=>{clearTimeout(e),console.error("Error loading streams:",c),v("Error loading streams: "+c.message),T(!1)})},[]),_(()=>{K()},[m,S,d,p]);const z=async()=>{try{const e=new Promise((l,f)=>{setTimeout(()=>f(new Error("Request timed out")),5e3)}),c=fetch("/api/streams"),i=await Promise.race([c,e]);if(!i.ok)throw new Error("Failed to load streams");const r=new Promise((l,f)=>{setTimeout(()=>f(new Error("JSON parsing timed out")),3e3)}),o=i.json(),s=(await Promise.race([o,r])||[]).map(l=>{const f=new Promise((g,x)=>{setTimeout(()=>x(new Error("Timeout fetching details for stream ".concat(l.name))),3e3)}),a=fetch("/api/streams/".concat(encodeURIComponent(l.id||l.name))).then(g=>{if(!g.ok)throw new Error("Failed to load details for stream ".concat(l.name));return g.json()});return Promise.race([a,f]).catch(g=>(console.error("Error loading details for stream ".concat(l.name,":"),g),l))}),n=await Promise.all(s);return console.log("Loaded detailed streams for WebRTC view:",n),n||[]}catch(e){return console.error("Error loading streams for WebRTC view:",e),v("Error loading streams: "+e.message),[]}},E=()=>{switch(m){case"1":return 1;case"2":return 2;case"4":return 4;case"6":return 6;case"9":return 9;case"16":return 16;default:return 4}},K=()=>{if(!w.current)return;const e=w.current.querySelector(".placeholder");if(w.current.innerHTML="",e&&d.length===0){w.current.appendChild(e);return}let c=d;if(m==="1"&&S)c=d.filter(r=>r.name===S);else{const r=E(),o=Math.ceil(d.length/r);if(p>=o){I(Math.max(0,o-1));return}const t=p*r,s=Math.min(t+r,d.length);c=d.slice(t,s)}const i=c.map(r=>r.name);Object.keys(u.current).forEach(r=>{i.includes(r)||(console.log("Cleaning up WebRTC connection for stream ".concat(r," (not visible in current view)")),C(r))}),c.forEach(r=>{const o=r.id||r.name,t=document.createElement("div");t.className="video-cell",t.innerHTML='\n        <video id="video-'.concat(r.name.replace(/\s+/g,"-"),'" autoplay muted></video>\n        <div class="stream-info">\n          <span>').concat(r.name,"</span>\n          <span>").concat(r.width,"x").concat(r.height," Â· ").concat(r.fps,'fps</span>\n          <div class="stream-controls">\n            <button class="snapshot-btn" data-id="').concat(o,'" data-name="').concat(r.name,'">\n              <span>ðŸ“·</span> Snapshot\n            </button>\n            <button class="fullscreen-btn" data-id="').concat(o,'" data-name="').concat(r.name,'">\n              <span>â›¶</span> Fullscreen\n            </button>\n          </div>\n        </div>\n        <div class="loading-indicator">\n          <div class="loading-spinner"></div>\n          <span>Connecting WebRTC...</span>\n        </div>\n      '),w.current.appendChild(t),k(r);const s=t.querySelector(".snapshot-btn");s&&s.addEventListener("click",()=>{X(o)});const n=t.querySelector(".fullscreen-btn");n&&n.addEventListener("click",()=>{Y(r.name)})})},k=e=>{const c="video-".concat(e.name.replace(/\s+/g,"-")),i=document.getElementById(c),r=i?i.closest(".video-cell"):null;if(!i||!r)return;const o=r.querySelector(".loading-indicator");o&&(o.style.display="flex");const t="canvas-".concat(e.name.replace(/\s+/g,"-"));let s=document.getElementById(t);s||(s=document.createElement("canvas"),s.id=t,s.className="detection-overlay",s.style.position="absolute",s.style.top="0",s.style.left="0",s.style.width="100%",s.style.height="100%",s.style.pointerEvents="none",r.appendChild(s));const n=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}],iceTransportPolicy:"all",bundlePolicy:"balanced",rtcpMuxPolicy:"require",sdpSemantics:"unified-plan"});u.current[e.name]=n,n.ontrack=a=>{console.log("Track received for stream ".concat(e.name,":"),a),a.track.kind==="video"&&(i.srcObject=a.streams[0],i.onloadeddata=()=>{o&&(o.style.display="none")})},n.onicecandidate=a=>{a.candidate&&console.log("ICE candidate for stream ".concat(e.name,":"),a.candidate)},n.oniceconnectionstatechange=()=>{console.log("ICE connection state for stream ".concat(e.name,":"),n.iceConnectionState),(n.iceConnectionState==="failed"||n.iceConnectionState==="disconnected")&&R(e.name,"WebRTC connection failed")},n.addTransceiver("video",{direction:"recvonly"}),n.addTransceiver("audio",{direction:"recvonly"});const l={offerToReceiveAudio:!0,offerToReceiveVideo:!0},f=setTimeout(()=>{console.warn("WebRTC setup timed out for stream ".concat(e.name)),R(e.name,"WebRTC setup timed out"),u.current[e.name]&&C(e.name)},15e3);n.createOffer(l).then(a=>(console.log("Created offer for stream ".concat(e.name,":"),a),console.log("Original SDP for stream ".concat(e.name,":"),a.sdp),(!a.sdp.includes("a=ice-ufrag:")||!a.sdp.includes("a=ice-pwd:"))&&console.warn("SDP for stream ".concat(e.name," is missing ice-ufrag or ice-pwd!")),console.log("Using original offer for stream ".concat(e.name)),n.setLocalDescription(a))).then(()=>(console.log("Set local description for stream ".concat(e.name)),Q(e.name,n.localDescription))).then(a=>(console.log("Received answer for stream ".concat(e.name,":"),a),n.setRemoteDescription(new RTCSessionDescription(a)))).then(()=>{console.log("Set remote description for stream ".concat(e.name)),clearTimeout(f),console.log("Stream ".concat(e.name," detection settings:"),{detection_based_recording:e.detection_based_recording,detection_model:e.detection_model,detection_threshold:e.detection_threshold}),e.detection_based_recording&&e.detection_model?(console.log("Starting detection polling for stream ".concat(e.name)),ie(e.name,s,i,O.current)):console.log("Detection not enabled for stream ".concat(e.name))}).catch(a=>{clearTimeout(f),console.error("Error setting up WebRTC for stream ".concat(e.name,":"),a),R(e.name,a.message)})},Q=async(e,c)=>{try{const i=localStorage.getItem("auth"),r={type:c.type,sdp:c.sdp};console.log("Sending formatted offer for stream ".concat(e,":"),r);const o=new AbortController,t=o.signal,s=setTimeout(()=>{console.warn("Aborting WebRTC offer request for stream ".concat(e," due to timeout")),o.abort()},8e3);try{const n=await fetch("/api/webrtc?src=".concat(encodeURIComponent(e)),{method:"POST",headers:{"Content-Type":"application/json",...i?{Authorization:"Basic "+i}:{}},body:JSON.stringify(r),signal:t});if(clearTimeout(s),!n.ok)throw new Error("Failed to send offer: ".concat(n.status," ").concat(n.statusText));const l=new AbortController,f=l.signal,a=setTimeout(()=>{console.warn("Aborting JSON parsing for stream ".concat(e," due to timeout")),l.abort()},5e3);try{const g=await n.text();clearTimeout(a);try{return JSON.parse(g)}catch(x){throw console.error("Error parsing JSON for stream ".concat(e,":"),x),console.log("Raw response text: ".concat(g)),new Error("Failed to parse WebRTC answer: ".concat(x.message))}}catch(g){throw clearTimeout(a),g.name==="AbortError"?new Error("WebRTC answer parsing timed out for stream ".concat(e)):g}}catch(n){throw clearTimeout(s),n.name==="AbortError"?new Error("WebRTC offer request timed out for stream ".concat(e)):n}}catch(i){throw console.error("Error sending offer for stream ".concat(e,":"),i),i}},R=(e,c)=>{const i="video-".concat(e.replace(/\s+/g,"-")),r=document.getElementById(i),o=r?r.closest(".video-cell"):null;if(!o)return;const t=o.querySelector(".loading-indicator");t&&(t.style.display="none");let s=o.querySelector(".error-indicator");s||(s=document.createElement("div"),s.className="error-indicator",o.appendChild(s)),s.innerHTML='\n      <div class="error-icon">!</div>\n      <p>'.concat(c||"WebRTC connection failed",'</p>\n      <button class="retry-button mt-4 px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">Retry</button>\n    ');const n=s.querySelector(".retry-button");n&&n.addEventListener("click",()=>{t&&(t.style.display="flex"),s.style.display="none",C(e),fetch("/api/streams/".concat(encodeURIComponent(e))).then(l=>l.json()).then(l=>{k(l)}).catch(l=>{console.error("Error fetching stream info:",l),s.style.display="flex";const f=s.querySelector("p");f&&(f.textContent="Could not reconnect: "+l.message),t&&(t.style.display="none")})})},C=e=>{u.current[e]&&(u.current[e].close(),delete u.current[e]);const c="video-".concat(e.replace(/\s+/g,"-")),i=document.getElementById(c);i&&(i.srcObject=null),ce(e,O.current)},M=()=>{Object.keys(u.current).forEach(e=>{C(e)})},X=e=>{const c=document.querySelector('.snapshot-btn[data-id="'.concat(e,'"]'));if(!c){console.error("Stream element not found for ID:",e);return}const i=c.getAttribute("data-name");if(!i){console.error("Stream name not found for ID:",e);return}const r="video-".concat(i.replace(/\s+/g,"-")),o=document.getElementById(r);if(!o){console.error("Video element not found for stream:",i);return}const t=document.createElement("canvas");if(t.width=o.videoWidth,t.height=o.videoHeight,t.width===0||t.height===0){console.error("Invalid video dimensions:",t.width,t.height),v("Cannot take snapshot: Video not loaded or has invalid dimensions");return}t.getContext("2d").drawImage(o,0,0,t.width,t.height);try{window.__snapshotCanvas=t;const n=new Date().toISOString().replace(/[:.]/g,"-"),l="snapshot-".concat(i.replace(/\s+/g,"-"),"-").concat(n,".jpg");window.__snapshotFileName=l,ne(t.toDataURL("image/jpeg",.95),"Snapshot: ".concat(i)),v("Snapshot taken successfully")}catch(n){console.error("Error creating snapshot:",n),v("Failed to create snapshot: "+n.message)}},Y=e=>{const c="video-".concat(e.replace(/\s+/g,"-")),i=document.getElementById(c),r=i?i.closest(".video-cell"):null;if(!r){console.error("Stream not found:",e);return}document.fullscreenElement?document.exitFullscreen():r.requestFullscreen().catch(o=>{console.error("Error attempting to enable fullscreen: ".concat(o.message)),v("Could not enable fullscreen mode: ".concat(o.message))})};return y(G||(G=h(['\n    <section id="live-page" class="page">\n      <div class="page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow">\n        <div class="flex items-center space-x-2">\n          <h2 class="text-xl font-bold mr-4">Live View</h2>\n          <div class="flex space-x-2">\n            <button \n              id="hls-toggle-btn" \n              class="px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"\n              onClick=','\n            >\n              HLS View\n            </button>\n            <button \n              id="fullscreen-btn" \n              class="px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"\n              onClick=','\n            >\n              Fullscreen\n            </button>\n          </div>\n        </div>\n        <div class="controls flex items-center space-x-2">\n          <select \n            id="layout-selector" \n            class="px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600"\n            value=',"\n            onChange=",'\n          >\n            <option value="1">Single View</option>\n            <option value="2">2x1 Grid</option>\n            <option value="4" selected>2x2 Grid</option>\n            <option value="6">2x3 Grid</option>\n            <option value="9">3x3 Grid</option>\n            <option value="16">4x4 Grid</option>\n          </select>\n          \n          ','\n        </div>\n      </div>\n      \n      <div class="flex flex-col space-y-4">\n        <div \n          id="video-grid" \n          class=',"\n          ref=","\n        >\n          ","\n          <!-- Video cells will be dynamically added by the updateVideoGrid function -->\n        </div>\n        \n        ","\n      </div>\n    </section>\n  "])),()=>window.location.href="/hls.html",()=>re(W,j),m,e=>{H(e.target.value),I(0)},m==="1"&&y(q||(q=h(['\n            <select \n              id="stream-selector" \n              class="px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600"\n              value=',"\n              onChange=","\n            >\n              ","\n            </select>\n          "])),S,e=>L(e.target.value),d.map(e=>y(B||(B=h(["\n                <option key="," value=",">","</option>\n              "])),e.name,e.name,e.name))),"video-container layout-".concat(m),w,J?y(A||(A=h(['\n            <div class="flex justify-center items-center col-span-full row-span-full h-64 w-full">\n              <div class="flex flex-col items-center justify-center py-8">\n                <div class="inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16"></div>\n                <p class="mt-4 text-gray-700 dark:text-gray-300">Loading streams...</p>\n              </div>\n            </div>\n          ']))):d.length===0?y(D||(D=h(['\n            <div class="placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8">\n              <p class="mb-6 text-gray-600 dark:text-gray-300 text-lg">No streams configured</p>\n              <a href="streams.html" class="btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">Configure Streams</a>\n            </div>\n          ']))):null,m!=="1"&&d.length>E()?y(V||(V=h(['\n          <div class="pagination-controls flex justify-center items-center space-x-4 mt-4">\n            <button \n              class="px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"\n              onClick=',"\n              disabled=",'\n            >\n              Previous\n            </button>\n            <span class="text-gray-700 dark:text-gray-300">\n              Page '," of ",'\n            </span>\n            <button \n              class="px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"\n              onClick=',"\n              disabled=","\n            >\n              Next\n            </button>\n          </div>\n        "])),()=>I(Math.max(0,p-1)),p===0,p+1,Math.ceil(d.length/E()),()=>I(Math.min(Math.ceil(d.length/E())-1,p+1)),p>=Math.ceil(d.length/E())-1):null)}var U;function fe(){const d=document.getElementById("main-content");d&&N(async()=>{const{render:b}=await import("./preact-app-FWUGqQo_.js").then(m=>m.p);return{render:b}},__vite__mapDeps([0,1]),import.meta.url).then(({render:b})=>{b(y(U||(U=h(["<"," />"])),le),d)})}export{le as WebRTCView,fe as loadWebRTCView};
//# sourceMappingURL=WebRTCView-BZz9JyjZ.js.map
