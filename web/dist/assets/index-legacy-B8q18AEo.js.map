{"version":3,"file":"index-legacy-B8q18AEo.js","sources":["../../js/components/preact/WebRTCVideoCell.jsx","../../js/components/preact/WebRTCView.jsx","../../js/pages/index-page.jsx"],"sourcesContent":["/**\n * WebRTCVideoCell Component\n * A self-contained component for displaying a WebRTC video stream\n */\n\nimport { h } from 'preact';\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { DetectionOverlay, takeSnapshotWithDetections } from './DetectionOverlay.jsx';\nimport { SnapshotButton } from './SnapshotManager.jsx';\nimport { LoadingIndicator } from './LoadingIndicator.jsx';\nimport { showSnapshotPreview } from './UI.jsx';\n\n/**\n * WebRTCVideoCell component\n * @param {Object} props - Component props\n * @param {Object} props.stream - Stream object\n * @param {Function} props.onToggleFullscreen - Fullscreen toggle handler\n * @param {string} props.streamId - Stream ID for stable reference\n * @returns {JSX.Element} WebRTCVideoCell component\n */\nexport function WebRTCVideoCell({\n  stream,\n  streamId,\n  onToggleFullscreen\n}) {\n  // Component state\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // Refs\n  const videoRef = useRef(null);\n  const cellRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const detectionOverlayRef = useRef(null);\n  const abortControllerRef = useRef(null);\n\n  // Initialize WebRTC connection when component mounts\n  useEffect(() => {\n    if (!stream || !stream.name || !videoRef.current) return;\n\n    console.log(`Initializing WebRTC connection for stream ${stream.name}`);\n    setIsLoading(true);\n    setError(null);\n\n    // Create a new RTCPeerConnection\n    const pc = new RTCPeerConnection({\n      iceServers: [\n        { urls: 'stun:stun.l.google.com:19302' },\n        { urls: 'stun:stun1.l.google.com:19302' }\n      ]\n    });\n\n    peerConnectionRef.current = pc;\n\n    // Set up event handlers\n    pc.ontrack = (event) => {\n      console.log(`Track received for stream ${stream.name}`);\n      \n      if (event.track.kind === 'video') {\n        const videoElement = videoRef.current;\n        if (!videoElement) return;\n\n        // Set srcObject\n        videoElement.srcObject = event.streams[0];\n        \n        // Add event handlers\n        videoElement.onloadeddata = () => {\n          console.log(`Video data loaded for stream ${stream.name}`);\n        };\n\n        videoElement.onplaying = () => {\n          console.log(`Video playing for stream ${stream.name}`);\n          setIsLoading(false);\n          setIsPlaying(true);\n        };\n\n        videoElement.onerror = (e) => {\n          console.error(`Video error for stream ${stream.name}:`, e);\n          setError('Video playback error');\n          setIsLoading(false);\n        };\n      }\n    };\n\n    pc.onicecandidate = (event) => {\n      if (event.candidate) {\n        // Filter out empty candidates\n        if (event.candidate.candidate !== \"\") {\n          console.log(`ICE candidate for stream ${stream.name}`);\n        } else {\n          console.log(`Ignoring empty ICE candidate for stream ${stream.name}`);\n        }\n      }\n    };\n\n    pc.oniceconnectionstatechange = () => {\n      console.log(`ICE connection state for stream ${stream.name}: ${pc.iceConnectionState}`);\n      \n      if (pc.iceConnectionState === 'failed') {\n        setError('WebRTC ICE connection failed');\n        setIsLoading(false);\n      }\n    };\n\n    // Add transceivers\n    pc.addTransceiver('video', {direction: 'recvonly'});\n    pc.addTransceiver('audio', {direction: 'recvonly'});\n\n    // Create and send offer\n    pc.createOffer()\n      .then(offer => pc.setLocalDescription(offer))\n      .then(() => {\n        // Create a new AbortController for this request\n        abortControllerRef.current = new AbortController();\n        \n        // Format the offer\n        const formattedOffer = {\n          type: pc.localDescription.type,\n          sdp: pc.localDescription.sdp\n        };\n\n        // Get auth token if available\n        const auth = localStorage.getItem('auth');\n\n        // Send the offer to the server\n        return fetch(`/api/webrtc?src=${encodeURIComponent(stream.name)}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            ...(auth ? { 'Authorization': 'Basic ' + auth } : {})\n          },\n          body: JSON.stringify(formattedOffer),\n          signal: abortControllerRef.current.signal\n        });\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`Failed to send offer: ${response.status} ${response.statusText}`);\n        }\n        return response.text();\n      })\n      .then(text => {\n        try {\n          return JSON.parse(text);\n        } catch (error) {\n          console.error(`Error parsing JSON for stream ${stream.name}:`, error);\n          throw new Error('Failed to parse WebRTC answer');\n        }\n      })\n      .then(answer => pc.setRemoteDescription(new RTCSessionDescription(answer)))\n      .catch(error => {\n        console.error(`Error setting up WebRTC for stream ${stream.name}:`, error);\n        setError(error.message || 'Failed to establish WebRTC connection');\n        setIsLoading(false);\n      });\n\n    // Cleanup function\n    return () => {\n      console.log(`Cleaning up WebRTC connection for stream ${stream.name}`);\n      \n      // Abort any pending fetch requests\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n        abortControllerRef.current = null;\n      }\n      \n      // Clean up video element\n      if (videoRef.current && videoRef.current.srcObject) {\n        const tracks = videoRef.current.srcObject.getTracks();\n        tracks.forEach(track => track.stop());\n        videoRef.current.srcObject = null;\n      }\n      \n      // Close peer connection\n      if (peerConnectionRef.current) {\n        peerConnectionRef.current.close();\n        peerConnectionRef.current = null;\n      }\n    };\n  }, [stream]);\n\n  // Handle retry button click\n  const handleRetry = () => {\n    // Force a re-render to restart the WebRTC connection\n    setError(null);\n    setIsLoading(true);\n    \n    // Clean up existing connection\n    if (peerConnectionRef.current) {\n      peerConnectionRef.current.close();\n      peerConnectionRef.current = null;\n    }\n    \n    if (videoRef.current && videoRef.current.srcObject) {\n      const tracks = videoRef.current.srcObject.getTracks();\n      tracks.forEach(track => track.stop());\n      videoRef.current.srcObject = null;\n    }\n    \n    // Force a re-render by updating state\n    setIsPlaying(false);\n  };\n\n  return (\n    <div\n      className=\"video-cell\"\n      data-stream-name={stream.name}\n      data-stream-id={streamId}\n      ref={cellRef}\n      style={{\n        position: 'relative',\n        pointerEvents: 'auto',\n        zIndex: 1\n      }}\n    >\n      {/* Video element */}\n      <video\n        id={`video-${streamId.replace(/\\s+/g, '-')}`}\n        className=\"video-element\"\n        ref={videoRef}\n        playsInline\n        autoPlay\n        muted\n        disablePictureInPicture\n        style={{ width: '100%', height: '100%', objectFit: 'contain' }}\n      />\n\n      {/* Detection overlay component */}\n      {stream.detection_based_recording && stream.detection_model && (\n        <DetectionOverlay\n          ref={detectionOverlayRef}\n          streamName={stream.name}\n          videoRef={videoRef}\n          enabled={isPlaying}\n          detectionModel={stream.detection_model}\n        />\n      )}\n\n      {/* Stream name overlay */}\n      <div\n        className=\"stream-name-overlay\"\n        style={{\n          position: 'absolute',\n          top: '10px',\n          left: '10px',\n          padding: '5px 10px',\n          backgroundColor: 'rgba(0, 0, 0, 0.5)',\n          color: 'white',\n          borderRadius: '4px',\n          fontSize: '14px',\n          zIndex: 3\n        }}\n      >\n        {stream.name}\n      </div>\n\n      {/* Stream controls */}\n      <div\n        className=\"stream-controls\"\n        style={{\n          position: 'absolute',\n          bottom: '10px',\n          right: '10px',\n          display: 'flex',\n          gap: '10px',\n          zIndex: 5,\n          backgroundColor: 'rgba(0, 0, 0, 0.5)',\n          padding: '5px',\n          borderRadius: '4px'\n        }}\n      >\n        <div\n          style={{\n            backgroundColor: 'transparent',\n            padding: '5px',\n            borderRadius: '4px'\n          }}\n          onMouseOver={(e) => e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.2)'}\n          onMouseOut={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n        >\n          <SnapshotButton\n            streamId={streamId}\n            streamName={stream.name}\n            onSnapshot={() => {\n              if (videoRef.current) {\n                let canvasRef = null;\n\n                // Try to get canvas ref from detection overlay if available\n                if (detectionOverlayRef.current && typeof detectionOverlayRef.current.getCanvasRef === 'function') {\n                  canvasRef = detectionOverlayRef.current.getCanvasRef();\n                }\n\n                // Take snapshot with or without detections\n                if (canvasRef) {\n                  const snapshot = takeSnapshotWithDetections(videoRef, canvasRef, stream.name);\n                  if (snapshot) {\n                    showSnapshotPreview(snapshot.canvas.toDataURL('image/jpeg', 0.95), `Snapshot: ${stream.name}`);\n                  }\n                } else {\n                  // Take a simple snapshot without detections\n                  const videoElement = videoRef.current;\n                  const canvas = document.createElement('canvas');\n                  canvas.width = videoElement.videoWidth;\n                  canvas.height = videoElement.videoHeight;\n\n                  if (canvas.width > 0 && canvas.height > 0) {\n                    const ctx = canvas.getContext('2d');\n                    ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n\n                    showSnapshotPreview(canvas.toDataURL('image/jpeg', 0.95), `Snapshot: ${stream.name}`);\n                  }\n                }\n              }\n            }}\n          />\n        </div>\n        <button\n          className=\"fullscreen-btn\"\n          title=\"Toggle Fullscreen\"\n          data-id={streamId}\n          data-name={stream.name}\n          onClick={(e) => onToggleFullscreen(stream.name, e, cellRef.current)}\n          style={{\n            backgroundColor: 'transparent',\n            border: 'none',\n            padding: '5px',\n            borderRadius: '4px',\n            color: 'white',\n            cursor: 'pointer'\n          }}\n          onMouseOver={(e) => e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.2)'}\n          onMouseOut={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\"></path></svg>\n        </button>\n      </div>\n\n      {/* Loading indicator */}\n      {isLoading && (\n        <div style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, zIndex: 5, pointerEvents: 'none' }}>\n          <LoadingIndicator message=\"Connecting...\" />\n        </div>\n      )}\n\n      {/* Error indicator */}\n      {error && (\n        <div\n          className=\"error-indicator\"\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            color: 'white',\n            zIndex: 5,\n            textAlign: 'center'\n          }}\n        >\n          <div\n            className=\"error-content\"\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n              width: '80%',\n              maxWidth: '300px',\n              padding: '20px',\n              borderRadius: '8px',\n              backgroundColor: 'rgba(0, 0, 0, 0.5)'\n            }}\n          >\n            <div\n              className=\"error-icon\"\n              style={{\n                fontSize: '28px',\n                marginBottom: '15px',\n                fontWeight: 'bold',\n                width: '40px',\n                height: '40px',\n                lineHeight: '40px',\n                borderRadius: '50%',\n                backgroundColor: 'rgba(220, 38, 38, 0.8)',\n                textAlign: 'center'\n              }}\n            >\n              !\n            </div>\n            <p style={{\n              marginBottom: '20px',\n              textAlign: 'center',\n              width: '100%',\n              fontSize: '14px',\n              lineHeight: '1.4'\n            }}>\n              {error}\n            </p>\n            <button\n              className=\"retry-button\"\n              onClick={handleRetry}\n              style={{\n                padding: '8px 20px',\n                backgroundColor: '#2563eb',\n                color: 'white',\n                borderRadius: '4px',\n                border: 'none',\n                cursor: 'pointer',\n                fontWeight: 'bold',\n                fontSize: '14px',\n                boxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)',\n                transition: 'background-color 0.2s ease'\n              }}\n              onMouseOver={(e) => e.currentTarget.style.backgroundColor = '#1d4ed8'}\n              onMouseOut={(e) => e.currentTarget.style.backgroundColor = '#2563eb'}\n            >\n              Retry\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","/**\n * LightNVR Web Interface WebRTCView Component\n * Preact component for the WebRTC view page\n */\n\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'preact/hooks';\nimport { setupModals, addModalStyles } from './UI.jsx';\nimport { showStatusMessage } from './ToastContainer.jsx';\nimport { useFullscreenManager, FullscreenManager } from './FullscreenManager.jsx';\nimport { useQuery, useQueryClient } from '../../query-client.js';\nimport { WebRTCVideoCell } from './WebRTCVideoCell.jsx';\nimport { SnapshotManager, useSnapshotManager } from './SnapshotManager.jsx';\n\n/**\n * WebRTCView component\n * @returns {JSX.Element} WebRTCView component\n */\nexport function WebRTCView() {\n  // Use the snapshot manager hook\n  const { takeSnapshot } = useSnapshotManager();\n\n  // Use the fullscreen manager hook\n  const { isFullscreen, setIsFullscreen, toggleFullscreen } = useFullscreenManager();\n\n  // State for streams and layout\n  const [streams, setStreams] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Initialize layout from URL or sessionStorage if available\n  const [layout, setLayout] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const layoutParam = urlParams.get('layout');\n    if (layoutParam) {\n      return layoutParam;\n    }\n    // Check sessionStorage as a backup\n    const storedLayout = sessionStorage.getItem('webrtc_layout');\n    return storedLayout || '4';\n  });\n\n  // Initialize selectedStream from URL or sessionStorage if available\n  const [selectedStream, setSelectedStream] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const streamParam = urlParams.get('stream');\n    if (streamParam) {\n      return streamParam;\n    }\n    // Check sessionStorage as a backup\n    const storedStream = sessionStorage.getItem('webrtc_selected_stream');\n    return storedStream || '';\n  });\n\n  // Initialize currentPage from URL or sessionStorage if available (URL uses 1-based indexing, internal state uses 0-based)\n  const [currentPage, setCurrentPage] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const pageParam = urlParams.get('page');\n    if (pageParam) {\n      // Convert from 1-based (URL) to 0-based (internal)\n      return Math.max(0, parseInt(pageParam, 10) - 1);\n    }\n    // Check sessionStorage as a backup\n    const storedPage = sessionStorage.getItem('webrtc_current_page');\n    if (storedPage) {\n      // Convert from 1-based (stored) to 0-based (internal)\n      return Math.max(0, parseInt(storedPage, 10) - 1);\n    }\n    return 0;\n  });\n\n  // Get query client for fetching and invalidating queries\n  const queryClient = useQueryClient();\n\n  // Set up event listeners and UI components\n  useEffect(() => {\n    // Set up modals for snapshot preview\n    setupModals();\n    addModalStyles();\n  }, []);\n\n  // Fetch streams using preact-query\n  const {\n    data: streamsData,\n    isLoading: isLoadingStreams,\n    error: streamsError\n  } = useQuery(\n    'streams',\n    '/api/streams',\n    {\n      timeout: 15000, // 15 second timeout\n      retries: 2,     // Retry twice\n      retryDelay: 1000 // 1 second between retries\n    }\n  );\n\n  // Update loading state based on streams query status\n  useEffect(() => {\n    setIsLoading(isLoadingStreams);\n  }, [isLoadingStreams]);\n\n  // Process streams data when it's loaded\n  useEffect(() => {\n    if (streamsData && Array.isArray(streamsData)) {\n      // Process the streams data\n      const processStreams = async () => {\n        try {\n          // Filter and process the streams\n          const filteredStreams = await filterStreamsForWebRTC(streamsData);\n\n          if (filteredStreams.length > 0) {\n            setStreams(filteredStreams);\n\n            // Set selectedStream based on URL parameter if it exists and is valid\n            const urlParams = new URLSearchParams(window.location.search);\n            const streamParam = urlParams.get('stream');\n\n            if (streamParam && filteredStreams.some(stream => stream.name === streamParam)) {\n              // If the stream from URL exists in the loaded streams, use it\n              setSelectedStream(streamParam);\n            } else if (!selectedStream || !filteredStreams.some(stream => stream.name === selectedStream)) {\n              // Otherwise use the first stream if selectedStream is not set or invalid\n              setSelectedStream(filteredStreams[0].name);\n            }\n          } else {\n            console.warn('No streams available for WebRTC view after filtering');\n          }\n        } catch (error) {\n          console.error('Error processing streams:', error);\n          showStatusMessage('Error processing streams: ' + error.message);\n        }\n      };\n\n      processStreams();\n    }\n  }, [streamsData, selectedStream]);\n\n  // Update URL when layout, page, or selectedStream changes\n  useEffect(() => {\n    // Don't update URL during initial load or when streams are empty\n    if (streams.length === 0) return;\n\n    console.log('Updating URL parameters');\n    const url = new URL(window.location);\n\n    // Handle page parameter (convert from 0-based internal to 1-based URL)\n    if (currentPage === 0) {\n      url.searchParams.delete('page');\n    } else {\n      // Add 1 to convert from 0-based (internal) to 1-based (URL)\n      url.searchParams.set('page', currentPage + 1);\n    }\n\n    // Handle layout parameter\n    if (layout !== '4') { // Only set if not the default\n      url.searchParams.set('layout', layout);\n    } else {\n      // Remove layout parameter if it's the default value\n      url.searchParams.delete('layout');\n    }\n\n    // Handle selectedStream parameter\n    if (layout === '1' && selectedStream) {\n      url.searchParams.set('stream', selectedStream);\n    } else {\n      // Remove stream parameter if not in single stream mode\n      url.searchParams.delete('stream');\n    }\n\n    // Update URL without reloading the page\n    window.history.replaceState({}, '', url);\n\n    // Also update sessionStorage\n    if (currentPage > 0) {\n      sessionStorage.setItem('webrtc_current_page', (currentPage + 1).toString());\n    } else {\n      sessionStorage.removeItem('webrtc_current_page');\n    }\n\n    if (layout !== '4') {\n      sessionStorage.setItem('webrtc_layout', layout);\n    } else {\n      sessionStorage.removeItem('webrtc_layout');\n    }\n\n    if (layout === '1' && selectedStream) {\n      sessionStorage.setItem('webrtc_selected_stream', selectedStream);\n    } else {\n      sessionStorage.removeItem('webrtc_selected_stream');\n    }\n  }, [currentPage, layout, selectedStream, streams.length]);\n\n  /**\n   * Filter streams for WebRTC view\n   * @param {Array} streams - Array of streams\n   * @returns {Promise<Array>} Promise resolving to filtered array of streams\n   */\n  const filterStreamsForWebRTC = async (streams) => {\n    try {\n      if (!streams || !Array.isArray(streams)) {\n        console.warn('No streams data provided to filter');\n        return [];\n      }\n\n      // For WebRTC view, we need to fetch full details for each stream\n      const streamPromises = streams.map(async (stream) => {\n        try {\n          const streamId = stream.id || stream.name;\n\n          const streamDetails = await queryClient.fetchQuery({\n            queryKey: ['stream-details', streamId],\n            queryFn: async () => {\n              const response = await fetch(`/api/streams/${encodeURIComponent(streamId)}`);\n              if (!response.ok) {\n                throw new Error(`Failed to load details for stream ${stream.name}`);\n              }\n              return response.json();\n            },\n            staleTime: 30000 // 30 seconds\n          });\n\n          return streamDetails;\n        } catch (error) {\n          console.error(`Error loading details for stream ${stream.name}:`, error);\n          // Return the basic stream info if we can't get details\n          return stream;\n        }\n      });\n\n      const detailedStreams = await Promise.all(streamPromises);\n      console.log('Loaded detailed streams for WebRTC view:', detailedStreams);\n\n      // Filter out streams that are soft deleted, inactive, or not configured for streaming\n      const filteredStreams = detailedStreams.filter(stream => {\n        // Filter out soft deleted streams\n        if (stream.is_deleted) {\n          console.log(`Stream ${stream.name} is soft deleted, filtering out`);\n          return false;\n        }\n\n        // Filter out inactive streams\n        if (!stream.enabled) {\n          console.log(`Stream ${stream.name} is inactive, filtering out`);\n          return false;\n        }\n\n        // Filter out streams not configured for streaming\n        if (!stream.streaming_enabled) {\n          console.log(`Stream ${stream.name} is not configured for streaming, filtering out`);\n          return false;\n        }\n\n        return true;\n      });\n\n      console.log('Filtered streams for WebRTC view:', filteredStreams);\n\n      return filteredStreams || [];\n    } catch (error) {\n      console.error('Error filtering streams for WebRTC view:', error);\n      showStatusMessage('Error processing streams: ' + error.message);\n      return [];\n    }\n  };\n\n  /**\n   * Get maximum number of streams to display based on layout\n   * @returns {number} Maximum number of streams\n   */\n  const getMaxStreamsForLayout = useCallback(() => {\n    switch (layout) {\n      case '1': return 1;  // Single view\n      case '2': return 2;  // 2x1 grid\n      case '4': return 4;  // 2x2 grid\n      case '6': return 6;  // 2x3 grid\n      case '9': return 9;  // 3x3 grid\n      case '16': return 16; // 4x4 grid\n      default: return 4;\n    }\n  }, [layout]);\n\n  /**\n   * Get streams to show based on layout, selected stream, and pagination\n   * @returns {Array} Streams to show\n   */\n  const getStreamsToShow = useCallback(() => {\n    // Filter streams based on layout and selected stream\n    let streamsToShow = streams;\n\n    if (layout === '1' && selectedStream) {\n      streamsToShow = streams.filter(stream => stream.name === selectedStream);\n    } else {\n      // Apply pagination\n      const maxStreams = getMaxStreamsForLayout();\n      const totalPages = Math.ceil(streams.length / maxStreams);\n\n      // Ensure current page is valid\n      if (currentPage >= totalPages && totalPages > 0) {\n        return []; // Will be handled by the effect that watches currentPage\n      }\n\n      // Get streams for current page\n      const startIdx = currentPage * maxStreams;\n      const endIdx = Math.min(startIdx + maxStreams, streams.length);\n      streamsToShow = streams.slice(startIdx, endIdx);\n    }\n\n    return streamsToShow;\n  }, [streams, layout, selectedStream, currentPage]);\n\n  // Ensure current page is valid when streams or layout changes\n  useEffect(() => {\n    if (streams.length === 0) return;\n\n    const maxStreams = getMaxStreamsForLayout();\n    const totalPages = Math.ceil(streams.length / maxStreams);\n\n    if (currentPage >= totalPages) {\n      setCurrentPage(Math.max(0, totalPages - 1));\n    }\n  }, [streams, layout, currentPage, getMaxStreamsForLayout]);\n\n  /**\n   * Toggle fullscreen mode for a specific stream\n   * @param {string} streamName - Stream name\n   * @param {Event} event - Click event\n   * @param {HTMLElement} cellElement - The video cell element\n   */\n  const toggleStreamFullscreen = (streamName, event, cellElement) => {\n    // Prevent default button behavior\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    if (!streamName) {\n      console.error('Stream name not provided for fullscreen toggle');\n      return;\n    }\n\n    console.log(`Toggling fullscreen for stream: ${streamName}`);\n\n    if (!cellElement) {\n      console.error('Video cell element not provided for fullscreen toggle');\n      return;\n    }\n\n    if (!document.fullscreenElement) {\n      console.log('Entering fullscreen mode for video cell');\n      cellElement.requestFullscreen().catch(err => {\n        console.error(`Error attempting to enable fullscreen: ${err.message}`);\n        showStatusMessage(`Could not enable fullscreen mode: ${err.message}`);\n      });\n    } else {\n      console.log('Exiting fullscreen mode');\n      document.exitFullscreen();\n    }\n  };\n\n  // Memoize the streams to show to prevent unnecessary re-renders\n  const streamsToShow = useMemo(() => getStreamsToShow(), [streams, layout, selectedStream, currentPage, getMaxStreamsForLayout]);\n\n  return (\n    <section\n      id=\"live-page\"\n      className={`page ${isFullscreen ? 'fullscreen-mode' : ''}`}\n    >\n      {/* Include the SnapshotManager component */}\n      <SnapshotManager />\n\n      {/* Include the FullscreenManager component */}\n      <FullscreenManager\n        isFullscreen={isFullscreen}\n        setIsFullscreen={setIsFullscreen}\n        targetId=\"live-page\"\n      />\n\n      <div className=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\" style={{ position: 'relative', zIndex: 10, pointerEvents: 'auto' }}>\n        <div className=\"flex items-center space-x-2\">\n          <h2 className=\"text-xl font-bold mr-4\">Live View</h2>\n          <div className=\"flex space-x-2\">\n            <button\n              id=\"hls-toggle-btn\"\n              className=\"px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 inline-block text-center\"\n              style={{ position: 'relative', zIndex: 50 }} // Very high z-index to ensure clickability\n              onClick={() => {\n                window.location.href = '/hls.html';\n              }}\n            >\n              HLS View\n            </button>\n          </div>\n        </div>\n        <div className=\"controls flex items-center space-x-2\">\n          <div className=\"flex items-center\">\n            <label htmlFor=\"layout-selector\" className=\"mr-2\">Layout:</label>\n            <select\n              id=\"layout-selector\"\n              className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600\"\n              value={layout}\n              onChange={(e) => {\n                const newLayout = e.target.value;\n                setLayout(newLayout);\n                setCurrentPage(0); // Reset to first page when layout changes\n              }}\n            >\n              <option value=\"1\">1 Stream</option>\n              <option value=\"2\">2 Streams</option>\n              <option value=\"4\">4 Streams</option>\n              <option value=\"6\">6 Streams</option>\n              <option value=\"9\">9 Streams</option>\n              <option value=\"16\">16 Streams</option>\n            </select>\n          </div>\n\n          {layout === '1' && (\n            <div className=\"flex items-center\">\n              <label htmlFor=\"stream-selector\" className=\"mr-2\">Stream:</label>\n              <select\n                id=\"stream-selector\"\n                className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600\"\n                value={selectedStream}\n                onChange={(e) => {\n                  const newStream = e.target.value;\n                  setSelectedStream(newStream);\n                }}\n              >\n                {streams.map(stream => (\n                  <option key={stream.name} value={stream.name}>{stream.name}</option>\n                ))}\n              </select>\n            </div>\n          )}\n\n          <button\n            id=\"fullscreen-btn\"\n            className=\"p-2 rounded-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none\"\n            onClick={() => toggleFullscreen()}\n            title=\"Toggle Fullscreen\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                 stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <path\n                d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\"></path>\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      <div className=\"flex flex-col space-y-4 h-full\">\n        <div\n          id=\"video-grid\"\n          className={`video-container layout-${layout}`}\n        >\n          {isLoadingStreams ? (\n              <div className=\"flex justify-center items-center col-span-full row-span-full h-64 w-full\" style={{ pointerEvents: 'none', zIndex: 1 }}>\n                <div className=\"flex flex-col items-center justify-center py-8\">\n                <div\n                  className=\"inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16\"></div>\n                <p className=\"mt-4 text-gray-700 dark:text-gray-300\">Loading streams...</p>\n              </div>\n            </div>\n          ) : (isLoading && !isLoadingStreams) ? (\n            <div\n                className=\"flex justify-center items-center col-span-full row-span-full h-64 w-full\"\n                style={{\n                  pointerEvents: 'none',\n                  position: 'relative',\n                  zIndex: 1\n                }}\n            >\n              <div className=\"flex flex-col items-center justify-center py-8\">\n                <div\n                  className=\"inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16\"></div>\n                <p className=\"mt-4 text-gray-700 dark:text-gray-300\">Loading streams...</p>\n              </div>\n            </div>\n          ) : (streamsError) ? (\n            <div className=\"placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8\">\n              <p className=\"mb-6 text-gray-600 dark:text-gray-300 text-lg\">Error loading streams: {streamsError.message}</p>\n              <button\n                onClick={() => window.location.reload()}\n                className=\"btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n              >\n                Retry\n              </button>\n            </div>\n          ) : streams.length === 0 ? (\n            <div className=\"placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8\">\n              <p className=\"mb-6 text-gray-600 dark:text-gray-300 text-lg\">No streams configured</p>\n              <a href=\"streams.html\" className=\"btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\">Configure Streams</a>\n            </div>\n          ) : (\n            // Render video cells using our self-contained WebRTCVideoCell component\n            streamsToShow.map(stream => (\n              <WebRTCVideoCell\n                key={stream.name}\n                stream={stream}\n                onToggleFullscreen={toggleStreamFullscreen}\n                streamId={stream.name} // Add explicit streamId prop to prevent re-renders\n              />\n            ))\n          )}\n        </div>\n\n        {layout !== '1' && streams.length > getMaxStreamsForLayout() ? (\n          <div className=\"pagination-controls flex justify-center items-center space-x-4 mt-4\">\n            <button\n              className=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              onClick={() => {\n                console.log('Changing to previous page');\n                setCurrentPage(Math.max(0, currentPage - 1));\n              }}\n              disabled={currentPage === 0}\n            >\n              Previous\n            </button>\n\n            <span className=\"text-gray-700 dark:text-gray-300\">\n              Page {currentPage + 1} of {Math.ceil(streams.length / getMaxStreamsForLayout())}\n            </span>\n\n            <button\n              className=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              onClick={() => {\n                console.log('Changing to next page');\n                const totalPages = Math.ceil(streams.length / getMaxStreamsForLayout());\n                setCurrentPage(Math.min(totalPages - 1, currentPage + 1));\n              }}\n              disabled={currentPage >= Math.ceil(streams.length / getMaxStreamsForLayout()) - 1}\n            >\n              Next\n            </button>\n          </div>\n        ) : null}\n      </div>\n    </section>\n  );\n}\n","/**\n * LightNVR Web Interface Live View Page\n * Entry point for the live view page with WebRTC/HLS support\n */\n\nimport { render } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { LiveView } from '../components/preact/LiveView.jsx';\nimport { WebRTCView } from '../components/preact/WebRTCView.jsx';\nimport { QueryClientProvider, queryClient } from '../query-client.js';\nimport { Header } from \"../components/preact/Header.jsx\";\nimport { Footer } from \"../components/preact/Footer.jsx\";\nimport { ToastContainer } from \"../components/preact/ToastContainer.jsx\";\n\n/**\n * Main App component that conditionally renders WebRTCView or LiveView\n * based on whether WebRTC is disabled in settings\n */\nfunction App() {\n    const [isWebRTCDisabled, setIsWebRTCDisabled] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        // Check if WebRTC is disabled in settings\n        async function checkWebRTCStatus() {\n            try {\n                const response = await fetch('/api/settings');\n                if (!response.ok) {\n                    console.error('Failed to fetch settings:', response.status, response.statusText);\n                    setIsLoading(false);\n                    return;\n                }\n\n                const settings = await response.json();\n                \n                if (settings.webrtc_disabled) {\n                    console.log('WebRTC is disabled, using HLS view');\n                    setIsWebRTCDisabled(true);\n                } else {\n                    console.log('WebRTC is enabled, using WebRTC view');\n                    setIsWebRTCDisabled(false);\n                }\n            } catch (error) {\n                console.error('Error checking WebRTC status:', error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n\n        checkWebRTCStatus();\n    }, []);\n\n    if (isLoading) {\n        return <div className=\"loading\">Loading...</div>;\n    }\n\n    return (\n            <>{isWebRTCDisabled ? <LiveView isWebRTCDisabled={true} /> : <WebRTCView />}</>\n    );\n}\n\n// Render the App component when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Get the container element\n    const container = document.getElementById('main-content');\n\n    if (container) {\n        render(\n            <QueryClientProvider client={queryClient}>\n                <Header />\n                <ToastContainer />\n                <App />\n                <Footer />\n            </QueryClientProvider>,\n            container\n        );\n    }\n});\n"],"names":["WebRTCVideoCell","stream","streamId","onToggleFullscreen","isLoading","setIsLoading","useState","error","setError","isPlaying","setIsPlaying","videoRef","useRef","cellRef","peerConnectionRef","detectionOverlayRef","abortControllerRef","useEffect","name","current","console","log","pc","RTCPeerConnection","iceServers","urls","ontrack","event","track","kind","videoElement","srcObject","streams","onloadeddata","onplaying","onerror","e","onicecandidate","candidate","oniceconnectionstatechange","iceConnectionState","addTransceiver","direction","createOffer","then","offer","setLocalDescription","AbortController","formattedOffer","type","localDescription","sdp","auth","localStorage","getItem","fetch","encodeURIComponent","method","headers","Authorization","body","JSON","stringify","signal","response","ok","Error","status","statusText","text","parse","answer","setRemoteDescription","RTCSessionDescription","catch","message","abort","getTracks","forEach","stop","close","jsxs","className","ref","style","position","pointerEvents","zIndex","children","jsx","id","replace","playsInline","autoPlay","muted","disablePictureInPicture","width","height","objectFit","detection_based_recording","detection_model","DetectionOverlay","streamName","enabled","detectionModel","top","left","padding","backgroundColor","color","borderRadius","fontSize","bottom","right","display","gap","onMouseOver","currentTarget","onMouseOut","SnapshotButton","onSnapshot","canvasRef","getCanvasRef","snapshot","takeSnapshotWithDetections","showSnapshotPreview","canvas","toDataURL","document","createElement","videoWidth","videoHeight","getContext","drawImage","title","onClick","border","cursor","xmlns","viewBox","fill","stroke","d","LoadingIndicator","flexDirection","justifyContent","alignItems","textAlign","maxWidth","marginBottom","fontWeight","lineHeight","handleRetry","boxShadow","transition","WebRTCView","takeSnapshot","useSnapshotManager","isFullscreen","setIsFullscreen","toggleFullscreen","useFullscreenManager","setStreams","layout","setLayout","layoutParam","URLSearchParams","window","location","search","get","sessionStorage","selectedStream","setSelectedStream","streamParam","currentPage","setCurrentPage","pageParam","Math","max","parseInt","storedPage","queryClient","useQueryClient","setupModals","addModalStyles","data","streamsData","isLoadingStreams","streamsError","useQuery","timeout","retries","retryDelay","Array","isArray","async","filteredStreams","filterStreamsForWebRTC","length","some","warn","showStatusMessage","processStreams","url","URL","searchParams","delete","set","history","replaceState","setItem","toString","removeItem","streamPromises","map","fetchQuery","queryKey","queryFn","json","staleTime","detailedStreams","Promise","all","filter","is_deleted","streaming_enabled","getMaxStreamsForLayout","useCallback","getStreamsToShow","streamsToShow","maxStreams","totalPages","ceil","startIdx","endIdx","min","slice","toggleStreamFullscreen","cellElement","preventDefault","stopPropagation","fullscreenElement","exitFullscreen","requestFullscreen","err","useMemo","SnapshotManager","FullscreenManager","targetId","href","htmlFor","value","onChange","newLayout","target","newStream","strokeWidth","strokeLinecap","strokeLinejoin","reload","disabled","App","isWebRTCDisabled","setIsWebRTCDisabled","webrtc_disabled","checkWebRTCStatus","Fragment","LiveView","addEventListener","container","getElementById","render","QueryClientProvider","client","Header","ToastContainer","Footer"],"mappings":"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"}