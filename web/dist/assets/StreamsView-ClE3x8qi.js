const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./preact-app-CYK9nFuH.js","./preact-app-DEljgPCt.css"])))=>i.map(i=>d[i]);
var U=Object.freeze,Ee=Object.defineProperty;var i=(p,b)=>U(Ee(p,"raw",{value:U(b||p.slice())}));import{d,A as Ie,y as De,h as l,_ as Oe,c as s}from"./preact-app-CYK9nFuH.js";import{C as Ne}from"./LoadingIndicator-BFsMVzP2.js";import{f as y,e as k,c as Ve}from"./fetch-utils-GN-4zfXA.js";var z,H,q,J,X,G,W,K,Q,Y,Z,ee,te,re;function Ae(){const[p,b]=d([]),[$,C]=d(!1),[se,x]=d(!1),[D,oe]=d([]),[O,N]=d([]),[u,ne]=d(null),[de,ie]=d(null),[S,V]=d(!1),[g,le]=d({username:"",password:""}),[r,h]=d({name:"",url:"",enabled:!0,streamingEnabled:!0,width:1280,height:720,fps:15,codec:"h264",protocol:"0",priority:"5",segment:30,record:!0,detectionEnabled:!1,detectionModel:"",detectionThreshold:50,detectionInterval:10,preBuffer:10,postBuffer:30}),[ce,ue]=d([]),[m,A]=d(!1),[ge,P]=d(!1),[me,_]=d(!1),c=Ie(null);De(()=>(c.current=Ve(),v(),M(),()=>{c.current&&c.current.abort()}),[]);const v=async()=>{var e;try{P(!0),_(!1);const a=await y("/api/streams",{signal:(e=c.current)==null?void 0:e.signal,timeout:15e3,retries:2,retryDelay:1e3})||[];b(a),_(a.length>0)}catch(t){t.message!=="Request was cancelled"&&(console.error("Error loading streams:",t),s("Error loading streams: "+t.message),_(!1))}finally{P(!1)}},M=async()=>{var e;try{const t=await y("/api/detection/models",{signal:(e=c.current)==null?void 0:e.signal,timeout:1e4,retries:1,retryDelay:500});ue(t.models||[])}catch(t){t.message!=="Request was cancelled"&&console.error("Error loading detection models:",t)}},pe=()=>{h({name:"",url:"",enabled:!0,streamingEnabled:!0,width:1280,height:720,fps:15,codec:"h264",protocol:"0",priority:"5",segment:30,record:!0,recordAudio:!0,detectionEnabled:!1,detectionModel:"",detectionThreshold:50,detectionInterval:10,preBuffer:10,postBuffer:30}),A(!1),C(!0)},be=async e=>{var t,a,f;try{const o=await y("/api/streams/".concat(encodeURIComponent(e)),{signal:(t=c.current)==null?void 0:t.signal,timeout:1e4,retries:2,retryDelay:1e3});h({...o,width:o.width||1280,height:o.height||720,fps:o.fps||15,protocol:((a=o.protocol)==null?void 0:a.toString())||"0",priority:((f=o.priority)==null?void 0:f.toString())||"5",segment:o.segment_duration||30,detectionThreshold:o.detection_threshold||50,detectionInterval:o.detection_interval||10,preBuffer:o.pre_detection_buffer||10,postBuffer:o.post_detection_buffer||30,streamingEnabled:o.streaming_enabled!==void 0?o.streaming_enabled:!0,isOnvif:o.is_onvif!==void 0?o.is_onvif:!1,detectionEnabled:o.detection_based_recording||!1,detectionModel:o.detection_model||"",recordAudio:o.record_audio!==void 0?o.record_audio:!0}),A(!0),C(!0)}catch(o){console.error("Error loading stream details:",o),s("Error loading stream details: "+o.message)}},E=()=>{C(!1)},n=e=>{const{name:t,value:a,type:f,checked:o}=e.target;h(_e=>({..._e,[t]:f==="checkbox"?o:a}))},fe=e=>{const t=parseInt(e.target.value,10);h(a=>({...a,detectionThreshold:t}))},ye=async()=>{var e;try{const t={...r,width:parseInt(r.width,10),height:parseInt(r.height,10),fps:parseInt(r.fps,10),protocol:parseInt(r.protocol,10),priority:parseInt(r.priority,10),segment_duration:parseInt(r.segment,10),streaming_enabled:r.streamingEnabled,is_onvif:r.isOnvif,detection_based_recording:r.detectionEnabled,detection_model:r.detectionModel,detection_threshold:r.detectionThreshold,detection_interval:parseInt(r.detectionInterval,10),pre_detection_buffer:parseInt(r.preBuffer,10),post_detection_buffer:parseInt(r.postBuffer,10),record_audio:r.recordAudio},a=m?"/api/streams/".concat(encodeURIComponent(r.name)):"/api/streams";await k(a,{method:m?"PUT":"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t),signal:(e=c.current)==null?void 0:e.signal,timeout:15e3,retries:1,retryDelay:1e3}),s("Stream ".concat(m?"updated":"added"," successfully")),E(),v()}catch(t){console.error("Error ".concat(m?"updating":"adding"," stream:"),t),s("Error ".concat(m?"updating":"adding"," stream: ").concat(t.message))}},he=async()=>{var e;try{s("Testing stream connection...");const t=await y("/api/streams/test",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({url:r.url,protocol:parseInt(r.protocol,10)}),signal:(e=c.current)==null?void 0:e.signal,timeout:2e4,retries:1,retryDelay:2e3});t.success?(s("Stream connection successful!"),t.info&&h(a=>({...a,width:t.info.width||a.width,height:t.info.height||a.height,fps:t.info.fps||a.fps,codec:t.info.codec||a.codec}))):s("Stream test failed: ".concat(t.message||"Unknown error"),3e3,"error")}catch(t){console.error("Error testing stream:",t),s("Error testing stream: "+t.message,3e3,"error")}},xe=async e=>{var t;if(confirm('Are you sure you want to delete stream "'.concat(e,'"?')))try{await k("/api/streams/".concat(encodeURIComponent(e)),{method:"DELETE",signal:(t=c.current)==null?void 0:t.signal,timeout:15e3,retries:1,retryDelay:1e3}),s("Stream deleted successfully"),v()}catch(a){console.error("Error deleting stream:",a),s("Error deleting stream: "+a.message)}},T=e=>{const{name:t,value:a}=e.target;le(f=>({...f,[t]:a}))},ve=async()=>{var e;try{V(!0),s("Starting ONVIF discovery...");const t=await y("/api/onvif/discovery/discover",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({}),signal:(e=c.current)==null?void 0:e.signal,timeout:12e4,retries:0});oe(t.devices||[]),t.devices&&t.devices.length>0?s("Discovered ".concat(t.devices.length," ONVIF devices")):s("No ONVIF devices found")}catch(t){console.error("Error discovering ONVIF devices:",t),s("Error discovering ONVIF devices: "+t.message,3e3,"error")}finally{V(!1)}},[F,B]=d(!1),we=async e=>{var t;try{ne(e),N([]),B(!0),s("Getting device profiles...");const a=await y("/api/onvif/device/profiles",{headers:{"X-Device-URL":e.device_service,"X-Username":g.username,"X-Password":g.password},signal:(t=c.current)==null?void 0:t.signal,timeout:2e4,retries:1,retryDelay:2e3});N(a.profiles||[]),a.profiles&&a.profiles.length>0?s("Found ".concat(a.profiles.length," profiles")):s("No profiles found")}catch(a){console.error("Error getting device profiles:",a),s("Error getting device profiles: "+a.message,3e3,"error")}finally{B(!1)}},[I,R]=d(""),[ke,w]=d(!1),$e=async e=>{try{ie(e);const t="ONVIF_".concat(u.ip_address.replace(/\./g,"_"),"_").concat(e.name.replace(/\s+/g,"_"));R(t),w(!0)}catch(t){console.error("Error preparing to add ONVIF device:",t),s("Error preparing to add ONVIF device: "+t.message,3e3,"error")}},[j,L]=d(!1),Ce=async()=>{var e;try{L(!0),s("Adding ONVIF device as stream..."),await k("/api/onvif/device/add",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({device_url:u.device_service,profile_token:de.token,stream_name:I,username:g.username,password:g.password}),signal:(e=c.current)==null?void 0:e.signal,timeout:3e4,retries:1,retryDelay:3e3}),s("ONVIF device added as stream successfully"),x(!1),w(!1),v()}catch(t){console.error("Error adding ONVIF device as stream:",t),s("Error adding ONVIF device as stream: "+t.message,3e3,"error")}finally{L(!1)}},Se=async e=>{var t;try{const a={username:g.username,password:g.password};s("Testing ONVIF connection..."),await k("/api/onvif/device/test",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({url:e.device_service,username:a.username,password:a.password}),signal:(t=c.current)==null?void 0:t.signal,timeout:15e3,retries:1,retryDelay:2e3}),s("ONVIF connection successful!"),we(e)}catch(a){console.error("Error testing ONVIF connection:",a),s("Error testing ONVIF connection: "+a.message,3e3,"error")}};return l(re||(re=i(['\n    <section id="streams-page" class="page">\n      <div class="page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow">\n        <h2 class="text-xl font-bold">Streams</h2>\n        <div class="controls flex space-x-2">\n          <button \n            id="discover-onvif-btn" \n            class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"\n            onClick=','\n          >\n            Discover ONVIF Cameras\n          </button>\n          <button \n            id="add-stream-btn" \n            class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"\n            onClick=',"\n          >\n            Add Stream\n          </button>\n        </div>\n      </div>\n      \n      <","\n        isLoading=","\n        hasData=",'\n        loadingMessage="Loading streams..."\n        emptyMessage="No streams configured yet. Click \'Add Stream\' to create one."\n      >\n        <div class="streams-container bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">\n          <div class="overflow-x-auto">\n            <table id="streams-table" class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">\n              <thead class="bg-gray-50 dark:bg-gray-700">\n                <tr>\n                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Name</th>\n                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">URL</th>\n                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Resolution</th>\n                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">FPS</th>\n                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Recording</th>\n                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>\n                </tr>\n              </thead>\n              <tbody class="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">\n                ',"\n              </tbody>\n            </table>\n          </div>\n        </div>\n      <//>\n      \n      ","\n      \n      ","\n      \n      ","\n    </section>\n  "])),()=>x(!0),pe,Ne,ge,me,p.map(e=>l(z||(z=i(["\n                  <tr key=",' class="hover:bg-gray-50 dark:hover:bg-gray-700">\n                    <td class="px-6 py-4 whitespace-nowrap">\n                      <div class="flex items-center">\n                        <span class=',"></span>\n                        ",'\n                      </div>\n                    </td>\n                    <td class="px-6 py-4 whitespace-nowrap">','</td>\n                    <td class="px-6 py-4 whitespace-nowrap">',"x",'</td>\n                    <td class="px-6 py-4 whitespace-nowrap">','</td>\n                    <td class="px-6 py-4 whitespace-nowrap">\n                      ',"\n                      ",'\n                    </td>\n                    <td class="px-6 py-4 whitespace-nowrap">\n                      <div class="flex space-x-2">\n                        <button \n                          class="p-1 rounded-full text-blue-600 hover:bg-blue-100 dark:text-blue-400 dark:hover:bg-blue-900 focus:outline-none"\n                          onClick=','\n                          title="Edit"\n                        >\n                          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">\n                            <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>\n                          </svg>\n                        </button>\n                        <button \n                          class="p-1 rounded-full text-red-600 hover:bg-red-100 dark:text-red-400 dark:hover:bg-red-900 focus:outline-none"\n                          onClick=','\n                          title="Delete"\n                        >\n                          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">\n                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>\n                          </svg>\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                '])),e.name,"status-indicator w-2 h-2 rounded-full mr-2 ".concat(e.enabled?"bg-green-500":"bg-red-500"),e.name,e.url,e.width,e.height,e.fps,e.record?"Enabled":"Disabled",e.detection_based_recording?" (Detection)":"",()=>be(e.name),()=>xe(e.name))),$&&l(q||(q=i(['\n        <div id="stream-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300">\n          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto">\n            <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">\n              <h3 class="text-lg font-medium">','</h3>\n              <span class="text-2xl cursor-pointer" onClick=','>×</span>\n            </div>\n            <div class="p-4">\n              <form id="stream-form" class="space-y-4">\n                <div class="form-group">\n                  <label for="stream-name" class="block text-sm font-medium mb-1">Name</label>\n                  <input \n                    type="text" \n                    id="stream-name" \n                    name="name"\n                    class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white ','"\n                    value=',"\n                    onChange=","\n                    disabled=",'\n                    required\n                  />\n                </div>\n                <div class="form-group">\n                  <label for="stream-url" class="block text-sm font-medium mb-1">URL</label>\n                  <input \n                    type="text" \n                    id="stream-url" \n                    name="url"\n                    class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                    placeholder="rtsp://example.com/stream" \n                    value=',"\n                    onChange=",'\n                    required\n                  />\n                </div>\n                <div class="form-group flex items-center">\n                  <input \n                    type="checkbox" \n                    id="stream-enabled" \n                    name="enabled"\n                    class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"\n                    checked=',"\n                    onChange=",'\n                  />\n                  <label for="stream-enabled" class="ml-2 block text-sm">Stream Active</label>\n                  <span class="ml-2 text-xs text-gray-500 dark:text-gray-400">Enable/disable all stream processing</span>\n                </div>\n                <div class="form-group flex items-center">\n                  <input \n                    type="checkbox" \n                    id="stream-streaming-enabled" \n                    name="streamingEnabled"\n                    class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"\n                    checked=',"\n                    onChange=",'\n                  />\n                  <label for="stream-streaming-enabled" class="ml-2 block text-sm">Live View Enabled</label>\n                  <span class="ml-2 text-xs text-gray-500 dark:text-gray-400">Enable/disable live viewing in browser</span>\n                </div>\n                <div class="form-group flex items-center">\n                  <input \n                    type="checkbox" \n                    id="stream-is-onvif" \n                    name="isOnvif"\n                    class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"\n                    checked=',"\n                    onChange=",'\n                  />\n                  <label for="stream-is-onvif" class="ml-2 block text-sm">ONVIF Camera</label>\n                  <span class="ml-2 text-xs text-gray-500 dark:text-gray-400">Mark this stream as an ONVIF camera for special handling</span>\n                </div>\n                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">\n                  <div class="form-group">\n                    <label for="stream-width" class="block text-sm font-medium mb-1">Width</label>\n                    <input \n                      type="number" \n                      id="stream-width" \n                      name="width"\n                      class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                      min="320" \n                      max="1920" \n                      value=',"\n                      onChange=",'\n                    />\n                  </div>\n                  <div class="form-group">\n                    <label for="stream-height" class="block text-sm font-medium mb-1">Height</label>\n                    <input \n                      type="number" \n                      id="stream-height" \n                      name="height"\n                      class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                      min="240" \n                      max="1080" \n                      value=',"\n                      onChange=",'\n                    />\n                  </div>\n                </div>\n                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">\n                  <div class="form-group">\n                    <label for="stream-fps" class="block text-sm font-medium mb-1">FPS</label>\n                    <input \n                      type="number" \n                      id="stream-fps" \n                      name="fps"\n                      class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                      min="1" \n                      max="30" \n                      value=',"\n                      onChange=",'\n                    />\n                  </div>\n                  <div class="form-group">\n                    <label for="stream-codec" class="block text-sm font-medium mb-1">Codec</label>\n                    <select \n                      id="stream-codec" \n                      name="codec"\n                      class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                      value=',"\n                      onChange=",'\n                    >\n                      <option value="h264">H.264</option>\n                      <option value="h265">H.265</option>\n                    </select>\n                  </div>\n                  <div class="form-group">\n                    <label for="stream-protocol" class="block text-sm font-medium mb-1">Protocol</label>\n                    <select \n                      id="stream-protocol" \n                      name="protocol"\n                      class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                      value=',"\n                      onChange=",'\n                    >\n                      <option value="0">TCP</option>\n                      <option value="1">UDP</option>\n                    </select>\n                    <span class="text-xs text-gray-500 dark:text-gray-400">Connection protocol (ONVIF cameras use either TCP or UDP)</span>\n                  </div>\n                </div>\n                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">\n                  <div class="form-group">\n                    <label for="stream-priority" class="block text-sm font-medium mb-1">Priority</label>\n                    <select \n                      id="stream-priority" \n                      name="priority"\n                      class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                      value=',"\n                      onChange=",'\n                    >\n                      <option value="1">Low (1)</option>\n                      <option value="5">Medium (5)</option>\n                      <option value="10">High (10)</option>\n                    </select>\n                  </div>\n                  <div class="form-group">\n                    <label for="stream-segment" class="block text-sm font-medium mb-1">Segment Duration (seconds)</label>\n                    <input \n                      type="number" \n                      id="stream-segment" \n                      name="segment"\n                      class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                      min="60" \n                      max="3600" \n                      value=',"\n                      onChange=",'\n                    />\n                  </div>\n                </div>\n                <div class="form-group flex items-center">\n                  <input \n                    type="checkbox" \n                    id="stream-record" \n                    name="record"\n                    class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"\n                    checked=',"\n                    onChange=",'\n                  />\n                  <label for="stream-record" class="ml-2 block text-sm">Record</label>\n                </div>\n                <div class="form-group flex items-center">\n                  <input \n                    type="checkbox" \n                    id="stream-record-audio" \n                    name="recordAudio"\n                    class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"\n                    checked=',"\n                    onChange=",'\n                  />\n                  <label for="stream-record-audio" class="ml-2 block text-sm">Record Audio</label>\n                  <span class="ml-2 text-xs text-gray-500 dark:text-gray-400">Include audio in recordings if available in the stream</span>\n                </div>\n                \n                <!-- Detection-based recording options -->\n                <div class="mt-6 mb-2 pb-1 border-b border-gray-200 dark:border-gray-700">\n                  <h4 class="text-md font-medium">Detection-Based Recording</h4>\n                </div>\n                <div class="form-group flex items-center">\n                  <input \n                    type="checkbox" \n                    id="stream-detection-enabled" \n                    name="detectionEnabled"\n                    class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"\n                    checked=',"\n                    onChange=",'\n                  />\n                  <label for="stream-detection-enabled" class="ml-2 block text-sm">Enable Detection-Based Recording</label>\n                  <span class="ml-2 text-xs text-gray-500 dark:text-gray-400">Only record when objects are detected</span>\n                </div>\n                <div class="form-group" style=','>\n                  <label for="stream-detection-model" class="block text-sm font-medium mb-1">Detection Model</label>\n                  <div class="flex space-x-2">\n                    <select \n                      id="stream-detection-model" \n                      name="detectionModel"\n                      class="flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                      value=',"\n                      onChange=",'\n                    >\n                      <option value="">Select a model</option>\n                      ','\n                    </select>\n                    <button \n                      id="refresh-models-btn" \n                      class="p-2 rounded-md bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none"\n                      title="Refresh Models"\n                      onClick=','\n                      type="button"\n                    >\n                      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">\n                        <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"></path>\n                      </svg>\n                    </button>\n                  </div>\n                </div>\n                <div class="form-group" style=','>\n                  <label for="stream-detection-threshold" class="block text-sm font-medium mb-1">Detection Threshold</label>\n                  <div class="flex items-center space-x-2">\n                    <input \n                      type="range" \n                      id="stream-detection-threshold" \n                      name="detectionThreshold"\n                      class="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700"\n                      min="0" \n                      max="100" \n                      step="1" \n                      value=',"\n                      onInput=",'\n                    />\n                    <span id="stream-threshold-value" class="font-medium text-blue-600 dark:text-blue-400 min-w-[3rem] text-center">\n                      ','%\n                    </span>\n                  </div>\n                </div>\n                <div class="grid grid-cols-1 md:grid-cols-3 gap-4" style=','>\n                  <div class="form-group">\n                    <label for="stream-detection-interval" class="block text-sm font-medium mb-1">Detection Interval (frames)</label>\n                    <input \n                      type="number" \n                      id="stream-detection-interval" \n                      name="detectionInterval"\n                      class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                      min="1" \n                      max="100" \n                      value=',"\n                      onChange=",'\n                    />\n                    <span class="text-xs text-gray-500 dark:text-gray-400">Detect on every Nth frame</span>\n                  </div>\n                  <div class="form-group">\n                    <label for="stream-pre-buffer" class="block text-sm font-medium mb-1">Pre-detection Buffer (seconds)</label>\n                    <input \n                      type="number" \n                      id="stream-pre-buffer" \n                      name="preBuffer"\n                      class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                      min="0" \n                      max="60" \n                      value=',"\n                      onChange=",'\n                    />\n                    <span class="text-xs text-gray-500 dark:text-gray-400">Seconds to keep before detection</span>\n                  </div>\n                  <div class="form-group">\n                    <label for="stream-post-buffer" class="block text-sm font-medium mb-1">Post-detection Buffer (seconds)</label>\n                    <input \n                      type="number" \n                      id="stream-post-buffer" \n                      name="postBuffer"\n                      class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                      min="0" \n                      max="300" \n                      value=',"\n                      onChange=",'\n                    />\n                    <span class="text-xs text-gray-500 dark:text-gray-400">Seconds to keep after detection</span>\n                  </div>\n                </div>\n              </form>\n            </div>\n            <div class="flex justify-between p-4 border-t border-gray-200 dark:border-gray-700">\n              <button \n                id="stream-test-btn" \n                class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition-colors dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600"\n                onClick=','\n                type="button"\n              >\n                Test Connection\n              </button>\n              <div class="space-x-2">\n                <button \n                  id="stream-save-btn" \n                  class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"\n                  onClick=','\n                  type="button"\n                >\n                  Save\n                </button>\n                <button \n                  id="stream-cancel-btn" \n                  class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors"\n                  onClick=','\n                  type="button"\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      '])),m?"Edit Stream":"Add Stream",E,m?"bg-gray-100 dark:bg-gray-800":"",r.name,n,m,r.url,n,r.enabled,n,r.streamingEnabled,n,r.isOnvif,n,r.width,n,r.height,n,r.fps,n,r.codec,n,r.protocol,n,r.priority,n,r.segment,n,r.record,n,r.recordAudio,n,r.detectionEnabled,n,r.detectionEnabled?"":"display: none",r.detectionModel,n,ce.map(e=>l(H||(H=i(["\n                        <option key="," value=",">","</option>\n                      "])),e.id,e.id,e.name)),M,r.detectionEnabled?"":"display: none",r.detectionThreshold,fe,r.detectionThreshold,r.detectionEnabled?"":"display: none",r.detectionInterval,n,r.preBuffer,n,r.postBuffer,n,he,ye,E),se&&l(Z||(Z=i(['\n        <div id="onvif-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300">\n          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">\n            <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">\n              <h3 class="text-lg font-medium">ONVIF Camera Discovery</h3>\n              <span class="text-2xl cursor-pointer" onClick=','>×</span>\n            </div>\n            <div class="p-4">\n              <div class="mb-4 flex justify-between items-center">\n                <h4 class="text-md font-medium">Discovered Devices</h4>\n                <button \n                  id="discover-btn" \n                  class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors focus:outline-none"\n                  onClick=',"\n                  disabled=",'\n                  type="button"\n                >\n                  ','\n                </button>\n              </div>\n              \n              <div class="overflow-x-auto">\n                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">\n                  <thead class="bg-gray-50 dark:bg-gray-700">\n                    <tr>\n                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">IP Address</th>\n                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Manufacturer</th>\n                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Model</th>\n                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody class="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">\n                    ','\n                  </tbody>\n                </table>\n              </div>\n              \n              <div class="mt-6 mb-4">\n                <h4 class="text-md font-medium mb-2">Authentication</h4>\n                <p class="text-sm text-gray-500 dark:text-gray-400 mb-3">\n                  Enter credentials to connect to the selected ONVIF device. Credentials are not needed for discovery, only for connecting to devices.\n                </p>\n                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">\n                  <div class="form-group">\n                    <label for="onvif-username" class="block text-sm font-medium mb-1">Username</label>\n                    <input \n                      type="text" \n                      id="onvif-username" \n                      name="username"\n                      class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                      placeholder="admin" \n                      value=',"\n                      onChange=",'\n                    />\n                  </div>\n                  <div class="form-group">\n                    <label for="onvif-password" class="block text-sm font-medium mb-1">Password</label>\n                    <input \n                      type="password" \n                      id="onvif-password" \n                      name="password"\n                      class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                      placeholder="password" \n                      value=',"\n                      onChange=","\n                    />\n                  </div>\n                </div>\n              </div>\n              \n              ",'\n            </div>\n            <div class="flex justify-end p-4 border-t border-gray-200 dark:border-gray-700">\n              <button \n                id="onvif-close-btn" \n                class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors"\n                onClick=','\n                type="button"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      '])),()=>x(!1),ve,S,S?l(J||(J=i(['\n                    <span class="flex items-center">\n                      Discovering\n                      <span class="ml-1 flex space-x-1">\n                        <span class="animate-pulse delay-0 h-1.5 w-1.5 bg-white rounded-full"></span>\n                        <span class="animate-pulse delay-150 h-1.5 w-1.5 bg-white rounded-full"></span>\n                        <span class="animate-pulse delay-300 h-1.5 w-1.5 bg-white rounded-full"></span>\n                      </span>\n                    </span>\n                  ']))):"Start Discovery",D.length===0?l(G||(G=i(['\n                      <tr>\n                        <td colspan="4" class="px-6 py-4 text-center text-gray-500 dark:text-gray-400">\n                          ',"\n                        </td>\n                      </tr>\n                    "])),S?l(X||(X=i(['\n                            <div class="flex items-center justify-center">\n                              <span>Discovering devices</span>\n                              <span class="ml-1 flex space-x-1">\n                                <span class="animate-pulse delay-0 h-1.5 w-1.5 bg-gray-500 dark:bg-gray-400 rounded-full"></span>\n                                <span class="animate-pulse delay-150 h-1.5 w-1.5 bg-gray-500 dark:bg-gray-400 rounded-full"></span>\n                                <span class="animate-pulse delay-300 h-1.5 w-1.5 bg-gray-500 dark:bg-gray-400 rounded-full"></span>\n                              </span>\n                            </div>\n                          ']))):'No devices discovered yet. Click "Start Discovery" to scan your network.'):D.map(e=>l(K||(K=i(["\n                      <tr key=",' class="hover:bg-gray-50 dark:hover:bg-gray-700">\n                        <td class="px-6 py-4 whitespace-nowrap">','</td>\n                        <td class="px-6 py-4 whitespace-nowrap">','</td>\n                        <td class="px-6 py-4 whitespace-nowrap">','</td>\n                        <td class="px-6 py-4 whitespace-nowrap">\n                          <button \n                            class="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none"\n                            onClick=',"\n                            disabled=",'\n                            type="button"\n                          >\n                            ',"\n                          </button>\n                        </td>\n                      </tr>\n                    "])),e.ip_address,e.ip_address,e.manufacturer||"Unknown",e.model||"Unknown",()=>Se(e),F&&u&&u.ip_address===e.ip_address,F&&u&&u.ip_address===e.ip_address?l(W||(W=i(['\n                              <span class="flex items-center">\n                                Loading\n                                <span class="ml-1 flex space-x-1">\n                                  <span class="animate-pulse delay-0 h-1.5 w-1.5 bg-white rounded-full"></span>\n                                  <span class="animate-pulse delay-150 h-1.5 w-1.5 bg-white rounded-full"></span>\n                                  <span class="animate-pulse delay-300 h-1.5 w-1.5 bg-white rounded-full"></span>\n                                </span>\n                              </span>\n                            ']))):"Connect")),g.username,T,g.password,T,u&&O.length>0&&l(Y||(Y=i(['\n                <div class="mt-6">\n                  <h4 class="text-md font-medium mb-2">Available Profiles for ','</h4>\n                  <div class="overflow-x-auto">\n                    <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">\n                      <thead class="bg-gray-50 dark:bg-gray-700">\n                        <tr>\n                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Name</th>\n                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Resolution</th>\n                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Encoding</th>\n                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">FPS</th>\n                          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody class="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">\n                        ',"\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              "])),u.ip_address,O.map(e=>l(Q||(Q=i(["\n                          <tr key=",' class="hover:bg-gray-50 dark:hover:bg-gray-700">\n                            <td class="px-6 py-4 whitespace-nowrap">','</td>\n                            <td class="px-6 py-4 whitespace-nowrap">',"x",'</td>\n                            <td class="px-6 py-4 whitespace-nowrap">','</td>\n                            <td class="px-6 py-4 whitespace-nowrap">','</td>\n                            <td class="px-6 py-4 whitespace-nowrap">\n                              <button \n                                class="px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 transition-colors focus:outline-none"\n                                onClick=','\n                                type="button"\n                              >\n                                Add as Stream\n                              </button>\n                            </td>\n                          </tr>\n                        '])),e.token,e.name,e.width,e.height,e.encoding,e.fps,()=>$e(e)))),()=>x(!1)),ke&&l(te||(te=i(['\n        <div id="custom-name-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300">\n          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full">\n            <div class="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">\n              <h3 class="text-lg font-medium">Stream Name</h3>\n              <span class="text-2xl cursor-pointer" onClick=','>×</span>\n            </div>\n            <div class="p-4">\n              <div class="mb-4">\n                <label for="custom-stream-name" class="block text-sm font-medium mb-1">Enter a name for this stream:</label>\n                <input \n                  type="text" \n                  id="custom-stream-name" \n                  class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n                  value=',"\n                  onChange=",'\n                />\n                <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">\n                  This name will be used to identify the stream in the system.\n                </p>\n              </div>\n            </div>\n            <div class="flex justify-end p-4 border-t border-gray-200 dark:border-gray-700 space-x-2">\n              <button \n                class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors"\n                onClick=','\n                type="button"\n              >\n                Cancel\n              </button>\n              <button \n                class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"\n                onClick=','\n                type="button"\n                disabled=',"\n              >\n                ","\n              </button>\n            </div>\n          </div>\n        </div>\n      "])),()=>w(!1),I,e=>R(e.target.value),()=>w(!1),Ce,!I.trim()||j,j?l(ee||(ee=i(['\n                  <span class="flex items-center">\n                    Adding\n                    <span class="ml-1 flex space-x-1">\n                      <span class="animate-pulse delay-0 h-1.5 w-1.5 bg-white rounded-full"></span>\n                      <span class="animate-pulse delay-150 h-1.5 w-1.5 bg-white rounded-full"></span>\n                      <span class="animate-pulse delay-300 h-1.5 w-1.5 bg-white rounded-full"></span>\n                    </span>\n                  </span>\n                ']))):"Add Stream"))}var ae;function Be(){const p=document.getElementById("main-content");p&&Oe(async()=>{const{render:b}=await import("./preact-app-CYK9nFuH.js").then($=>$.p);return{render:b}},__vite__mapDeps([0,1]),import.meta.url).then(({render:b})=>{b(l(ae||(ae=i(["<"," />"])),Ae),p)})}export{Ae as StreamsView,Be as loadStreamsView};
//# sourceMappingURL=StreamsView-ClE3x8qi.js.map
