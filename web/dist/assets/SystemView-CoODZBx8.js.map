{"version":3,"mappings":"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","names":["SystemControls","restartSystem","shutdownSystem","isRestarting","isShuttingDown","html","_a","__template","SystemInfo","systemInfo","formatUptime","_b","_c","_d","MemoryStorage","formatBytes","lightNvrMemoryUsed","go2rtcMemoryUsed","totalSystemMemory","combinedMemoryUsed","combinedMemoryPercent","lightNvrSlicePercent","go2rtcSlicePercent","_e","_f","_g","_h","_i","_j","_k","_l","StreamStorage","totalStreamStorage","total","stream","totalDiskSpace","totalStreamStoragePercent","streamStorageData","a","b","colors","index","NetworkInfo","iface","StreamsInfo","formatLogLevel","level","_m","levelLower","_n","_o","_p","_q","levelText","_r","LogsView","logs","logLevel","logCount","setLogLevel","setLogCount","loadLogs","clearLogs","_u","e","newLevel","_s","log","_t","bytes","decimals","k","dm","sizes","i","seconds","days","hours","minutes","secs","result","log_level_meets_minimum","minLevel","levelValue","minValue","logLevelLower","minLevelLower","LogsPoller","onLogsReceived","isPolling","setIsPolling","useState","pollingIntervalRef","useRef","lastTimestampRef","useEffect","savedTimestamp","fetchLogs","payload","error","setupHandlers","checkInterval","handleLogsUpdate","cleanedLogs","normalizedLog","fetchJSON","data","combinedLogs","newLog","existingLog","subscriptionParams","SystemView","setSystemInfo","setLogs","logLevelRef","handleSetLogLevel","setIsRestarting","setIsShuttingDown","isLoading","setIsLoading","hasData","setHasData","handleLogsReceived","newLogs","currentLogLevel","filteredLogs","logsContainer","requestControllerRef","createRequestController","loadSystemInfo","prevLogs","parsedLogs","logLine","timestamp","message","logRegex","match","showStatusMessage","enhancedFetch","_v","ContentLoader","loadSystemView","mainContent","__vitePreload","render","n","_w","event"],"ignoreList":[],"sources":["../../js/components/preact/system/SystemControls.js","../../js/components/preact/system/SystemInfo.js","../../js/components/preact/system/MemoryStorage.js","../../js/components/preact/system/StreamStorage.js","../../js/components/preact/system/NetworkInfo.js","../../js/components/preact/system/StreamsInfo.js","../../js/components/preact/system/LogsView.js","../../js/components/preact/system/SystemUtils.js","../../js/components/preact/system/LogsPoller.js","../../js/components/preact/SystemView.js"],"sourcesContent":["/**\n * SystemControls Component\n * Provides system restart and shutdown controls\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\n\n/**\n * SystemControls component\n * @param {Object} props Component props\n * @param {Function} props.restartSystem Function to restart the system\n * @param {Function} props.shutdownSystem Function to shut down the system\n * @param {boolean} props.isRestarting Whether the system is currently restarting\n * @param {boolean} props.isShuttingDown Whether the system is currently shutting down\n * @returns {JSX.Element} SystemControls component\n */\nexport function SystemControls({ restartSystem, shutdownSystem, isRestarting, isShuttingDown }) {\n  return html`\n    <div class=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n      <h2 class=\"text-xl font-bold\">System</h2>\n      <div class=\"controls space-x-2\">\n        <button \n          id=\"restart-btn\" \n          class=\"px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700 transition-colors focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n          onClick=${restartSystem}\n          disabled=${isRestarting || isShuttingDown}\n        >\n          Restart\n        </button>\n        <button \n          id=\"shutdown-btn\" \n          class=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n          onClick=${shutdownSystem}\n          disabled=${isRestarting || isShuttingDown}\n        >\n          Shutdown\n        </button>\n      </div>\n    </div>\n  `;\n}\n","/**\n * SystemInfo Component\n * Displays basic system information like version, uptime, and CPU details\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\n\n/**\n * SystemInfo component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @param {Function} props.formatUptime Function to format uptime\n * @returns {JSX.Element} SystemInfo component\n */\nexport function SystemInfo({ systemInfo, formatUptime }) {\n  return html`\n    <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 class=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">System Information</h3>\n      <div class=\"space-y-2\">\n        <div class=\"flex justify-between\">\n          <span class=\"font-medium\">Version:</span>\n          <span>${systemInfo.version || 'Unknown'}</span>\n        </div>\n        <div class=\"flex justify-between\">\n          <span class=\"font-medium\">Uptime:</span>\n          <span>${systemInfo.uptime ? formatUptime(systemInfo.uptime) : 'Unknown'}</span>\n        </div>\n        <div class=\"flex justify-between\">\n          <span class=\"font-medium\">CPU Model:</span>\n          <span>${systemInfo.cpu?.model || 'Unknown'}</span>\n        </div>\n        <div class=\"flex justify-between\">\n          <span class=\"font-medium\">CPU Cores:</span>\n          <span>${systemInfo.cpu?.cores || 'Unknown'}</span>\n        </div>\n        <div class=\"flex justify-between items-center\">\n          <span class=\"font-medium\">CPU Usage:</span>\n          <div class=\"w-32 bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n            <div class=\"bg-blue-600 h-2.5 rounded-full\" style=${`width: ${systemInfo.cpu?.usage || 0}%`}></div>\n          </div>\n          <span>${systemInfo.cpu?.usage ? `${systemInfo.cpu.usage.toFixed(1)}%` : 'Unknown'}</span>\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * MemoryStorage Component\n * Displays memory and storage information with progress bars\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\n\n/**\n * MemoryStorage component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @param {Function} props.formatBytes Function to format bytes to human-readable size\n * @returns {JSX.Element} MemoryStorage component\n */\nexport function MemoryStorage({ systemInfo, formatBytes }) {\n  // Get memory usage values\n  const lightNvrMemoryUsed = systemInfo.memory?.used || 0;\n  const go2rtcMemoryUsed = systemInfo.go2rtcMemory?.used || 0;\n  const totalSystemMemory = systemInfo.memory?.total || 0;\n  \n  // Calculate combined memory usage\n  const combinedMemoryUsed = lightNvrMemoryUsed + go2rtcMemoryUsed;\n  \n  // Calculate the percentage of total system memory used by both processes combined\n  const combinedMemoryPercent = totalSystemMemory ? \n    (combinedMemoryUsed / totalSystemMemory * 100).toFixed(1) : 0;\n  \n  // Calculate the percentage of each process relative to their combined usage\n  // This ensures the slivers add up to the total width of the progress bar\n  const lightNvrSlicePercent = combinedMemoryUsed ? \n    (lightNvrMemoryUsed / combinedMemoryUsed * 100).toFixed(1) : 0;\n  \n  const go2rtcSlicePercent = combinedMemoryUsed ? \n    (go2rtcMemoryUsed / combinedMemoryUsed * 100).toFixed(1) : 0;\n  \n  // These variables ensure the slivers add up to 100% of the combined usage bar\n  \n  return html`\n    <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 class=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Memory & Storage</h3>\n      <div class=\"space-y-4\">\n        <div>\n          <div class=\"flex justify-between mb-1\">\n            <span class=\"font-medium\">Process Memory:</span>\n            <div>\n              <span class=\"inline-block px-2 py-0.5 mr-1 text-xs rounded bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">\n                LightNVR: ${formatBytes(lightNvrMemoryUsed)}\n              </span>\n              <span class=\"inline-block px-2 py-0.5 text-xs rounded bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                go2rtc: ${formatBytes(go2rtcMemoryUsed)}\n              </span>\n            </div>\n          </div>\n          <div class=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1\">\n            <span>Combined: ${formatBytes(combinedMemoryUsed)} / ${formatBytes(totalSystemMemory)}</span>\n            <span>${combinedMemoryPercent}% of total memory</span>\n          </div>\n          <div class=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 overflow-hidden\">\n            <div class=\"flex h-full\" style=${`width: ${combinedMemoryPercent}%`}>\n              <div class=\"bg-blue-600 h-2.5\" style=${`width: ${lightNvrSlicePercent}%`}></div>\n              <div class=\"bg-green-500 h-2.5\" style=${`width: ${go2rtcSlicePercent}%`}></div>\n            </div>\n          </div>\n        </div>\n        <div>\n          <div class=\"flex justify-between mb-1\">\n            <span class=\"font-medium\">System Memory:</span>\n            <span>${systemInfo.systemMemory?.used ? formatBytes(systemInfo.systemMemory.used) : '0'} / ${systemInfo.systemMemory?.total ? formatBytes(systemInfo.systemMemory.total) : '0'}</span>\n          </div>\n          <div class=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n            <div class=\"bg-blue-600 h-2.5 rounded-full\" style=${`width: ${systemInfo.systemMemory?.total ? (systemInfo.systemMemory.used / systemInfo.systemMemory.total * 100).toFixed(1) : 0}%`}></div>\n          </div>\n        </div>\n        <div>\n          <div class=\"flex justify-between mb-1\">\n            <span class=\"font-medium\">LightNVR Storage:</span>\n            <span>${systemInfo.disk?.used ? formatBytes(systemInfo.disk.used) : '0'} / ${systemInfo.disk?.total ? formatBytes(systemInfo.disk.total) : '0'}</span>\n          </div>\n          <div class=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n            <div class=\"bg-blue-600 h-2.5 rounded-full\" style=${`width: ${systemInfo.disk?.total ? (systemInfo.disk.used / systemInfo.disk.total * 100).toFixed(1) : 0}%`}></div>\n          </div>\n        </div>\n        <div>\n          <div class=\"flex justify-between mb-1\">\n            <span class=\"font-medium\">System Storage:</span>\n            <span>${systemInfo.systemDisk?.used ? formatBytes(systemInfo.systemDisk.used) : '0'} / ${systemInfo.systemDisk?.total ? formatBytes(systemInfo.systemDisk.total) : '0'}</span>\n          </div>\n          <div class=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n            <div class=\"bg-blue-600 h-2.5 rounded-full\" style=${`width: ${systemInfo.systemDisk?.total ? (systemInfo.systemDisk.used / systemInfo.systemDisk.total * 100).toFixed(1) : 0}%`}></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * StreamStorage Component\n * Displays storage usage per stream with slivers in a progress bar\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\n\n/**\n * StreamStorage component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @param {Function} props.formatBytes Function to format bytes to human-readable size\n * @returns {JSX.Element} StreamStorage component\n */\nexport function StreamStorage({ systemInfo, formatBytes }) {\n  // Check if stream storage information is available\n  if (!systemInfo.streamStorage || !Array.isArray(systemInfo.streamStorage) || systemInfo.streamStorage.length === 0) {\n    return html`\n      <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n        <h3 class=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Stream Storage</h3>\n        <div class=\"text-gray-500 dark:text-gray-400 text-center py-4\">\n          No stream storage information available\n        </div>\n      </div>\n    `;\n  }\n\n  // Calculate total storage used by all streams\n  const totalStreamStorage = systemInfo.streamStorage.reduce((total, stream) => total + stream.size, 0);\n  \n  // Calculate the percentage of total disk space used by all streams\n  const totalDiskSpace = systemInfo.disk?.total || 0;\n  const totalStreamStoragePercent = totalDiskSpace ? \n    (totalStreamStorage / totalDiskSpace * 100).toFixed(1) : 0;\n  \n  // Calculate the percentage of each stream relative to the total stream storage\n  const streamStorageData = systemInfo.streamStorage.map(stream => ({\n    name: stream.name,\n    size: stream.size,\n    count: stream.count,\n    slicePercent: totalStreamStorage ? (stream.size / totalStreamStorage * 100).toFixed(1) : 0\n  }));\n  \n  // Sort streams by size (largest first)\n  streamStorageData.sort((a, b) => b.size - a.size);\n  \n  // Generate a color for each stream\n  const colors = [\n    'bg-blue-600',\n    'bg-green-500',\n    'bg-yellow-500',\n    'bg-red-500',\n    'bg-purple-500',\n    'bg-pink-500',\n    'bg-indigo-500',\n    'bg-teal-500'\n  ];\n  \n  return html`\n    <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 class=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Stream Storage</h3>\n      \n      <div class=\"space-y-4\">\n        <div>\n          <div class=\"flex justify-between mb-1\">\n            <span class=\"font-medium\">Storage per Stream:</span>\n            <div class=\"flex flex-wrap justify-end gap-1\">\n              ${streamStorageData.map((stream, index) => html`\n                <span class=\"inline-block px-2 py-0.5 text-xs rounded ${colors[index % colors.length].replace('bg-', 'bg-opacity-20 bg-')} ${colors[index % colors.length].replace('bg-', 'text-')}\">\n                  ${stream.name}: ${formatBytes(stream.size)}\n                </span>\n              `)}\n            </div>\n          </div>\n          \n          <div class=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1\">\n            <span>Combined: ${formatBytes(totalStreamStorage)} / ${formatBytes(totalDiskSpace)}</span>\n            <span>${totalStreamStoragePercent}% of total storage</span>\n          </div>\n          \n          <div class=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 overflow-hidden\">\n            <div class=\"flex h-full\" style=${`width: ${totalStreamStoragePercent}%`}>\n              ${streamStorageData.map((stream, index) => html`\n                <div class=\"${colors[index % colors.length]} h-2.5\" style=${`width: ${stream.slicePercent}%`}></div>\n              `)}\n            </div>\n          </div>\n          \n          <div class=\"mt-4\">\n            <h4 class=\"font-medium mb-2\">Stream Details:</h4>\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n              ${streamStorageData.map((stream, index) => html`\n                <a href=\"recordings.html?stream=${encodeURIComponent(stream.name)}\" \n                   class=\"flex items-center p-2 rounded bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors cursor-pointer\">\n                  <div class=\"w-3 h-3 rounded-full mr-2 ${colors[index % colors.length]}\"></div>\n                  <div>\n                    <div class=\"font-medium\">${stream.name}</div>\n                    <div class=\"text-xs text-gray-500 dark:text-gray-400\">\n                      ${formatBytes(stream.size)} (${stream.slicePercent}%) • ${stream.count} recordings\n                    </div>\n                  </div>\n                </a>\n              `)}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * NetworkInfo Component\n * Displays network interface information\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\n\n/**\n * NetworkInfo component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @returns {JSX.Element} NetworkInfo component\n */\nexport function NetworkInfo({ systemInfo }) {\n  return html`\n    <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 class=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Network Interfaces</h3>\n      <div class=\"space-y-2\">\n        ${systemInfo.network?.interfaces?.length ? systemInfo.network.interfaces.map(iface => html`\n          <div key=${iface.name} class=\"mb-2 pb-2 border-b border-gray-100 dark:border-gray-700 last:border-0\">\n            <div class=\"flex justify-between\">\n              <span class=\"font-medium\">${iface.name}:</span>\n              <span>${iface.address || 'No IP'}</span>\n            </div>\n            <div class=\"text-sm text-gray-500 dark:text-gray-400\">\n              MAC: ${iface.mac || 'Unknown'} | ${iface.up ? 'Up' : 'Down'}\n            </div>\n          </div>\n        `) : html`<div class=\"text-gray-500 dark:text-gray-400\">No network interfaces found</div>`}\n      </div>\n    </div>\n  `;\n}\n","/**\n * StreamsInfo Component\n * Displays information about streams and recordings\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\n\n/**\n * StreamsInfo component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @param {Function} props.formatBytes Function to format bytes to human-readable size\n * @returns {JSX.Element} StreamsInfo component\n */\nexport function StreamsInfo({ systemInfo, formatBytes }) {\n  return html`\n    <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 class=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Streams & Recordings</h3>\n      <div class=\"space-y-2\">\n        <div class=\"flex justify-between\">\n          <span class=\"font-medium\">Active Streams:</span>\n          <span>${systemInfo.streams?.active || 0} / ${systemInfo.streams?.total || 0}</span>\n        </div>\n        <div class=\"flex justify-between\">\n          <span class=\"font-medium\">Recordings:</span>\n          <span>${systemInfo.recordings?.count || 0}</span>\n        </div>\n        <div class=\"flex justify-between\">\n          <span class=\"font-medium\">Recordings Size:</span>\n          <span>${systemInfo.recordings?.size ? formatBytes(systemInfo.recordings.size) : '0'}</span>\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * LogsView Component\n * Displays and manages system logs\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\n\n/**\n * Format log level with appropriate styling\n * \n * @param {string} level Log level\n * @returns {JSX.Element} Formatted log level badge\n */\nfunction formatLogLevel(level) {\n  // Handle null or undefined level\n  if (level === null || level === undefined) {\n    return html`<span class=\"px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\">UNKNOWN</span>`;\n  }\n  \n  // Convert to lowercase string for case-insensitive comparison\n  const levelLower = String(level).toLowerCase().trim();\n  \n  // Match against known log levels\n  if (levelLower === 'error' || levelLower === 'err') {\n    return html`<span class=\"px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\">ERROR</span>`;\n  } else if (levelLower === 'warning' || levelLower === 'warn') {\n    return html`<span class=\"px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\">WARN</span>`;\n  } else if (levelLower === 'info') {\n    return html`<span class=\"px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">INFO</span>`;\n  } else if (levelLower === 'debug' || levelLower === 'dbg') {\n    return html`<span class=\"px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\">DEBUG</span>`;\n  } else {\n    // For any other value, display it as is (uppercase)\n    const levelText = String(level).toUpperCase();\n    return html`<span class=\"px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\">${levelText}</span>`;\n  }\n}\n\n/**\n * LogsView component\n * @param {Object} props Component props\n * @param {Array} props.logs Array of log entries\n * @param {string} props.logLevel Current log level filter\n * @param {number} props.logCount Number of logs to display\n * @param {Function} props.setLogLevel Function to set log level\n * @param {Function} props.setLogCount Function to set log count\n * @param {Function} props.loadLogs Function to load logs\n * @param {Function} props.clearLogs Function to clear logs\n * @returns {JSX.Element} LogsView component\n */\nexport function LogsView({ logs, logLevel, logCount, setLogLevel, setLogCount, loadLogs, clearLogs }) {\n  return html`\n    <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4 mb-4\">\n      <div class=\"flex justify-between items-center mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">\n        <h3 class=\"text-lg font-semibold\">System Logs</h3>\n        <div class=\"flex space-x-2\">\n          <select \n            id=\"log-level\" \n            class=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n            value=${logLevel}\n            onChange=${e => {\n              const newLevel = e.target.value;\n              console.log(`LogsView: Log level changed from ${logLevel} to ${newLevel}`);\n              setLogLevel(newLevel);\n            }}\n          >\n            <option value=\"error\">Error</option>\n            <option value=\"warning\">Warning</option>\n            <option value=\"info\">Info</option>\n            <option value=\"debug\">Debug</option>\n          </select>\n          <select \n            id=\"log-count\" \n            class=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n            value=${logCount}\n            onChange=${e => setLogCount(parseInt(e.target.value, 10))}\n          >\n            <option value=\"50\">50 lines</option>\n            <option value=\"100\">100 lines</option>\n            <option value=\"200\">200 lines</option>\n            <option value=\"500\">500 lines</option>\n          </select>\n          <button \n            id=\"refresh-logs-btn\" \n            class=\"px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n            onClick=${loadLogs}\n          >\n            Refresh\n          </button>\n          <button \n            id=\"clear-logs-btn\" \n            class=\"px-3 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n            onClick=${clearLogs}\n          >\n            Clear Logs\n          </button>\n        </div>\n      </div>\n      <div class=\"logs-container bg-gray-100 dark:bg-gray-900 rounded p-4 overflow-auto max-h-96 font-mono text-sm\">\n        ${logs.length === 0 ? html`\n          <div class=\"text-gray-500 dark:text-gray-400\">No logs found</div>\n        ` : logs.map((log, index) => html`\n          <div key=${index} class=\"log-entry mb-1 last:mb-0\">\n            <span class=\"text-gray-500 dark:text-gray-400\">${log.timestamp}</span>\n            <span class=\"mx-2\">${formatLogLevel(log.level)}</span>\n            <span class=${`log-message ${log.level === 'error' ? 'text-red-600 dark:text-red-400' : ''}`}>${log.message}</span>\n          </div>\n        `)}\n      </div>\n    </div>\n  `;\n}\n","/**\n * SystemUtils\n * Utility functions for the system components\n */\n\n/**\n * Format bytes to human-readable size\n * \n * @param {number} bytes Number of bytes\n * @param {number} decimals Number of decimal places\n * @returns {string} Formatted size string\n */\nexport function formatBytes(bytes, decimals = 1) {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  \n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/**\n * Format uptime in seconds to a human-readable string\n * \n * @param {number} seconds Uptime in seconds\n * @returns {string} Formatted uptime string\n */\nexport function formatUptime(seconds) {\n  const days = Math.floor(seconds / 86400);\n  const hours = Math.floor((seconds % 86400) / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n  \n  let result = '';\n  if (days > 0) result += `${days}d `;\n  if (hours > 0 || days > 0) result += `${hours}h `;\n  if (minutes > 0 || hours > 0 || days > 0) result += `${minutes}m `;\n  result += `${secs}s`;\n  \n  return result;\n}\n\n/**\n * Check if a log level meets the minimum required level\n * This is a JavaScript implementation of the same logic used in the backend\n * \n * @param {string} logLevel The log level to check\n * @param {string} minLevel The minimum required level\n * @returns {boolean} True if the log level meets the minimum, false otherwise\n */\nexport function log_level_meets_minimum(logLevel, minLevel) {\n  // Special case: if minLevel is debug, always return true\n  // This ensures all log levels are shown when debug is selected\n  if (String(minLevel || '').toLowerCase() === 'debug') {\n    return true;\n  }\n  \n  // Convert log levels to numeric values for comparison\n  let levelValue = 2; // Default to INFO (2)\n  let minValue = 2;   // Default to INFO (2)\n  \n  // Map log level strings to numeric values\n  // ERROR = 0, WARNING = 1, INFO = 2, DEBUG = 3\n  const logLevelLower = String(logLevel || '').toLowerCase();\n  const minLevelLower = String(minLevel || '').toLowerCase();\n  \n  if (logLevelLower === 'error') {\n    levelValue = 0;\n  } else if (logLevelLower === 'warning' || logLevelLower === 'warn') {\n    levelValue = 1;\n  } else if (logLevelLower === 'info') {\n    levelValue = 2;\n  } else if (logLevelLower === 'debug') {\n    levelValue = 3;\n  }\n  \n  if (minLevelLower === 'error') {\n    minValue = 0;\n  } else if (minLevelLower === 'warning' || minLevelLower === 'warn') {\n    minValue = 1;\n  } else if (minLevelLower === 'info') {\n    minValue = 2;\n  } else if (minLevelLower === 'debug') {\n    minValue = 3;\n  }\n  \n  // Return true if the log level is less than or equal to the minimum level\n  // Lower values are higher priority (ERROR = 0 is highest priority)\n  // We want to include all levels with higher or equal priority to the minimum\n  return levelValue <= minValue;\n}\n","/**\n * LogsPoller Component\n * Handles polling for logs via WebSocket instead of automatic updates\n */\n\nimport { h } from '../../../preact.min.js';\nimport { html } from '../../../html-helper.js';\nimport { useState, useEffect, useRef } from '../../../preact.hooks.module.js';\nimport { log_level_meets_minimum } from './SystemUtils.js';\nimport { fetchJSON } from '../../../fetch-utils.js';\n\n/**\n * LogsPoller component\n * @param {Object} props Component props\n * @param {string} props.logLevel Current log level filter\n * @param {number} props.logCount Number of logs to display\n * @param {Function} props.onLogsReceived Callback function when logs are received\n * @returns {JSX.Element} LogsPoller component (invisible)\n */\nexport function LogsPoller({ logLevel, logCount, onLogsReceived }) {\n  const [isPolling, setIsPolling] = useState(false);\n  const pollingIntervalRef = useRef(null);\n  // Initialize with null, but will persist between renders\n  const lastTimestampRef = useRef(null);\n  \n  // Try to load the last timestamp from localStorage on initial render\n  useEffect(() => {\n    const savedTimestamp = localStorage.getItem('lastLogTimestamp');\n    if (savedTimestamp) {\n      console.log('Loaded last log timestamp from localStorage:', savedTimestamp);\n      lastTimestampRef.current = savedTimestamp;\n    }\n  }, []);\n  \n  // Function to fetch logs via WebSocket\n  const fetchLogs = () => {\n    if (!window.wsClient) {\n      console.log('WebSocket client not available, will retry on next poll');\n      return;\n    }\n    \n    if (!window.wsClient.isConnected()) {\n      console.log('WebSocket not connected, attempting to connect');\n      window.wsClient.connect();\n      // Skip this fetch attempt, will retry on next poll\n      return;\n    }\n    \n    // Only fetch if we're on the system page\n    if (!document.getElementById('system-page')) {\n      console.log('Not on system page, skipping log fetch');\n      return;\n    }\n    \n    console.log('Fetching logs via WebSocket with level: debug (to get all logs, will filter on frontend)');\n    \n    // Create fetch request payload\n    const payload = {\n      level: 'debug', // Always request debug level to get all logs\n      count: logCount\n    };\n    \n    // Add last timestamp if available for pagination\n    if (lastTimestampRef.current) {\n      payload.last_timestamp = lastTimestampRef.current;\n    }\n    \n    // Add client ID to the payload\n    if (window.wsClient.getClientId) {\n      payload.client_id = window.wsClient.getClientId();\n    }\n    \n    console.log('Sending fetch request with payload:', payload);\n    \n    // Send fetch request\n    try {\n      // Always use the send method which properly formats the message\n      const success = window.wsClient.send('fetch', 'system/logs', payload);\n      if (!success) {\n        console.warn('Failed to send fetch request, will retry on next poll');\n      } else {\n        console.log('Fetch request sent successfully');\n      }\n    } catch (error) {\n      console.error('Error sending fetch request:', error);\n    }\n  };\n  \n  // Set up WebSocket handler for log updates - only once on mount\n  useEffect(() => {\n    // If WebSocket client is not available, set up a check to try again later\n    if (!window.wsClient) {\n      console.log('WebSocket client not available, will check again later');\n      const checkInterval = setInterval(() => {\n        if (window.wsClient) {\n          console.log('WebSocket client now available, setting up handlers');\n          clearInterval(checkInterval);\n          setupHandlers();\n        }\n      }, 1000);\n      \n      // Clean up interval on unmount\n      return () => {\n        clearInterval(checkInterval);\n      };\n    } else {\n      // WebSocket client is available, set up handlers immediately\n      return setupHandlers();\n    }\n    \n    // Function to set up WebSocket handlers\n    function setupHandlers() {\n      console.log('Setting up WebSocket handlers for logs');\n      \n      // Handler for log updates\n      const handleLogsUpdate = (payload) => {\n        console.log('Received logs update via WebSocket:', payload);\n        \n        // Only process updates if we're on the system page\n        if (!document.getElementById('system-page')) {\n          console.log('Not on system page, ignoring log update');\n          return;\n        }\n        \n        if (payload && payload.logs && Array.isArray(payload.logs)) {\n          // Clean and normalize logs\n          const cleanedLogs = payload.logs.map(log => {\n            // Simply use the component attributes directly\n            const normalizedLog = {\n              timestamp: log.timestamp || 'Unknown',\n              level: log.level || 'info',\n              message: log.message || ''\n            };\n            \n            // Convert level to lowercase for consistency\n            if (normalizedLog.level) {\n              normalizedLog.level = normalizedLog.level.toLowerCase();\n            }\n            \n            // Normalize 'warn' to 'warning'\n            if (normalizedLog.level === 'warn') {\n              normalizedLog.level = 'warning';\n            }\n            \n            return normalizedLog;\n          });\n          \n          // Don't filter logs here - let the parent component handle filtering\n          // This ensures we're always using the most current logLevel value\n          \n          // Update last timestamp for pagination if available\n          if (payload.latest_timestamp) {\n            lastTimestampRef.current = payload.latest_timestamp;\n            // Save to localStorage for persistence between page refreshes\n            localStorage.setItem('lastLogTimestamp', payload.latest_timestamp);\n            console.log('Updated and saved last log timestamp:', payload.latest_timestamp);\n          }\n          \n          // Call the callback with all logs - parent will filter\n          if (cleanedLogs.length > 0) {\n            console.log(`Received ${cleanedLogs.length} logs via WebSocket`);\n            \n            // Get existing logs from the parent component using enhanced fetch\n            fetchJSON('/api/system/logs?level=debug&count=100', {\n              timeout: 15000, // 15 second timeout\n              retries: 1,     // Retry once\n              retryDelay: 1000 // 1 second between retries\n            })\n              .then(data => {\n                if (data.logs && Array.isArray(data.logs)) {\n                  // Combine existing logs with new logs\n                  const existingLogs = data.logs.map(log => {\n                    // Normalize existing logs\n                    const normalizedLog = {\n                      timestamp: log.timestamp || 'Unknown',\n                      level: (log.level || 'info').toLowerCase(),\n                      message: log.message || ''\n                    };\n                    \n                    // Normalize 'warn' to 'warning'\n                    if (normalizedLog.level === 'warn') {\n                      normalizedLog.level = 'warning';\n                    }\n                    \n                    return normalizedLog;\n                  });\n                  \n                  // Combine existing logs with new logs, avoiding duplicates\n                  const combinedLogs = [...existingLogs];\n                  \n                  // Add new logs that don't already exist\n                  cleanedLogs.forEach(newLog => {\n                    // Check if this log already exists\n                    const exists = combinedLogs.some(existingLog => \n                      existingLog.timestamp === newLog.timestamp && \n                      existingLog.message === newLog.message\n                    );\n                    \n                    if (!exists) {\n                      combinedLogs.push(newLog);\n                    }\n                  });\n                  \n                  // Sort logs by timestamp (newest first)\n                  combinedLogs.sort((a, b) => {\n                    return new Date(b.timestamp) - new Date(a.timestamp);\n                  });\n                  \n                  // Call the callback with combined logs - don't filter here\n                  // This ensures WebSocket debug logs are included when debug is selected in UI\n                  onLogsReceived(combinedLogs);\n                } else {\n                  // If no existing logs, just use the new logs\n                  onLogsReceived(cleanedLogs);\n                }\n              })\n              .catch(error => {\n                console.error('Error fetching existing logs:', error);\n                // If error fetching existing logs, just use the new logs\n                onLogsReceived(cleanedLogs);\n              });\n          } else {\n            console.log('No logs received via WebSocket');\n          }\n        }\n      };\n      \n      // Register handler for system logs updates - only once\n      console.log('Registering handler for system/logs via WebSocket (once on mount)');\n      window.wsClient.on('update', 'system/logs', handleLogsUpdate);\n      \n      // Clean up on unmount\n      return () => {\n        // Unregister handler\n        console.log('Unregistering handler for system/logs via WebSocket (component unmounting)');\n        window.wsClient.off('update', 'system/logs');\n        \n        // Clear polling interval\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n          pollingIntervalRef.current = null;\n        }\n      };\n    }\n  }, []); // Empty dependency array - only run once on mount\n  \n  // Start/stop polling when isPolling changes\n  useEffect(() => {\n    // Start polling\n    if (isPolling && !pollingIntervalRef.current) {\n      console.log('Starting log polling');\n      \n      // Subscribe to system logs topic\n      if (window.wsClient && typeof window.wsClient.subscribe === 'function') {\n        console.log('Subscribing to system/logs via WebSocket for polling');\n        // Include the last timestamp in the subscription if available\n        const subscriptionParams = { \n          level: 'debug',\n          ...(lastTimestampRef.current ? { since: lastTimestampRef.current } : {})\n        };\n        window.wsClient.subscribe('system/logs', subscriptionParams);\n        console.log(`Subscribed to system/logs with level: debug and last_timestamp: ${lastTimestampRef.current || 'NULL'}`);\n      }\n      \n      // Fetch logs immediately\n      fetchLogs();\n      \n      // Set up polling interval (every 5 seconds)\n      console.log('Setting up polling interval for logs (every 5 seconds)');\n      pollingIntervalRef.current = setInterval(() => {\n        console.log('Polling interval triggered, fetching logs...');\n        fetchLogs();\n      }, 5000);\n    }\n    // Stop polling\n    else if (!isPolling && pollingIntervalRef.current) {\n      console.log('Stopping log polling');\n      \n      // Unsubscribe from system logs topic\n      if (window.wsClient && typeof window.wsClient.unsubscribe === 'function') {\n        console.log('Unsubscribing from system/logs via WebSocket');\n        window.wsClient.unsubscribe('system/logs');\n      }\n      \n      clearInterval(pollingIntervalRef.current);\n      pollingIntervalRef.current = null;\n    }\n    \n    // Clean up on unmount\n    return () => {\n      if (pollingIntervalRef.current) {\n        clearInterval(pollingIntervalRef.current);\n        pollingIntervalRef.current = null;\n      }\n      \n      // Unsubscribe from system logs topic\n      if (window.wsClient && typeof window.wsClient.unsubscribe === 'function') {\n        console.log('Unsubscribing from system/logs via WebSocket on cleanup');\n        window.wsClient.unsubscribe('system/logs');\n      }\n    };\n  }, [isPolling, logLevel]);\n  \n  // Start polling when component mounts and update when log level changes\n  useEffect(() => {\n    console.log(`LogsPoller: Setting up polling with log level ${logLevel}`);\n    setIsPolling(false); // Stop any existing polling\n    \n    // Small delay to ensure any previous polling is cleaned up\n    setTimeout(() => {\n      setIsPolling(true); // Start polling with new parameters\n    }, 100);\n    \n    // Clean up on unmount\n    return () => {\n      console.log('LogsPoller: Cleaning up on unmount');\n      setIsPolling(false);\n    };\n  }, [logLevel, logCount]);\n  \n  // This component doesn't render anything visible\n  return null;\n}\n","/**\n * LightNVR Web Interface SystemView Component\n * Preact component for the system page\n */\n\nimport { h } from '../../preact.min.js';\nimport { html } from '../../html-helper.js';\nimport { useState, useEffect, useRef } from '../../preact.hooks.module.js';\nimport { showStatusMessage } from './UI.js';\nimport { ContentLoader } from './LoadingIndicator.js';\nimport { fetchJSON, enhancedFetch, createRequestController } from '../../fetch-utils.js';\n\n// Import system components\nimport { SystemControls } from './system/SystemControls.js';\nimport { SystemInfo } from './system/SystemInfo.js';\nimport { MemoryStorage } from './system/MemoryStorage.js';\nimport { StreamStorage } from './system/StreamStorage.js';\nimport { NetworkInfo } from './system/NetworkInfo.js';\nimport { StreamsInfo } from './system/StreamsInfo.js';\nimport { LogsView } from './system/LogsView.js';\nimport { LogsPoller } from './system/LogsPoller.js';\n\n// Import utility functions\nimport { formatBytes, formatUptime, log_level_meets_minimum } from './system/SystemUtils.js';\n\n/**\n * SystemView component\n * @returns {JSX.Element} SystemView component\n */\nexport function SystemView() {\n  const [systemInfo, setSystemInfo] = useState({\n    version: '',\n    uptime: '',\n    cpu: {\n      model: '',\n      cores: 0,\n      usage: 0\n    },\n    memory: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    go2rtcMemory: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    systemMemory: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    disk: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    systemDisk: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    network: {\n      interfaces: []\n    },\n    streams: {\n      active: 0,\n      total: 0\n    },\n    recordings: {\n      count: 0,\n      size: 0\n    }\n  });\n  const [logs, setLogs] = useState([]);\n  const [logLevel, setLogLevel] = useState('debug');\n  const logLevelRef = useRef('debug');\n  \n  // Wrap setLogLevel to add logging\n  const handleSetLogLevel = (newLevel) => {\n    console.log(`SystemView: Setting log level from ${logLevel} to ${newLevel}`);\n    console.log('Current stack trace:', new Error().stack);\n    \n    // Update both the state and the ref\n    setLogLevel(newLevel);\n    logLevelRef.current = newLevel;\n    \n    console.log(`SystemView: logLevelRef is now: ${logLevelRef.current}`);\n    \n    // Verify the state was updated\n    setTimeout(() => {\n      console.log(`SystemView: After setState, logLevel is now: ${logLevel}`);\n      console.log(`SystemView: After setState, logLevelRef is now: ${logLevelRef.current}`);\n    }, 0);\n  };\n  const [logCount, setLogCount] = useState(100);\n  const [isRestarting, setIsRestarting] = useState(false);\n  const [isShuttingDown, setIsShuttingDown] = useState(false);\n  \n  // State for loading and data status\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasData, setHasData] = useState(false);\n\n  // Handler for when logs are received from the LogsPoller\n  const handleLogsReceived = (newLogs) => {\n    console.log('SystemView received new logs:', newLogs.length);\n    \n    // Filter logs based on the current log level\n    const currentLogLevel = logLevelRef.current;\n    console.log(`Filtering ${newLogs.length} logs based on log level: ${currentLogLevel}`);\n    \n    const filteredLogs = newLogs.filter(log => {\n      // Ensure debug logs from WebSocket are included when debug is selected\n      const result = log_level_meets_minimum(log.level, currentLogLevel);\n      \n      // Add debug logging to help diagnose filtering issues\n      if (log.level === 'debug' && currentLogLevel === 'debug' && !result) {\n        console.warn('Debug log filtered out despite debug level selected:', log);\n      }\n      \n      return result;\n    });\n    \n    console.log(`After filtering: ${filteredLogs.length} logs match the current log level`);\n    \n    // Update the logs state with the filtered logs\n    setLogs(filteredLogs);\n    \n    // Force a re-render to ensure the UI updates\n    setTimeout(() => {\n      const logsContainer = document.querySelector('.logs-container');\n      if (logsContainer) {\n        // Scroll to the bottom of the logs container\n        logsContainer.scrollTop = logsContainer.scrollHeight;\n      }\n    }, 100);\n  };\n\n  // Request controller for cancelling requests on unmount\n  const requestControllerRef = useRef(null);\n\n  // Load system info and logs on mount\n  useEffect(() => {\n    // Create a new request controller\n    requestControllerRef.current = createRequestController();\n    \n    loadSystemInfo();\n    loadLogs();\n    \n    // No automatic polling intervals for system info - user will manually refresh when needed\n    // This prevents unnecessary network traffic and processing\n    console.log('System page loaded - no automatic polling for system info');\n    \n    // Clean up any existing WebSocket subscriptions and cancel pending requests on unmount\n    return () => {\n      if (window.wsClient && typeof window.wsClient.unsubscribe === 'function') {\n        console.log('Cleaning up any WebSocket subscriptions on unmount');\n        window.wsClient.unsubscribe('system/logs');\n      }\n      \n      if (requestControllerRef.current) {\n        requestControllerRef.current.abort();\n      }\n    };\n  }, []);\n  \n  // Load logs when log level or count changes\n  useEffect(() => {\n    console.log(`SystemView: Log level changed to ${logLevel} or count changed to ${logCount}`);\n    \n    // Only load logs via HTTP API once on initial load\n    // WebSocket polling will handle updates after that\n    if (logs.length === 0) {\n      console.log('Initial logs load via HTTP API');\n      loadLogs();\n    } else {\n      console.log('Filtering existing logs based on new log level');\n      // Filter existing logs based on the new log level from the ref\n      const currentLogLevel = logLevelRef.current;\n      console.log(`Filtering existing logs using logLevelRef.current: ${currentLogLevel}`);\n      \n      setLogs(prevLogs => {\n        // Special case for debug level - include all logs\n        return prevLogs.filter(log => {\n          return log_level_meets_minimum(log.level, currentLogLevel);\n        });\n      });\n    }\n  }, [logLevel, logCount]);\n  \n  // Load system info from API\n  const loadSystemInfo = async () => {\n    try {\n      setIsLoading(true);\n      \n      const data = await fetchJSON('/api/system/info', {\n        signal: requestControllerRef.current?.signal,\n        timeout: 15000, // 15 second timeout\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n      \n      setSystemInfo(data);\n      setHasData(true);\n    } catch (error) {\n      // Only show error if the request wasn't cancelled\n      if (error.message !== 'Request was cancelled') {\n        console.error('Error loading system info:', error);\n        // Don't show error message for this, just log it\n        setHasData(false);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Load logs from API\n  const loadLogs = async () => {\n    try {\n      // Always use debug level to get all logs, then filter on frontend\n      const currentLogLevel = logLevelRef.current;\n      console.log(`Loading logs from API with level: debug (to get all logs, will filter on frontend)`);\n      \n      const data = await fetchJSON(`/api/system/logs?level=debug&count=${logCount}`, {\n        signal: requestControllerRef.current?.signal,\n        timeout: 20000, // 20 second timeout for potentially large log data\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n      \n      // Check if we have logs\n      if (data.logs && Array.isArray(data.logs)) {\n        // Check if logs are already structured objects or raw strings\n        if (data.logs.length > 0 && typeof data.logs[0] === 'object' && data.logs[0].level) {\n        // Logs are already structured objects, filter them based on the current log level\n        let filteredLogs = data.logs.filter(log => {\n            return log_level_meets_minimum(log.level, currentLogLevel);\n          });\n        \n        console.log(`Filtered ${data.logs.length} logs to ${filteredLogs.length} based on log level ${currentLogLevel}`);\n        setLogs(filteredLogs);\n        } else {\n          // Logs are raw strings, parse them into structured objects\n          const parsedLogs = data.logs.map(logLine => {\n            // Parse log line (format: [TIMESTAMP] [LEVEL] MESSAGE)\n            let timestamp = 'Unknown';\n            let level = 'debug';\n            let message = logLine;\n            \n            // Try to extract timestamp and level using regex\n            const logRegex = /\\[(.*?)\\]\\s*\\[(.*?)\\]\\s*(.*)/;\n            const match = logLine.match(logRegex);\n            \n            if (match && match.length >= 4) {\n              timestamp = match[1];\n              level = match[2].toLowerCase();\n              message = match[3];\n              \n              // Normalize log level\n              if (level === 'warn') {\n                level = 'warning';\n              }\n            }\n            \n            return {\n              timestamp,\n              level,\n              message\n            };\n          });\n          \n          // Filter the parsed logs based on the current log level\n          let filteredLogs = parsedLogs.filter(log => {\n              return log_level_meets_minimum(log.level, currentLogLevel);\n            });\n          \n          console.log(`Filtered ${parsedLogs.length} parsed logs to ${filteredLogs.length} based on log level ${currentLogLevel}`);\n          setLogs(filteredLogs);\n        }\n      } else {\n        setLogs([]);\n      }\n    } catch (error) {\n      console.error('Error loading logs:', error);\n      showStatusMessage('Error loading logs: ' + error.message);\n    }\n  };\n  \n  // Clear logs\n  const clearLogs = async () => {\n    if (!confirm('Are you sure you want to clear all logs?')) {\n      return;\n    }\n    \n    try {\n      showStatusMessage('Clearing logs...');\n      \n      await enhancedFetch('/api/system/logs/clear', {\n        method: 'POST',\n        signal: requestControllerRef.current?.signal,\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n      \n      showStatusMessage('Logs cleared successfully');\n      loadLogs(); // Reload logs after clearing\n    } catch (error) {\n      console.error('Error clearing logs:', error);\n      showStatusMessage('Error clearing logs: ' + error.message);\n    }\n  };\n  \n  // Restart system\n  const restartSystem = async () => {\n    if (!confirm('Are you sure you want to restart the system?')) {\n      return;\n    }\n    \n    try {\n      setIsRestarting(true);\n      showStatusMessage('Restarting system...');\n      \n      await enhancedFetch('/api/system/restart', {\n        method: 'POST',\n        signal: requestControllerRef.current?.signal,\n        timeout: 30000, // 30 second timeout for system restart\n        retries: 0      // No retries for system restart\n      });\n      \n      showStatusMessage('System is restarting. Please wait...');\n      \n      // Wait for system to restart\n      setTimeout(() => {\n        window.location.reload();\n      }, 10000);\n    } catch (error) {\n      console.error('Error restarting system:', error);\n      showStatusMessage('Error restarting system: ' + error.message);\n      setIsRestarting(false);\n    }\n  };\n  \n  // Shutdown system\n  const shutdownSystem = async () => {\n    if (!confirm('Are you sure you want to shut down the system?')) {\n      return;\n    }\n    \n    try {\n      setIsShuttingDown(true);\n      showStatusMessage('Shutting down system...');\n      \n      await enhancedFetch('/api/system/shutdown', {\n        method: 'POST',\n        signal: requestControllerRef.current?.signal,\n        timeout: 30000, // 30 second timeout for system shutdown\n        retries: 0      // No retries for system shutdown\n      });\n      \n      showStatusMessage('System is shutting down. You will need to manually restart it.');\n    } catch (error) {\n      console.error('Error shutting down system:', error);\n      showStatusMessage('Error shutting down system: ' + error.message);\n      setIsShuttingDown(false);\n    }\n  };\n  \n  // Check if WebSocket client is initialized\n  useEffect(() => {\n    if (!window.wsClient) {\n      console.log('WebSocket client not available in SystemView, it should be initialized in preact-app.js');\n    } else {\n      console.log('WebSocket client is available in SystemView');\n    }\n  }, []);\n\n  return html`\n    <section id=\"system-page\" class=\"page\">\n      <${SystemControls} \n        restartSystem=${restartSystem} \n        shutdownSystem=${shutdownSystem} \n        isRestarting=${isRestarting} \n        isShuttingDown=${isShuttingDown} \n      />\n      \n      <${ContentLoader}\n        isLoading=${isLoading}\n        hasData=${hasData}\n        loadingMessage=\"Loading system information...\"\n        emptyMessage=\"System information not available. Please try again later.\"\n      >\n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n          <${SystemInfo} systemInfo=${systemInfo} formatUptime=${formatUptime} />\n          <${MemoryStorage} systemInfo=${systemInfo} formatBytes=${formatBytes} />\n        </div>\n        \n        <div class=\"grid grid-cols-1 gap-4 mb-4\">\n          <${StreamStorage} systemInfo=${systemInfo} formatBytes=${formatBytes} />\n        </div>\n        \n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n          <${NetworkInfo} systemInfo=${systemInfo} />\n          <${StreamsInfo} systemInfo=${systemInfo} formatBytes=${formatBytes} />\n        </div>\n        \n        <${LogsView} \n          logs=${logs} \n          logLevel=${logLevel} \n          logCount=${logCount} \n          setLogLevel=${handleSetLogLevel} \n          setLogCount=${setLogCount} \n          loadLogs=${loadLogs} \n          clearLogs=${clearLogs} \n        />\n        \n        <${LogsPoller}\n          logLevel=${logLevel}\n          logCount=${logCount}\n          onLogsReceived=${handleLogsReceived}\n        />\n      <//>\n    </section>\n  `;\n}\n\n/**\n * Load SystemView component\n */\nexport function loadSystemView() {\n  const mainContent = document.getElementById('main-content');\n  if (!mainContent) return;\n  \n  // Render the SystemView component to the container\n  import('../../preact.min.js').then(({ render }) => {\n    render(html`<${SystemView} />`, mainContent);\n    \n    // Refresh system info immediately after rendering\n    setTimeout(() => {\n      const event = new CustomEvent('refresh-system-info');\n      window.dispatchEvent(event);\n    }, 100);\n  });\n}\n\n// Add a global event listener for refreshing system info\nwindow.addEventListener('load', () => {\n  window.addEventListener('refresh-system-info', async () => {\n    try {\n      const response = await enhancedFetch('/api/system/info', {\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n      \n      if (response.ok) {\n        console.log('System info refreshed');\n      }\n    } catch (error) {\n      console.error('Error refreshing system info:', error);\n    }\n  });\n});\n"],"file":"assets/SystemView-CoODZBx8.js"}