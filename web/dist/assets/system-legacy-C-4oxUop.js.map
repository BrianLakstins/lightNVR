{"version":3,"file":"system-legacy-C-4oxUop.js","sources":["../../js/components/preact/system/SystemControls.jsx","../../js/components/preact/system/SystemInfo.jsx","../../js/components/preact/system/MemoryStorage.jsx","../../js/components/preact/system/StreamStorage.jsx","../../js/components/preact/system/NetworkInfo.jsx","../../js/components/preact/system/StreamsInfo.jsx","../../js/components/preact/system/LogsView.jsx","../../js/components/preact/system/SystemUtils.js","../../js/components/preact/system/LogsPoller.jsx","../../js/components/preact/SystemView.jsx","../../js/pages/system-page.jsx"],"sourcesContent":["/**\n * SystemControls Component\n * Provides system restart and shutdown controls\n */\n\n/**\n * SystemControls component\n * @param {Object} props Component props\n * @param {Function} props.restartSystem Function to restart the system\n * @param {Function} props.shutdownSystem Function to shut down the system\n * @param {boolean} props.isRestarting Whether the system is currently restarting\n * @param {boolean} props.isShuttingDown Whether the system is currently shutting down\n * @returns {JSX.Element} SystemControls component\n */\nexport function SystemControls({ restartSystem, shutdownSystem, isRestarting, isShuttingDown }) {\n  return (\n    <div className=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n      <h2 className=\"text-xl font-bold\">System</h2>\n      <div className=\"controls space-x-2\">\n        <button\n          id=\"restart-btn\"\n          className=\"px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700 transition-colors focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n          onClick={restartSystem}\n          disabled={isRestarting || isShuttingDown}\n        >\n          Restart\n        </button>\n        <button\n          id=\"shutdown-btn\"\n          className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n          onClick={shutdownSystem}\n          disabled={isRestarting || isShuttingDown}\n        >\n          Shutdown\n        </button>\n      </div>\n    </div>\n  );\n}\n","/**\n * SystemInfo Component\n * Displays basic system information like version, uptime, and CPU details\n */\n\n/**\n * SystemInfo component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @param {Function} props.formatUptime Function to format uptime\n * @returns {JSX.Element} SystemInfo component\n */\nexport function SystemInfo({ systemInfo, formatUptime }) {\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 className=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">System Information</h3>\n      <div className=\"space-y-2\">\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">Version:</span>\n          <span>{systemInfo.version || 'Unknown'}</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">Uptime:</span>\n          <span>{systemInfo.uptime ? formatUptime(systemInfo.uptime) : 'Unknown'}</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">CPU Model:</span>\n          <span>{systemInfo.cpu?.model || 'Unknown'}</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">CPU Cores:</span>\n          <span>{systemInfo.cpu?.cores || 'Unknown'}</span>\n        </div>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"font-medium\">CPU Usage:</span>\n          <div className=\"w-32 bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n            <div\n              className=\"bg-blue-600 h-2.5 rounded-full\"\n              style={{ width: `${systemInfo.cpu?.usage || 0}%` }}\n            ></div>\n          </div>\n          <span>{systemInfo.cpu?.usage ? `${systemInfo.cpu.usage.toFixed(1)}%` : 'Unknown'}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/**\n * MemoryStorage Component\n * Displays memory and storage information with progress bars\n */\n\n/**\n * MemoryStorage component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @param {Function} props.formatBytes Function to format bytes to human-readable size\n * @returns {JSX.Element} MemoryStorage component\n */\nexport function MemoryStorage({ systemInfo, formatBytes }) {\n  // Get memory usage values\n  const lightNvrMemoryUsed = systemInfo.memory?.used || 0;\n  const go2rtcMemoryUsed = systemInfo.go2rtcMemory?.used || 0;\n  const totalSystemMemory = systemInfo.memory?.total || 0;\n\n  // Calculate combined memory usage\n  const combinedMemoryUsed = lightNvrMemoryUsed + go2rtcMemoryUsed;\n\n  // Calculate the percentage of total system memory used by both processes combined\n  const combinedMemoryPercent = totalSystemMemory ?\n    (combinedMemoryUsed / totalSystemMemory * 100).toFixed(1) : 0;\n\n  // Calculate the percentage of each process relative to their combined usage\n  // This ensures the slivers add up to the total width of the progress bar\n  const lightNvrSlicePercent = combinedMemoryUsed ?\n    (lightNvrMemoryUsed / combinedMemoryUsed * 100).toFixed(1) : 0;\n\n  const go2rtcSlicePercent = combinedMemoryUsed ?\n    (go2rtcMemoryUsed / combinedMemoryUsed * 100).toFixed(1) : 0;\n\n  // These variables ensure the slivers add up to 100% of the combined usage bar\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 className=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Memory & Storage</h3>\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex justify-between mb-1\">\n            <span className=\"font-medium\">Process Memory:</span>\n            <div>\n              <span className=\"inline-block px-2 py-0.5 mr-1 text-xs rounded bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">\n                LightNVR: {formatBytes(lightNvrMemoryUsed)}\n              </span>\n              <span className=\"inline-block px-2 py-0.5 text-xs rounded bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                go2rtc: {formatBytes(go2rtcMemoryUsed)}\n              </span>\n            </div>\n          </div>\n          <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1\">\n            <span>Combined: {formatBytes(combinedMemoryUsed)} / {formatBytes(totalSystemMemory)}</span>\n            <span>{combinedMemoryPercent}% of total memory</span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 overflow-hidden\">\n            <div className=\"flex h-full\" style={{ width: `${combinedMemoryPercent}%` }}>\n              <div className=\"bg-blue-600 h-2.5\" style={{ width: `${lightNvrSlicePercent}%` }}></div>\n              <div className=\"bg-green-500 h-2.5\" style={{ width: `${go2rtcSlicePercent}%` }}></div>\n            </div>\n          </div>\n        </div>\n        <div>\n          <div className=\"flex justify-between mb-1\">\n            <span className=\"font-medium\">System Memory:</span>\n            <span>\n              {systemInfo.systemMemory?.used ? formatBytes(systemInfo.systemMemory.used) : '0'} /\n              {systemInfo.systemMemory?.total ? formatBytes(systemInfo.systemMemory.total) : '0'}\n            </span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n            <div\n              className=\"bg-blue-600 h-2.5 rounded-full\"\n              style={{\n                width: `${systemInfo.systemMemory?.total ?\n                  (systemInfo.systemMemory.used / systemInfo.systemMemory.total * 100).toFixed(1) : 0}%`\n              }}\n            ></div>\n          </div>\n        </div>\n        <div>\n          <div className=\"flex justify-between mb-1\">\n            <span className=\"font-medium\">LightNVR Storage:</span>\n            <span>\n              {systemInfo.disk?.used ? formatBytes(systemInfo.disk.used) : '0'} /\n              {systemInfo.disk?.total ? formatBytes(systemInfo.disk.total) : '0'}\n            </span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n            <div\n              className=\"bg-blue-600 h-2.5 rounded-full\"\n              style={{\n                width: `${systemInfo.disk?.total ?\n                  (systemInfo.disk.used / systemInfo.disk.total * 100).toFixed(1) : 0}%`\n              }}\n            ></div>\n          </div>\n        </div>\n        <div>\n          <div className=\"flex justify-between mb-1\">\n            <span className=\"font-medium\">System Storage:</span>\n            <span>\n              {systemInfo.systemDisk?.used ? formatBytes(systemInfo.systemDisk.used) : '0'} /\n              {systemInfo.systemDisk?.total ? formatBytes(systemInfo.systemDisk.total) : '0'}\n            </span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n            <div\n              className=\"bg-blue-600 h-2.5 rounded-full\"\n              style={{\n                width: `${systemInfo.systemDisk?.total ?\n                  (systemInfo.systemDisk.used / systemInfo.systemDisk.total * 100).toFixed(1) : 0}%`\n              }}\n            ></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/**\n * StreamStorage Component\n * Displays storage usage per stream with slivers in a progress bar\n */\n\n/**\n * StreamStorage component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @param {Function} props.formatBytes Function to format bytes to human-readable size\n * @returns {JSX.Element} StreamStorage component\n */\nexport function StreamStorage({ systemInfo, formatBytes }) {\n  // Check if stream storage information is available\n  if (!systemInfo.streamStorage || !Array.isArray(systemInfo.streamStorage) || systemInfo.streamStorage.length === 0) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n        <h3 className=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Stream Storage</h3>\n        <div className=\"text-gray-500 dark:text-gray-400 text-center py-4\">\n          No stream storage information available\n        </div>\n      </div>\n    );\n  }\n\n  // Calculate total storage used by all streams\n  const totalStreamStorage = systemInfo.streamStorage.reduce((total, stream) => total + stream.size, 0);\n\n  // Calculate the percentage of total disk space used by all streams\n  const totalDiskSpace = systemInfo.disk?.total || 0;\n  const totalStreamStoragePercent = totalDiskSpace ?\n    (totalStreamStorage / totalDiskSpace * 100).toFixed(1) : 0;\n\n  // Calculate the percentage of each stream relative to the total stream storage\n  const streamStorageData = systemInfo.streamStorage.map(stream => ({\n    name: stream.name,\n    size: stream.size,\n    count: stream.count,\n    slicePercent: totalStreamStorage ? (stream.size / totalStreamStorage * 100).toFixed(1) : 0\n  }));\n\n  // Sort streams by size (largest first)\n  streamStorageData.sort((a, b) => b.size - a.size);\n\n  // Generate a color for each stream\n  const colors = [\n    'bg-blue-600',\n    'bg-green-500',\n    'bg-yellow-500',\n    'bg-red-500',\n    'bg-purple-500',\n    'bg-pink-500',\n    'bg-indigo-500',\n    'bg-teal-500'\n  ];\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 className=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Stream Storage</h3>\n\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex justify-between mb-1\">\n            <span className=\"font-medium\">Storage per Stream:</span>\n            <div className=\"flex flex-wrap justify-end gap-1\">\n              {streamStorageData.map((stream, index) => (\n                <span\n                  key={stream.name}\n                  className={`inline-block px-2 py-0.5 text-xs rounded ${colors[index % colors.length].replace('bg-', 'bg-opacity-20 bg-')} ${colors[index % colors.length].replace('bg-', 'text-')}`}\n                >\n                  {stream.name}: {formatBytes(stream.size)}\n                </span>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1\">\n            <span>Combined: {formatBytes(totalStreamStorage)} / {formatBytes(totalDiskSpace)}</span>\n            <span>{totalStreamStoragePercent}% of total storage</span>\n          </div>\n\n          <div className=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 overflow-hidden\">\n            <div className=\"flex h-full\" style={{ width: `${totalStreamStoragePercent}%` }}>\n              {streamStorageData.map((stream, index) => (\n                <div\n                  key={stream.name}\n                  className={`${colors[index % colors.length]} h-2.5`}\n                  style={{ width: `${stream.slicePercent}%` }}\n                ></div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"mt-4\">\n            <h4 className=\"font-medium mb-2\">Stream Details:</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n              {streamStorageData.map((stream, index) => (\n                <a\n                  key={stream.name}\n                  href={`recordings.html?stream=${encodeURIComponent(stream.name)}`}\n                  className=\"flex items-center p-2 rounded bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors cursor-pointer\"\n                >\n                  <div className={`w-3 h-3 rounded-full mr-2 ${colors[index % colors.length]}`}></div>\n                  <div>\n                    <div className=\"font-medium\">{stream.name}</div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {formatBytes(stream.size)} ({stream.slicePercent}%) • {stream.count} recordings\n                    </div>\n                  </div>\n                </a>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/**\n * NetworkInfo Component\n * Displays network interface information\n */\n\n/**\n * NetworkInfo component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @returns {JSX.Element} NetworkInfo component\n */\nexport function NetworkInfo({ systemInfo }) {\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 className=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Network Interfaces</h3>\n      <div className=\"space-y-2\">\n        {systemInfo.network?.interfaces?.length ? (\n          systemInfo.network.interfaces.map(iface => (\n            <div key={iface.name} className=\"mb-2 pb-2 border-b border-gray-100 dark:border-gray-700 last:border-0\">\n              <div className=\"flex justify-between\">\n                <span className=\"font-medium\">{iface.name}:</span>\n                <span>{iface.address || 'No IP'}</span>\n              </div>\n              <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                MAC: {iface.mac || 'Unknown'} | {iface.up ? 'Up' : 'Down'}\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"text-gray-500 dark:text-gray-400\">No network interfaces found</div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/**\n * StreamsInfo Component\n * Displays information about streams and recordings\n */\n\n/**\n * StreamsInfo component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @param {Function} props.formatBytes Function to format bytes to human-readable size\n * @returns {JSX.Element} StreamsInfo component\n */\nexport function StreamsInfo({ systemInfo, formatBytes }) {\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 className=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Streams & Recordings</h3>\n      <div className=\"space-y-2\">\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">Active Streams:</span>\n          <span>{systemInfo.streams?.active || 0} / {systemInfo.streams?.total || 0}</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">Recordings:</span>\n          <span>{systemInfo.recordings?.count || 0}</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">Recordings Size:</span>\n          <span>{systemInfo.recordings?.size ? formatBytes(systemInfo.recordings.size) : '0'}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/**\n * LogsView Component\n * Displays and manages system logs\n */\n\n/**\n * Format log level with appropriate styling\n *\n * @param {string} level Log level\n * @returns {JSX.Element} Formatted log level badge\n */\nfunction formatLogLevel(level) {\n  // Handle null or undefined level\n  if (level === null || level === undefined) {\n    return (\n      <span className=\"px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\">\n        UNKNOWN\n      </span>\n    );\n  }\n\n  // Convert to lowercase string for case-insensitive comparison\n  const levelLower = String(level).toLowerCase().trim();\n\n  // Match against known log levels\n  if (levelLower === 'error' || levelLower === 'err') {\n    return (\n      <span className=\"px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\">\n        ERROR\n      </span>\n    );\n  } else if (levelLower === 'warning' || levelLower === 'warn') {\n    return (\n      <span className=\"px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\">\n        WARN\n      </span>\n    );\n  } else if (levelLower === 'info') {\n    return (\n      <span className=\"px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">\n        INFO\n      </span>\n    );\n  } else if (levelLower === 'debug' || levelLower === 'dbg') {\n    return (\n      <span className=\"px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\">\n        DEBUG\n      </span>\n    );\n  } else {\n    // For any other value, display it as is (uppercase)\n    const levelText = String(level).toUpperCase();\n    return (\n      <span className=\"px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\">\n        {levelText}\n      </span>\n    );\n  }\n}\n\n/**\n * LogsView component\n * @param {Object} props Component props\n * @param {Array} props.logs Array of log entries\n * @param {string} props.logLevel Current log level filter\n * @param {number} props.logCount Number of logs to display\n * @param {Function} props.setLogLevel Function to set log level\n * @param {Function} props.setLogCount Function to set log count\n * @param {Function} props.loadLogs Function to load logs\n * @param {Function} props.clearLogs Function to clear logs\n * @returns {JSX.Element} LogsView component\n */\nexport function LogsView({ logs, logLevel, logCount, setLogLevel, setLogCount, loadLogs, clearLogs }) {\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4 mb-4\">\n      <div className=\"flex justify-between items-center mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">\n        <h3 className=\"text-lg font-semibold\">System Logs</h3>\n        <div className=\"flex space-x-2\">\n          <select\n            id=\"log-level\"\n            className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n            value={logLevel}\n            onChange={e => {\n              const newLevel = e.target.value;\n              console.log(`LogsView: Log level changed from ${logLevel} to ${newLevel}`);\n              setLogLevel(newLevel);\n            }}\n          >\n            <option value=\"error\">Error</option>\n            <option value=\"warning\">Warning</option>\n            <option value=\"info\">Info</option>\n            <option value=\"debug\">Debug</option>\n          </select>\n          <select\n            id=\"log-count\"\n            className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n            value={logCount}\n            onChange={e => setLogCount(parseInt(e.target.value, 10))}\n          >\n            <option value=\"50\">50 lines</option>\n            <option value=\"100\">100 lines</option>\n            <option value=\"200\">200 lines</option>\n            <option value=\"500\">500 lines</option>\n          </select>\n          <button\n            id=\"refresh-logs-btn\"\n            className=\"px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n            onClick={loadLogs}\n          >\n            Refresh\n          </button>\n          <button\n            id=\"clear-logs-btn\"\n            className=\"px-3 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n            onClick={clearLogs}\n          >\n            Clear Logs\n          </button>\n        </div>\n      </div>\n      <div className=\"logs-container bg-gray-100 dark:bg-gray-900 rounded p-4 overflow-auto max-h-96 font-mono text-sm\">\n        {logs.length === 0 ? (\n          <div className=\"text-gray-500 dark:text-gray-400\">No logs found</div>\n        ) : (\n          logs.map((log, index) => (\n            <div key={index} className=\"log-entry mb-1 last:mb-0\">\n              <span className=\"text-gray-500 dark:text-gray-400\">{log.timestamp}</span>\n              <span className=\"mx-2\">{formatLogLevel(log.level)}</span>\n              <span className={`log-message ${log.level === 'error' ? 'text-red-600 dark:text-red-400' : ''}`}>\n                {log.message}\n              </span>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","/**\n * SystemUtils\n * Utility functions for the system components\n */\n\n/**\n * Format bytes to human-readable size\n * \n * @param {number} bytes Number of bytes\n * @param {number} decimals Number of decimal places\n * @returns {string} Formatted size string\n */\nexport function formatBytes(bytes, decimals = 1) {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  \n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/**\n * Format uptime in seconds to a human-readable string\n * \n * @param {number} seconds Uptime in seconds\n * @returns {string} Formatted uptime string\n */\nexport function formatUptime(seconds) {\n  const days = Math.floor(seconds / 86400);\n  const hours = Math.floor((seconds % 86400) / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n  \n  let result = '';\n  if (days > 0) result += `${days}d `;\n  if (hours > 0 || days > 0) result += `${hours}h `;\n  if (minutes > 0 || hours > 0 || days > 0) result += `${minutes}m `;\n  result += `${secs}s`;\n  \n  return result;\n}\n\n/**\n * Check if a log level meets the minimum required level\n * This is a JavaScript implementation of the same logic used in the backend\n * \n * @param {string} logLevel The log level to check\n * @param {string} minLevel The minimum required level\n * @returns {boolean} True if the log level meets the minimum, false otherwise\n */\nexport function log_level_meets_minimum(logLevel, minLevel) {\n  // Special case: if minLevel is debug, always return true\n  // This ensures all log levels are shown when debug is selected\n  if (String(minLevel || '').toLowerCase() === 'debug') {\n    return true;\n  }\n  \n  // Convert log levels to numeric values for comparison\n  let levelValue = 2; // Default to INFO (2)\n  let minValue = 2;   // Default to INFO (2)\n  \n  // Map log level strings to numeric values\n  // ERROR = 0, WARNING = 1, INFO = 2, DEBUG = 3\n  const logLevelLower = String(logLevel || '').toLowerCase();\n  const minLevelLower = String(minLevel || '').toLowerCase();\n  \n  if (logLevelLower === 'error') {\n    levelValue = 0;\n  } else if (logLevelLower === 'warning' || logLevelLower === 'warn') {\n    levelValue = 1;\n  } else if (logLevelLower === 'info') {\n    levelValue = 2;\n  } else if (logLevelLower === 'debug') {\n    levelValue = 3;\n  }\n  \n  if (minLevelLower === 'error') {\n    minValue = 0;\n  } else if (minLevelLower === 'warning' || minLevelLower === 'warn') {\n    minValue = 1;\n  } else if (minLevelLower === 'info') {\n    minValue = 2;\n  } else if (minLevelLower === 'debug') {\n    minValue = 3;\n  }\n  \n  // Return true if the log level is less than or equal to the minimum level\n  // Lower values are higher priority (ERROR = 0 is highest priority)\n  // We want to include all levels with higher or equal priority to the minimum\n  return levelValue <= minValue;\n}\n","/**\n * LogsPoller Component\n * Handles polling for logs via WebSocket instead of automatic updates\n */\n\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { log_level_meets_minimum } from './SystemUtils.js';\nimport { fetchJSON } from '../../../fetch-utils.js';\n\n/**\n * LogsPoller component\n * @param {Object} props Component props\n * @param {string} props.logLevel Current log level filter\n * @param {number} props.logCount Number of logs to display\n * @param {Function} props.onLogsReceived Callback function when logs are received\n * @returns {JSX.Element} LogsPoller component (invisible)\n */\nexport function LogsPoller({ logLevel, logCount, onLogsReceived }) {\n  const [isPolling, setIsPolling] = useState(false);\n  const pollingIntervalRef = useRef(null);\n  // Initialize with null, but will persist between renders\n  const lastTimestampRef = useRef(null);\n\n  // Try to load the last timestamp from localStorage on initial render\n  useEffect(() => {\n    const savedTimestamp = localStorage.getItem('lastLogTimestamp');\n    if (savedTimestamp) {\n      console.log('Loaded last log timestamp from localStorage:', savedTimestamp);\n      lastTimestampRef.current = savedTimestamp;\n    }\n  }, []);\n\n  // Function to fetch logs via WebSocket\n  const fetchLogs = () => {\n    if (!window.wsClient) {\n      console.log('WebSocket client not available, will retry on next poll');\n      return;\n    }\n\n    if (!window.wsClient.isConnected()) {\n      console.log('WebSocket not connected, attempting to connect');\n      window.wsClient.connect();\n      // Skip this fetch attempt, will retry on next poll\n      return;\n    }\n\n    // Only fetch if we're on the system page\n    if (!document.getElementById('system-page')) {\n      console.log('Not on system page, skipping log fetch');\n      return;\n    }\n\n    console.log('Fetching logs via WebSocket with level: debug (to get all logs, will filter on frontend)');\n\n    // Create fetch request payload\n    const payload = {\n      level: 'debug', // Always request debug level to get all logs\n      count: logCount\n    };\n\n    // Add last timestamp if available for pagination\n    if (lastTimestampRef.current) {\n      payload.last_timestamp = lastTimestampRef.current;\n    }\n\n    // Add client ID to the payload\n    if (window.wsClient.getClientId) {\n      payload.client_id = window.wsClient.getClientId();\n    }\n\n    console.log('Sending fetch request with payload:', payload);\n\n    // Send fetch request\n    try {\n      // Always use the send method which properly formats the message\n      const success = window.wsClient.send('fetch', 'system/logs', payload);\n      if (!success) {\n        console.warn('Failed to send fetch request, will retry on next poll');\n      } else {\n        console.log('Fetch request sent successfully');\n      }\n    } catch (error) {\n      console.error('Error sending fetch request:', error);\n    }\n  };\n\n  // Set up WebSocket handler for log updates - only once on mount\n  useEffect(() => {\n    // If WebSocket client is not available, set up a check to try again later\n    if (!window.wsClient) {\n      console.log('WebSocket client not available, will check again later');\n      const checkInterval = setInterval(() => {\n        if (window.wsClient) {\n          console.log('WebSocket client now available, setting up handlers');\n          clearInterval(checkInterval);\n          setupHandlers();\n        }\n      }, 1000);\n\n      // Clean up interval on unmount\n      return () => {\n        clearInterval(checkInterval);\n      };\n    } else {\n      // WebSocket client is available, set up handlers immediately\n      return setupHandlers();\n    }\n\n    // Function to set up WebSocket handlers\n    function setupHandlers() {\n      console.log('Setting up WebSocket handlers for logs');\n\n      // Handler for log updates\n      const handleLogsUpdate = (payload) => {\n        console.log('Received logs update via WebSocket:', payload);\n\n        // Only process updates if we're on the system page\n        if (!document.getElementById('system-page')) {\n          console.log('Not on system page, ignoring log update');\n          return;\n        }\n\n        if (payload && payload.logs && Array.isArray(payload.logs)) {\n          // Clean and normalize logs\n          const cleanedLogs = payload.logs.map(log => {\n            // Simply use the component attributes directly\n            const normalizedLog = {\n              timestamp: log.timestamp || 'Unknown',\n              level: log.level || 'info',\n              message: log.message || ''\n            };\n\n            // Convert level to lowercase for consistency\n            if (normalizedLog.level) {\n              normalizedLog.level = normalizedLog.level.toLowerCase();\n            }\n\n            // Normalize 'warn' to 'warning'\n            if (normalizedLog.level === 'warn') {\n              normalizedLog.level = 'warning';\n            }\n\n            return normalizedLog;\n          });\n\n          // Don't filter logs here - let the parent component handle filtering\n          // This ensures we're always using the most current logLevel value\n\n          // Update last timestamp for pagination if available\n          if (payload.latest_timestamp) {\n            lastTimestampRef.current = payload.latest_timestamp;\n            // Save to localStorage for persistence between page refreshes\n            localStorage.setItem('lastLogTimestamp', payload.latest_timestamp);\n            console.log('Updated and saved last log timestamp:', payload.latest_timestamp);\n          }\n\n          // Call the callback with the logs - parent will filter\n          if (cleanedLogs.length > 0) {\n            console.log(`Received ${cleanedLogs.length} logs via WebSocket`);\n\n            // Sort logs by timestamp (newest first)\n            cleanedLogs.sort((a, b) => {\n              return new Date(b.timestamp) - new Date(a.timestamp);\n            });\n\n            // Call the callback with the WebSocket logs - don't filter here\n            // This ensures WebSocket debug logs are included when debug is selected in UI\n            onLogsReceived(cleanedLogs);\n          } else {\n            console.log('No logs received via WebSocket');\n          }\n        }\n      };\n\n      // Register handler for system logs updates - only once\n      console.log('Registering handler for system/logs via WebSocket (once on mount)');\n      window.wsClient.on('update', 'system/logs', handleLogsUpdate);\n\n      // Clean up on unmount\n      return () => {\n        // Unregister handler\n        console.log('Unregistering handler for system/logs via WebSocket (component unmounting)');\n        window.wsClient.off('update', 'system/logs');\n\n        // Clear polling interval\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n          pollingIntervalRef.current = null;\n        }\n      };\n    }\n  }, []); // Empty dependency array - only run once on mount\n\n  // Start/stop polling when isPolling changes\n  useEffect(() => {\n    // Start polling\n    if (isPolling && !pollingIntervalRef.current) {\n      console.log('Starting log polling');\n\n      // Subscribe to system logs topic\n      if (window.wsClient && typeof window.wsClient.subscribe === 'function') {\n        console.log('Subscribing to system/logs via WebSocket for polling');\n        // Include the last timestamp in the subscription if available\n        const subscriptionParams = {\n          level: 'debug',\n          ...(lastTimestampRef.current ? { since: lastTimestampRef.current } : {})\n        };\n        window.wsClient.subscribe('system/logs', subscriptionParams);\n        console.log(`Subscribed to system/logs with level: debug and last_timestamp: ${lastTimestampRef.current || 'NULL'}`);\n      }\n\n      // Fetch logs immediately\n      fetchLogs();\n\n      // Set up polling interval (every 5 seconds)\n      console.log('Setting up polling interval for logs (every 5 seconds)');\n      pollingIntervalRef.current = setInterval(() => {\n        console.log('Polling interval triggered, fetching logs...');\n        fetchLogs();\n      }, 5000);\n    }\n    // Stop polling\n    else if (!isPolling && pollingIntervalRef.current) {\n      console.log('Stopping log polling');\n\n      // Unsubscribe from system logs topic\n      if (window.wsClient && typeof window.wsClient.unsubscribe === 'function') {\n        console.log('Unsubscribing from system/logs via WebSocket');\n        window.wsClient.unsubscribe('system/logs');\n      }\n\n      clearInterval(pollingIntervalRef.current);\n      pollingIntervalRef.current = null;\n    }\n\n    // Clean up on unmount\n    return () => {\n      if (pollingIntervalRef.current) {\n        clearInterval(pollingIntervalRef.current);\n        pollingIntervalRef.current = null;\n      }\n\n      // Unsubscribe from system logs topic\n      if (window.wsClient && typeof window.wsClient.unsubscribe === 'function') {\n        console.log('Unsubscribing from system/logs via WebSocket on cleanup');\n        window.wsClient.unsubscribe('system/logs');\n      }\n    };\n  }, [isPolling, logLevel]);\n\n  // Listen for manual refresh events\n  useEffect(() => {\n    const handleRefreshEvent = () => {\n      console.log('Received refresh-logs-websocket event, triggering fetch');\n      fetchLogs();\n    };\n\n    window.addEventListener('refresh-logs-websocket', handleRefreshEvent);\n\n    return () => {\n      window.removeEventListener('refresh-logs-websocket', handleRefreshEvent);\n    };\n  }, []);\n\n  // Start polling when component mounts and update when log level changes\n  useEffect(() => {\n    console.log(`LogsPoller: Setting up polling with log level ${logLevel}`);\n    setIsPolling(false); // Stop any existing polling\n\n    // Small delay to ensure any previous polling is cleaned up\n    setTimeout(() => {\n      setIsPolling(true); // Start polling with new parameters\n    }, 100);\n\n    // Clean up on unmount\n    return () => {\n      console.log('LogsPoller: Cleaning up on unmount');\n      setIsPolling(false);\n    };\n  }, [logLevel, logCount]);\n\n  // This component doesn't render anything visible\n  return null;\n}\n","/**\n * LightNVR Web Interface SystemView Component\n * Preact component for the system page\n */\n\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { showStatusMessage } from './UI.js';\nimport { ContentLoader } from './LoadingIndicator.js';\nimport { useQuery, useMutation, fetchJSON } from '../../query-client.js';\nimport { WebSocketClient } from '../../websocket-client.js';\n\n// Import system components\nimport { SystemControls } from './system/SystemControls.jsx';\nimport { SystemInfo } from './system/SystemInfo.jsx';\nimport { MemoryStorage } from './system/MemoryStorage.jsx';\nimport { StreamStorage } from './system/StreamStorage.jsx';\nimport { NetworkInfo } from './system/NetworkInfo.jsx';\nimport { StreamsInfo } from './system/StreamsInfo.jsx';\nimport { LogsView } from './system/LogsView.jsx';\nimport { LogsPoller } from './system/LogsPoller.jsx';\n\n// Import utility functions\nimport { formatBytes, formatUptime, log_level_meets_minimum } from './system/SystemUtils.js';\n\n/**\n * SystemView component\n * @returns {JSX.Element} SystemView component\n */\nexport function SystemView() {\n  // Define all state variables first\n  const [systemInfo, setSystemInfo] = useState({\n    version: '',\n    uptime: '',\n    cpu: {\n      model: '',\n      cores: 0,\n      usage: 0\n    },\n    memory: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    go2rtcMemory: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    systemMemory: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    disk: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    systemDisk: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    network: {\n      interfaces: []\n    },\n    streams: {\n      active: 0,\n      total: 0\n    },\n    recordings: {\n      count: 0,\n      size: 0\n    }\n  });\n  const [logs, setLogs] = useState([]);\n  const [logLevel, setLogLevel] = useState('debug');\n  const logLevelRef = useRef('debug');\n  const [logCount, setLogCount] = useState(100);\n  const [isRestarting, setIsRestarting] = useState(false);\n  const [isShuttingDown, setIsShuttingDown] = useState(false);\n  const [hasData, setHasData] = useState(false);\n\n  // Define all query hooks next\n  const {\n    data: systemInfoData,\n    isLoading,\n    error: systemInfoError,\n    refetch: refetchSystemInfo\n  } = useQuery(\n    ['systemInfo'],\n    '/api/system/info',\n    {\n      timeout: 15000,\n      retries: 2,\n      retryDelay: 1000\n    }\n  );\n\n  // Define all mutation hooks next\n  const clearLogsMutation = useMutation({\n    mutationKey: ['clearLogs'],\n    mutationFn: async () => {\n      return await fetchJSON('/api/system/logs/clear', {\n        method: 'POST',\n        timeout: 10000,\n        retries: 1\n      });\n    },\n    onSuccess: () => {\n      showStatusMessage('Logs cleared successfully');\n      setLogs([]);\n    },\n    onError: (error) => {\n      console.error('Error clearing logs:', error);\n      showStatusMessage(`Error clearing logs: ${error.message}`);\n    }\n  });\n\n  // Then define all handler functions\n  const handleSetLogLevel = (newLevel) => {\n    console.log(`SystemView: Setting log level from ${logLevel} to ${newLevel}`);\n    setLogLevel(newLevel);\n    logLevelRef.current = newLevel;\n  };\n\n  const handleLogsReceived = (newLogs) => {\n    console.log('SystemView received new logs:', newLogs.length);\n    const currentLogLevel = logLevelRef.current;\n    const filteredLogs = newLogs.filter(log => log_level_meets_minimum(log.level, currentLogLevel));\n    setLogs(filteredLogs);\n  };\n\n  // Update hasData based on systemInfoData\n  useEffect(() => {\n    if (systemInfoData) {\n      setHasData(true);\n    }\n  }, [systemInfoData]);\n\n  // Restart system mutation\n  const restartSystemMutation = useMutation({\n    mutationFn: async () => {\n      return await fetchJSON('/api/system/restart', {\n        method: 'POST',\n        timeout: 30000, // 30 second timeout for system restart\n        retries: 0      // No retries for system restart\n      });\n    },\n    onMutate: () => {\n      setIsRestarting(true);\n      showStatusMessage('Restarting system...');\n    },\n    onSuccess: () => {\n      showStatusMessage('System is restarting. Please wait...');\n      // Wait for system to restart\n      setTimeout(() => {\n        window.location.reload();\n      }, 10000);\n    },\n    onError: (error) => {\n      console.error('Error restarting system:', error);\n      showStatusMessage(`Error restarting system: ${error.message}`);\n      setIsRestarting(false);\n    }\n  });\n\n  // Shutdown system mutation\n  const shutdownSystemMutation = useMutation({\n    mutationFn: async () => {\n      return await fetchJSON('/api/system/shutdown', {\n        method: 'POST',\n        timeout: 30000, // 30 second timeout for system shutdown\n        retries: 0      // No retries for system shutdown\n      });\n    },\n    onMutate: () => {\n      setIsShuttingDown(true);\n      showStatusMessage('Shutting down system...');\n    },\n    onSuccess: () => {\n      showStatusMessage('System is shutting down. You will need to manually restart it.');\n    },\n    onError: (error) => {\n      console.error('Error shutting down system:', error);\n      showStatusMessage(`Error shutting down system: ${error.message}`);\n      setIsShuttingDown(false);\n    }\n  });\n\n  // Update systemInfo state when data is loaded\n  useEffect(() => {\n    if (systemInfoData) {\n      setSystemInfo(systemInfoData);\n    }\n  }, [systemInfoData]);\n\n  // Clean up WebSocket subscriptions on unmount\n  useEffect(() => {\n    return () => {\n      if (window.wsClient && typeof window.wsClient.unsubscribe === 'function') {\n        console.log('Cleaning up any WebSocket subscriptions on unmount');\n        window.wsClient.unsubscribe('system/logs');\n      }\n    };\n  }, []);\n\n  // Clear logs function\n  const clearLogs = () => {\n    if (!confirm('Are you sure you want to clear all logs?')) {\n      return;\n    }\n\n    clearLogsMutation.mutate();\n  };\n\n  // Restart system function\n  const restartSystem = () => {\n    if (!confirm('Are you sure you want to restart the system?')) {\n      return;\n    }\n\n    restartSystemMutation.mutate();\n  };\n\n  // Shutdown system function\n  const shutdownSystem = () => {\n    if (!confirm('Are you sure you want to shut down the system?')) {\n      return;\n    }\n\n    shutdownSystemMutation.mutate();\n  };\n\n  // Initialize WebSocket client\n  useEffect(() => {\n    // Initialize WebSocket client at the parent level\n    // This ensures a single WebSocket connection is shared across all components\n    if (typeof WebSocketClient !== 'undefined') {\n      // Create a global WebSocket client instance\n      window.wsClient = new WebSocketClient();\n      console.log('WebSocket client initialized at application level');\n\n      // Add additional event listeners for debugging\n      if (window.wsClient) {\n        // Log initial connection state\n        console.log('Initial WebSocket connection state:', {\n          connected: window.wsClient.isConnected(),\n          clientId: window.wsClient.getClientId()\n        });\n\n        // Add socket event listeners when socket is created\n        const originalConnect = window.wsClient.connect;\n        window.wsClient.connect = function() {\n          const result = originalConnect.apply(this, arguments);\n\n          // Add event listeners to the new socket\n          if (this.socket) {\n            const originalOnOpen = this.socket.onopen;\n            this.socket.onopen = (event) => {\n              console.log('WebSocket connection opened at application level');\n              if (originalOnOpen) originalOnOpen.call(this, event);\n            };\n\n            const originalOnError = this.socket.onerror;\n            this.socket.onerror = (error) => {\n              console.error('WebSocket error at application level:', error);\n              if (originalOnError) originalOnError.call(this, error);\n            };\n\n            const originalOnClose = this.socket.onclose;\n            this.socket.onclose = (event) => {\n              console.log(`WebSocket connection closed at application level: ${event.code} ${event.reason}`);\n              if (originalOnClose) originalOnClose.call(this, event);\n            };\n\n            const originalOnMessage = this.socket.onmessage;\n            this.socket.onmessage = (event) => {\n              // Only log non-welcome messages at application level to reduce noise\n              if (!event.data.includes('\"type\":\"welcome\"')) {\n                console.log('WebSocket message received at application level');\n              }\n              if (originalOnMessage) originalOnMessage.call(this, event);\n            };\n          }\n\n          return result;\n        };\n\n        // Override handleMessage to log when client ID is set\n        const originalHandleMessage = window.wsClient.handleMessage;\n        window.wsClient.handleMessage = function(data) {\n          const clientIdBefore = this.clientId;\n          originalHandleMessage.call(this, data);\n          const clientIdAfter = this.clientId;\n\n          // Log when client ID changes\n          if (clientIdBefore !== clientIdAfter && clientIdAfter) {\n            console.log(`WebSocket client ID changed at application level: ${clientIdAfter}`);\n          }\n        };\n      }\n    } else {\n      console.log('WebSocketClient is not defined, cannot initialize WebSocket client');\n    }\n  }, []);\n\n  return (\n    <section id=\"system-page\" className=\"page\">\n      <SystemControls\n        restartSystem={restartSystem}\n        shutdownSystem={shutdownSystem}\n        isRestarting={isRestarting}\n        isShuttingDown={isShuttingDown}\n      />\n\n      <ContentLoader\n        isLoading={isLoading}\n        hasData={hasData}\n        loadingMessage=\"Loading system information...\"\n        emptyMessage=\"System information not available. Please try again later.\"\n      >\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n          <SystemInfo systemInfo={systemInfo} formatUptime={formatUptime} />\n          <MemoryStorage systemInfo={systemInfo} formatBytes={formatBytes} />\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-4 mb-4\">\n          <StreamStorage systemInfo={systemInfo} formatBytes={formatBytes} />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n          <NetworkInfo systemInfo={systemInfo} />\n          <StreamsInfo systemInfo={systemInfo} formatBytes={formatBytes} />\n        </div>\n\n        <LogsView\n          logs={logs}\n          logLevel={logLevel}\n          logCount={logCount}\n          setLogLevel={handleSetLogLevel}\n          setLogCount={setLogCount}\n          loadLogs={() => {\n            // If using WebSocket, trigger a WebSocket fetch\n            if (window.wsClient && window.wsClient.isConnected()) {\n              console.log('Manually triggering WebSocket fetch for logs');\n              // Find the LogsPoller component and trigger a fetch\n              const event = new CustomEvent('refresh-logs-websocket');\n              window.dispatchEvent(event);\n            }\n          }}\n          clearLogs={clearLogs}\n        />\n\n        <LogsPoller\n          logLevel={logLevel}\n          logCount={logCount}\n          onLogsReceived={handleLogsReceived}\n        />\n      </ContentLoader>\n    </section>\n  );\n}\n","/**\n * LightNVR Web Interface Users Page\n * Entry point for the users page\n */\n\nimport { render } from 'preact';\nimport { SystemView } from '../components/preact/SystemView.jsx';\nimport { QueryClientProvider, queryClient } from '../query-client.js';\nimport {Header} from \"../components/preact/Header.jsx\";\nimport {Footer} from \"../components/preact/Footer.jsx\";\n\n// Render the UsersView component when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Get the container element\n    const container = document.getElementById('main-content');\n\n    if (container) {\n        render(\n            <QueryClientProvider client={queryClient}>\n                <Header />\n                <SystemView />\n                <Footer />\n            </QueryClientProvider>,\n            container\n        );\n    }\n});\n"],"names":["SystemControls","restartSystem","shutdownSystem","isRestarting","isShuttingDown","jsxs","className","children","jsx","id","onClick","disabled","SystemInfo","systemInfo","formatUptime","version","uptime","cpu","model","cores","style","width","usage","toFixed","MemoryStorage","formatBytes","lightNvrMemoryUsed","memory","used","go2rtcMemoryUsed","go2rtcMemory","totalSystemMemory","total","combinedMemoryUsed","combinedMemoryPercent","lightNvrSlicePercent","go2rtcSlicePercent","systemMemory","disk","systemDisk","StreamStorage","streamStorage","Array","isArray","length","totalStreamStorage","reduce","stream","size","totalDiskSpace","totalStreamStoragePercent","streamStorageData","map","name","count","slicePercent","sort","a","b","colors","index","replace","href","encodeURIComponent","NetworkInfo","network","interfaces","iface","address","mac","up","StreamsInfo","streams","active","recordings","formatLogLevel","level","levelLower","String","toLowerCase","trim","levelText","toUpperCase","LogsView","logs","logLevel","logCount","setLogLevel","setLogCount","loadLogs","clearLogs","value","onChange","e","newLevel","target","console","log","parseInt","timestamp","message","bytes","decimals","dm","i","Math","floor","parseFloat","pow","seconds","days","hours","minutes","result","LogsPoller","onLogsReceived","isPolling","setIsPolling","useState","pollingIntervalRef","useRef","lastTimestampRef","useEffect","savedTimestamp","localStorage","getItem","current","fetchLogs","window","wsClient","isConnected","connect","document","getElementById","payload","last_timestamp","getClientId","client_id","send","warn","error","setupHandlers","checkInterval","setInterval","clearInterval","on","cleanedLogs","normalizedLog","latest_timestamp","setItem","Date","off","subscribe","subscriptionParams","since","unsubscribe","handleRefreshEvent","addEventListener","removeEventListener","setTimeout","SystemView","setSystemInfo","free","setLogs","logLevelRef","setIsRestarting","setIsShuttingDown","hasData","setHasData","data","systemInfoData","isLoading","systemInfoError","refetch","refetchSystemInfo","useQuery","timeout","retries","retryDelay","clearLogsMutation","useMutation","mutationKey","mutationFn","async","fetchJSON","method","onSuccess","showStatusMessage","onError","restartSystemMutation","onMutate","location","reload","shutdownSystemMutation","WebSocketClient","connected","clientId","originalConnect","apply","this","arguments","socket","originalOnOpen","onopen","event","call","originalOnError","onerror","originalOnClose","onclose","code","reason","originalOnMessage","onmessage","includes","originalHandleMessage","handleMessage","clientIdBefore","clientIdAfter","confirm","mutate","ContentLoader","loadingMessage","emptyMessage","CustomEvent","dispatchEvent","newLogs","currentLogLevel","filteredLogs","filter","minLevel","levelValue","minValue","logLevelLower","minLevelLower","log_level_meets_minimum","container","render","QueryClientProvider","client","queryClient","Header","Footer"],"mappings":"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"}