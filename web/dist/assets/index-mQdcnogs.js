import{d as p,A as k,y as W,u as t,E as D,q as B,Q as U,k as H}from"./query-client-mfCUf3pQ.js";/* empty css               */import{s as V,c as J,t as z,L as Q}from"./LiveView-pMSFa-Ry.js";import{s as G,a as K,b as X,c as I,H as Y,F as Z}from"./Footer-BhxJVGxY.js";function oe(){import.meta.url,import("_").catch(()=>1),async function*(){}().next()}function ee(){const[u,C]=p([]),[b,S]=p(()=>new URLSearchParams(window.location.search).get("layout")||"4"),[w,m]=p(()=>new URLSearchParams(window.location.search).get("stream")||""),[$,N]=p(!1),[_,x]=p(!0),[v,P]=p(()=>{const n=new URLSearchParams(window.location.search).get("page");return n?Math.max(0,parseInt(n,10)-1):0}),M=k(null),h=k({}),L=k({});W(()=>{G(),K(),X();const e=setInterval(()=>{Object.keys(h.current).forEach(n=>{const s=h.current[n];if(s&&(console.debug("WebRTC connection state for ".concat(n,": ").concat(s.connectionState,", ICE state: ").concat(s.iceConnectionState)),s.iceConnectionState==="failed"||s.iceConnectionState==="disconnected")){console.warn("WebRTC connection for ".concat(n," is in ").concat(s.iceConnectionState," state, will attempt reconnect")),E(n);const c=u.find(l=>l.name===n);c&&(console.log("Attempting to reconnect WebRTC for stream ".concat(n)),j(c))}})},3e4);return()=>{clearInterval(e),A()}},[u]),W(()=>{x(!0);const e=setTimeout(()=>{console.warn("Stream loading timed out"),x(!1),I("Loading streams timed out. Please try refreshing the page.")},15e3);O().then(n=>{if(clearTimeout(e),n&&n.length>0){C(n);const c=new URLSearchParams(window.location.search).get("stream");c&&n.some(l=>l.name===c)?m(c):(!w||!n.some(l=>l.name===w))&&m(n[0].name)}else console.warn("No streams returned from API");x(!1)}).catch(n=>{clearTimeout(e),console.error("Error loading streams:",n),I("Error loading streams: "+n.message),x(!1)})},[]);const O=async()=>{try{const e=new Promise((a,i)=>{setTimeout(()=>i(new Error("Request timed out")),5e3)}),n=fetch("/api/streams"),s=await Promise.race([n,e]);if(!s.ok)throw new Error("Failed to load streams");const c=new Promise((a,i)=>{setTimeout(()=>i(new Error("JSON parsing timed out")),3e3)}),l=s.json(),o=(await Promise.race([l,c])||[]).map(a=>{const i=new Promise((g,q)=>{setTimeout(()=>q(new Error("Timeout fetching details for stream ".concat(a.name))),3e3)}),y=fetch("/api/streams/".concat(encodeURIComponent(a.id||a.name))).then(g=>{if(!g.ok)throw new Error("Failed to load details for stream ".concat(a.name));return g.json()});return Promise.race([y,i]).catch(g=>(console.error("Error loading details for stream ".concat(a.name,":"),g),a))}),r=await Promise.all(o);console.log("Loaded detailed streams for WebRTC view:",r);const d=r.filter(a=>a.is_deleted?(console.log("Stream ".concat(a.name," is soft deleted, filtering out")),!1):a.enabled?a.streaming_enabled?!0:(console.log("Stream ".concat(a.name," is not configured for HLS, filtering out")),!1):(console.log("Stream ".concat(a.name," is inactive, filtering out")),!1));return console.log("Filtered streams for WebRTC view:",d),d||[]}catch(e){return console.error("Error loading streams for WebRTC view:",e),I("Error loading streams: "+e.message),[]}},T=()=>{switch(b){case"1":return 1;case"2":return 2;case"4":return 4;case"6":return 6;case"9":return 9;case"16":return 16;default:return 4}},j=e=>{const n="video-".concat(e.name.replace(/\s+/g,"-")),s=document.getElementById(n),c=s?s.closest(".video-cell"):null;if(!s||!c)return;const l=c.querySelector(".loading-indicator");l&&(l.style.display="flex");const f="canvas-".concat(e.name.replace(/\s+/g,"-"));let o=document.getElementById(f);o||(o=document.createElement("canvas"),o.id=f,o.className="detection-overlay",o.style.position="absolute",o.style.top="0",o.style.left="0",o.style.width="100%",o.style.height="100%",o.style.pointerEvents="none",c.appendChild(o));const r=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}],iceTransportPolicy:"all",bundlePolicy:"balanced",rtcpMuxPolicy:"require",sdpSemantics:"unified-plan"});h.current[e.name]=r,r.ontrack=i=>{console.log("Track received for stream ".concat(e.name,":"),i),i.track.kind==="video"&&(s.srcObject=i.streams[0],s.onloadeddata=()=>{l&&(l.style.display="none")})},r.onicecandidate=i=>{i.candidate&&console.log("ICE candidate for stream ".concat(e.name,":"),i.candidate)},r.oniceconnectionstatechange=()=>{console.log("ICE connection state for stream ".concat(e.name,":"),r.iceConnectionState),(r.iceConnectionState==="failed"||r.iceConnectionState==="disconnected")&&R(e.name,"WebRTC connection failed")},r.addTransceiver("video",{direction:"recvonly"}),r.addTransceiver("audio",{direction:"recvonly"});const d={offerToReceiveAudio:!0,offerToReceiveVideo:!0},a=setTimeout(()=>{console.warn("WebRTC setup timed out for stream ".concat(e.name)),R(e.name,"WebRTC setup timed out"),h.current[e.name]&&E(e.name)},15e3);r.createOffer(d).then(i=>(console.log("Created offer for stream ".concat(e.name,":"),i),console.log("Original SDP for stream ".concat(e.name,":"),i.sdp),(!i.sdp.includes("a=ice-ufrag:")||!i.sdp.includes("a=ice-pwd:"))&&console.warn("SDP for stream ".concat(e.name," is missing ice-ufrag or ice-pwd!")),console.log("Using original offer for stream ".concat(e.name)),r.setLocalDescription(i))).then(()=>(console.log("Set local description for stream ".concat(e.name)),F(e.name,r.localDescription))).then(i=>(console.log("Received answer for stream ".concat(e.name,":"),i),r.setRemoteDescription(new RTCSessionDescription(i)))).then(()=>{console.log("Set remote description for stream ".concat(e.name)),clearTimeout(a),console.log("Stream ".concat(e.name," detection settings:"),{detection_based_recording:e.detection_based_recording,detection_model:e.detection_model,detection_threshold:e.detection_threshold}),e.detection_based_recording&&e.detection_model?(console.log("Starting detection polling for stream ".concat(e.name)),V(e.name,o,s,L.current)):console.log("Detection not enabled for stream ".concat(e.name))}).catch(i=>{clearTimeout(a),console.error("Error setting up WebRTC for stream ".concat(e.name,":"),i),R(e.name,i.message)})},F=async(e,n)=>{try{const s=localStorage.getItem("auth"),c={type:n.type,sdp:n.sdp};console.log("Sending formatted offer for stream ".concat(e,":"),c);const l=new AbortController,f=l.signal,o=setTimeout(()=>{console.warn("Aborting WebRTC offer request for stream ".concat(e," due to timeout")),l.abort()},8e3);try{const r=await fetch("/api/webrtc?src=".concat(encodeURIComponent(e)),{method:"POST",headers:{"Content-Type":"application/json",...s?{Authorization:"Basic "+s}:{}},body:JSON.stringify(c),signal:f});if(clearTimeout(o),!r.ok)throw new Error("Failed to send offer: ".concat(r.status," ").concat(r.statusText));const d=new AbortController,a=d.signal,i=setTimeout(()=>{console.warn("Aborting JSON parsing for stream ".concat(e," due to timeout")),d.abort()},5e3);try{const y=await r.text();clearTimeout(i);try{return JSON.parse(y)}catch(g){throw console.error("Error parsing JSON for stream ".concat(e,":"),g),console.log("Raw response text: ".concat(y)),new Error("Failed to parse WebRTC answer: ".concat(g.message))}}catch(y){throw clearTimeout(i),y.name==="AbortError"?new Error("WebRTC answer parsing timed out for stream ".concat(e)):y}}catch(r){throw clearTimeout(o),r.name==="AbortError"?new Error("WebRTC offer request timed out for stream ".concat(e)):r}}catch(s){throw console.error("Error sending offer for stream ".concat(e,":"),s),s}},R=(e,n)=>{console.error("WebRTC error for stream ".concat(e,":"),n);const s="video-".concat(e.replace(/\s+/g,"-")),c=document.getElementById(s);if(!c)return;const l=c.closest(".video-cell");if(!l)return;const f=l.querySelector(".loading-indicator");f&&(f.style.display="none");let o=l.querySelector(".error-indicator");o||(o=document.createElement("div"),o.className="error-indicator",o.style.position="absolute",o.style.top="0",o.style.left="0",o.style.width="100%",o.style.height="100%",o.style.display="flex",o.style.flexDirection="column",o.style.justifyContent="center",o.style.alignItems="center",o.style.backgroundColor="rgba(0, 0, 0, 0.7)",o.style.color="white",o.style.zIndex="20",l.appendChild(o)),o.innerHTML='\n      <div className="error-icon">!</div>\n      <p>'.concat(n||"WebRTC connection failed",'</p>\n      <button className="retry-button mt-4 px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">Retry</button>\n    '),o.style.display="flex",o.style.pointerEvents="auto";const r=o.querySelector(".retry-button");r&&(r.style.position="relative",r.style.zIndex="30",r.style.pointerEvents="auto",r.addEventListener("click",()=>{f&&(f.style.display="flex"),o.style.display="none",E(e),fetch("/api/streams/".concat(encodeURIComponent(e))).then(d=>d.json()).then(d=>{j(d)}).catch(d=>{console.error("Error fetching stream info:",d),o.style.display="flex";const a=o.querySelector("p");a&&(a.textContent="Could not reconnect: "+d.message),f&&(f.style.display="none")})}))},E=e=>{h.current[e]&&(h.current[e].close(),delete h.current[e]);const n="video-".concat(e.replace(/\s+/g,"-")),s=document.getElementById(n);s&&(s.srcObject=null),J(e,L.current)},A=()=>{Object.keys(h.current).forEach(e=>{E(e)})};return t("section",{id:"live-page",className:"page ".concat($?"fullscreen-mode":""),children:[t("div",{className:"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow",children:[t("div",{className:"flex items-center space-x-2",children:[t("h2",{className:"text-xl font-bold mr-4",children:"Live View"}),t("div",{className:"flex space-x-2",children:t("button",{id:"hls-toggle-btn",className:"px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800",onClick:()=>window.location.href="/hls.html",children:"HLS View"})})]}),t("div",{className:"controls flex items-center space-x-2",children:[t("div",{className:"flex items-center",children:[t("label",{for:"layout-selector",className:"mr-2",children:"Layout:"}),t("select",{id:"layout-selector",className:"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600",value:b,onChange:e=>{const n=e.target.value;S(n),P(0)},children:[t("option",{value:"1",children:"1 Stream"}),t("option",{value:"2",children:"2 Streams"}),t("option",{value:"4",selected:!0,children:"4 Streams"}),t("option",{value:"6",children:"6 Streams"}),t("option",{value:"9",children:"9 Streams"}),t("option",{value:"16",children:"16 Streams"})]})]}),b==="1"&&t("div",{className:"flex items-center",children:[t("label",{for:"stream-selector",className:"mr-2",children:"Stream:"}),t("select",{id:"stream-selector",className:"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600",value:w,onChange:e=>{const n=e.target.value;m(n)},children:u.map(e=>t("option",{value:e.name,children:e.name},e.name))})]}),t("button",{id:"fullscreen-btn",className:"p-2 rounded-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none",onClick:()=>z($,N),title:"Toggle Fullscreen",children:t("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",children:t("path",{d:"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"})})})]})]}),t("div",{className:"flex flex-col space-y-4",children:[t("div",{id:"video-grid",className:"video-container layout-".concat(b),ref:M,children:_?t("div",{className:"flex justify-center items-center col-span-full row-span-full h-64 w-full",children:t("div",{className:"flex flex-col items-center justify-center py-8",children:[t("div",{className:"inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16"}),t("p",{className:"mt-4 text-gray-700 dark:text-gray-300",children:"Loading streams..."})]})}):u.length===0?t("div",{className:"placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8",children:[t("p",{className:"mb-6 text-gray-600 dark:text-gray-300 text-lg",children:"No streams configured"}),t("a",{href:"streams.html",className:"btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors",children:"Configure Streams"})]}):null}),b!=="1"&&u.length>T()?t("div",{className:"pagination-controls flex justify-center items-center space-x-4 mt-4",children:[t("button",{className:"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed",onClick:()=>P(Math.max(0,v-1)),disabled:v===0,children:"Previous"}),t("span",{className:"text-gray-700 dark:text-gray-300",children:["Page ",v+1," of ",Math.ceil(u.length/T())]}),t("button",{className:"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed",onClick:()=>P(Math.min(Math.ceil(u.length/T())-1,v+1)),disabled:v>=Math.ceil(u.length/T())-1,children:"Next"})]}):null]})]})}function te(){const[u,C]=p(!1),[b,S]=p(!0);return W(()=>{async function w(){try{const m=await fetch("/api/settings");if(!m.ok){console.error("Failed to fetch settings:",m.status,m.statusText),S(!1);return}(await m.json()).webrtc_disabled?(console.log("WebRTC is disabled, using HLS view"),C(!0)):(console.log("WebRTC is enabled, using WebRTC view"),C(!1))}catch(m){console.error("Error checking WebRTC status:",m)}finally{S(!1)}}w()},[]),b?t("div",{className:"loading",children:"Loading..."}):t(H,{children:[t(Y,{}),u?t(Q,{isWebRTCDisabled:!0}):t(ee,{}),t(Z,{})]})}document.addEventListener("DOMContentLoaded",()=>{const u=document.getElementById("main-content");u&&D(t(U,{client:B,children:t(te,{})}),u)});export{oe as __vite_legacy_guard};
//# sourceMappingURL=index-mQdcnogs.js.map
