{"version":3,"mappings":"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","names":["FiltersSidebar","filters","setFilters","pagination","setPagination","streams","filtersVisible","applyFilters","resetFilters","handleDateRangeChange","setDefaultDateRange","html","_b","__template","e","prev","stream","_a","ActiveFilters","activeFiltersDisplay","removeFilter","hasActiveFilters","_d","filter","index","_c","formatUtils","isoString","seconds","hours","minutes","secs","bytes","units","i","size","RecordingsTable","recordings","sortField","sortDirection","sortBy","selectedRecordings","toggleRecordingSelection","selectAll","toggleSelectAll","getSelectedCount","openDeleteModal","playRecording","downloadRecording","deleteRecording","recordingsTableBodyRef","_k","_e","_f","_g","_h","recording","_j","_i","PaginationControls","goToPage","_l","recordingsAPI","useQuery","params","start","end","data","batch","error","startTime","endTime","queryClient","useQueryClient","useDeleteMutation","showStatusMessage","usePostMutation","result","successCount","errorCount","fetchJSON","preset","now","today","todayStart","yesterday","yesterdayEnd","sevenDaysAgo","thirtyDaysAgo","defaultStart","enhancedFetch","selectedIds","_","isSelected","id","totalCount","response","countError","handleOperationError","timeoutPromise","reject","wsError","showVideoModal","videoUrl","title","downloadUrl","link","urlUtils","urlParams","activeFilters","label","setSortField","setSortDirection","newFilters","newUrl","reloadUrl","RecordingsView","setRecordings","useState","setStreams","setFiltersVisible","setHasActiveFilters","setActiveFiltersDisplay","setSelectedRecordings","setSelectAll","isDeleteModalOpen","setIsDeleteModalOpen","deleteMode","setDeleteMode","useRef","streamsData","isLoadingStreams","streamsError","useEffect","urlFilters","handleResponsiveFilters","updateActiveFilters","recordingsData","isLoadingRecordings","recordingsError","refetchRecordings","recordingsArray","setHasData","updatePaginationFromResponse","toggleFilters","hasData","currentPage","pageSize","totalItems","totalPages","startItem","endItem","newDateRange","resetToFirstPage","defaultFilters","baseUrl","key","field","page","recordingId","newSelectAll","newSelectedRecordings","mode","closeDeleteModal","batchDeleteMutation","handleDeleteConfirm","deleteRecordingMutation","_m","ContentLoader","DeleteConfirmationModal","loadRecordingsView","mainContent","__vitePreload","render","n","QueryClientProvider","_n"],"ignoreList":[],"sources":["../../js/components/preact/recordings/FiltersSidebar.js","../../js/components/preact/recordings/ActiveFilters.js","../../js/components/preact/recordings/formatUtils.js","../../js/components/preact/recordings/RecordingsTable.js","../../js/components/preact/recordings/PaginationControls.js","../../js/components/preact/recordings/recordingsAPI.js","../../js/components/preact/recordings/urlUtils.js","../../js/components/preact/RecordingsView.js"],"sourcesContent":["/**\n * FiltersSidebar component for RecordingsView\n */\n\n\nimport { html } from '../../../html-helper.js';\n\n/**\n * FiltersSidebar component\n * @param {Object} props Component props\n * @returns {JSX.Element} FiltersSidebar component\n */\nexport function FiltersSidebar({\n  filters,\n  setFilters,\n  pagination,\n  setPagination,\n  streams,\n  filtersVisible,\n  applyFilters,\n  resetFilters,\n  handleDateRangeChange,\n  setDefaultDateRange\n}) {\n  return html`\n    <aside id=\"filters-sidebar\" \n           class=${`filters-sidebar w-full md:w-64 bg-white dark:bg-gray-800 rounded-lg shadow p-4 md:sticky md:top-4 md:self-start transition-all duration-300 ${!filtersVisible ? 'hidden md:block' : ''}`}>\n      <div class=\"filter-group mb-4\">\n        <h3 class=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Date Range</h3>\n        <div class=\"filter-option mb-2\">\n          <label for=\"date-range-select\" class=\"block mb-1 text-sm font-medium\">Quick Select:</label>\n          <select id=\"date-range-select\" \n                  class=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value=${filters.dateRange}\n                  onChange=${handleDateRangeChange}>\n            <option value=\"today\">Today</option>\n            <option value=\"yesterday\">Yesterday</option>\n            <option value=\"last7days\">Last 7 Days</option>\n            <option value=\"last30days\">Last 30 Days</option>\n            <option value=\"custom\">Custom Range</option>\n          </select>\n        </div>\n        \n        <div id=\"custom-date-range\" \n             class=\"filter-option space-y-3\"\n             style=${filters.dateRange === 'custom' ? 'display: block' : 'display: none'}>\n          <div class=\"space-y-1\">\n            <label for=\"start-date\" class=\"block text-sm font-medium\">Start Date:</label>\n            <input type=\"date\" id=\"start-date\" \n                   class=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                   value=${filters.startDate}\n                   onChange=${e => setFilters(prev => ({ ...prev, startDate: e.target.value }))} />\n            <div class=\"mt-1\">\n              <label for=\"start-time\" class=\"block text-sm font-medium\">Time:</label>\n              <input type=\"time\" id=\"start-time\" \n                     class=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                     value=${filters.startTime}\n                     onChange=${e => setFilters(prev => ({ ...prev, startTime: e.target.value }))} />\n            </div>\n          </div>\n          \n          <div class=\"space-y-1\">\n            <label for=\"end-date\" class=\"block text-sm font-medium\">End Date:</label>\n            <input type=\"date\" id=\"end-date\" \n                   class=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                   value=${filters.endDate}\n                   onChange=${e => setFilters(prev => ({ ...prev, endDate: e.target.value }))} />\n            <div class=\"mt-1\">\n              <label for=\"end-time\" class=\"block text-sm font-medium\">Time:</label>\n              <input type=\"time\" id=\"end-time\" \n                     class=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                     value=${filters.endTime}\n                     onChange=${e => setFilters(prev => ({ ...prev, endTime: e.target.value }))} />\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"filter-group mb-4\">\n        <h3 class=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Stream</h3>\n        <div class=\"filter-option\">\n          <select id=\"stream-filter\" \n                  class=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value=${filters.streamId}\n                  onChange=${e => setFilters(prev => ({ ...prev, streamId: e.target.value }))}>\n            <option value=\"all\">All Streams</option>\n            ${streams.map(stream => html`\n              <option key=${stream.name} value=${stream.name}>${stream.name}</option>\n            `)}\n          </select>\n        </div>\n      </div>\n      \n      <div class=\"filter-group mb-4\">\n        <h3 class=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Recording Type</h3>\n        <div class=\"filter-option\">\n          <select id=\"detection-filter\" \n                  class=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value=${filters.recordingType}\n                  onChange=${e => setFilters(prev => ({ ...prev, recordingType: e.target.value }))}>\n            <option value=\"all\">All Recordings</option>\n            <option value=\"detection\">Detection Events Only</option>\n          </select>\n        </div>\n      </div>\n      \n      <div class=\"filter-group mb-4\">\n        <h3 class=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Display Options</h3>\n        <div class=\"filter-option\">\n          <label for=\"page-size\" class=\"block mb-1 text-sm font-medium\">Items per page:</label>\n          <select id=\"page-size\" \n                  class=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value=${pagination.pageSize}\n                  onChange=${e => setPagination(prev => ({ ...prev, pageSize: parseInt(e.target.value, 10) }))}>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n            <option value=\"50\">50</option>\n            <option value=\"100\">100</option>\n          </select>\n        </div>\n      </div>\n      \n      <div class=\"filter-actions flex space-x-2\">\n        <button id=\"apply-filters-btn\" \n                class=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n                onClick=${applyFilters}>\n          Apply Filters\n        </button>\n        <button id=\"reset-filters-btn\" \n                class=\"flex-1 px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition-colors dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600\"\n                onClick=${resetFilters}>\n          Reset\n        </button>\n      </div>\n    </aside>\n  `;\n}\n","/**\n * ActiveFilters component for RecordingsView\n */\n\n\nimport { html } from '../../../html-helper.js';\n\n/**\n * ActiveFilters component\n * @param {Object} props Component props\n * @returns {JSX.Element} ActiveFilters component\n */\nexport function ActiveFilters({ activeFiltersDisplay, removeFilter, hasActiveFilters }) {\n  if (!hasActiveFilters) {\n    return null;\n  }\n  \n  return html`\n    <div id=\"active-filters\" \n         class=\"active-filters mb-4 p-3 bg-blue-50 dark:bg-blue-900/30 rounded-lg flex flex-wrap gap-2\">\n      ${activeFiltersDisplay.map((filter, index) => html`\n        <div key=${index} class=\"filter-tag inline-flex items-center px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-200\">\n          <span>${filter.label}</span>\n          <button class=\"ml-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 focus:outline-none\"\n                  onClick=${() => removeFilter(filter.key)}>\n            ×\n          </button>\n        </div>\n      `)}\n    </div>\n  `;\n}\n","/**\n * Formatting utility functions for RecordingsView\n */\n\nexport const formatUtils = {\n  /**\n   * Format date time\n   * @param {string} isoString ISO date string\n   * @returns {string} Formatted date time\n   */\n  formatDateTime: (isoString) => {\n    if (!isoString) return '';\n    \n    const date = new Date(isoString);\n    return date.toLocaleString();\n  },\n  \n  /**\n   * Format duration\n   * @param {number} seconds Duration in seconds\n   * @returns {string} Formatted duration\n   */\n  formatDuration: (seconds) => {\n    if (!seconds) return '00:00:00';\n    \n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = Math.floor(seconds % 60);\n    \n    return [\n      hours.toString().padStart(2, '0'),\n      minutes.toString().padStart(2, '0'),\n      secs.toString().padStart(2, '0')\n    ].join(':');\n  },\n  \n  /**\n   * Format file size\n   * @param {number} bytes Size in bytes\n   * @returns {string} Formatted file size\n   */\n  formatFileSize: (bytes) => {\n    if (!bytes) return '0 B';\n    \n    const units = ['B', 'KB', 'MB', 'GB', 'TB'];\n    let i = 0;\n    let size = bytes;\n    \n    while (size >= 1024 && i < units.length - 1) {\n      size /= 1024;\n      i++;\n    }\n    \n    return `${size.toFixed(1)} ${units[i]}`;\n  }\n};\n","/**\n * RecordingsTable component for RecordingsView\n */\n\n\nimport { html } from '../../../html-helper.js';\nimport { formatUtils } from './formatUtils.js';\n\n/**\n * RecordingsTable component\n * @param {Object} props Component props\n * @returns {JSX.Element} RecordingsTable component\n */\nexport function RecordingsTable({\n  recordings,\n  sortField,\n  sortDirection,\n  sortBy,\n  selectedRecordings,\n  toggleRecordingSelection,\n  selectAll,\n  toggleSelectAll,\n  getSelectedCount,\n  openDeleteModal,\n  playRecording,\n  downloadRecording,\n  deleteRecording,\n  recordingsTableBodyRef,\n  pagination\n}) {\n  return html`\n    <div class=\"recordings-container bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden w-full\">\n      <div class=\"batch-actions p-3 border-b border-gray-200 dark:border-gray-700 flex flex-wrap gap-2 items-center\">\n        <div class=\"selected-count text-sm text-gray-600 dark:text-gray-400 mr-2\">\n          ${getSelectedCount() > 0 ? \n            `${getSelectedCount()} recording${getSelectedCount() !== 1 ? 's' : ''} selected` : \n            'No recordings selected'}\n        </div>\n        <button \n          class=\"px-3 py-1.5 bg-red-600 text-white rounded hover:bg-red-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          disabled=${getSelectedCount() === 0}\n          onClick=${() => openDeleteModal('selected')}>\n          Delete Selected\n        </button>\n        <button \n          class=\"px-3 py-1.5 bg-red-600 text-white rounded hover:bg-red-700 transition-colors\"\n          onClick=${() => openDeleteModal('all')}>\n          Delete All Filtered\n        </button>\n      </div>\n      <div class=\"overflow-x-auto\">\n        <table id=\"recordings-table\" class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n          <thead class=\"bg-gray-50 dark:bg-gray-700\">\n            <tr>\n              <th class=\"w-10 px-4 py-3\">\n                <input \n                  type=\"checkbox\" \n                  checked=${selectAll}\n                  onChange=${toggleSelectAll}\n                  class=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"\n                />\n              </th>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer\"\n                  onClick=${() => sortBy('stream_name')}>\n                <div class=\"flex items-center\">\n                  Stream\n                  ${sortField === 'stream_name' && html`\n                    <span class=\"sort-icon ml-1\">${sortDirection === 'asc' ? '▲' : '▼'}</span>\n                  `}\n                </div>\n              </th>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer\"\n                  onClick=${() => sortBy('start_time')}>\n                <div class=\"flex items-center\">\n                  Start Time\n                  ${sortField === 'start_time' && html`\n                    <span class=\"sort-icon ml-1\">${sortDirection === 'asc' ? '▲' : '▼'}</span>\n                  `}\n                </div>\n              </th>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                Duration\n              </th>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer\"\n                  onClick=${() => sortBy('size_bytes')}>\n                <div class=\"flex items-center\">\n                  Size\n                  ${sortField === 'size_bytes' && html`\n                    <span class=\"sort-icon ml-1\">${sortDirection === 'asc' ? '▲' : '▼'}</span>\n                  `}\n                </div>\n              </th>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                Detections\n              </th>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                Actions\n              </th>\n            </tr>\n          </thead>\n          <tbody ref=${recordingsTableBodyRef} class=\"bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700\">\n            ${recordings.length === 0 ? html`\n              <tr>\n                <td colspan=\"6\" class=\"px-6 py-4 text-center text-gray-500 dark:text-gray-400\">\n                  ${pagination.totalItems === 0 ? 'No recordings found' : 'Loading recordings...'}\n                </td>\n              </tr>\n            ` : recordings.map(recording => html`\n              <tr key=${recording.id} class=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                <td class=\"px-4 py-4 whitespace-nowrap\">\n                  <input \n                    type=\"checkbox\" \n                    checked=${!!selectedRecordings[recording.id]}\n                    onChange=${() => toggleRecordingSelection(recording.id)}\n                    class=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"\n                  />\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">${recording.stream || ''}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">${formatUtils.formatDateTime(recording.start_time)}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">${formatUtils.formatDuration(recording.duration)}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">${recording.size || ''}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                  ${recording.has_detections ? html`\n                    <span class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100\">\n                      <svg class=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M10 12a2 2 0 100-4 2 2 0 000 4z\"></path>\n                        <path fill-rule=\"evenodd\" d=\"M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z\" clip-rule=\"evenodd\"></path>\n                      </svg>\n                      Yes\n                    </span>\n                  ` : ''}\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                  <div class=\"flex space-x-2\">\n                    <button class=\"p-1 rounded-full text-blue-600 hover:bg-blue-100 dark:text-blue-400 dark:hover:bg-blue-900 focus:outline-none\"\n                            onClick=${() => playRecording(recording)}\n                            title=\"Play\">\n                      <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clip-rule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                    <button class=\"p-1 rounded-full text-green-600 hover:bg-green-100 dark:text-green-400 dark:hover:bg-green-900 focus:outline-none\"\n                            onClick=${() => downloadRecording(recording)}\n                            title=\"Download\">\n                      <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                    <button class=\"p-1 rounded-full text-red-600 hover:bg-red-100 dark:text-red-400 dark:hover:bg-red-900 focus:outline-none\"\n                            onClick=${() => deleteRecording(recording)}\n                            title=\"Delete\">\n                      <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clip-rule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            `)}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  `;\n}\n","/**\n * PaginationControls component for RecordingsView\n */\n\n\nimport { html } from '../../../html-helper.js';\n\n/**\n * PaginationControls component\n * @param {Object} props Component props\n * @returns {JSX.Element} PaginationControls component\n */\nexport function PaginationControls({ pagination, goToPage }) {\n  return html`\n    <div class=\"pagination-controls flex flex-col sm:flex-row justify-between items-center p-4 border-t border-gray-200 dark:border-gray-700\">\n      <div class=\"pagination-info text-sm text-gray-600 dark:text-gray-400 mb-2 sm:mb-0\">\n        Showing <span id=\"pagination-showing\">${pagination.startItem}-${pagination.endItem}</span> of <span id=\"pagination-total\">${pagination.totalItems}</span> recordings\n      </div>\n      <div class=\"pagination-buttons flex items-center space-x-1\">\n        <button id=\"pagination-first\" \n                class=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"First Page\"\n                onClick=${() => goToPage(1)}\n                disabled=${pagination.currentPage === 1}>\n          «\n        </button>\n        <button id=\"pagination-prev\" \n                class=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"Previous Page\"\n                onClick=${() => goToPage(pagination.currentPage - 1)}\n                disabled=${pagination.currentPage === 1}>\n          ‹\n        </button>\n        <span id=\"pagination-current\" class=\"px-2 text-sm text-gray-700 dark:text-gray-300\">\n          Page ${pagination.currentPage} of ${pagination.totalPages}\n        </span>\n        <button id=\"pagination-next\" \n                class=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"Next Page\"\n                onClick=${() => goToPage(pagination.currentPage + 1)}\n                disabled=${pagination.currentPage === pagination.totalPages}>\n          ›\n        </button>\n        <button id=\"pagination-last\" \n                class=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"Last Page\"\n                onClick=${() => goToPage(pagination.totalPages)}\n                disabled=${pagination.currentPage === pagination.totalPages}>\n          »\n        </button>\n      </div>\n    </div>\n  `;\n}\n","/**\n * API functions for RecordingsView\n */\n\nimport { showStatusMessage } from '../UI.js';\nimport { formatUtils } from './formatUtils.js';\nimport { fetchJSON, enhancedFetch } from '../../../fetch-utils.js';\nimport {\n  useQuery,\n  useMutation,\n  useQueryClient,\n  usePostMutation,\n  useDeleteMutation,\n  invalidateQueries\n} from '../../../query-client.js';\n\n/**\n * RecordingsAPI - Handles all API calls related to recordings\n */\nexport const recordingsAPI = {\n  /**\n   * Custom hooks for preact-query\n   */\n  hooks: {\n    /**\n     * Hook to fetch streams list\n     * @returns {Object} Query result\n     */\n    useStreams: () => {\n      return useQuery('streams', '/api/streams', {\n        timeout: 15000, // 15 second timeout\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n    },\n\n    /**\n     * Hook to fetch recordings with filters\n     * @param {Object} filters Filter settings\n     * @param {Object} pagination Pagination settings\n     * @param {string} sortField Sort field\n     * @param {string} sortDirection Sort direction\n     * @returns {Object} Query result\n     */\n    useRecordings: (filters, pagination, sortField, sortDirection) => {\n      // Build query parameters\n      const params = new URLSearchParams();\n      params.append('page', pagination.currentPage);\n      params.append('limit', pagination.pageSize);\n      params.append('sort', sortField);\n      params.append('order', sortDirection);\n\n      // Add date range filters\n      if (filters.dateRange === 'custom') {\n        params.append('start', `${filters.startDate}T${filters.startTime}:00`);\n        params.append('end', `${filters.endDate}T${filters.endTime}:00`);\n      } else {\n        // Convert predefined range to actual dates\n        const { start, end } = recordingsAPI.getDateRangeFromPreset(filters.dateRange);\n        params.append('start', start);\n        params.append('end', end);\n      }\n\n      // Add stream filter\n      if (filters.streamId !== 'all') {\n        params.append('stream', filters.streamId);\n      }\n\n      // Add recording type filter\n      if (filters.recordingType === 'detection') {\n        params.append('detection', '1');\n      }\n\n      // Create query key that includes all filter parameters\n      const queryKey = ['recordings', filters, pagination, sortField, sortDirection];\n\n      return useQuery(\n        queryKey,\n        `/api/recordings?${params.toString()}`,\n        {\n          timeout: 30000, // 30 second timeout for potentially large data\n          retries: 2,     // Retry twice\n          retryDelay: 1000 // 1 second between retries\n        },\n        {\n          onSuccess: async (data) => {\n            // Check for detections for each recording\n            if (data.recordings && data.recordings.length > 0) {\n              // Process recordings in batches to avoid too many parallel requests\n              const batchSize = 5;\n              for (let i = 0; i < data.recordings.length; i += batchSize) {\n                const batch = data.recordings.slice(i, i + batchSize);\n                await Promise.all(batch.map(async (recording) => {\n                  try {\n                    recording.has_detections = await recordingsAPI.checkRecordingHasDetections(recording);\n                  } catch (error) {\n                    console.error(`Error checking detections for recording ${recording.id}:`, error);\n                    recording.has_detections = false;\n                  }\n                }));\n              }\n            }\n          }\n        }\n      );\n    },\n\n    /**\n     * Hook to check if a recording has detections\n     * @param {Object} recording Recording to check\n     * @returns {Object} Query result\n     */\n    useRecordingDetections: (recording) => {\n      // Skip if recording doesn't have required properties\n      if (!recording || !recording.id || !recording.stream || !recording.start_time || !recording.end_time) {\n        return { data: { detections: [] } };\n      }\n\n      // Convert timestamps to seconds\n      const startTime = Math.floor(new Date(recording.start_time).getTime() / 1000);\n      const endTime = Math.floor(new Date(recording.end_time).getTime() / 1000);\n\n      // Query the detections API\n      const params = new URLSearchParams({\n        start: startTime,\n        end: endTime\n      });\n\n      return useQuery(\n        ['recording-detections', recording.id],\n        `/api/detection/results/${recording.stream}?${params.toString()}`,\n        {\n          timeout: 15000, // 15 second timeout\n          retries: 1,     // Retry once\n          retryDelay: 1000 // 1 second between retries\n        },\n        {\n          enabled: !!recording.id // Only run query if we have a recording ID\n        }\n      );\n    },\n\n    /**\n     * Hook to delete a recording\n     * @returns {Object} Mutation result\n     */\n    useDeleteRecording: () => {\n      const queryClient = useQueryClient();\n\n      return useDeleteMutation(\n        '/api/recordings/:id',\n        {\n          timeout: 15000, // 15 second timeout\n          retries: 1,     // Retry once\n          retryDelay: 1000 // 1 second between retries\n        },\n        {\n          onSuccess: () => {\n            // Invalidate recordings queries to refresh the list\n            queryClient.invalidateQueries({ queryKey: ['recordings'] });\n            showStatusMessage('Recording deleted successfully');\n          },\n          onError: (error) => {\n            console.error('Error deleting recording:', error);\n            showStatusMessage('Error deleting recording: ' + error.message);\n          }\n        }\n      );\n    },\n\n    /**\n     * Hook to delete multiple recordings\n     * @returns {Object} Mutation result\n     */\n    useBatchDeleteRecordings: () => {\n      const queryClient = useQueryClient();\n\n      return usePostMutation(\n        '/api/recordings/batch-delete',\n        {\n          timeout: 60000, // 60 second timeout for batch operations\n          retries: 1,     // Retry once\n          retryDelay: 2000 // 2 seconds between retries\n        },\n        {\n          onSuccess: (result) => {\n            // Invalidate recordings queries to refresh the list\n            queryClient.invalidateQueries({ queryKey: ['recordings'] });\n\n            const successCount = result.succeeded;\n            const errorCount = result.failed;\n\n            // Show status message\n            if (successCount > 0 && errorCount === 0) {\n              showStatusMessage(`Successfully deleted ${successCount} recording${successCount !== 1 ? 's' : ''}`);\n            } else if (successCount > 0 && errorCount > 0) {\n              showStatusMessage(`Deleted ${successCount} recording${successCount !== 1 ? 's' : ''}, but failed to delete ${errorCount}`);\n            } else {\n              showStatusMessage(`Failed to delete ${errorCount} recording${errorCount !== 1 ? 's' : ''}`);\n            }\n          },\n          onError: (error) => {\n            console.error('Error in batch delete operation:', error);\n            showStatusMessage('Error in batch delete operation: ' + error.message);\n          }\n        }\n      );\n    }\n  },\n  /**\n   * Load streams from API\n   * @returns {Promise<Array>} Array of streams\n   */\n  loadStreams: async () => {\n    try {\n      const data = await fetchJSON('/api/streams', {\n        timeout: 15000, // 15 second timeout\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      return data || [];\n    } catch (error) {\n      console.error('Error loading streams for filter:', error);\n      showStatusMessage('Error loading streams: ' + error.message);\n      return [];\n    }\n  },\n\n  /**\n   * Get date range from preset\n   * @param {string} preset Preset name\n   * @returns {Object} Start and end dates\n   */\n  getDateRangeFromPreset: (preset) => {\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);\n    const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);\n\n    let start, end;\n\n    switch (preset) {\n      case 'today':\n        start = todayStart.toISOString();\n        end = today.toISOString();\n        break;\n      case 'yesterday':\n        const yesterday = new Date(todayStart);\n        yesterday.setDate(yesterday.getDate() - 1);\n        const yesterdayEnd = new Date(yesterday);\n        yesterdayEnd.setHours(23, 59, 59);\n        start = yesterday.toISOString();\n        end = yesterdayEnd.toISOString();\n        break;\n      case 'last7days':\n        const sevenDaysAgo = new Date(todayStart);\n        sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n        start = sevenDaysAgo.toISOString();\n        end = today.toISOString();\n        break;\n      case 'last30days':\n        const thirtyDaysAgo = new Date(todayStart);\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        start = thirtyDaysAgo.toISOString();\n        end = today.toISOString();\n        break;\n      default:\n        // Default to last 7 days\n        const defaultStart = new Date(todayStart);\n        defaultStart.setDate(defaultStart.getDate() - 7);\n        start = defaultStart.toISOString();\n        end = today.toISOString();\n    }\n\n    return { start, end };\n  },\n\n  /**\n   * Load recordings\n   * @param {Object} filters Filter settings\n   * @param {Object} pagination Pagination settings\n   * @param {string} sortField Sort field\n   * @param {string} sortDirection Sort direction\n   * @returns {Promise<Object>} Recordings data and pagination info\n   */\n  loadRecordings: async (filters, pagination, sortField, sortDirection) => {\n    try {\n      // Build query parameters\n      const params = new URLSearchParams();\n      params.append('page', pagination.currentPage);\n      params.append('limit', pagination.pageSize);\n      params.append('sort', sortField);\n      params.append('order', sortDirection);\n\n      // Add date range filters\n      if (filters.dateRange === 'custom') {\n        params.append('start', `${filters.startDate}T${filters.startTime}:00`);\n        params.append('end', `${filters.endDate}T${filters.endTime}:00`);\n      } else {\n        // Convert predefined range to actual dates\n        const { start, end } = recordingsAPI.getDateRangeFromPreset(filters.dateRange);\n        params.append('start', start);\n        params.append('end', end);\n      }\n\n      // Add stream filter\n      if (filters.streamId !== 'all') {\n        params.append('stream', filters.streamId);\n      }\n\n      // Add recording type filter\n      if (filters.recordingType === 'detection') {\n        params.append('detection', '1');\n      }\n\n      // Log the API request\n      console.log('API Request:', `/api/recordings?${params.toString()}`);\n\n      // Fetch recordings with enhanced fetch\n      const data = await fetchJSON(`/api/recordings?${params.toString()}`, {\n        timeout: 30000, // 30 second timeout for potentially large data\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      console.log('Recordings data received:', data);\n\n      // Check for detections for each recording\n      if (data.recordings && data.recordings.length > 0) {\n        // Process recordings in batches to avoid too many parallel requests\n        const batchSize = 5;\n        for (let i = 0; i < data.recordings.length; i += batchSize) {\n          const batch = data.recordings.slice(i, i + batchSize);\n          await Promise.all(batch.map(async (recording) => {\n            try {\n              recording.has_detections = await recordingsAPI.checkRecordingHasDetections(recording);\n            } catch (error) {\n              console.error(`Error checking detections for recording ${recording.id}:`, error);\n              recording.has_detections = false;\n            }\n          }));\n        }\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Error loading recordings:', error);\n      showStatusMessage('Error loading recordings: ' + error.message);\n      throw error;\n    }\n  },\n\n  /**\n   * Delete a single recording\n   * @param {Object} recording Recording to delete\n   * @returns {Promise<boolean>} Success status\n   */\n  deleteRecording: async (recording) => {\n    try {\n      await enhancedFetch(`/api/recordings/${recording.id}`, {\n        method: 'DELETE',\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      showStatusMessage('Recording deleted successfully');\n      return true;\n    } catch (error) {\n      console.error('Error deleting recording:', error);\n      showStatusMessage('Error deleting recording: ' + error.message);\n      return false;\n    }\n  },\n\n  /**\n   * Delete selected recordings\n   * @param {Object} selectedRecordings Object with recording IDs as keys\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteSelectedRecordings: async (selectedRecordings) => {\n    const selectedIds = Object.entries(selectedRecordings)\n      .filter(([_, isSelected]) => isSelected)\n      .map(([id, _]) => parseInt(id, 10));\n\n    if (selectedIds.length === 0) {\n      showStatusMessage('No recordings selected');\n      return { succeeded: 0, failed: 0 };\n    }\n\n    try {\n      // Check if WebSocket client is available\n      if (window.wsClient && window.wsClient.isConnected()) {\n        console.log('Using WebSocket for batch delete operation');\n\n        // Initialize batch delete client if needed\n        if (!window.batchDeleteClient) {\n          if (typeof BatchDeleteRecordingsClient !== 'undefined') {\n            window.batchDeleteClient = new BatchDeleteRecordingsClient(window.wsClient);\n          } else {\n            console.warn('BatchDeleteRecordingsClient not available, falling back to HTTP');\n            return recordingsAPI.deleteSelectedRecordingsHttp(selectedIds);\n          }\n        }\n\n        // Show batch delete modal\n        if (typeof showBatchDeleteModal === 'function') {\n          showBatchDeleteModal();\n        }\n\n        // Use WebSocket for batch delete\n        return await window.batchDeleteClient.deleteWithProgress({ ids: selectedIds });\n      } else {\n        console.log('WebSocket not connected, using HTTP for batch delete');\n        return recordingsAPI.deleteSelectedRecordingsHttp(selectedIds);\n      }\n    } catch (error) {\n      console.error('Error in batch delete operation:', error);\n      showStatusMessage('Error in batch delete operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Delete selected recordings using HTTP (fallback)\n   * @param {Array<number>} selectedIds Array of recording IDs\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteSelectedRecordingsHttp: async (selectedIds) => {\n    try {\n      // Use the batch delete endpoint with enhanced fetch\n      const response = await enhancedFetch('/api/recordings/batch-delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ids: selectedIds\n        }),\n        timeout: 60000, // 60 second timeout for batch operations\n        retries: 1,     // Retry once\n        retryDelay: 2000 // 2 seconds between retries\n      });\n\n      const result = await response.json();\n      const successCount = result.succeeded;\n      const errorCount = result.failed;\n\n      // Show status message\n      if (successCount > 0 && errorCount === 0) {\n        showStatusMessage(`Successfully deleted ${successCount} recording${successCount !== 1 ? 's' : ''}`);\n      } else if (successCount > 0 && errorCount > 0) {\n        showStatusMessage(`Deleted ${successCount} recording${successCount !== 1 ? 's' : ''}, but failed to delete ${errorCount}`);\n      } else {\n        showStatusMessage(`Failed to delete ${errorCount} recording${errorCount !== 1 ? 's' : ''}`);\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Error in HTTP batch delete operation:', error);\n      showStatusMessage('Error in batch delete operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Delete all recordings matching current filter\n   * @param {Object} filters Current filters\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteAllFilteredRecordings: async (filters) => {\n    try {\n      // Create filter object\n      const filter = {};\n\n      // Add date range filters\n      if (filters.dateRange === 'custom') {\n        filter.start = `${filters.startDate}T${filters.startTime}:00`;\n        filter.end = `${filters.endDate}T${filters.endTime}:00`;\n      } else {\n        // Convert predefined range to actual dates\n        const { start, end } = recordingsAPI.getDateRangeFromPreset(filters.dateRange);\n        filter.start = start;\n        filter.end = end;\n      }\n\n      // Add stream filter\n      if (filters.streamId !== 'all') {\n        filter.stream_name = filters.streamId; // Changed from 'stream' to 'stream_name' to match API expectations\n      }\n\n      // Add recording type filter\n      if (filters.recordingType === 'detection') {\n        filter.detection = 1;\n      }\n\n      console.log('Deleting with filter:', filter);\n\n      // Show batch delete modal with indeterminate progress initially\n      if (typeof showBatchDeleteModal === 'function') {\n        showBatchDeleteModal();\n\n        // Update the progress UI with an indeterminate state\n        if (typeof window.updateBatchDeleteProgress === 'function') {\n          window.updateBatchDeleteProgress({\n            current: 0,\n            total: 0, // We don't know the total yet\n            succeeded: 0,\n            failed: 0,\n            status: `Preparing to delete recordings matching filter...`,\n            complete: false\n          });\n        }\n      }\n\n      // Get the total count from the current page's filter\n      // This will help us set a more accurate progress indicator\n      let totalCount = 0;\n      try {\n        // Build query parameters for the API request\n        const params = new URLSearchParams();\n\n        // Add date range parameters\n        if (filter.start) {\n          params.append('start', filter.start);\n        }\n\n        if (filter.end) {\n          params.append('end', filter.end);\n        }\n\n        // Add stream filter\n        if (filter.stream_name) {\n          params.append('stream', filter.stream_name);\n        }\n\n        // Add detection filter\n        if (filter.detection) {\n          params.append('detection', '1');\n        }\n\n        // Set page size to 1 to minimize data transfer, we just need the total count\n        params.append('page', '1');\n        params.append('limit', '1');\n\n        console.log('Getting total count with params:', params.toString());\n\n        // Fetch recordings to get pagination info\n        const response = await fetch(`/api/recordings?${params.toString()}`);\n        if (response.ok) {\n          const data = await response.json();\n          if (data && data.pagination && data.pagination.total) {\n            totalCount = data.pagination.total;\n            console.log(`Found ${totalCount} recordings matching filter`);\n\n            // Update the progress UI with the total count\n            if (typeof window.updateBatchDeleteProgress === 'function') {\n              window.updateBatchDeleteProgress({\n                current: 0,\n                total: totalCount,\n                succeeded: 0,\n                failed: 0,\n                status: `Found ${totalCount} recordings matching filter. Starting deletion...`,\n                complete: false\n              });\n            }\n          }\n        }\n      } catch (countError) {\n        console.warn('Error getting recording count:', countError);\n        // Continue anyway, we'll just show an indeterminate progress\n      }\n\n      // Set up an error handler in case the operation fails\n      const handleOperationError = (error) => {\n        console.error('Error in delete all operation:', error);\n        showStatusMessage('Error in delete all operation: ' + error.message);\n\n        // Update the progress UI to show the error\n        if (typeof window.updateBatchDeleteProgress === 'function') {\n          window.updateBatchDeleteProgress({\n            current: 0,\n            total: 0,\n            succeeded: 0,\n            failed: 0,\n            status: `Error: ${error.message}`,\n            complete: true\n          });\n        }\n\n        return { succeeded: 0, failed: 0 };\n      };\n\n        // Check if WebSocket client is available\n        if (window.wsClient && window.wsClient.isConnected()) {\n          console.log('Using WebSocket for batch delete with filter');\n\n          // Initialize batch delete client if needed\n          if (!window.batchDeleteClient) {\n            if (typeof BatchDeleteRecordingsClient !== 'undefined') {\n              window.batchDeleteClient = new BatchDeleteRecordingsClient(window.wsClient);\n            } else {\n              console.warn('BatchDeleteRecordingsClient not available, falling back to HTTP');\n              return recordingsAPI.deleteAllFilteredRecordingsHttp(filter);\n            }\n          }\n\n          // Set up a timeout to handle server crashes\n          const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => {\n              reject(new Error('Operation timed out or server crashed. Some recordings may have been deleted.'));\n            }, 60000); // 60 second timeout\n          });\n\n          try {\n            // Race between the delete operation and the timeout\n            // Pass the total count to the WebSocket client\n            const result = await Promise.race([\n              window.batchDeleteClient.deleteWithProgress({\n                filter,\n                totalCount // Pass the total count to the WebSocket client\n              }),\n              timeoutPromise\n            ]);\n\n            return result;\n          } catch (wsError) {\n            console.error('WebSocket error or timeout:', wsError);\n\n            // If we got a timeout or server crash, reload the recordings to show what was deleted\n            setTimeout(() => {\n              if (typeof loadRecordings === 'function') {\n                loadRecordings();\n              }\n            }, 1000);\n\n            return handleOperationError(wsError);\n          }\n        } else {\n          console.log('WebSocket not connected, using HTTP for batch delete with filter');\n          return recordingsAPI.deleteAllFilteredRecordingsHttp(filter);\n        }\n    } catch (error) {\n      console.error('Error in delete all operation:', error);\n      showStatusMessage('Error in delete all operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Delete all recordings matching filter using HTTP (fallback)\n   * @param {Object} filter Filter object\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteAllFilteredRecordingsHttp: async (filter) => {\n    try {\n      // Use the batch delete endpoint with filter and enhanced fetch\n      const deleteResponse = await enhancedFetch('/api/recordings/batch-delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          filter: filter\n        }),\n        timeout: 120000, // 120 second timeout for potentially large batch operations\n        retries: 1,      // Retry once\n        retryDelay: 3000 // 3 seconds between retries\n      });\n\n      const result = await deleteResponse.json();\n      const successCount = result.succeeded;\n      const errorCount = result.failed;\n\n      // Show status message\n      if (successCount > 0 && errorCount === 0) {\n        showStatusMessage(`Successfully deleted ${successCount} recording${successCount !== 1 ? 's' : ''}`);\n      } else if (successCount > 0 && errorCount > 0) {\n        showStatusMessage(`Deleted ${successCount} recording${successCount !== 1 ? 's' : ''}, but failed to delete ${errorCount}`);\n      } else {\n        showStatusMessage(`Failed to delete ${errorCount} recording${errorCount !== 1 ? 's' : ''}`);\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Error in HTTP delete all operation:', error);\n      showStatusMessage('Error in delete all operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Check if a recording has associated detections\n   * @param {Object} recording Recording to check\n   * @returns {Promise<boolean>} True if the recording has detections, false otherwise\n   */\n  checkRecordingHasDetections: async (recording) => {\n    if (!recording || !recording.id || !recording.stream || !recording.start_time || !recording.end_time) {\n      return false;\n    }\n\n    try {\n      // Convert timestamps to seconds\n      const startTime = Math.floor(new Date(recording.start_time).getTime() / 1000);\n      const endTime = Math.floor(new Date(recording.end_time).getTime() / 1000);\n\n      // Query the detections API to check if there are any detections in this time range\n      const params = new URLSearchParams({\n        start: startTime,\n        end: endTime\n      });\n\n      const data = await fetchJSON(`/api/detection/results/${recording.stream}?${params.toString()}`, {\n        timeout: 10000, // 10 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 500 // 0.5 second between retries\n      });\n\n      return data.detections && data.detections.length > 0;\n    } catch (error) {\n      console.error('Error checking detections:', error);\n      return false;\n    }\n  },\n\n  /**\n   * Get detections for a recording\n   * @param {Object} recording Recording to get detections for\n   * @returns {Promise<Array>} Array of detections\n   */\n  getRecordingDetections: async (recording) => {\n    if (!recording || !recording.id || !recording.stream || !recording.start_time || !recording.end_time) {\n      return [];\n    }\n\n    try {\n      // Convert timestamps to seconds\n      const startTime = Math.floor(new Date(recording.start_time).getTime() / 1000);\n      const endTime = Math.floor(new Date(recording.end_time).getTime() / 1000);\n\n      // Query the detections API to get detections in this time range\n      const params = new URLSearchParams({\n        start: startTime,\n        end: endTime\n      });\n\n      const data = await fetchJSON(`/api/detection/results/${recording.stream}?${params.toString()}`, {\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      return data.detections || [];\n    } catch (error) {\n      console.error('Error getting detections:', error);\n      return [];\n    }\n  },\n\n  /**\n   * Play recording\n   * @param {Object} recording Recording to play\n   */\n  playRecording: (recording, showVideoModal) => {\n    console.log('Play recording clicked:', recording);\n\n    // Check if recording has an id property\n    if (!recording.id) {\n      console.error('Recording has no id property:', recording);\n      showStatusMessage('Error: Recording has no id property');\n      return;\n    }\n\n    // Build video URL\n    const videoUrl = `/api/recordings/play/${recording.id}`;\n    const title = `${recording.stream} - ${formatUtils.formatDateTime(recording.start_time)}`;\n    const downloadUrl = `/api/recordings/download/${recording.id}`;\n\n    console.log('Video URL:', videoUrl);\n    console.log('Title:', title);\n    console.log('Download URL:', downloadUrl);\n\n    // Show video modal\n    showVideoModal(videoUrl, title, downloadUrl);\n    console.log('Video modal should be shown now');\n  },\n\n  /**\n   * Download recording\n   * @param {Object} recording Recording to download\n   */\n  downloadRecording: (recording) => {\n    // Create download link\n    const downloadUrl = `/api/recordings/download/${recording.id}`;\n    const link = document.createElement('a');\n    link.href = downloadUrl;\n    link.download = `${recording.stream}_${new Date(recording.start_time).toISOString().replace(/[:.]/g, '-')}.mp4`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    showStatusMessage('Download started');\n  }\n};\n","/**\n * URL utility functions for RecordingsView\n */\n\n/**\n * URL utilities for RecordingsView\n */\nexport const urlUtils = {\n  /**\n   * Get filters from URL\n   * @returns {Object|null} Filters object or null if no filters in URL\n   */\n  getFiltersFromUrl: () => {\n    // Get URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    \n    // Check if we have any filter parameters\n    if (!urlParams.has('dateRange') && !urlParams.has('page') && !urlParams.has('sort') && !urlParams.has('detection') && !urlParams.has('stream')) {\n      return null;\n    }\n    \n    // Create result object\n    const result = {\n      filters: {\n        dateRange: 'last7days',\n        startDate: '',\n        startTime: '00:00',\n        endDate: '',\n        endTime: '23:59',\n        streamId: 'all',\n        recordingType: 'all'\n      },\n      page: 1,\n      limit: 20,\n      sort: 'start_time',\n      order: 'desc'\n    };\n    \n    // Date range\n    if (urlParams.has('dateRange')) {\n      result.filters.dateRange = urlParams.get('dateRange');\n      \n      if (result.filters.dateRange === 'custom') {\n        if (urlParams.has('startDate')) {\n          result.filters.startDate = urlParams.get('startDate');\n        }\n        if (urlParams.has('startTime')) {\n          result.filters.startTime = urlParams.get('startTime');\n        }\n        if (urlParams.has('endDate')) {\n          result.filters.endDate = urlParams.get('endDate');\n        }\n        if (urlParams.has('endTime')) {\n          result.filters.endTime = urlParams.get('endTime');\n        }\n      }\n    }\n    \n    // Stream\n    if (urlParams.has('stream')) {\n      result.filters.streamId = urlParams.get('stream');\n    }\n    \n    // Recording type\n    if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n      result.filters.recordingType = 'detection';\n    }\n    \n    // Pagination\n    if (urlParams.has('page')) {\n      result.page = parseInt(urlParams.get('page'), 10);\n    }\n    if (urlParams.has('limit')) {\n      result.limit = parseInt(urlParams.get('limit'), 10);\n    }\n    \n    // Sorting\n    if (urlParams.has('sort')) {\n      result.sort = urlParams.get('sort');\n    }\n    if (urlParams.has('order')) {\n      result.order = urlParams.get('order');\n    }\n    \n    return result;\n  },\n  \n  /**\n   * Get active filters display\n   * @param {Object} filters Current filters\n   * @returns {Array} Array of active filter objects with key and label\n   */\n  getActiveFiltersDisplay: (filters) => {\n    const activeFilters = [];\n    \n    // Check if we have any active filters\n    const hasFilters = (\n      filters.dateRange !== 'last7days' ||\n      filters.streamId !== 'all' ||\n      filters.recordingType !== 'all'\n    );\n    \n    if (hasFilters) {\n      // Date range filter\n      if (filters.dateRange !== 'last7days') {\n        let label = '';\n        switch (filters.dateRange) {\n          case 'today':\n            label = 'Today';\n            break;\n          case 'yesterday':\n            label = 'Yesterday';\n            break;\n          case 'last30days':\n            label = 'Last 30 Days';\n            break;\n          case 'custom':\n            label = `${filters.startDate} to ${filters.endDate}`;\n            break;\n        }\n        activeFilters.push({ key: 'dateRange', label: `Date: ${label}` });\n      }\n      \n      // Stream filter\n      if (filters.streamId !== 'all') {\n        activeFilters.push({ key: 'streamId', label: `Stream: ${filters.streamId}` });\n      }\n      \n      // Recording type filter\n      if (filters.recordingType !== 'all') {\n        activeFilters.push({ key: 'recordingType', label: 'Detection Events Only' });\n      }\n    }\n    \n    return activeFilters;\n  },\n  \n  /**\n   * Load filters from URL\n   * @param {Object} filters Current filters\n   * @param {Object} pagination Current pagination\n   * @param {Function} setFilters Function to update filters\n   * @param {Function} setPagination Function to update pagination\n   * @param {Function} setSortField Function to update sort field\n   * @param {Function} setSortDirection Function to update sort direction\n   */\n  loadFiltersFromUrl: (filters, pagination, setFilters, setPagination, setSortField, setSortDirection) => {\n    // Get URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    \n    // Create a new filters object based on the current filters\n    const newFilters = { ...filters };\n    \n    // Date range\n    if (urlParams.has('dateRange')) {\n      newFilters.dateRange = urlParams.get('dateRange');\n      \n      if (newFilters.dateRange === 'custom') {\n        if (urlParams.has('startDate')) {\n          newFilters.startDate = urlParams.get('startDate');\n        }\n        if (urlParams.has('startTime')) {\n          newFilters.startTime = urlParams.get('startTime');\n        }\n        if (urlParams.has('endDate')) {\n          newFilters.endDate = urlParams.get('endDate');\n        }\n        if (urlParams.has('endTime')) {\n          newFilters.endTime = urlParams.get('endTime');\n        }\n      }\n    }\n    \n    // Stream\n    if (urlParams.has('stream')) {\n      newFilters.streamId = urlParams.get('stream');\n    }\n    \n    // Recording type - IMPORTANT: Check for this parameter even if dateRange is not present\n    if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n      newFilters.recordingType = 'detection';\n    }\n    \n    // Update filters state\n    setFilters(newFilters);\n    \n    // Pagination\n    if (urlParams.has('page')) {\n      setPagination(prev => ({\n        ...prev,\n        currentPage: parseInt(urlParams.get('page'), 10)\n      }));\n    }\n    if (urlParams.has('limit')) {\n      setPagination(prev => ({\n        ...prev,\n        pageSize: parseInt(urlParams.get('limit'), 10)\n      }));\n    }\n    \n    // Sorting\n    if (urlParams.has('sort')) {\n      setSortField(urlParams.get('sort'));\n    }\n    if (urlParams.has('order')) {\n      setSortDirection(urlParams.get('order'));\n    }\n  },\n  \n  /**\n   * Update URL with filters\n   * @param {Object} filters Current filters\n   * @param {Object} pagination Current pagination\n   * @param {string} sortField Current sort field\n   * @param {string} sortDirection Current sort direction\n   */\n  updateUrlWithFilters: (filters, pagination, sortField, sortDirection) => {\n    // Create URL parameters object based on current URL to preserve any existing parameters\n    const params = new URLSearchParams(window.location.search);\n    \n    // Add a timestamp parameter to prevent caching issues\n    params.set('t', Date.now().toString());\n    \n    // Update or add date range parameters\n    params.set('dateRange', filters.dateRange);\n    \n    // Handle custom date range\n    if (filters.dateRange === 'custom') {\n      params.set('startDate', filters.startDate);\n      params.set('startTime', filters.startTime);\n      params.set('endDate', filters.endDate);\n      params.set('endTime', filters.endTime);\n    } else {\n      // Remove custom date parameters if not using custom date range\n      params.delete('startDate');\n      params.delete('startTime');\n      params.delete('endDate');\n      params.delete('endTime');\n    }\n    \n    // Update stream filter\n    if (filters.streamId !== 'all') {\n      params.set('stream', filters.streamId);\n    } else {\n      params.delete('stream');\n    }\n    \n    // Update recording type filter\n    if (filters.recordingType === 'detection') {\n      params.set('detection', '1');\n    } else {\n      params.delete('detection');\n    }\n    \n    // Update pagination\n    params.set('page', pagination.currentPage.toString());\n    params.set('limit', pagination.pageSize.toString());\n    \n    // Update sorting\n    params.set('sort', sortField);\n    params.set('order', sortDirection);\n    \n    // Update URL without reloading the page\n    const newUrl = `${window.location.pathname}?${params.toString()}`;\n    window.history.pushState({ path: newUrl }, '', newUrl);\n    \n    // Also update the reload behavior to maintain URL parameters\n    // This is the key to preserving parameters during page reload\n    const reloadUrl = newUrl;\n    window.onbeforeunload = function() {\n      // Replace the current URL with our preserved URL just before reload\n      window.history.replaceState({ path: reloadUrl }, '', reloadUrl);\n    };\n  }\n};\n","/**\n * LightNVR Web Interface RecordingsView Component\n * Preact component for the recordings page\n */\n\nimport { h } from 'preact';\nimport { html } from '../../html-helper.js';\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { showStatusMessage, showVideoModal, DeleteConfirmationModal } from './UI.js';\nimport { ContentLoader } from './LoadingIndicator.js';\n\n// Import components\nimport { FiltersSidebar } from './recordings/FiltersSidebar.js';\nimport { ActiveFilters } from './recordings/ActiveFilters.js';\nimport { RecordingsTable } from './recordings/RecordingsTable.js';\nimport { PaginationControls } from './recordings/PaginationControls.js';\n\n// Import utilities\nimport { formatUtils } from './recordings/formatUtils.js';\nimport { recordingsAPI } from './recordings/recordingsAPI.js';\nimport { urlUtils } from './recordings/urlUtils.js';\nimport { useQueryClient, invalidateQueries } from '../../query-client.js';\n\n/**\n * RecordingsView component\n * @returns {JSX.Element} RecordingsView component\n */\nexport function RecordingsView() {\n  const [recordings, setRecordings] = useState([]);\n  const [streams, setStreams] = useState([]);\n  const [filtersVisible, setFiltersVisible] = useState(true);\n  const [sortField, setSortField] = useState('start_time');\n  const [sortDirection, setSortDirection] = useState('desc');\n  const [filters, setFilters] = useState({\n    dateRange: 'last7days',\n    startDate: '',\n    startTime: '00:00',\n    endDate: '',\n    endTime: '23:59',\n    streamId: 'all',\n    recordingType: 'all'\n  });\n  const [pagination, setPagination] = useState({\n    currentPage: 1,\n    pageSize: 20,\n    totalItems: 0,\n    totalPages: 1,\n    startItem: 0,\n    endItem: 0\n  });\n  const [hasActiveFilters, setHasActiveFilters] = useState(false);\n  const [activeFiltersDisplay, setActiveFiltersDisplay] = useState([]);\n  const [selectedRecordings, setSelectedRecordings] = useState({});\n  const [selectAll, setSelectAll] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [deleteMode, setDeleteMode] = useState('selected'); // 'selected' or 'all'\n  const recordingsTableBodyRef = useRef(null);\n\n  // Get query client for invalidating queries\n  const queryClient = useQueryClient();\n\n  // Fetch streams using preact-query\n  const {\n    data: streamsData,\n    isLoading: isLoadingStreams,\n    error: streamsError\n  } = recordingsAPI.hooks.useStreams();\n\n  // Update streams state when data is loaded\n  useEffect(() => {\n    if (streamsData && Array.isArray(streamsData)) {\n      setStreams(streamsData);\n    }\n  }, [streamsData]);\n\n  // Handle streams error\n  useEffect(() => {\n    if (streamsError) {\n      console.error('Error loading streams for filter:', streamsError);\n      showStatusMessage('Error loading streams: ' + streamsError.message);\n    }\n  }, [streamsError]);\n\n  // Initialize component\n  useEffect(() => {\n    // Set default date range\n    setDefaultDateRange();\n\n    // Check for URL parameters\n    const urlFilters = urlUtils.getFiltersFromUrl();\n\n    if (urlFilters) {\n      console.log('Found URL filters:', urlFilters);\n\n      // Check specifically for detection parameter\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n        // Ensure recordingType is set to 'detection'\n        urlFilters.filters.recordingType = 'detection';\n      }\n\n      // Update state with URL filters\n      setFilters(urlFilters.filters);\n      setPagination(prev => ({\n        ...prev,\n        currentPage: urlFilters.page || 1,\n        pageSize: urlFilters.limit || 20\n      }));\n      setSortField(urlFilters.sort || 'start_time');\n      setSortDirection(urlFilters.order || 'desc');\n    }\n\n    // Handle responsive behavior\n    handleResponsiveFilters();\n    window.addEventListener('resize', handleResponsiveFilters);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResponsiveFilters);\n    };\n  }, []);\n\n  // Update active filters when filters change\n  useEffect(() => {\n    updateActiveFilters();\n  }, [filters]);\n\n  // Set default date range\n  const setDefaultDateRange = () => {\n    const now = new Date();\n    const sevenDaysAgo = new Date(now);\n    sevenDaysAgo.setDate(now.getDate() - 7);\n\n    setFilters(prev => ({\n      ...prev,\n      endDate: now.toISOString().split('T')[0],\n      startDate: sevenDaysAgo.toISOString().split('T')[0]\n    }));\n  };\n\n  // Fetch recordings using preact-query\n  const {\n    data: recordingsData,\n    isLoading: isLoadingRecordings,\n    error: recordingsError,\n    refetch: refetchRecordings\n  } = recordingsAPI.hooks.useRecordings(filters, pagination, sortField, sortDirection);\n\n  // Update recordings state when data is loaded\n  useEffect(() => {\n    if (recordingsData) {\n      // Store recordings in the component state\n      const recordingsArray = recordingsData.recordings || [];\n      setRecordings(recordingsArray);\n      setHasData(recordingsArray.length > 0);\n\n      // Update pagination\n      if (recordingsData.pagination) {\n        updatePaginationFromResponse(recordingsData, pagination.currentPage);\n      }\n    }\n  }, [recordingsData]);\n\n  // Handle recordings error\n  useEffect(() => {\n    if (recordingsError) {\n      console.error('Error loading recordings:', recordingsError);\n      showStatusMessage('Error loading recordings: ' + recordingsError.message);\n      setHasData(false);\n    }\n  }, [recordingsError]);\n\n  // Load filters from URL\n  const loadFiltersFromUrl = () => {\n    const urlFilters = urlUtils.getFiltersFromUrl();\n    if (urlFilters) {\n      // Check specifically for detection parameter\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n        // Ensure recordingType is set to 'detection'\n        urlFilters.filters.recordingType = 'detection';\n      }\n\n      setFilters(urlFilters.filters);\n      setPagination(prev => ({\n        ...prev,\n        currentPage: urlFilters.page || 1,\n        pageSize: urlFilters.limit || 20\n      }));\n      setSortField(urlFilters.sort || 'start_time');\n      setSortDirection(urlFilters.order || 'desc');\n\n      // If detection parameter is present, ensure it's included in the URL when we update it\n      if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n        setTimeout(() => {\n          const currentUrl = new URL(window.location.href);\n          if (!currentUrl.searchParams.has('detection')) {\n            currentUrl.searchParams.set('detection', '1');\n            window.history.replaceState({ path: currentUrl.href }, '', currentUrl.href);\n          }\n        }, 0);\n      }\n\n      return urlFilters; // Return the filters so we can use them directly\n    }\n    return null;\n  };\n\n  // Handle responsive filters\n  const handleResponsiveFilters = () => {\n    // On mobile, hide filters by default\n    if (window.innerWidth < 768) {\n      setFiltersVisible(false);\n    } else {\n      setFiltersVisible(true);\n    }\n  };\n\n  // Toggle filters visibility\n  const toggleFilters = () => {\n    setFiltersVisible(!filtersVisible);\n  };\n\n  // State for data status\n  const [hasData, setHasData] = useState(false);\n\n  // Load recordings (now just updates pagination and URL)\n  const loadRecordings = (page = pagination.currentPage, updateUrl = true) => {\n    // Debug log to check filters\n    console.log('Loading recordings with filters:', JSON.stringify(filters));\n\n    // Create a pagination object with the specified page\n    const paginationWithPage = {\n      ...pagination,\n      currentPage: page\n    };\n\n    // Update pagination state\n    setPagination(paginationWithPage);\n\n    // Update URL with filters if requested\n    if (updateUrl) {\n      urlUtils.updateUrlWithFilters(filters, paginationWithPage, sortField, sortDirection);\n    }\n  };\n\n  // Update pagination from API response\n  const updatePaginationFromResponse = (data, currentPage) => {\n    // Use the provided page parameter instead of the state\n    currentPage = currentPage || pagination.currentPage;\n\n    if (data.pagination) {\n      const pageSize = data.pagination.limit || 20;\n      const totalItems = data.pagination.total || 0;\n      const totalPages = data.pagination.pages || 1;\n\n      // Calculate start and end items based on current page\n      let startItem = 0;\n      let endItem = 0;\n\n      if (data.recordings.length > 0) {\n        startItem = (currentPage - 1) * pageSize + 1;\n        endItem = Math.min(startItem + data.recordings.length - 1, totalItems);\n      }\n\n      console.log('Pagination update:', {\n        currentPage,\n        pageSize,\n        totalItems,\n        totalPages,\n        startItem,\n        endItem,\n        recordingsLength: data.recordings.length\n      });\n\n      setPagination(prev => ({\n        ...prev,\n        totalItems,\n        totalPages,\n        pageSize,\n        startItem,\n        endItem\n      }));\n    } else {\n      // Fallback if pagination object is not provided\n      const pageSize = pagination.pageSize;\n      const totalItems = data.total || 0;\n      const totalPages = Math.ceil(totalItems / pageSize) || 1;\n\n      // Calculate start and end items based on current page\n      let startItem = 0;\n      let endItem = 0;\n\n      if (data.recordings.length > 0) {\n        startItem = (currentPage - 1) * pageSize + 1;\n        endItem = Math.min(startItem + data.recordings.length - 1, totalItems);\n      }\n\n      console.log('Pagination update (fallback):', {\n        currentPage,\n        pageSize,\n        totalItems,\n        totalPages,\n        startItem,\n        endItem,\n        recordingsLength: data.recordings.length\n      });\n\n      setPagination(prev => ({\n        ...prev,\n        totalItems,\n        totalPages,\n        startItem,\n        endItem\n      }));\n    }\n  };\n\n  // Handle date range change\n  const handleDateRangeChange = (e) => {\n    const newDateRange = e.target.value;\n\n    setFilters(prev => ({\n      ...prev,\n      dateRange: newDateRange\n    }));\n\n    if (newDateRange === 'custom') {\n      // If custom is selected, make sure we have default dates\n      if (!filters.startDate || !filters.endDate) {\n        const now = new Date();\n        const sevenDaysAgo = new Date(now);\n        sevenDaysAgo.setDate(now.getDate() - 7);\n\n        setFilters(prev => ({\n          ...prev,\n          endDate: now.toISOString().split('T')[0],\n          startDate: sevenDaysAgo.toISOString().split('T')[0]\n        }));\n      }\n    }\n  };\n\n  // Update active filters\n  const updateActiveFilters = () => {\n    const activeFilters = urlUtils.getActiveFiltersDisplay(filters);\n    setHasActiveFilters(activeFilters.length > 0);\n    setActiveFiltersDisplay(activeFilters);\n  };\n\n  // Apply filters\n  const applyFilters = (resetToFirstPage = true) => {\n    // Reset to first page when applying filters (unless specified otherwise)\n    if (resetToFirstPage) {\n      setPagination(prev => ({\n        ...prev,\n        currentPage: 1\n      }));\n    }\n\n    // Update URL with filters\n    urlUtils.updateUrlWithFilters(\n      filters,\n      resetToFirstPage ? {...pagination, currentPage: 1} : pagination,\n      sortField,\n      sortDirection\n    );\n  };\n\n  // Reset filters\n  const resetFilters = () => {\n    // Create default filters\n    const defaultFilters = {\n      dateRange: 'last7days',\n      startDate: '',\n      startTime: '00:00',\n      endDate: '',\n      endTime: '23:59',\n      streamId: 'all',\n      recordingType: 'all'\n    };\n\n    // Get default date range\n    const now = new Date();\n    const sevenDaysAgo = new Date(now);\n    sevenDaysAgo.setDate(now.getDate() - 7);\n\n    defaultFilters.endDate = now.toISOString().split('T')[0];\n    defaultFilters.startDate = sevenDaysAgo.toISOString().split('T')[0];\n\n    // Reset filter state\n    setFilters(defaultFilters);\n\n    // Reset pagination to first page\n    setPagination(prev => ({\n      ...prev,\n      currentPage: 1\n    }));\n\n    // Reset sort\n    setSortField('start_time');\n    setSortDirection('desc');\n\n    // Clear all URL parameters by replacing the current URL with the base URL\n    const baseUrl = window.location.pathname;\n    window.history.pushState({ path: baseUrl }, '', baseUrl);\n  };\n\n  // Remove filter\n  const removeFilter = (key) => {\n    switch (key) {\n      case 'dateRange':\n        setFilters(prev => ({\n          ...prev,\n          dateRange: 'last7days'\n        }));\n        break;\n      case 'streamId':\n        setFilters(prev => ({\n          ...prev,\n          streamId: 'all'\n        }));\n        break;\n      case 'recordingType':\n        setFilters(prev => ({\n          ...prev,\n          recordingType: 'all'\n        }));\n        break;\n    }\n\n    applyFilters();\n  };\n\n  // Sort by field\n  const sortBy = (field) => {\n    if (sortField === field) {\n      // Toggle direction if already sorting by this field\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      // Default to descending for start_time, ascending for others\n      setSortDirection(field === 'start_time' ? 'desc' : 'asc');\n      setSortField(field);\n    }\n\n    // Reset to first page\n    setPagination(prev => ({\n      ...prev,\n      currentPage: 1\n    }));\n\n    // Update URL with new sort parameters\n    urlUtils.updateUrlWithFilters(\n      filters,\n      {...pagination, currentPage: 1},\n      field,\n      field === sortField ? (sortDirection === 'asc' ? 'desc' : 'asc') : (field === 'start_time' ? 'desc' : 'asc')\n    );\n  };\n\n  // Go to page\n  const goToPage = (page) => {\n    if (page < 1 || page > pagination.totalPages) return;\n\n    // Set the current page in pagination state\n    setPagination(prev => ({\n      ...prev,\n      currentPage: page\n    }));\n\n    // Update URL with all filters and the new page\n    urlUtils.updateUrlWithFilters(filters, {...pagination, currentPage: page}, sortField, sortDirection);\n  };\n\n  // Toggle selection of a recording\n  const toggleRecordingSelection = (recordingId) => {\n    setSelectedRecordings(prev => ({\n      ...prev,\n      [recordingId]: !prev[recordingId]\n    }));\n  };\n\n  // Toggle select all recordings\n  const toggleSelectAll = () => {\n    const newSelectAll = !selectAll;\n    setSelectAll(newSelectAll);\n\n    const newSelectedRecordings = {};\n    if (newSelectAll) {\n      // Select all recordings\n      recordings.forEach(recording => {\n        newSelectedRecordings[recording.id] = true;\n      });\n    }\n    // Always update selectedRecordings, even when deselecting all\n    setSelectedRecordings(newSelectedRecordings);\n  };\n\n  // Get count of selected recordings\n  const getSelectedCount = () => {\n    return Object.values(selectedRecordings).filter(Boolean).length;\n  };\n\n  // Open delete confirmation modal\n  const openDeleteModal = (mode) => {\n    setDeleteMode(mode);\n    setIsDeleteModalOpen(true);\n  };\n\n  // Close delete confirmation modal\n  const closeDeleteModal = () => {\n    setIsDeleteModalOpen(false);\n  };\n\n  // Delete selected recordings using preact-query mutation\n  const { mutate: batchDeleteMutation } = recordingsAPI.hooks.useBatchDeleteRecordings();\n\n  // Handle delete confirmation\n  const handleDeleteConfirm = () => {\n    closeDeleteModal();\n\n    if (deleteMode === 'selected') {\n      // Get selected IDs\n      const selectedIds = Object.entries(selectedRecordings)\n        .filter(([_, isSelected]) => isSelected)\n        .map(([id, _]) => parseInt(id, 10));\n\n      // Call the mutation with the selected IDs\n      batchDeleteMutation({ ids: selectedIds });\n\n      // Reset selection\n      setSelectedRecordings({});\n      setSelectAll(false);\n    } else {\n      // Create filter object for deleting all filtered recordings\n      const filter = {};\n\n      // Add date range filters\n      if (filters.dateRange === 'custom') {\n        filter.start = `${filters.startDate}T${filters.startTime}:00`;\n        filter.end = `${filters.endDate}T${filters.endTime}:00`;\n      } else {\n        // Convert predefined range to actual dates\n        const { start, end } = recordingsAPI.getDateRangeFromPreset(filters.dateRange);\n        filter.start = start;\n        filter.end = end;\n      }\n\n      // Add stream filter\n      if (filters.streamId !== 'all') {\n        filter.stream_name = filters.streamId;\n      }\n\n      // Add recording type filter\n      if (filters.recordingType === 'detection') {\n        filter.detection = 1;\n      }\n\n      // Call the mutation with the filter\n      batchDeleteMutation({ filter });\n\n      // Reset selection\n      setSelectedRecordings({});\n      setSelectAll(false);\n    }\n  };\n\n  // Helper function to reload recordings with preserved parameters\n  const reloadRecordingsWithPreservedParams = (sortField, sortDirection, page) => {\n    // Set the sort parameters directly\n    setSortField(sortField);\n    setSortDirection(sortDirection);\n\n    // Update pagination with the preserved page\n    setPagination(prev => ({\n      ...prev,\n      currentPage: page\n    }));\n\n    // Wait for state to update\n    setTimeout(() => {\n      // Create a new pagination object with the updated page\n      const updatedPagination = {\n        ...pagination,\n        currentPage: page\n      };\n\n      // Update URL with all filters and the preserved parameters\n      urlUtils.updateUrlWithFilters(filters, updatedPagination, sortField, sortDirection);\n\n      // Load recordings from API\n      recordingsAPI.loadRecordings(filters, updatedPagination, sortField, sortDirection)\n        .then(data => {\n          console.log('Recordings data received:', data);\n\n          // Store recordings in the component state\n          setRecordings(data.recordings || []);\n\n          // Update pagination without changing the current page\n          updatePaginationFromResponse(data, page);\n        })\n        .catch(error => {\n          console.error('Error loading recordings:', error);\n          showStatusMessage('Error loading recordings: ' + error.message);\n        });\n    }, 0);\n  };\n\n  // Delete recording using preact-query mutation\n  const { mutate: deleteRecordingMutation } = recordingsAPI.hooks.useDeleteRecording();\n\n  // Delete a single recording\n  const deleteRecording = (recording) => {\n    if (!confirm(`Are you sure you want to delete this recording from ${recording.stream}?`)) {\n      return;\n    }\n\n    // Call the mutation with the recording ID\n    deleteRecordingMutation(recording.id);\n  };\n\n  // Play recording\n  const playRecording = (recording) => {\n    recordingsAPI.playRecording(recording, showVideoModal);\n  };\n\n  // Download recording\n  const downloadRecording = (recording) => {\n    recordingsAPI.downloadRecording(recording);\n  };\n\n  return html`\n    <section id=\"recordings-page\" class=\"page\">\n      <div class=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <div class=\"flex items-center\">\n          <h2 class=\"text-xl font-bold\">Recordings</h2>\n          <div class=\"ml-4 flex\">\n            <a href=\"recordings.html\" class=\"px-3 py-1 bg-blue-500 text-white rounded-l-md\">Table View</a>\n            <a href=\"timeline.html\" class=\"px-3 py-1 bg-gray-300 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-400 dark:hover:bg-gray-600 rounded-r-md\">Timeline View</a>\n          </div>\n        </div>\n        <button id=\"toggle-filters-btn\"\n                class=\"p-2 rounded-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none\"\n                title=\"Toggle Filters\"\n                onClick=${toggleFilters}>\n          <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path fill-rule=\"evenodd\" d=\"M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clip-rule=\"evenodd\"></path>\n          </svg>\n        </button>\n      </div>\n\n      <div class=\"recordings-layout flex flex-col md:flex-row gap-4 w-full\">\n        <!-- Sidebar for filters -->\n        <${FiltersSidebar}\n          filters=${filters}\n          setFilters=${setFilters}\n          pagination=${pagination}\n          setPagination=${setPagination}\n          streams=${streams}\n          filtersVisible=${filtersVisible}\n          applyFilters=${applyFilters}\n          resetFilters=${resetFilters}\n          handleDateRangeChange=${handleDateRangeChange}\n          setDefaultDateRange=${setDefaultDateRange}\n        />\n\n        <!-- Main content area -->\n        <div class=\"recordings-content flex-1\">\n          <${ActiveFilters}\n            activeFiltersDisplay=${activeFiltersDisplay}\n            removeFilter=${removeFilter}\n            hasActiveFilters=${hasActiveFilters}\n          />\n\n          <${ContentLoader}\n            isLoading=${isLoadingRecordings}\n            hasData=${hasData}\n            loadingMessage=\"Loading recordings...\"\n            emptyMessage=\"No recordings found matching your criteria\"\n          >\n            <${RecordingsTable}\n              recordings=${recordings}\n              sortField=${sortField}\n              sortDirection=${sortDirection}\n              sortBy=${sortBy}\n              selectedRecordings=${selectedRecordings}\n              toggleRecordingSelection=${toggleRecordingSelection}\n              selectAll=${selectAll}\n              toggleSelectAll=${toggleSelectAll}\n              getSelectedCount=${getSelectedCount}\n              openDeleteModal=${openDeleteModal}\n              playRecording=${playRecording}\n              downloadRecording=${downloadRecording}\n              deleteRecording=${deleteRecording}\n              recordingsTableBodyRef=${recordingsTableBodyRef}\n              pagination=${pagination}\n            />\n\n            <${PaginationControls}\n              pagination=${pagination}\n              goToPage=${goToPage}\n            />\n          <//>\n        </div>\n      </div>\n\n      <${DeleteConfirmationModal}\n        isOpen=${isDeleteModalOpen}\n        onClose=${closeDeleteModal}\n        onConfirm=${handleDeleteConfirm}\n        mode=${deleteMode}\n        count=${getSelectedCount()}\n      />\n    </section>\n  `;\n}\n\n/**\n * Load RecordingsView component\n */\nexport function loadRecordingsView() {\n  const mainContent = document.getElementById('main-content');\n  if (!mainContent) return;\n\n  // Render the RecordingsView component to the container\n  import('preact').then(({ render }) => {\n    import('../../query-client.js').then(({ QueryClientProvider, queryClient }) => {\n      render(\n        html`<${QueryClientProvider} client=${queryClient}><${RecordingsView} /></${QueryClientProvider}>`,\n        mainContent\n      );\n    });\n  });\n}\n"],"file":"assets/RecordingsView-BGmVtTg6.js"}