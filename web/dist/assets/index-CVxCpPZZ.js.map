{"version":3,"file":"index-CVxCpPZZ.js","sources":["../../js/components/preact/WebRTCVideoCell.jsx","../../js/components/preact/WebRTCView.jsx","../../js/pages/index-page.jsx"],"sourcesContent":["/**\n * WebRTCVideoCell Component\n * A self-contained component for displaying a WebRTC video stream\n */\n\nimport { h } from 'preact';\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { DetectionOverlay, takeSnapshotWithDetections } from './DetectionOverlay.jsx';\nimport { SnapshotButton } from './SnapshotManager.jsx';\nimport { LoadingIndicator } from './LoadingIndicator.jsx';\nimport { showSnapshotPreview } from './UI.jsx';\n\n/**\n * WebRTCVideoCell component\n * @param {Object} props - Component props\n * @param {Object} props.stream - Stream object\n * @param {Function} props.onToggleFullscreen - Fullscreen toggle handler\n * @param {string} props.streamId - Stream ID for stable reference\n * @returns {JSX.Element} WebRTCVideoCell component\n */\nexport function WebRTCVideoCell({\n  stream,\n  streamId,\n  onToggleFullscreen\n}) {\n  // Component state\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [connectionQuality, setConnectionQuality] = useState('unknown'); // 'unknown', 'good', 'poor', 'bad'\n\n  // Refs\n  const videoRef = useRef(null);\n  const cellRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const detectionOverlayRef = useRef(null);\n  const abortControllerRef = useRef(null);\n  const connectionMonitorRef = useRef(null);\n  const reconnectAttemptsRef = useRef(0);\n\n  // Initialize WebRTC connection when component mounts\n  useEffect(() => {\n    if (!stream || !stream.name || !videoRef.current) return;\n\n    console.log(`Initializing WebRTC connection for stream ${stream.name}`);\n    setIsLoading(true);\n    setError(null);\n\n    // Create a new RTCPeerConnection\n    const pc = new RTCPeerConnection({\n      iceTransports: 'all',\n      bundlePolicy: 'balanced',\n      rtcpCnameCpn: 'LightNVR',\n      rtcpCnameRtp: 'LightNVR',\n      iceCandidatePoolSize: 0,\n      iceServers: [\n        { urls: 'stun:stun.l.google.com:19302' },\n        { urls: 'stun:stun1.l.google.com:19302' }\n      ]\n    });\n\n    peerConnectionRef.current = pc;\n\n    // Set up event handlers\n    pc.ontrack = (event) => {\n      console.log(`Track received for stream ${stream.name}`);\n      \n      if (event.track.kind === 'video') {\n        const videoElement = videoRef.current;\n        if (!videoElement) return;\n\n        // Set srcObject\n        videoElement.srcObject = event.streams[0];\n        \n        // Add event handlers\n        videoElement.onloadeddata = () => {\n          console.log(`Video data loaded for stream ${stream.name}`);\n        };\n\n        videoElement.onplaying = () => {\n          console.log(`Video playing for stream ${stream.name}`);\n          setIsLoading(false);\n          setIsPlaying(true);\n        };\n        \n        // Add timeouts to force-check video playback at different intervals\n        setTimeout(() => {\n          if (videoElement && !isPlaying) {\n            console.log(`Force-checking playback for stream ${stream.name} (attempt 1)`);\n            try {\n              videoElement.play().catch(e => {\n                console.warn(`Force play attempt 1 failed for ${stream.name}:`, e);\n              });\n            } catch (e) {\n              console.warn(`Error in force play attempt 1 for ${stream.name}:`, e);\n            }\n          }\n        }, 3000); // First check after 3 seconds\n\n        setTimeout(() => {\n          if (videoElement && !isPlaying) {\n            console.log(`Force-checking playback for stream ${stream.name} (attempt 2)`);\n            try {\n              // Try to restart the connection if still not playing\n              if (peerConnectionRef.current && peerConnectionRef.current.iceConnectionState === 'connected') {\n                console.log(`Connection is established but video not playing for ${stream.name}, forcing play`);\n                videoElement.play().catch(e => {\n                  console.warn(`Force play attempt 2 failed for ${stream.name}:`, e);\n                });\n              }\n            } catch (e) {\n              console.warn(`Error in force play attempt 2 for ${stream.name}:`, e);\n            }\n          } else if (isPlaying) {\n            console.log(`Video is now playing for stream ${stream.name}`);\n          }\n        }, 8000); // Second check after 8 seconds\n\n        videoElement.onerror = (e) => {\n          console.error(`Video error for stream ${stream.name}:`, e);\n          setError('Video playback error');\n          setIsLoading(false);\n        };\n      }\n    };\n\n    pc.onicecandidate = (event) => {\n      if (event.candidate) {\n        // Filter out empty candidates\n        if (event.candidate.candidate !== \"\") {\n          console.log(`ICE candidate for stream ${stream.name}`);\n          \n          // Only process candidates if we're not already connected\n          // This prevents issues with late-arriving candidates disrupting established connections\n          if (pc.iceConnectionState !== 'connected' && pc.iceConnectionState !== 'completed') {\n            // Process the candidate normally\n          } else {\n            console.log(`Ignoring late ICE candidate for stream ${stream.name} - connection already ${pc.iceConnectionState}`);\n          }\n        } else {\n          console.log(`Ignoring empty ICE candidate for stream ${stream.name}`);\n        }\n      }\n    };\n\n    pc.oniceconnectionstatechange = () => {\n      console.log(`ICE connection state for stream ${stream.name}: ${pc.iceConnectionState}`);\n      \n      if (pc.iceConnectionState === 'failed') {\n        console.error(`WebRTC ICE connection failed for stream ${stream.name}`);\n        setError('WebRTC ICE connection failed');\n        setIsLoading(false);\n      } else if (pc.iceConnectionState === 'disconnected') {\n        // Connection is temporarily disconnected, log but don't show error yet\n        console.warn(`WebRTC ICE connection disconnected for stream ${stream.name}, attempting to recover...`);\n        \n        // Set a timeout to check if the connection recovers on its own\n        setTimeout(() => {\n          if (peerConnectionRef.current && \n              (peerConnectionRef.current.iceConnectionState === 'disconnected' || \n               peerConnectionRef.current.iceConnectionState === 'failed')) {\n            console.error(`WebRTC ICE connection could not recover for stream ${stream.name}`);\n            setError('WebRTC connection lost. Please retry.');\n            setIsLoading(false);\n          } else if (peerConnectionRef.current) {\n            console.log(`WebRTC ICE connection recovered for stream ${stream.name}, current state: ${peerConnectionRef.current.iceConnectionState}`);\n          }\n        }, 5000); // Wait 5 seconds to see if connection recovers\n      } else if (pc.iceConnectionState === 'connected' || pc.iceConnectionState === 'completed') {\n        // Connection is established or completed, clear any previous error\n        if (error) {\n          console.log(`WebRTC connection restored for stream ${stream.name}`);\n          setError(null);\n        }\n      }\n    };\n\n    // Add transceivers\n    pc.addTransceiver('video', {direction: 'recvonly'});\n    pc.addTransceiver('audio', {direction: 'recvonly'});\n\n    // Create and send offer\n    pc.createOffer()\n      .then(offer => pc.setLocalDescription(offer))\n      .then(() => {\n        // Create a new AbortController for this request\n        abortControllerRef.current = new AbortController();\n        \n        // Format the offer\n        const formattedOffer = {\n          type: pc.localDescription.type,\n          sdp: pc.localDescription.sdp\n        };\n\n        // Get auth token if available\n        const auth = localStorage.getItem('auth');\n\n        // Send the offer to the server\n        return fetch(`/api/webrtc?src=${encodeURIComponent(stream.name)}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            ...(auth ? { 'Authorization': 'Basic ' + auth } : {})\n          },\n          body: JSON.stringify(formattedOffer),\n          signal: abortControllerRef.current.signal\n        });\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`Failed to send offer: ${response.status} ${response.statusText}`);\n        }\n        return response.text();\n      })\n      .then(text => {\n        try {\n          return JSON.parse(text);\n        } catch (error) {\n          console.error(`Error parsing JSON for stream ${stream.name}:`, error);\n          throw new Error('Failed to parse WebRTC answer');\n        }\n      })\n      .then(answer => pc.setRemoteDescription(new RTCSessionDescription(answer)))\n      .catch(error => {\n        console.error(`Error setting up WebRTC for stream ${stream.name}:`, error);\n        setError(error.message || 'Failed to establish WebRTC connection');\n        setIsLoading(false);\n      });\n\n    // Set up connection quality monitoring\n    const startConnectionMonitoring = () => {\n      // Clear any existing monitor\n      if (connectionMonitorRef.current) {\n        clearInterval(connectionMonitorRef.current);\n      }\n      \n      // Start a new monitor\n      connectionMonitorRef.current = setInterval(() => {\n        if (!peerConnectionRef.current) return;\n        \n        // Get connection stats\n        peerConnectionRef.current.getStats().then(stats => {\n          let packetsLost = 0;\n          let packetsReceived = 0;\n          let currentRtt = 0;\n          let jitter = 0;\n          \n          stats.forEach(report => {\n            if (report.type === 'inbound-rtp' && report.kind === 'video') {\n              packetsLost = report.packetsLost || 0;\n              packetsReceived = report.packetsReceived || 0;\n              jitter = report.jitter || 0;\n            }\n            \n            if (report.type === 'candidate-pair' && report.state === 'succeeded') {\n              currentRtt = report.currentRoundTripTime || 0;\n            }\n          });\n          \n          // Calculate packet loss percentage\n          const totalPackets = packetsReceived + packetsLost;\n          const lossPercentage = totalPackets > 0 ? (packetsLost / totalPackets) * 100 : 0;\n          \n          // Determine connection quality\n          let quality = 'unknown';\n          \n          if (packetsReceived > 0) {\n            if (lossPercentage < 2 && currentRtt < 0.1 && jitter < 0.03) {\n              quality = 'good';\n            } else if (lossPercentage < 5 && currentRtt < 0.3 && jitter < 0.1) {\n              quality = 'fair';\n            } else if (lossPercentage < 15 && currentRtt < 1) {\n              quality = 'poor';\n            } else {\n              quality = 'bad';\n            }\n          }\n          \n          // Update connection quality state if changed\n          if (quality !== connectionQuality) {\n            console.log(`WebRTC connection quality for stream ${stream.name} changed to ${quality}`);\n            console.log(`Stats: loss=${lossPercentage.toFixed(2)}%, rtt=${(currentRtt * 1000).toFixed(0)}ms, jitter=${(jitter * 1000).toFixed(0)}ms`);\n            setConnectionQuality(quality);\n            \n            // If connection quality is poor or bad for the \"parking\" stream, which has shown issues\n            if ((quality === 'poor' || quality === 'bad') && stream.name === 'parking') {\n              console.warn(`Poor connection quality detected for problematic stream ${stream.name}, may need intervention`);\n              \n              // If we're in a bad state and the connection is still technically \"connected\"\n              // but video isn't flowing properly, we might need to force a reconnection\n              if (peerConnectionRef.current && \n                  peerConnectionRef.current.iceConnectionState === 'connected' && \n                  !isPlaying && \n                  reconnectAttemptsRef.current < 3) {\n                \n                console.log(`Attempting to recover stream ${stream.name} (attempt ${reconnectAttemptsRef.current + 1})`);\n                reconnectAttemptsRef.current++;\n                \n                // Force a reconnection\n                handleRetry();\n              }\n            }\n          }\n        }).catch(err => {\n          console.warn(`Error getting WebRTC stats for stream ${stream.name}:`, err);\n        });\n      }, 10000); // Check every 10 seconds\n    };\n    \n    // Start monitoring once we have a connection\n    if (peerConnectionRef.current && peerConnectionRef.current.iceConnectionState === 'connected') {\n      startConnectionMonitoring();\n    }\n    \n    // Listen for connection state changes to start/stop monitoring\n    const originalOnIceConnectionStateChange = pc.oniceconnectionstatechange;\n    pc.oniceconnectionstatechange = () => {\n      // Call the original handler\n      if (originalOnIceConnectionStateChange) {\n        originalOnIceConnectionStateChange();\n      }\n      \n      // Start monitoring when connected\n      if (pc.iceConnectionState === 'connected' || pc.iceConnectionState === 'completed') {\n        startConnectionMonitoring();\n        // Reset reconnect attempts counter when we get a good connection\n        reconnectAttemptsRef.current = 0;\n      }\n      \n      // Stop monitoring when disconnected or failed\n      if (pc.iceConnectionState === 'disconnected' || pc.iceConnectionState === 'failed' || pc.iceConnectionState === 'closed') {\n        if (connectionMonitorRef.current) {\n          clearInterval(connectionMonitorRef.current);\n          connectionMonitorRef.current = null;\n        }\n      }\n    };\n\n    // Cleanup function\n    return () => {\n      console.log(`Cleaning up WebRTC connection for stream ${stream.name}`);\n      \n      // Stop connection monitoring\n      if (connectionMonitorRef.current) {\n        clearInterval(connectionMonitorRef.current);\n        connectionMonitorRef.current = null;\n      }\n      \n      // Abort any pending fetch requests\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n        abortControllerRef.current = null;\n      }\n      \n      // Clean up video element\n      if (videoRef.current && videoRef.current.srcObject) {\n        const tracks = videoRef.current.srcObject.getTracks();\n        tracks.forEach(track => track.stop());\n        videoRef.current.srcObject = null;\n      }\n      \n      // Close peer connection\n      if (peerConnectionRef.current) {\n        peerConnectionRef.current.close();\n        peerConnectionRef.current = null;\n      }\n    };\n  }, [stream]);\n\n  // Handle retry button click\n  const handleRetry = () => {\n    // Force a re-render to restart the WebRTC connection\n    setError(null);\n    setIsLoading(true);\n    \n    // Clean up existing connection\n    if (peerConnectionRef.current) {\n      peerConnectionRef.current.close();\n      peerConnectionRef.current = null;\n    }\n    \n    if (videoRef.current && videoRef.current.srcObject) {\n      const tracks = videoRef.current.srcObject.getTracks();\n      tracks.forEach(track => track.stop());\n      videoRef.current.srcObject = null;\n    }\n    \n    // Force a re-render by updating state\n    setIsPlaying(false);\n  };\n\n  return (\n    <div\n      className=\"video-cell\"\n      data-stream-name={stream.name}\n      data-stream-id={streamId}\n      ref={cellRef}\n      style={{\n        position: 'relative',\n        pointerEvents: 'auto',\n        zIndex: 1\n      }}\n    >\n      {/* Video element */}\n      <video\n        id={`video-${streamId.replace(/\\s+/g, '-')}`}\n        className=\"video-element\"\n        ref={videoRef}\n        playsInline\n        autoPlay\n        muted\n        disablePictureInPicture\n        style={{ width: '100%', height: '100%', objectFit: 'contain' }}\n      />\n\n      {/* Detection overlay component */}\n      {stream.detection_based_recording && stream.detection_model && (\n        <DetectionOverlay\n          ref={detectionOverlayRef}\n          streamName={stream.name}\n          videoRef={videoRef}\n          enabled={isPlaying}\n          detectionModel={stream.detection_model}\n        />\n      )}\n\n      {/* Stream name overlay with connection quality indicator */}\n      <div\n        className=\"stream-name-overlay\"\n        style={{\n          position: 'absolute',\n          top: '10px',\n          left: '10px',\n          padding: '5px 10px',\n          backgroundColor: 'rgba(0, 0, 0, 0.5)',\n          color: 'white',\n          borderRadius: '4px',\n          fontSize: '14px',\n          zIndex: 3,\n          display: 'flex',\n          alignItems: 'center',\n          gap: '8px'\n        }}\n      >\n        {stream.name}\n        \n        {/* Connection quality indicator - only show when we have quality data and stream is playing */}\n        {isPlaying && connectionQuality !== 'unknown' && (\n          <div \n            className={`connection-quality-indicator quality-${connectionQuality}`}\n            title={`Connection Quality: ${connectionQuality.charAt(0).toUpperCase() + connectionQuality.slice(1)}`}\n            style={{\n              width: '10px',\n              height: '10px',\n              borderRadius: '50%',\n              backgroundColor: \n                connectionQuality === 'good' ? '#10B981' :  // Green\n                connectionQuality === 'fair' ? '#FBBF24' :  // Yellow\n                connectionQuality === 'poor' ? '#F97316' :  // Orange\n                connectionQuality === 'bad' ? '#EF4444' :   // Red\n                '#6B7280',                                  // Gray (unknown)\n              boxShadow: '0 0 4px rgba(0, 0, 0, 0.3)'\n            }}\n          />\n        )}\n      </div>\n\n      {/* Stream controls */}\n      <div\n        className=\"stream-controls\"\n        style={{\n          position: 'absolute',\n          bottom: '10px',\n          right: '10px',\n          display: 'flex',\n          gap: '10px',\n          zIndex: 5,\n          backgroundColor: 'rgba(0, 0, 0, 0.5)',\n          padding: '5px',\n          borderRadius: '4px'\n        }}\n      >\n        <div\n          style={{\n            backgroundColor: 'transparent',\n            padding: '5px',\n            borderRadius: '4px'\n          }}\n          onMouseOver={(e) => e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.2)'}\n          onMouseOut={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n        >\n          <SnapshotButton\n            streamId={streamId}\n            streamName={stream.name}\n            onSnapshot={() => {\n              if (videoRef.current) {\n                let canvasRef = null;\n\n                // Try to get canvas ref from detection overlay if available\n                if (detectionOverlayRef.current && typeof detectionOverlayRef.current.getCanvasRef === 'function') {\n                  canvasRef = detectionOverlayRef.current.getCanvasRef();\n                }\n\n                // Take snapshot with or without detections\n                if (canvasRef) {\n                  const snapshot = takeSnapshotWithDetections(videoRef, canvasRef, stream.name);\n                  if (snapshot) {\n                    showSnapshotPreview(snapshot.canvas.toDataURL('image/jpeg', 0.95), `Snapshot: ${stream.name}`);\n                  }\n                } else {\n                  // Take a simple snapshot without detections\n                  const videoElement = videoRef.current;\n                  const canvas = document.createElement('canvas');\n                  canvas.width = videoElement.videoWidth;\n                  canvas.height = videoElement.videoHeight;\n\n                  if (canvas.width > 0 && canvas.height > 0) {\n                    const ctx = canvas.getContext('2d');\n                    ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n\n                    showSnapshotPreview(canvas.toDataURL('image/jpeg', 0.95), `Snapshot: ${stream.name}`);\n                  }\n                }\n              }\n            }}\n          />\n        </div>\n        <button\n          className=\"fullscreen-btn\"\n          title=\"Toggle Fullscreen\"\n          data-id={streamId}\n          data-name={stream.name}\n          onClick={(e) => onToggleFullscreen(stream.name, e, cellRef.current)}\n          style={{\n            backgroundColor: 'transparent',\n            border: 'none',\n            padding: '5px',\n            borderRadius: '4px',\n            color: 'white',\n            cursor: 'pointer'\n          }}\n          onMouseOver={(e) => e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.2)'}\n          onMouseOut={(e) => e.currentTarget.style.backgroundColor = 'transparent'}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\"></path></svg>\n        </button>\n      </div>\n\n      {/* Loading indicator */}\n      {isLoading && (\n        <div style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, zIndex: 5, pointerEvents: 'none' }}>\n          <LoadingIndicator message=\"Connecting...\" />\n        </div>\n      )}\n\n      {/* Error indicator */}\n      {error && (\n        <div\n          className=\"error-indicator\"\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            color: 'white',\n            zIndex: 5,\n            textAlign: 'center'\n          }}\n        >\n          <div\n            className=\"error-content\"\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n              width: '80%',\n              maxWidth: '300px',\n              padding: '20px',\n              borderRadius: '8px',\n              backgroundColor: 'rgba(0, 0, 0, 0.5)'\n            }}\n          >\n            <div\n              className=\"error-icon\"\n              style={{\n                fontSize: '28px',\n                marginBottom: '15px',\n                fontWeight: 'bold',\n                width: '40px',\n                height: '40px',\n                lineHeight: '40px',\n                borderRadius: '50%',\n                backgroundColor: 'rgba(220, 38, 38, 0.8)',\n                textAlign: 'center'\n              }}\n            >\n              !\n            </div>\n            <p style={{\n              marginBottom: '20px',\n              textAlign: 'center',\n              width: '100%',\n              fontSize: '14px',\n              lineHeight: '1.4'\n            }}>\n              {error}\n            </p>\n            <button\n              className=\"retry-button\"\n              onClick={handleRetry}\n              style={{\n                padding: '8px 20px',\n                backgroundColor: '#2563eb',\n                color: 'white',\n                borderRadius: '4px',\n                border: 'none',\n                cursor: 'pointer',\n                fontWeight: 'bold',\n                fontSize: '14px',\n                boxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)',\n                transition: 'background-color 0.2s ease'\n              }}\n              onMouseOver={(e) => e.currentTarget.style.backgroundColor = '#1d4ed8'}\n              onMouseOut={(e) => e.currentTarget.style.backgroundColor = '#2563eb'}\n            >\n              Retry\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","/**\n * LightNVR Web Interface WebRTCView Component\n * Preact component for the WebRTC view page\n */\n\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'preact/hooks';\nimport { setupModals, addModalStyles } from './UI.jsx';\nimport { showStatusMessage } from './ToastContainer.jsx';\nimport { useFullscreenManager, FullscreenManager } from './FullscreenManager.jsx';\nimport { useQuery, useQueryClient } from '../../query-client.js';\nimport { WebRTCVideoCell } from './WebRTCVideoCell.jsx';\nimport { SnapshotManager, useSnapshotManager } from './SnapshotManager.jsx';\n\n/**\n * WebRTCView component\n * @returns {JSX.Element} WebRTCView component\n */\nexport function WebRTCView() {\n  // Use the snapshot manager hook\n  const { takeSnapshot } = useSnapshotManager();\n\n  // Use the fullscreen manager hook\n  const { isFullscreen, setIsFullscreen, toggleFullscreen } = useFullscreenManager();\n\n  // State for streams and layout\n  const [streams, setStreams] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Initialize layout from URL or sessionStorage if available\n  const [layout, setLayout] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const layoutParam = urlParams.get('layout');\n    if (layoutParam) {\n      return layoutParam;\n    }\n    // Check sessionStorage as a backup\n    const storedLayout = sessionStorage.getItem('webrtc_layout');\n    return storedLayout || '4';\n  });\n\n  // Initialize selectedStream from URL or sessionStorage if available\n  const [selectedStream, setSelectedStream] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const streamParam = urlParams.get('stream');\n    if (streamParam) {\n      return streamParam;\n    }\n    // Check sessionStorage as a backup\n    const storedStream = sessionStorage.getItem('webrtc_selected_stream');\n    return storedStream || '';\n  });\n\n  // Initialize currentPage from URL or sessionStorage if available (URL uses 1-based indexing, internal state uses 0-based)\n  const [currentPage, setCurrentPage] = useState(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const pageParam = urlParams.get('page');\n    if (pageParam) {\n      // Convert from 1-based (URL) to 0-based (internal)\n      return Math.max(0, parseInt(pageParam, 10) - 1);\n    }\n    // Check sessionStorage as a backup\n    const storedPage = sessionStorage.getItem('webrtc_current_page');\n    if (storedPage) {\n      // Convert from 1-based (stored) to 0-based (internal)\n      return Math.max(0, parseInt(storedPage, 10) - 1);\n    }\n    return 0;\n  });\n\n  // Get query client for fetching and invalidating queries\n  const queryClient = useQueryClient();\n\n  // Set up event listeners and UI components\n  useEffect(() => {\n    // Set up modals for snapshot preview\n    setupModals();\n    addModalStyles();\n  }, []);\n\n  // Fetch streams using preact-query\n  const {\n    data: streamsData,\n    isLoading: isLoadingStreams,\n    error: streamsError\n  } = useQuery(\n    'streams',\n    '/api/streams',\n    {\n      timeout: 15000, // 15 second timeout\n      retries: 2,     // Retry twice\n      retryDelay: 1000 // 1 second between retries\n    }\n  );\n\n  // Update loading state based on streams query status\n  useEffect(() => {\n    setIsLoading(isLoadingStreams);\n  }, [isLoadingStreams]);\n\n  // Process streams data when it's loaded\n  useEffect(() => {\n    if (streamsData && Array.isArray(streamsData)) {\n      // Process the streams data\n      const processStreams = async () => {\n        try {\n          // Filter and process the streams\n          const filteredStreams = await filterStreamsForWebRTC(streamsData);\n\n          if (filteredStreams.length > 0) {\n            setStreams(filteredStreams);\n\n            // Set selectedStream based on URL parameter if it exists and is valid\n            const urlParams = new URLSearchParams(window.location.search);\n            const streamParam = urlParams.get('stream');\n\n            if (streamParam && filteredStreams.some(stream => stream.name === streamParam)) {\n              // If the stream from URL exists in the loaded streams, use it\n              setSelectedStream(streamParam);\n            } else if (!selectedStream || !filteredStreams.some(stream => stream.name === selectedStream)) {\n              // Otherwise use the first stream if selectedStream is not set or invalid\n              setSelectedStream(filteredStreams[0].name);\n            }\n          } else {\n            console.warn('No streams available for WebRTC view after filtering');\n          }\n        } catch (error) {\n          console.error('Error processing streams:', error);\n          showStatusMessage('Error processing streams: ' + error.message);\n        }\n      };\n\n      processStreams();\n    }\n  }, [streamsData, selectedStream]);\n\n  // Update URL when layout, page, or selectedStream changes\n  useEffect(() => {\n    // Don't update URL during initial load or when streams are empty\n    if (streams.length === 0) return;\n\n    console.log('Updating URL parameters');\n    const url = new URL(window.location);\n\n    // Handle page parameter (convert from 0-based internal to 1-based URL)\n    if (currentPage === 0) {\n      url.searchParams.delete('page');\n    } else {\n      // Add 1 to convert from 0-based (internal) to 1-based (URL)\n      url.searchParams.set('page', currentPage + 1);\n    }\n\n    // Handle layout parameter\n    if (layout !== '4') { // Only set if not the default\n      url.searchParams.set('layout', layout);\n    } else {\n      // Remove layout parameter if it's the default value\n      url.searchParams.delete('layout');\n    }\n\n    // Handle selectedStream parameter\n    if (layout === '1' && selectedStream) {\n      url.searchParams.set('stream', selectedStream);\n    } else {\n      // Remove stream parameter if not in single stream mode\n      url.searchParams.delete('stream');\n    }\n\n    // Update URL without reloading the page\n    window.history.replaceState({}, '', url);\n\n    // Also update sessionStorage\n    if (currentPage > 0) {\n      sessionStorage.setItem('webrtc_current_page', (currentPage + 1).toString());\n    } else {\n      sessionStorage.removeItem('webrtc_current_page');\n    }\n\n    if (layout !== '4') {\n      sessionStorage.setItem('webrtc_layout', layout);\n    } else {\n      sessionStorage.removeItem('webrtc_layout');\n    }\n\n    if (layout === '1' && selectedStream) {\n      sessionStorage.setItem('webrtc_selected_stream', selectedStream);\n    } else {\n      sessionStorage.removeItem('webrtc_selected_stream');\n    }\n  }, [currentPage, layout, selectedStream, streams.length]);\n\n  /**\n   * Filter streams for WebRTC view\n   * @param {Array} streams - Array of streams\n   * @returns {Promise<Array>} Promise resolving to filtered array of streams\n   */\n  const filterStreamsForWebRTC = async (streams) => {\n    try {\n      if (!streams || !Array.isArray(streams)) {\n        console.warn('No streams data provided to filter');\n        return [];\n      }\n\n      // For WebRTC view, we need to fetch full details for each stream\n      const streamPromises = streams.map(async (stream) => {\n        try {\n          const streamId = stream.id || stream.name;\n\n          const streamDetails = await queryClient.fetchQuery({\n            queryKey: ['stream-details', streamId],\n            queryFn: async () => {\n              const response = await fetch(`/api/streams/${encodeURIComponent(streamId)}`);\n              if (!response.ok) {\n                throw new Error(`Failed to load details for stream ${stream.name}`);\n              }\n              return response.json();\n            },\n            staleTime: 30000 // 30 seconds\n          });\n\n          return streamDetails;\n        } catch (error) {\n          console.error(`Error loading details for stream ${stream.name}:`, error);\n          // Return the basic stream info if we can't get details\n          return stream;\n        }\n      });\n\n      const detailedStreams = await Promise.all(streamPromises);\n      console.log('Loaded detailed streams for WebRTC view:', detailedStreams);\n\n      // Filter out streams that are soft deleted, inactive, or not configured for streaming\n      const filteredStreams = detailedStreams.filter(stream => {\n        // Filter out soft deleted streams\n        if (stream.is_deleted) {\n          console.log(`Stream ${stream.name} is soft deleted, filtering out`);\n          return false;\n        }\n\n        // Filter out inactive streams\n        if (!stream.enabled) {\n          console.log(`Stream ${stream.name} is inactive, filtering out`);\n          return false;\n        }\n\n        // Filter out streams not configured for streaming\n        if (!stream.streaming_enabled) {\n          console.log(`Stream ${stream.name} is not configured for streaming, filtering out`);\n          return false;\n        }\n\n        return true;\n      });\n\n      console.log('Filtered streams for WebRTC view:', filteredStreams);\n\n      return filteredStreams || [];\n    } catch (error) {\n      console.error('Error filtering streams for WebRTC view:', error);\n      showStatusMessage('Error processing streams: ' + error.message);\n      return [];\n    }\n  };\n\n  /**\n   * Get maximum number of streams to display based on layout\n   * @returns {number} Maximum number of streams\n   */\n  const getMaxStreamsForLayout = useCallback(() => {\n    switch (layout) {\n      case '1': return 1;  // Single view\n      case '2': return 2;  // 2x1 grid\n      case '4': return 4;  // 2x2 grid\n      case '6': return 6;  // 2x3 grid\n      case '9': return 9;  // 3x3 grid\n      case '16': return 16; // 4x4 grid\n      default: return 4;\n    }\n  }, [layout]);\n\n  /**\n   * Get streams to show based on layout, selected stream, and pagination\n   * @returns {Array} Streams to show\n   */\n  const getStreamsToShow = useCallback(() => {\n    // Filter streams based on layout and selected stream\n    let streamsToShow = streams;\n\n    if (layout === '1' && selectedStream) {\n      streamsToShow = streams.filter(stream => stream.name === selectedStream);\n    } else {\n      // Apply pagination\n      const maxStreams = getMaxStreamsForLayout();\n      const totalPages = Math.ceil(streams.length / maxStreams);\n\n      // Ensure current page is valid\n      if (currentPage >= totalPages && totalPages > 0) {\n        return []; // Will be handled by the effect that watches currentPage\n      }\n\n      // Get streams for current page\n      const startIdx = currentPage * maxStreams;\n      const endIdx = Math.min(startIdx + maxStreams, streams.length);\n      streamsToShow = streams.slice(startIdx, endIdx);\n    }\n\n    return streamsToShow;\n  }, [streams, layout, selectedStream, currentPage]);\n\n  // Ensure current page is valid when streams or layout changes\n  useEffect(() => {\n    if (streams.length === 0) return;\n\n    const maxStreams = getMaxStreamsForLayout();\n    const totalPages = Math.ceil(streams.length / maxStreams);\n\n    if (currentPage >= totalPages) {\n      setCurrentPage(Math.max(0, totalPages - 1));\n    }\n  }, [streams, layout, currentPage, getMaxStreamsForLayout]);\n\n  /**\n   * Toggle fullscreen mode for a specific stream\n   * @param {string} streamName - Stream name\n   * @param {Event} event - Click event\n   * @param {HTMLElement} cellElement - The video cell element\n   */\n  const toggleStreamFullscreen = (streamName, event, cellElement) => {\n    // Prevent default button behavior\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    if (!streamName) {\n      console.error('Stream name not provided for fullscreen toggle');\n      return;\n    }\n\n    console.log(`Toggling fullscreen for stream: ${streamName}`);\n\n    if (!cellElement) {\n      console.error('Video cell element not provided for fullscreen toggle');\n      return;\n    }\n\n    if (!document.fullscreenElement) {\n      console.log('Entering fullscreen mode for video cell');\n      cellElement.requestFullscreen().catch(err => {\n        console.error(`Error attempting to enable fullscreen: ${err.message}`);\n        showStatusMessage(`Could not enable fullscreen mode: ${err.message}`);\n      });\n    } else {\n      console.log('Exiting fullscreen mode');\n      document.exitFullscreen();\n    }\n  };\n\n  // Memoize the streams to show to prevent unnecessary re-renders\n  const streamsToShow = useMemo(() => getStreamsToShow(), [streams, layout, selectedStream, currentPage, getMaxStreamsForLayout]);\n\n  return (\n    <section\n      id=\"live-page\"\n      className={`page ${isFullscreen ? 'fullscreen-mode' : ''}`}\n    >\n      {/* Include the SnapshotManager component */}\n      <SnapshotManager />\n\n      {/* Include the FullscreenManager component */}\n      <FullscreenManager\n        isFullscreen={isFullscreen}\n        setIsFullscreen={setIsFullscreen}\n        targetId=\"live-page\"\n      />\n\n      <div className=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\" style={{ position: 'relative', zIndex: 10, pointerEvents: 'auto' }}>\n        <div className=\"flex items-center space-x-2\">\n          <h2 className=\"text-xl font-bold mr-4\">Live View</h2>\n          <div className=\"flex space-x-2\">\n            <button\n              id=\"hls-toggle-btn\"\n              className=\"px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 inline-block text-center\"\n              style={{ position: 'relative', zIndex: 50 }} // Very high z-index to ensure clickability\n              onClick={() => {\n                window.location.href = '/hls.html';\n              }}\n            >\n              HLS View\n            </button>\n          </div>\n        </div>\n        <div className=\"controls flex items-center space-x-2\">\n          <div className=\"flex items-center\">\n            <label htmlFor=\"layout-selector\" className=\"mr-2\">Layout:</label>\n            <select\n              id=\"layout-selector\"\n              className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600\"\n              value={layout}\n              onChange={(e) => {\n                const newLayout = e.target.value;\n                setLayout(newLayout);\n                setCurrentPage(0); // Reset to first page when layout changes\n              }}\n            >\n              <option value=\"1\">1 Stream</option>\n              <option value=\"2\">2 Streams</option>\n              <option value=\"4\">4 Streams</option>\n              <option value=\"6\">6 Streams</option>\n              <option value=\"9\">9 Streams</option>\n              <option value=\"16\">16 Streams</option>\n            </select>\n          </div>\n\n          {layout === '1' && (\n            <div className=\"flex items-center\">\n              <label htmlFor=\"stream-selector\" className=\"mr-2\">Stream:</label>\n              <select\n                id=\"stream-selector\"\n                className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600\"\n                value={selectedStream}\n                onChange={(e) => {\n                  const newStream = e.target.value;\n                  setSelectedStream(newStream);\n                }}\n              >\n                {streams.map(stream => (\n                  <option key={stream.name} value={stream.name}>{stream.name}</option>\n                ))}\n              </select>\n            </div>\n          )}\n\n          <button\n            id=\"fullscreen-btn\"\n            className=\"p-2 rounded-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none\"\n            onClick={() => toggleFullscreen()}\n            title=\"Toggle Fullscreen\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                 stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <path\n                d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\"></path>\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      <div className=\"flex flex-col space-y-4 h-full\">\n        <div\n          id=\"video-grid\"\n          className={`video-container layout-${layout}`}\n        >\n          {isLoadingStreams ? (\n              <div className=\"flex justify-center items-center col-span-full row-span-full h-64 w-full\" style={{ pointerEvents: 'none', zIndex: 1 }}>\n                <div className=\"flex flex-col items-center justify-center py-8\">\n                <div\n                  className=\"inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16\"></div>\n                <p className=\"mt-4 text-gray-700 dark:text-gray-300\">Loading streams...</p>\n              </div>\n            </div>\n          ) : (isLoading && !isLoadingStreams) ? (\n            <div\n                className=\"flex justify-center items-center col-span-full row-span-full h-64 w-full\"\n                style={{\n                  pointerEvents: 'none',\n                  position: 'relative',\n                  zIndex: 1\n                }}\n            >\n              <div className=\"flex flex-col items-center justify-center py-8\">\n                <div\n                  className=\"inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16\"></div>\n                <p className=\"mt-4 text-gray-700 dark:text-gray-300\">Loading streams...</p>\n              </div>\n            </div>\n          ) : (streamsError) ? (\n            <div className=\"placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8\">\n              <p className=\"mb-6 text-gray-600 dark:text-gray-300 text-lg\">Error loading streams: {streamsError.message}</p>\n              <button\n                onClick={() => window.location.reload()}\n                className=\"btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n              >\n                Retry\n              </button>\n            </div>\n          ) : streams.length === 0 ? (\n            <div className=\"placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8\">\n              <p className=\"mb-6 text-gray-600 dark:text-gray-300 text-lg\">No streams configured</p>\n              <a href=\"streams.html\" className=\"btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\">Configure Streams</a>\n            </div>\n          ) : (\n            // Render video cells using our self-contained WebRTCVideoCell component\n            streamsToShow.map(stream => (\n              <WebRTCVideoCell\n                key={stream.name}\n                stream={stream}\n                onToggleFullscreen={toggleStreamFullscreen}\n                streamId={stream.name} // Add explicit streamId prop to prevent re-renders\n              />\n            ))\n          )}\n        </div>\n\n        {layout !== '1' && streams.length > getMaxStreamsForLayout() ? (\n          <div className=\"pagination-controls flex justify-center items-center space-x-4 mt-4\">\n            <button\n              className=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              onClick={() => {\n                console.log('Changing to previous page');\n                setCurrentPage(Math.max(0, currentPage - 1));\n              }}\n              disabled={currentPage === 0}\n            >\n              Previous\n            </button>\n\n            <span className=\"text-gray-700 dark:text-gray-300\">\n              Page {currentPage + 1} of {Math.ceil(streams.length / getMaxStreamsForLayout())}\n            </span>\n\n            <button\n              className=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              onClick={() => {\n                console.log('Changing to next page');\n                const totalPages = Math.ceil(streams.length / getMaxStreamsForLayout());\n                setCurrentPage(Math.min(totalPages - 1, currentPage + 1));\n              }}\n              disabled={currentPage >= Math.ceil(streams.length / getMaxStreamsForLayout()) - 1}\n            >\n              Next\n            </button>\n          </div>\n        ) : null}\n      </div>\n    </section>\n  );\n}\n","/**\n * LightNVR Web Interface Live View Page\n * Entry point for the live view page with WebRTC/HLS support\n */\n\nimport { render } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { LiveView } from '../components/preact/LiveView.jsx';\nimport { WebRTCView } from '../components/preact/WebRTCView.jsx';\nimport { QueryClientProvider, queryClient } from '../query-client.js';\nimport { Header } from \"../components/preact/Header.jsx\";\nimport { Footer } from \"../components/preact/Footer.jsx\";\nimport { ToastContainer } from \"../components/preact/ToastContainer.jsx\";\n\n/**\n * Main App component that conditionally renders WebRTCView or LiveView\n * based on whether WebRTC is disabled in settings\n */\nfunction App() {\n    const [isWebRTCDisabled, setIsWebRTCDisabled] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        // Check if WebRTC is disabled in settings\n        async function checkWebRTCStatus() {\n            try {\n                const response = await fetch('/api/settings');\n                if (!response.ok) {\n                    console.error('Failed to fetch settings:', response.status, response.statusText);\n                    setIsLoading(false);\n                    return;\n                }\n\n                const settings = await response.json();\n                \n                if (settings.webrtc_disabled) {\n                    console.log('WebRTC is disabled, using HLS view');\n                    setIsWebRTCDisabled(true);\n                } else {\n                    console.log('WebRTC is enabled, using WebRTC view');\n                    setIsWebRTCDisabled(false);\n                }\n            } catch (error) {\n                console.error('Error checking WebRTC status:', error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n\n        checkWebRTCStatus();\n    }, []);\n\n    if (isLoading) {\n        return <div className=\"loading\">Loading...</div>;\n    }\n\n    return (\n            <>{isWebRTCDisabled ? <LiveView isWebRTCDisabled={true} /> : <WebRTCView />}</>\n    );\n}\n\n// Render the App component when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Get the container element\n    const container = document.getElementById('main-content');\n\n    if (container) {\n        render(\n            <QueryClientProvider client={queryClient}>\n                <Header />\n                <ToastContainer />\n                <App />\n                <Footer />\n            </QueryClientProvider>,\n            container\n        );\n    }\n});\n"],"names":["WebRTCVideoCell","stream","streamId","onToggleFullscreen","isLoading","setIsLoading","useState","error","setError","isPlaying","setIsPlaying","connectionQuality","setConnectionQuality","videoRef","useRef","cellRef","peerConnectionRef","detectionOverlayRef","abortControllerRef","connectionMonitorRef","reconnectAttemptsRef","useEffect","pc","event","videoElement","e","offer","formattedOffer","auth","response","text","answer","startConnectionMonitoring","stats","packetsLost","packetsReceived","currentRtt","jitter","report","totalPackets","lossPercentage","quality","handleRetry","err","originalOnIceConnectionStateChange","track","jsxs","jsx","DetectionOverlay","SnapshotButton","canvasRef","snapshot","takeSnapshotWithDetections","showSnapshotPreview","canvas","LoadingIndicator","WebRTCView","takeSnapshot","useSnapshotManager","isFullscreen","setIsFullscreen","toggleFullscreen","useFullscreenManager","streams","setStreams","layout","setLayout","layoutParam","selectedStream","setSelectedStream","streamParam","currentPage","setCurrentPage","pageParam","storedPage","queryClient","useQueryClient","setupModals","addModalStyles","streamsData","isLoadingStreams","streamsError","useQuery","filteredStreams","filterStreamsForWebRTC","showStatusMessage","url","streamPromises","detailedStreams","getMaxStreamsForLayout","useCallback","getStreamsToShow","streamsToShow","maxStreams","totalPages","startIdx","endIdx","toggleStreamFullscreen","streamName","cellElement","useMemo","SnapshotManager","FullscreenManager","newLayout","newStream","App","isWebRTCDisabled","setIsWebRTCDisabled","checkWebRTCStatus","Fragment","LiveView","container","render","QueryClientProvider","Header","ToastContainer","Footer"],"mappings":"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"}