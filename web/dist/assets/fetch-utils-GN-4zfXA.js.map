{"version":3,"file":"fetch-utils-GN-4zfXA.js","sources":["../../js/fetch-utils.js"],"sourcesContent":["/**\n * LightNVR Web Interface Fetch Utilities\n * Enhanced fetch API with timeout, cancellation, and retry capabilities\n */\n\n/**\n * Enhanced fetch function with timeout, cancellation, and retry capabilities\n * @param {string} url - The URL to fetch\n * @param {Object} options - Fetch options\n * @param {number} [options.timeout=30000] - Timeout in milliseconds\n * @param {number} [options.retries=1] - Number of retry attempts\n * @param {number} [options.retryDelay=1000] - Delay between retries in milliseconds\n * @param {AbortSignal} [options.signal] - AbortSignal to cancel the request\n * @returns {Promise<Response>} - Fetch response\n */\nexport async function enhancedFetch(url, options = {}) {\n  const {\n    timeout = 30000,\n    retries = 1,\n    retryDelay = 1000,\n    signal: externalSignal,\n    ...fetchOptions\n  } = options;\n\n  // Log the request details\n  console.log(`enhancedFetch: ${fetchOptions.method || 'GET'} ${url}`);\n  console.debug('enhancedFetch options:', {\n    timeout,\n    retries,\n    retryDelay,\n    ...fetchOptions\n  });\n\n  // Create a timeout controller if timeout is specified\n  const timeoutController = new AbortController();\n  let timeoutId;\n  \n  if (timeout) {\n    timeoutId = setTimeout(() => {\n      console.warn(`enhancedFetch: Timeout reached for ${url}, aborting request`);\n      timeoutController.abort();\n    }, timeout);\n  }\n\n  // Create a combined signal if an external signal is provided\n  const signal = externalSignal\n    ? combineSignals(externalSignal, timeoutController.signal)\n    : timeoutController.signal;\n\n  // Add the signal to fetch options\n  const optionsWithSignal = {\n    ...fetchOptions,\n    signal\n  };\n\n  let lastError;\n  let attempt = 0;\n\n  while (attempt <= retries) {\n    try {\n      console.debug(`enhancedFetch: Attempt ${attempt + 1}/${retries + 1} for ${url}`);\n      const response = await fetch(url, optionsWithSignal);\n      \n      // Clear the timeout\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      \n      // Log the response\n      console.log(`enhancedFetch response: ${response.status} ${response.statusText} for ${url}`);\n      \n      // Check if the response is ok\n      if (!response.ok) {\n        throw new Error(`HTTP error ${response.status}: ${response.statusText}`);\n      }\n      \n      return response;\n    } catch (error) {\n      lastError = error;\n      \n      // Clear the timeout\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      \n      // Log the error\n      console.error(`enhancedFetch error (attempt ${attempt + 1}/${retries + 1}):`, error);\n      \n      // If the request was aborted, don't retry\n      if (error.name === 'AbortError') {\n        if (externalSignal && externalSignal.aborted) {\n          console.warn(`enhancedFetch: Request was cancelled by external signal for ${url}`);\n          throw new Error('Request was cancelled');\n        } else {\n          console.warn(`enhancedFetch: Request timed out for ${url}`);\n          throw new Error('Request timed out');\n        }\n      }\n      \n      // If this was the last retry, throw the error\n      if (attempt >= retries) {\n        console.error(`enhancedFetch: All ${retries + 1} attempts failed for ${url}`);\n        break;\n      }\n      \n      // Wait before retrying\n      console.log(`enhancedFetch: Waiting ${retryDelay}ms before retry ${attempt + 1} for ${url}`);\n      await new Promise(resolve => setTimeout(resolve, retryDelay));\n      \n      // Reset the timeout for the next attempt\n      if (timeout) {\n        timeoutController.abort(); // Abort the previous timeout\n        const newTimeoutController = new AbortController();\n        timeoutId = setTimeout(() => {\n          newTimeoutController.abort();\n        }, timeout);\n      }\n      \n      attempt++;\n    }\n  }\n  \n  throw lastError;\n}\n\n/**\n * Combine multiple AbortSignals into one\n * @param {...AbortSignal} signals - Signals to combine\n * @returns {AbortSignal} - Combined signal\n */\nfunction combineSignals(...signals) {\n  const controller = new AbortController();\n  \n  const onAbort = () => {\n    controller.abort();\n    signals.forEach(signal => {\n      signal.removeEventListener('abort', onAbort);\n    });\n  };\n  \n  signals.forEach(signal => {\n    if (signal.aborted) {\n      onAbort();\n    } else {\n      signal.addEventListener('abort', onAbort);\n    }\n  });\n  \n  return controller.signal;\n}\n\n/**\n * Create a request controller for managing fetch requests\n * @returns {Object} - Request controller object\n */\nexport function createRequestController() {\n  const controller = new AbortController();\n  \n  return {\n    signal: controller.signal,\n    abort: () => controller.abort(),\n    isAborted: () => controller.signal.aborted\n  };\n}\n\n/**\n * Fetch JSON data with enhanced fetch\n * @param {string} url - The URL to fetch\n * @param {Object} options - Fetch options\n * @returns {Promise<any>} - Parsed JSON data\n */\nexport async function fetchJSON(url, options = {}) {\n  console.log(`fetchJSON: ${options.method || 'GET'} ${url}`);\n  try {\n    const response = await enhancedFetch(url, options);\n    console.log(`fetchJSON: Parsing JSON response from ${url}`);\n    const data = await response.json();\n    console.log(`fetchJSON: Successfully parsed JSON from ${url}`);\n    return data;\n  } catch (error) {\n    console.error(`fetchJSON: Error fetching or parsing JSON from ${url}:`, error);\n    throw error;\n  }\n}\n"],"names":["enhancedFetch","url","options","timeout","retries","retryDelay","externalSignal","fetchOptions","timeoutController","timeoutId","signal","combineSignals","optionsWithSignal","lastError","attempt","response","error","resolve","newTimeoutController","signals","controller","onAbort","createRequestController","fetchJSON","data"],"mappings":"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"}