{"version":3,"file":"RecordingsView-legacy-DnhoMByp.js","sources":["../../js/components/preact/recordings/FiltersSidebar.js","../../js/components/preact/recordings/ActiveFilters.js","../../js/components/preact/RecordingsView.js","../../js/components/preact/recordings/formatUtils.js","../../js/components/preact/recordings/RecordingsTable.js","../../js/components/preact/recordings/PaginationControls.js","../../js/components/preact/recordings/recordingsAPI.js","../../js/components/preact/recordings/urlUtils.js"],"sourcesContent":["/**\n * FiltersSidebar component for RecordingsView\n */\n\n\nimport { html } from '../../../html-helper.js';\n\n/**\n * FiltersSidebar component\n * @param {Object} props Component props\n * @returns {JSX.Element} FiltersSidebar component\n */\nexport function FiltersSidebar({\n  filters,\n  setFilters,\n  pagination,\n  setPagination,\n  streams,\n  filtersVisible,\n  applyFilters,\n  resetFilters,\n  handleDateRangeChange,\n  setDefaultDateRange\n}) {\n  return html`\n    <aside id=\"filters-sidebar\" \n           class=${`filters-sidebar w-full md:w-64 bg-white dark:bg-gray-800 rounded-lg shadow p-4 md:sticky md:top-4 md:self-start transition-all duration-300 ${!filtersVisible ? 'hidden md:block' : ''}`}>\n      <div class=\"filter-group mb-4\">\n        <h3 class=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Date Range</h3>\n        <div class=\"filter-option mb-2\">\n          <label for=\"date-range-select\" class=\"block mb-1 text-sm font-medium\">Quick Select:</label>\n          <select id=\"date-range-select\" \n                  class=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value=${filters.dateRange}\n                  onChange=${handleDateRangeChange}>\n            <option value=\"today\">Today</option>\n            <option value=\"yesterday\">Yesterday</option>\n            <option value=\"last7days\">Last 7 Days</option>\n            <option value=\"last30days\">Last 30 Days</option>\n            <option value=\"custom\">Custom Range</option>\n          </select>\n        </div>\n        \n        <div id=\"custom-date-range\" \n             class=\"filter-option space-y-3\"\n             style=${filters.dateRange === 'custom' ? 'display: block' : 'display: none'}>\n          <div class=\"space-y-1\">\n            <label for=\"start-date\" class=\"block text-sm font-medium\">Start Date:</label>\n            <input type=\"date\" id=\"start-date\" \n                   class=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                   value=${filters.startDate}\n                   onChange=${e => setFilters(prev => ({ ...prev, startDate: e.target.value }))} />\n            <div class=\"mt-1\">\n              <label for=\"start-time\" class=\"block text-sm font-medium\">Time:</label>\n              <input type=\"time\" id=\"start-time\" \n                     class=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                     value=${filters.startTime}\n                     onChange=${e => setFilters(prev => ({ ...prev, startTime: e.target.value }))} />\n            </div>\n          </div>\n          \n          <div class=\"space-y-1\">\n            <label for=\"end-date\" class=\"block text-sm font-medium\">End Date:</label>\n            <input type=\"date\" id=\"end-date\" \n                   class=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                   value=${filters.endDate}\n                   onChange=${e => setFilters(prev => ({ ...prev, endDate: e.target.value }))} />\n            <div class=\"mt-1\">\n              <label for=\"end-time\" class=\"block text-sm font-medium\">Time:</label>\n              <input type=\"time\" id=\"end-time\" \n                     class=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                     value=${filters.endTime}\n                     onChange=${e => setFilters(prev => ({ ...prev, endTime: e.target.value }))} />\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"filter-group mb-4\">\n        <h3 class=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Stream</h3>\n        <div class=\"filter-option\">\n          <select id=\"stream-filter\" \n                  class=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value=${filters.streamId}\n                  onChange=${e => setFilters(prev => ({ ...prev, streamId: e.target.value }))}>\n            <option value=\"all\">All Streams</option>\n            ${streams.map(stream => html`\n              <option key=${stream.name} value=${stream.name}>${stream.name}</option>\n            `)}\n          </select>\n        </div>\n      </div>\n      \n      <div class=\"filter-group mb-4\">\n        <h3 class=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Recording Type</h3>\n        <div class=\"filter-option\">\n          <select id=\"detection-filter\" \n                  class=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value=${filters.recordingType}\n                  onChange=${e => setFilters(prev => ({ ...prev, recordingType: e.target.value }))}>\n            <option value=\"all\">All Recordings</option>\n            <option value=\"detection\">Detection Events Only</option>\n          </select>\n        </div>\n      </div>\n      \n      <div class=\"filter-group mb-4\">\n        <h3 class=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Display Options</h3>\n        <div class=\"filter-option\">\n          <label for=\"page-size\" class=\"block mb-1 text-sm font-medium\">Items per page:</label>\n          <select id=\"page-size\" \n                  class=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value=${pagination.pageSize}\n                  onChange=${e => setPagination(prev => ({ ...prev, pageSize: parseInt(e.target.value, 10) }))}>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n            <option value=\"50\">50</option>\n            <option value=\"100\">100</option>\n          </select>\n        </div>\n      </div>\n      \n      <div class=\"filter-actions flex space-x-2\">\n        <button id=\"apply-filters-btn\" \n                class=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n                onClick=${applyFilters}>\n          Apply Filters\n        </button>\n        <button id=\"reset-filters-btn\" \n                class=\"flex-1 px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition-colors dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600\"\n                onClick=${resetFilters}>\n          Reset\n        </button>\n      </div>\n    </aside>\n  `;\n}\n","/**\n * ActiveFilters component for RecordingsView\n */\n\n\nimport { html } from '../../../html-helper.js';\n\n/**\n * ActiveFilters component\n * @param {Object} props Component props\n * @returns {JSX.Element} ActiveFilters component\n */\nexport function ActiveFilters({ activeFiltersDisplay, removeFilter, hasActiveFilters }) {\n  if (!hasActiveFilters) {\n    return null;\n  }\n  \n  return html`\n    <div id=\"active-filters\" \n         class=\"active-filters mb-4 p-3 bg-blue-50 dark:bg-blue-900/30 rounded-lg flex flex-wrap gap-2\">\n      ${activeFiltersDisplay.map((filter, index) => html`\n        <div key=${index} class=\"filter-tag inline-flex items-center px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-200\">\n          <span>${filter.label}</span>\n          <button class=\"ml-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 focus:outline-none\"\n                  onClick=${() => removeFilter(filter.key)}>\n            Ã—\n          </button>\n        </div>\n      `)}\n    </div>\n  `;\n}\n","/**\n * LightNVR Web Interface RecordingsView Component\n * Preact component for the recordings page\n */\n\nimport { h } from 'preact';\nimport { html } from '../../html-helper.js';\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { showStatusMessage, showVideoModal, DeleteConfirmationModal } from './UI.js';\nimport { ContentLoader } from './LoadingIndicator.js';\n\n// Import components\nimport { FiltersSidebar } from './recordings/FiltersSidebar.js';\nimport { ActiveFilters } from './recordings/ActiveFilters.js';\nimport { RecordingsTable } from './recordings/RecordingsTable.js';\nimport { PaginationControls } from './recordings/PaginationControls.js';\n\n// Import utilities\nimport { formatUtils } from './recordings/formatUtils.js';\nimport { recordingsAPI } from './recordings/recordingsAPI.js';\nimport { urlUtils } from './recordings/urlUtils.js';\nimport { useQueryClient, invalidateQueries } from '../../query-client.js';\n\n/**\n * RecordingsView component\n * @returns {JSX.Element} RecordingsView component\n */\nexport function RecordingsView() {\n  const [recordings, setRecordings] = useState([]);\n  const [streams, setStreams] = useState([]);\n  const [filtersVisible, setFiltersVisible] = useState(true);\n  const [sortField, setSortField] = useState('start_time');\n  const [sortDirection, setSortDirection] = useState('desc');\n  const [filters, setFilters] = useState({\n    dateRange: 'last7days',\n    startDate: '',\n    startTime: '00:00',\n    endDate: '',\n    endTime: '23:59',\n    streamId: 'all',\n    recordingType: 'all'\n  });\n  const [pagination, setPagination] = useState({\n    currentPage: 1,\n    pageSize: 20,\n    totalItems: 0,\n    totalPages: 1,\n    startItem: 0,\n    endItem: 0\n  });\n  const [hasActiveFilters, setHasActiveFilters] = useState(false);\n  const [activeFiltersDisplay, setActiveFiltersDisplay] = useState([]);\n  const [selectedRecordings, setSelectedRecordings] = useState({});\n  const [selectAll, setSelectAll] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [deleteMode, setDeleteMode] = useState('selected'); // 'selected' or 'all'\n  const recordingsTableBodyRef = useRef(null);\n\n  // Get query client for invalidating queries\n  const queryClient = useQueryClient();\n\n  // Fetch streams using preact-query\n  const {\n    data: streamsData,\n    isLoading: isLoadingStreams,\n    error: streamsError\n  } = recordingsAPI.hooks.useStreams();\n\n  // Update streams state when data is loaded\n  useEffect(() => {\n    if (streamsData && Array.isArray(streamsData)) {\n      setStreams(streamsData);\n    }\n  }, [streamsData]);\n\n  // Handle streams error\n  useEffect(() => {\n    if (streamsError) {\n      console.error('Error loading streams for filter:', streamsError);\n      showStatusMessage('Error loading streams: ' + streamsError.message);\n    }\n  }, [streamsError]);\n\n  // Initialize component\n  useEffect(() => {\n    // Set default date range\n    setDefaultDateRange();\n\n    // Check for URL parameters\n    const urlFilters = urlUtils.getFiltersFromUrl();\n\n    if (urlFilters) {\n      console.log('Found URL filters:', urlFilters);\n\n      // Check specifically for detection parameter\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n        // Ensure recordingType is set to 'detection'\n        urlFilters.filters.recordingType = 'detection';\n      }\n\n      // Update state with URL filters\n      setFilters(urlFilters.filters);\n      setPagination(prev => ({\n        ...prev,\n        currentPage: urlFilters.page || 1,\n        pageSize: urlFilters.limit || 20\n      }));\n      setSortField(urlFilters.sort || 'start_time');\n      setSortDirection(urlFilters.order || 'desc');\n    }\n\n    // Handle responsive behavior\n    handleResponsiveFilters();\n    window.addEventListener('resize', handleResponsiveFilters);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResponsiveFilters);\n    };\n  }, []);\n\n  // Update active filters when filters change\n  useEffect(() => {\n    updateActiveFilters();\n  }, [filters]);\n\n  // Set default date range\n  const setDefaultDateRange = () => {\n    const now = new Date();\n    const sevenDaysAgo = new Date(now);\n    sevenDaysAgo.setDate(now.getDate() - 7);\n\n    setFilters(prev => ({\n      ...prev,\n      endDate: now.toISOString().split('T')[0],\n      startDate: sevenDaysAgo.toISOString().split('T')[0]\n    }));\n  };\n\n  // Fetch recordings using preact-query\n  const {\n    data: recordingsData,\n    isLoading: isLoadingRecordings,\n    error: recordingsError,\n    refetch: refetchRecordings\n  } = recordingsAPI.hooks.useRecordings(filters, pagination, sortField, sortDirection);\n\n  // Update recordings state when data is loaded\n  useEffect(() => {\n    if (recordingsData) {\n      // Store recordings in the component state\n      const recordingsArray = recordingsData.recordings || [];\n      setRecordings(recordingsArray);\n      setHasData(recordingsArray.length > 0);\n\n      // Update pagination\n      if (recordingsData.pagination) {\n        updatePaginationFromResponse(recordingsData, pagination.currentPage);\n      }\n    }\n  }, [recordingsData]);\n\n  // Handle recordings error\n  useEffect(() => {\n    if (recordingsError) {\n      console.error('Error loading recordings:', recordingsError);\n      showStatusMessage('Error loading recordings: ' + recordingsError.message);\n      setHasData(false);\n    }\n  }, [recordingsError]);\n\n  // Load filters from URL\n  const loadFiltersFromUrl = () => {\n    const urlFilters = urlUtils.getFiltersFromUrl();\n    if (urlFilters) {\n      // Check specifically for detection parameter\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n        // Ensure recordingType is set to 'detection'\n        urlFilters.filters.recordingType = 'detection';\n      }\n\n      setFilters(urlFilters.filters);\n      setPagination(prev => ({\n        ...prev,\n        currentPage: urlFilters.page || 1,\n        pageSize: urlFilters.limit || 20\n      }));\n      setSortField(urlFilters.sort || 'start_time');\n      setSortDirection(urlFilters.order || 'desc');\n\n      // If detection parameter is present, ensure it's included in the URL when we update it\n      if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n        setTimeout(() => {\n          const currentUrl = new URL(window.location.href);\n          if (!currentUrl.searchParams.has('detection')) {\n            currentUrl.searchParams.set('detection', '1');\n            window.history.replaceState({ path: currentUrl.href }, '', currentUrl.href);\n          }\n        }, 0);\n      }\n\n      return urlFilters; // Return the filters so we can use them directly\n    }\n    return null;\n  };\n\n  // Handle responsive filters\n  const handleResponsiveFilters = () => {\n    // On mobile, hide filters by default\n    if (window.innerWidth < 768) {\n      setFiltersVisible(false);\n    } else {\n      setFiltersVisible(true);\n    }\n  };\n\n  // Toggle filters visibility\n  const toggleFilters = () => {\n    setFiltersVisible(!filtersVisible);\n  };\n\n  // State for data status\n  const [hasData, setHasData] = useState(false);\n\n  // Load recordings (now just updates pagination and URL)\n  const loadRecordings = (page = pagination.currentPage, updateUrl = true) => {\n    // Debug log to check filters\n    console.log('Loading recordings with filters:', JSON.stringify(filters));\n\n    // Create a pagination object with the specified page\n    const paginationWithPage = {\n      ...pagination,\n      currentPage: page\n    };\n\n    // Update pagination state\n    setPagination(paginationWithPage);\n\n    // Update URL with filters if requested\n    if (updateUrl) {\n      urlUtils.updateUrlWithFilters(filters, paginationWithPage, sortField, sortDirection);\n    }\n  };\n\n  // Update pagination from API response\n  const updatePaginationFromResponse = (data, currentPage) => {\n    // Use the provided page parameter instead of the state\n    currentPage = currentPage || pagination.currentPage;\n\n    if (data.pagination) {\n      const pageSize = data.pagination.limit || 20;\n      const totalItems = data.pagination.total || 0;\n      const totalPages = data.pagination.pages || 1;\n\n      // Calculate start and end items based on current page\n      let startItem = 0;\n      let endItem = 0;\n\n      if (data.recordings.length > 0) {\n        startItem = (currentPage - 1) * pageSize + 1;\n        endItem = Math.min(startItem + data.recordings.length - 1, totalItems);\n      }\n\n      console.log('Pagination update:', {\n        currentPage,\n        pageSize,\n        totalItems,\n        totalPages,\n        startItem,\n        endItem,\n        recordingsLength: data.recordings.length\n      });\n\n      setPagination(prev => ({\n        ...prev,\n        totalItems,\n        totalPages,\n        pageSize,\n        startItem,\n        endItem\n      }));\n    } else {\n      // Fallback if pagination object is not provided\n      const pageSize = pagination.pageSize;\n      const totalItems = data.total || 0;\n      const totalPages = Math.ceil(totalItems / pageSize) || 1;\n\n      // Calculate start and end items based on current page\n      let startItem = 0;\n      let endItem = 0;\n\n      if (data.recordings.length > 0) {\n        startItem = (currentPage - 1) * pageSize + 1;\n        endItem = Math.min(startItem + data.recordings.length - 1, totalItems);\n      }\n\n      console.log('Pagination update (fallback):', {\n        currentPage,\n        pageSize,\n        totalItems,\n        totalPages,\n        startItem,\n        endItem,\n        recordingsLength: data.recordings.length\n      });\n\n      setPagination(prev => ({\n        ...prev,\n        totalItems,\n        totalPages,\n        startItem,\n        endItem\n      }));\n    }\n  };\n\n  // Handle date range change\n  const handleDateRangeChange = (e) => {\n    const newDateRange = e.target.value;\n\n    setFilters(prev => ({\n      ...prev,\n      dateRange: newDateRange\n    }));\n\n    if (newDateRange === 'custom') {\n      // If custom is selected, make sure we have default dates\n      if (!filters.startDate || !filters.endDate) {\n        const now = new Date();\n        const sevenDaysAgo = new Date(now);\n        sevenDaysAgo.setDate(now.getDate() - 7);\n\n        setFilters(prev => ({\n          ...prev,\n          endDate: now.toISOString().split('T')[0],\n          startDate: sevenDaysAgo.toISOString().split('T')[0]\n        }));\n      }\n    }\n  };\n\n  // Update active filters\n  const updateActiveFilters = () => {\n    const activeFilters = urlUtils.getActiveFiltersDisplay(filters);\n    setHasActiveFilters(activeFilters.length > 0);\n    setActiveFiltersDisplay(activeFilters);\n  };\n\n  // Apply filters\n  const applyFilters = (resetToFirstPage = true) => {\n    // Reset to first page when applying filters (unless specified otherwise)\n    if (resetToFirstPage) {\n      setPagination(prev => ({\n        ...prev,\n        currentPage: 1\n      }));\n    }\n\n    // Update URL with filters\n    urlUtils.updateUrlWithFilters(\n      filters,\n      resetToFirstPage ? {...pagination, currentPage: 1} : pagination,\n      sortField,\n      sortDirection\n    );\n  };\n\n  // Reset filters\n  const resetFilters = () => {\n    // Create default filters\n    const defaultFilters = {\n      dateRange: 'last7days',\n      startDate: '',\n      startTime: '00:00',\n      endDate: '',\n      endTime: '23:59',\n      streamId: 'all',\n      recordingType: 'all'\n    };\n\n    // Get default date range\n    const now = new Date();\n    const sevenDaysAgo = new Date(now);\n    sevenDaysAgo.setDate(now.getDate() - 7);\n\n    defaultFilters.endDate = now.toISOString().split('T')[0];\n    defaultFilters.startDate = sevenDaysAgo.toISOString().split('T')[0];\n\n    // Reset filter state\n    setFilters(defaultFilters);\n\n    // Reset pagination to first page\n    setPagination(prev => ({\n      ...prev,\n      currentPage: 1\n    }));\n\n    // Reset sort\n    setSortField('start_time');\n    setSortDirection('desc');\n\n    // Clear all URL parameters by replacing the current URL with the base URL\n    const baseUrl = window.location.pathname;\n    window.history.pushState({ path: baseUrl }, '', baseUrl);\n  };\n\n  // Remove filter\n  const removeFilter = (key) => {\n    switch (key) {\n      case 'dateRange':\n        setFilters(prev => ({\n          ...prev,\n          dateRange: 'last7days'\n        }));\n        break;\n      case 'streamId':\n        setFilters(prev => ({\n          ...prev,\n          streamId: 'all'\n        }));\n        break;\n      case 'recordingType':\n        setFilters(prev => ({\n          ...prev,\n          recordingType: 'all'\n        }));\n        break;\n    }\n\n    applyFilters();\n  };\n\n  // Sort by field\n  const sortBy = (field) => {\n    if (sortField === field) {\n      // Toggle direction if already sorting by this field\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      // Default to descending for start_time, ascending for others\n      setSortDirection(field === 'start_time' ? 'desc' : 'asc');\n      setSortField(field);\n    }\n\n    // Reset to first page\n    setPagination(prev => ({\n      ...prev,\n      currentPage: 1\n    }));\n\n    // Update URL with new sort parameters\n    urlUtils.updateUrlWithFilters(\n      filters,\n      {...pagination, currentPage: 1},\n      field,\n      field === sortField ? (sortDirection === 'asc' ? 'desc' : 'asc') : (field === 'start_time' ? 'desc' : 'asc')\n    );\n  };\n\n  // Go to page\n  const goToPage = (page) => {\n    if (page < 1 || page > pagination.totalPages) return;\n\n    // Set the current page in pagination state\n    setPagination(prev => ({\n      ...prev,\n      currentPage: page\n    }));\n\n    // Update URL with all filters and the new page\n    urlUtils.updateUrlWithFilters(filters, {...pagination, currentPage: page}, sortField, sortDirection);\n  };\n\n  // Toggle selection of a recording\n  const toggleRecordingSelection = (recordingId) => {\n    setSelectedRecordings(prev => ({\n      ...prev,\n      [recordingId]: !prev[recordingId]\n    }));\n  };\n\n  // Toggle select all recordings\n  const toggleSelectAll = () => {\n    const newSelectAll = !selectAll;\n    setSelectAll(newSelectAll);\n\n    const newSelectedRecordings = {};\n    if (newSelectAll) {\n      // Select all recordings\n      recordings.forEach(recording => {\n        newSelectedRecordings[recording.id] = true;\n      });\n    }\n    // Always update selectedRecordings, even when deselecting all\n    setSelectedRecordings(newSelectedRecordings);\n  };\n\n  // Get count of selected recordings\n  const getSelectedCount = () => {\n    return Object.values(selectedRecordings).filter(Boolean).length;\n  };\n\n  // Open delete confirmation modal\n  const openDeleteModal = (mode) => {\n    setDeleteMode(mode);\n    setIsDeleteModalOpen(true);\n  };\n\n  // Close delete confirmation modal\n  const closeDeleteModal = () => {\n    setIsDeleteModalOpen(false);\n  };\n\n  // Handle delete confirmation\n  const handleDeleteConfirm = async () => {\n    closeDeleteModal();\n    \n    // Save current URL parameters before deletion\n    const currentUrlParams = new URLSearchParams(window.location.search);\n    const currentSortField = currentUrlParams.get('sort') || sortField;\n    const currentSortDirection = currentUrlParams.get('order') || sortDirection;\n    const currentPage = parseInt(currentUrlParams.get('page'), 10) || pagination.currentPage;\n    \n    if (deleteMode === 'selected') {\n      // Use the recordingsAPI to delete selected recordings\n      const result = await recordingsAPI.deleteSelectedRecordings(selectedRecordings);\n      \n      // Reset selection\n      setSelectedRecordings({});\n      setSelectAll(false);\n      \n      // Only reload if some recordings were deleted successfully\n      if (result.succeeded > 0) {\n        // Reload recordings with preserved parameters\n        reloadRecordingsWithPreservedParams(currentSortField, currentSortDirection, currentPage);\n      }\n    } else {\n      // Use the recordingsAPI to delete all filtered recordings\n      const result = await recordingsAPI.deleteAllFilteredRecordings(filters);\n      \n      // Reset selection\n      setSelectedRecordings({});\n      setSelectAll(false);\n      \n      // Only reload if some recordings were deleted successfully\n      if (result.succeeded > 0) {\n        // Reload recordings\n        loadRecordings();\n      }\n    }\n  };\n\n  // Helper function to reload recordings with preserved parameters\n  const reloadRecordingsWithPreservedParams = (sortField, sortDirection, page) => {\n    // Set the sort parameters directly\n    setSortField(sortField);\n    setSortDirection(sortDirection);\n\n    // Update pagination with the preserved page\n    setPagination(prev => ({\n      ...prev,\n      currentPage: page\n    }));\n\n    // Wait for state to update\n    setTimeout(() => {\n      // Create a new pagination object with the updated page\n      const updatedPagination = {\n        ...pagination,\n        currentPage: page\n      };\n\n      // Update URL with all filters and the preserved parameters\n      urlUtils.updateUrlWithFilters(filters, updatedPagination, sortField, sortDirection);\n\n      // Load recordings from API\n      recordingsAPI.loadRecordings(filters, updatedPagination, sortField, sortDirection)\n        .then(data => {\n          console.log('Recordings data received:', data);\n\n          // Store recordings in the component state\n          setRecordings(data.recordings || []);\n\n          // Update pagination without changing the current page\n          updatePaginationFromResponse(data, page);\n        })\n        .catch(error => {\n          console.error('Error loading recordings:', error);\n          showStatusMessage('Error loading recordings: ' + error.message);\n        });\n    }, 0);\n  };\n\n  // Delete recording using preact-query mutation\n  const { mutate: deleteRecordingMutation } = recordingsAPI.hooks.useDeleteRecording();\n\n  // Delete a single recording\n  const deleteRecording = (recording) => {\n    if (!confirm(`Are you sure you want to delete this recording from ${recording.stream}?`)) {\n      return;\n    }\n\n    // Call the mutation with the recording ID\n    deleteRecordingMutation(recording.id);\n  };\n\n  // Play recording\n  const playRecording = (recording) => {\n    recordingsAPI.playRecording(recording, showVideoModal);\n  };\n\n  // Download recording\n  const downloadRecording = (recording) => {\n    recordingsAPI.downloadRecording(recording);\n  };\n\n  return html`\n    <section id=\"recordings-page\" class=\"page\">\n      <div class=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <div class=\"flex items-center\">\n          <h2 class=\"text-xl font-bold\">Recordings</h2>\n          <div class=\"ml-4 flex\">\n            <a href=\"recordings.html\" class=\"px-3 py-1 bg-blue-500 text-white rounded-l-md\">Table View</a>\n            <a href=\"timeline.html\" class=\"px-3 py-1 bg-gray-300 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-400 dark:hover:bg-gray-600 rounded-r-md\">Timeline View</a>\n          </div>\n        </div>\n        <button id=\"toggle-filters-btn\"\n                class=\"p-2 rounded-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none\"\n                title=\"Toggle Filters\"\n                onClick=${toggleFilters}>\n          <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path fill-rule=\"evenodd\" d=\"M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clip-rule=\"evenodd\"></path>\n          </svg>\n        </button>\n      </div>\n\n      <div class=\"recordings-layout flex flex-col md:flex-row gap-4 w-full\">\n        <!-- Sidebar for filters -->\n        <${FiltersSidebar}\n          filters=${filters}\n          setFilters=${setFilters}\n          pagination=${pagination}\n          setPagination=${setPagination}\n          streams=${streams}\n          filtersVisible=${filtersVisible}\n          applyFilters=${applyFilters}\n          resetFilters=${resetFilters}\n          handleDateRangeChange=${handleDateRangeChange}\n          setDefaultDateRange=${setDefaultDateRange}\n        />\n\n        <!-- Main content area -->\n        <div class=\"recordings-content flex-1\">\n          <${ActiveFilters}\n            activeFiltersDisplay=${activeFiltersDisplay}\n            removeFilter=${removeFilter}\n            hasActiveFilters=${hasActiveFilters}\n          />\n\n          <${ContentLoader}\n            isLoading=${isLoadingRecordings}\n            hasData=${hasData}\n            loadingMessage=\"Loading recordings...\"\n            emptyMessage=\"No recordings found matching your criteria\"\n          >\n            <${RecordingsTable}\n              recordings=${recordings}\n              sortField=${sortField}\n              sortDirection=${sortDirection}\n              sortBy=${sortBy}\n              selectedRecordings=${selectedRecordings}\n              toggleRecordingSelection=${toggleRecordingSelection}\n              selectAll=${selectAll}\n              toggleSelectAll=${toggleSelectAll}\n              getSelectedCount=${getSelectedCount}\n              openDeleteModal=${openDeleteModal}\n              playRecording=${playRecording}\n              downloadRecording=${downloadRecording}\n              deleteRecording=${deleteRecording}\n              recordingsTableBodyRef=${recordingsTableBodyRef}\n              pagination=${pagination}\n            />\n\n            <${PaginationControls}\n              pagination=${pagination}\n              goToPage=${goToPage}\n            />\n          <//>\n        </div>\n      </div>\n\n      <${DeleteConfirmationModal}\n        isOpen=${isDeleteModalOpen}\n        onClose=${closeDeleteModal}\n        onConfirm=${handleDeleteConfirm}\n        mode=${deleteMode}\n        count=${getSelectedCount()}\n      />\n    </section>\n  `;\n}\n\n/**\n * Load RecordingsView component\n */\nexport function loadRecordingsView() {\n  const mainContent = document.getElementById('main-content');\n  if (!mainContent) return;\n\n  // Render the RecordingsView component to the container\n  import('preact').then(({ render }) => {\n    import('../../query-client.js').then(({ QueryClientProvider, queryClient }) => {\n      render(\n        html`<${QueryClientProvider} client=${queryClient}><${RecordingsView} /></${QueryClientProvider}>`,\n        mainContent\n      );\n    });\n  });\n}\n","/**\n * Formatting utility functions for RecordingsView\n */\n\nexport const formatUtils = {\n  /**\n   * Format date time\n   * @param {string} isoString ISO date string\n   * @returns {string} Formatted date time\n   */\n  formatDateTime: (isoString) => {\n    if (!isoString) return '';\n    \n    const date = new Date(isoString);\n    return date.toLocaleString();\n  },\n  \n  /**\n   * Format duration\n   * @param {number} seconds Duration in seconds\n   * @returns {string} Formatted duration\n   */\n  formatDuration: (seconds) => {\n    if (!seconds) return '00:00:00';\n    \n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = Math.floor(seconds % 60);\n    \n    return [\n      hours.toString().padStart(2, '0'),\n      minutes.toString().padStart(2, '0'),\n      secs.toString().padStart(2, '0')\n    ].join(':');\n  },\n  \n  /**\n   * Format file size\n   * @param {number} bytes Size in bytes\n   * @returns {string} Formatted file size\n   */\n  formatFileSize: (bytes) => {\n    if (!bytes) return '0 B';\n    \n    const units = ['B', 'KB', 'MB', 'GB', 'TB'];\n    let i = 0;\n    let size = bytes;\n    \n    while (size >= 1024 && i < units.length - 1) {\n      size /= 1024;\n      i++;\n    }\n    \n    return `${size.toFixed(1)} ${units[i]}`;\n  }\n};\n","/**\n * RecordingsTable component for RecordingsView\n */\n\n\nimport { html } from '../../../html-helper.js';\nimport { formatUtils } from './formatUtils.js';\n\n/**\n * RecordingsTable component\n * @param {Object} props Component props\n * @returns {JSX.Element} RecordingsTable component\n */\nexport function RecordingsTable({\n  recordings,\n  sortField,\n  sortDirection,\n  sortBy,\n  selectedRecordings,\n  toggleRecordingSelection,\n  selectAll,\n  toggleSelectAll,\n  getSelectedCount,\n  openDeleteModal,\n  playRecording,\n  downloadRecording,\n  deleteRecording,\n  recordingsTableBodyRef,\n  pagination\n}) {\n  return html`\n    <div class=\"recordings-container bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden w-full\">\n      <div class=\"batch-actions p-3 border-b border-gray-200 dark:border-gray-700 flex flex-wrap gap-2 items-center\">\n        <div class=\"selected-count text-sm text-gray-600 dark:text-gray-400 mr-2\">\n          ${getSelectedCount() > 0 ? \n            `${getSelectedCount()} recording${getSelectedCount() !== 1 ? 's' : ''} selected` : \n            'No recordings selected'}\n        </div>\n        <button \n          class=\"px-3 py-1.5 bg-red-600 text-white rounded hover:bg-red-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          disabled=${getSelectedCount() === 0}\n          onClick=${() => openDeleteModal('selected')}>\n          Delete Selected\n        </button>\n        <button \n          class=\"px-3 py-1.5 bg-red-600 text-white rounded hover:bg-red-700 transition-colors\"\n          onClick=${() => openDeleteModal('all')}>\n          Delete All Filtered\n        </button>\n      </div>\n      <div class=\"overflow-x-auto\">\n        <table id=\"recordings-table\" class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n          <thead class=\"bg-gray-50 dark:bg-gray-700\">\n            <tr>\n              <th class=\"w-10 px-4 py-3\">\n                <input \n                  type=\"checkbox\" \n                  checked=${selectAll}\n                  onChange=${toggleSelectAll}\n                  class=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"\n                />\n              </th>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer\"\n                  onClick=${() => sortBy('stream_name')}>\n                <div class=\"flex items-center\">\n                  Stream\n                  ${sortField === 'stream_name' && html`\n                    <span class=\"sort-icon ml-1\">${sortDirection === 'asc' ? 'â–²' : 'â–¼'}</span>\n                  `}\n                </div>\n              </th>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer\"\n                  onClick=${() => sortBy('start_time')}>\n                <div class=\"flex items-center\">\n                  Start Time\n                  ${sortField === 'start_time' && html`\n                    <span class=\"sort-icon ml-1\">${sortDirection === 'asc' ? 'â–²' : 'â–¼'}</span>\n                  `}\n                </div>\n              </th>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                Duration\n              </th>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer\"\n                  onClick=${() => sortBy('size_bytes')}>\n                <div class=\"flex items-center\">\n                  Size\n                  ${sortField === 'size_bytes' && html`\n                    <span class=\"sort-icon ml-1\">${sortDirection === 'asc' ? 'â–²' : 'â–¼'}</span>\n                  `}\n                </div>\n              </th>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                Detections\n              </th>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                Actions\n              </th>\n            </tr>\n          </thead>\n          <tbody ref=${recordingsTableBodyRef} class=\"bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700\">\n            ${recordings.length === 0 ? html`\n              <tr>\n                <td colspan=\"6\" class=\"px-6 py-4 text-center text-gray-500 dark:text-gray-400\">\n                  ${pagination.totalItems === 0 ? 'No recordings found' : 'Loading recordings...'}\n                </td>\n              </tr>\n            ` : recordings.map(recording => html`\n              <tr key=${recording.id} class=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                <td class=\"px-4 py-4 whitespace-nowrap\">\n                  <input \n                    type=\"checkbox\" \n                    checked=${!!selectedRecordings[recording.id]}\n                    onChange=${() => toggleRecordingSelection(recording.id)}\n                    class=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"\n                  />\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">${recording.stream || ''}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">${formatUtils.formatDateTime(recording.start_time)}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">${formatUtils.formatDuration(recording.duration)}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">${recording.size || ''}</td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                  ${recording.has_detections ? html`\n                    <span class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100\">\n                      <svg class=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M10 12a2 2 0 100-4 2 2 0 000 4z\"></path>\n                        <path fill-rule=\"evenodd\" d=\"M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z\" clip-rule=\"evenodd\"></path>\n                      </svg>\n                      Yes\n                    </span>\n                  ` : ''}\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                  <div class=\"flex space-x-2\">\n                    <button class=\"p-1 rounded-full text-blue-600 hover:bg-blue-100 dark:text-blue-400 dark:hover:bg-blue-900 focus:outline-none\"\n                            onClick=${() => playRecording(recording)}\n                            title=\"Play\">\n                      <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clip-rule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                    <button class=\"p-1 rounded-full text-green-600 hover:bg-green-100 dark:text-green-400 dark:hover:bg-green-900 focus:outline-none\"\n                            onClick=${() => downloadRecording(recording)}\n                            title=\"Download\">\n                      <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clip-rule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                    <button class=\"p-1 rounded-full text-red-600 hover:bg-red-100 dark:text-red-400 dark:hover:bg-red-900 focus:outline-none\"\n                            onClick=${() => deleteRecording(recording)}\n                            title=\"Delete\">\n                      <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clip-rule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            `)}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  `;\n}\n","/**\n * PaginationControls component for RecordingsView\n */\n\n\nimport { html } from '../../../html-helper.js';\n\n/**\n * PaginationControls component\n * @param {Object} props Component props\n * @returns {JSX.Element} PaginationControls component\n */\nexport function PaginationControls({ pagination, goToPage }) {\n  return html`\n    <div class=\"pagination-controls flex flex-col sm:flex-row justify-between items-center p-4 border-t border-gray-200 dark:border-gray-700\">\n      <div class=\"pagination-info text-sm text-gray-600 dark:text-gray-400 mb-2 sm:mb-0\">\n        Showing <span id=\"pagination-showing\">${pagination.startItem}-${pagination.endItem}</span> of <span id=\"pagination-total\">${pagination.totalItems}</span> recordings\n      </div>\n      <div class=\"pagination-buttons flex items-center space-x-1\">\n        <button id=\"pagination-first\" \n                class=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"First Page\"\n                onClick=${() => goToPage(1)}\n                disabled=${pagination.currentPage === 1}>\n          Â«\n        </button>\n        <button id=\"pagination-prev\" \n                class=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"Previous Page\"\n                onClick=${() => goToPage(pagination.currentPage - 1)}\n                disabled=${pagination.currentPage === 1}>\n          â€¹\n        </button>\n        <span id=\"pagination-current\" class=\"px-2 text-sm text-gray-700 dark:text-gray-300\">\n          Page ${pagination.currentPage} of ${pagination.totalPages}\n        </span>\n        <button id=\"pagination-next\" \n                class=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"Next Page\"\n                onClick=${() => goToPage(pagination.currentPage + 1)}\n                disabled=${pagination.currentPage === pagination.totalPages}>\n          â€º\n        </button>\n        <button id=\"pagination-last\" \n                class=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"Last Page\"\n                onClick=${() => goToPage(pagination.totalPages)}\n                disabled=${pagination.currentPage === pagination.totalPages}>\n          Â»\n        </button>\n      </div>\n    </div>\n  `;\n}\n","/**\n * API functions for RecordingsView\n */\n\nimport { showStatusMessage } from '../UI.js';\nimport { formatUtils } from './formatUtils.js';\nimport { fetchJSON, enhancedFetch } from '../../../fetch-utils.js';\nimport {\n  useQuery,\n  useMutation,\n  useQueryClient,\n  usePostMutation,\n  useDeleteMutation,\n  invalidateQueries\n} from '../../../query-client.js';\n\n/**\n * RecordingsAPI - Handles all API calls related to recordings\n */\nexport const recordingsAPI = {\n  /**\n   * Custom hooks for preact-query\n   */\n  hooks: {\n    /**\n     * Hook to fetch streams list\n     * @returns {Object} Query result\n     */\n    useStreams: () => {\n      return useQuery('streams', '/api/streams', {\n        timeout: 15000, // 15 second timeout\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n    },\n\n    /**\n     * Hook to fetch recordings with filters\n     * @param {Object} filters Filter settings\n     * @param {Object} pagination Pagination settings\n     * @param {string} sortField Sort field\n     * @param {string} sortDirection Sort direction\n     * @returns {Object} Query result\n     */\n    useRecordings: (filters, pagination, sortField, sortDirection) => {\n      // Build query parameters\n      const params = new URLSearchParams();\n      params.append('page', pagination.currentPage);\n      params.append('limit', pagination.pageSize);\n      params.append('sort', sortField);\n      params.append('order', sortDirection);\n\n      // Add date range filters\n      if (filters.dateRange === 'custom') {\n        params.append('start', `${filters.startDate}T${filters.startTime}:00`);\n        params.append('end', `${filters.endDate}T${filters.endTime}:00`);\n      } else {\n        // Convert predefined range to actual dates\n        const { start, end } = recordingsAPI.getDateRangeFromPreset(filters.dateRange);\n        params.append('start', start);\n        params.append('end', end);\n      }\n\n      // Add stream filter\n      if (filters.streamId !== 'all') {\n        params.append('stream', filters.streamId);\n      }\n\n      // Add recording type filter\n      if (filters.recordingType === 'detection') {\n        params.append('detection', '1');\n      }\n\n      // Create query key that includes all filter parameters\n      const queryKey = ['recordings', filters, pagination, sortField, sortDirection];\n\n      return useQuery(\n        queryKey,\n        `/api/recordings?${params.toString()}`,\n        {\n          timeout: 30000, // 30 second timeout for potentially large data\n          retries: 2,     // Retry twice\n          retryDelay: 1000 // 1 second between retries\n        },\n        {\n          onSuccess: (data) => {\n            // Set has_detections to false by default instead of making API calls\n            // This prevents unnecessary detection API calls on the recordings page\n            if (data.recordings && data.recordings.length > 0) {\n              data.recordings.forEach(recording => {\n                recording.has_detections = false;\n              });\n            }\n          }\n        }\n      );\n    },\n\n    /**\n     * Hook to check if a recording has detections\n     * @param {Object} recording Recording to check\n     * @returns {Object} Query result\n     */\n    useRecordingDetections: (recording) => {\n      // Skip if recording doesn't have required properties\n      if (!recording || !recording.id || !recording.stream || !recording.start_time || !recording.end_time) {\n        return { data: { detections: [] } };\n      }\n\n      // Convert timestamps to seconds\n      const startTime = Math.floor(new Date(recording.start_time).getTime() / 1000);\n      const endTime = Math.floor(new Date(recording.end_time).getTime() / 1000);\n\n      // Query the detections API\n      const params = new URLSearchParams({\n        start: startTime,\n        end: endTime\n      });\n\n      return useQuery(\n        ['recording-detections', recording.id],\n        `/api/detection/results/${recording.stream}?${params.toString()}`,\n        {\n          timeout: 15000, // 15 second timeout\n          retries: 1,     // Retry once\n          retryDelay: 1000 // 1 second between retries\n        },\n        {\n          enabled: !!recording.id // Only run query if we have a recording ID\n        }\n      );\n    },\n\n    /**\n     * Hook to delete a recording\n     * @returns {Object} Mutation result\n     */\n    useDeleteRecording: () => {\n      const queryClient = useQueryClient();\n\n      return useMutation({\n        mutationFn: async (recordingId) => {\n          const url = `/api/recordings/${recordingId}`;\n          return await fetchJSON(url, {\n            method: 'DELETE',\n            timeout: 15000, // 15 second timeout\n            retries: 1,     // Retry once\n            retryDelay: 1000 // 1 second between retries\n          });\n        },\n        onSuccess: () => {\n          // Invalidate recordings queries to refresh the list\n          queryClient.invalidateQueries({ queryKey: ['recordings'] });\n          showStatusMessage('Recording deleted successfully');\n        },\n        onError: (error) => {\n          console.error('Error deleting recording:', error);\n          showStatusMessage('Error deleting recording: ' + error.message);\n        }\n      });\n    },\n\n    /**\n     * Hook to delete multiple recordings\n     * @returns {Object} Mutation result\n     */\n    useBatchDeleteRecordings: () => {\n      const queryClient = useQueryClient();\n\n      return usePostMutation(\n        '/api/recordings/batch-delete',\n        {\n          timeout: 60000, // 60 second timeout for batch operations\n          retries: 1,     // Retry once\n          retryDelay: 2000 // 2 seconds between retries\n        },\n        {\n          onSuccess: (result) => {\n            // Invalidate recordings queries to refresh the list\n            queryClient.invalidateQueries({ queryKey: ['recordings'] });\n\n            const successCount = result.succeeded;\n            const errorCount = result.failed;\n\n            // Show status message\n            if (successCount > 0 && errorCount === 0) {\n              showStatusMessage(`Successfully deleted ${successCount} recording${successCount !== 1 ? 's' : ''}`);\n            } else if (successCount > 0 && errorCount > 0) {\n              showStatusMessage(`Deleted ${successCount} recording${successCount !== 1 ? 's' : ''}, but failed to delete ${errorCount}`);\n            } else {\n              showStatusMessage(`Failed to delete ${errorCount} recording${errorCount !== 1 ? 's' : ''}`);\n            }\n          },\n          onError: (error) => {\n            console.error('Error in batch delete operation:', error);\n            showStatusMessage('Error in batch delete operation: ' + error.message);\n          }\n        }\n      );\n    }\n  },\n  /**\n   * Load streams from API\n   * @returns {Promise<Array>} Array of streams\n   */\n  loadStreams: async () => {\n    try {\n      const data = await fetchJSON('/api/streams', {\n        timeout: 15000, // 15 second timeout\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      return data || [];\n    } catch (error) {\n      console.error('Error loading streams for filter:', error);\n      showStatusMessage('Error loading streams: ' + error.message);\n      return [];\n    }\n  },\n\n  /**\n   * Get date range from preset\n   * @param {string} preset Preset name\n   * @returns {Object} Start and end dates\n   */\n  getDateRangeFromPreset: (preset) => {\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);\n    const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);\n\n    let start, end;\n\n    switch (preset) {\n      case 'today':\n        start = todayStart.toISOString();\n        end = today.toISOString();\n        break;\n      case 'yesterday':\n        const yesterday = new Date(todayStart);\n        yesterday.setDate(yesterday.getDate() - 1);\n        const yesterdayEnd = new Date(yesterday);\n        yesterdayEnd.setHours(23, 59, 59);\n        start = yesterday.toISOString();\n        end = yesterdayEnd.toISOString();\n        break;\n      case 'last7days':\n        const sevenDaysAgo = new Date(todayStart);\n        sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n        start = sevenDaysAgo.toISOString();\n        end = today.toISOString();\n        break;\n      case 'last30days':\n        const thirtyDaysAgo = new Date(todayStart);\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        start = thirtyDaysAgo.toISOString();\n        end = today.toISOString();\n        break;\n      default:\n        // Default to last 7 days\n        const defaultStart = new Date(todayStart);\n        defaultStart.setDate(defaultStart.getDate() - 7);\n        start = defaultStart.toISOString();\n        end = today.toISOString();\n    }\n\n    return { start, end };\n  },\n\n  /**\n   * Load recordings\n   * @param {Object} filters Filter settings\n   * @param {Object} pagination Pagination settings\n   * @param {string} sortField Sort field\n   * @param {string} sortDirection Sort direction\n   * @returns {Promise<Object>} Recordings data and pagination info\n   */\n  loadRecordings: async (filters, pagination, sortField, sortDirection) => {\n    try {\n      // Build query parameters\n      const params = new URLSearchParams();\n      params.append('page', pagination.currentPage);\n      params.append('limit', pagination.pageSize);\n      params.append('sort', sortField);\n      params.append('order', sortDirection);\n\n      // Add date range filters\n      if (filters.dateRange === 'custom') {\n        params.append('start', `${filters.startDate}T${filters.startTime}:00`);\n        params.append('end', `${filters.endDate}T${filters.endTime}:00`);\n      } else {\n        // Convert predefined range to actual dates\n        const { start, end } = recordingsAPI.getDateRangeFromPreset(filters.dateRange);\n        params.append('start', start);\n        params.append('end', end);\n      }\n\n      // Add stream filter\n      if (filters.streamId !== 'all') {\n        params.append('stream', filters.streamId);\n      }\n\n      // Add recording type filter\n      if (filters.recordingType === 'detection') {\n        params.append('detection', '1');\n      }\n\n      // Log the API request\n      console.log('API Request:', `/api/recordings?${params.toString()}`);\n\n      // Fetch recordings with enhanced fetch\n      const data = await fetchJSON(`/api/recordings?${params.toString()}`, {\n        timeout: 30000, // 30 second timeout for potentially large data\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      console.log('Recordings data received:', data);\n\n      // Set has_detections to false by default instead of making API calls\n      // This prevents unnecessary detection API calls on the recordings page\n      if (data.recordings && data.recordings.length > 0) {\n        // Process recordings in batches to avoid too many parallel requests\n        const batchSize = 5;\n        for (let i = 0; i < data.recordings.length; i += batchSize) {\n          const batch = data.recordings.slice(i, i + batchSize);\n          await Promise.all(batch.map(async (recording) => {\n            try {\n              recording.has_detections = await recordingsAPI.checkRecordingHasDetections(recording);\n            } catch (error) {\n              console.error(`Error checking detections for recording ${recording.id}:`, error);\n              recording.has_detections = false;\n            }\n          }));\n        }\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Error loading recordings:', error);\n      showStatusMessage('Error loading recordings: ' + error.message);\n      throw error;\n    }\n  },\n\n  /**\n   * Delete a single recording\n   * @param {Object} recording Recording to delete\n   * @returns {Promise<boolean>} Success status\n   */\n  deleteRecording: async (recording) => {\n    try {\n      await enhancedFetch(`/api/recordings/${recording.id}`, {\n        method: 'DELETE',\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      showStatusMessage('Recording deleted successfully');\n      return true;\n    } catch (error) {\n      console.error('Error deleting recording:', error);\n      showStatusMessage('Error deleting recording: ' + error.message);\n      return false;\n    }\n  },\n\n  /**\n   * Delete selected recordings\n   * @param {Object} selectedRecordings Object with recording IDs as keys\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteSelectedRecordings: async (selectedRecordings) => {\n    const selectedIds = Object.entries(selectedRecordings)\n      .filter(([_, isSelected]) => isSelected)\n      .map(([id, _]) => parseInt(id, 10));\n\n    if (selectedIds.length === 0) {\n      showStatusMessage('No recordings selected');\n      return { succeeded: 0, failed: 0 };\n    }\n\n    try {\n      // Check if WebSocket client is available\n      if (window.wsClient) {\n        console.log('Using WebSocket for batch delete operation');\n\n        // Connect the WebSocket client if not already connected\n        if (!window.wsClient.isConnected()) {\n          console.log('WebSocket not connected, connecting now...');\n          window.wsClient.connect();\n        }\n\n        // Initialize batch delete client if needed\n        if (!window.batchDeleteClient) {\n          if (typeof BatchDeleteRecordingsClient !== 'undefined') {\n            console.log('Creating new BatchDeleteRecordingsClient');\n            window.batchDeleteClient = new BatchDeleteRecordingsClient(window.wsClient);\n          } else {\n            console.warn('BatchDeleteRecordingsClient not available, falling back to HTTP');\n            return recordingsAPI.deleteSelectedRecordingsHttp(selectedIds);\n          }\n        }\n\n        // Show batch delete modal\n        if (typeof showBatchDeleteModal === 'function') {\n          showBatchDeleteModal();\n        }\n\n        // Use WebSocket for batch delete\n        // The client ID will be obtained by the batch delete client\n        return await window.batchDeleteClient.deleteWithProgress({ ids: selectedIds });\n      } else {\n        console.log('WebSocket client not available, using HTTP for batch delete');\n        return recordingsAPI.deleteSelectedRecordingsHttp(selectedIds);\n      }\n    } catch (error) {\n      console.error('Error in batch delete operation:', error);\n      showStatusMessage('Error in batch delete operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Delete selected recordings using HTTP (fallback)\n   * @param {Array<number>} selectedIds Array of recording IDs\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteSelectedRecordingsHttp: async (selectedIds) => {\n    try {\n      // Use the batch delete endpoint with enhanced fetch\n      const response = await enhancedFetch('/api/recordings/batch-delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ids: selectedIds\n        }),\n        timeout: 60000, // 60 second timeout for batch operations\n        retries: 1,     // Retry once\n        retryDelay: 2000 // 2 seconds between retries\n      });\n\n      const result = await response.json();\n      const successCount = result.succeeded;\n      const errorCount = result.failed;\n\n      // Show status message\n      if (successCount > 0 && errorCount === 0) {\n        showStatusMessage(`Successfully deleted ${successCount} recording${successCount !== 1 ? 's' : ''}`);\n      } else if (successCount > 0 && errorCount > 0) {\n        showStatusMessage(`Deleted ${successCount} recording${successCount !== 1 ? 's' : ''}, but failed to delete ${errorCount}`);\n      } else {\n        showStatusMessage(`Failed to delete ${errorCount} recording${errorCount !== 1 ? 's' : ''}`);\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Error in HTTP batch delete operation:', error);\n      showStatusMessage('Error in batch delete operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Delete all recordings matching current filter\n   * @param {Object} filters Current filters\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteAllFilteredRecordings: async (filters) => {\n    try {\n      // Create filter object\n      const filter = {};\n\n      // Add date range filters\n      if (filters.dateRange === 'custom') {\n        filter.start = `${filters.startDate}T${filters.startTime}:00`;\n        filter.end = `${filters.endDate}T${filters.endTime}:00`;\n      } else {\n        // Convert predefined range to actual dates\n        const { start, end } = recordingsAPI.getDateRangeFromPreset(filters.dateRange);\n        filter.start = start;\n        filter.end = end;\n      }\n\n      // Add stream filter\n      if (filters.streamId !== 'all') {\n        filter.stream_name = filters.streamId; // Changed from 'stream' to 'stream_name' to match API expectations\n      }\n\n      // Add recording type filter\n      if (filters.recordingType === 'detection') {\n        filter.detection = 1;\n      }\n\n      console.log('Deleting with filter:', filter);\n\n      // Show batch delete modal with indeterminate progress initially\n      if (typeof showBatchDeleteModal === 'function') {\n        showBatchDeleteModal();\n\n        // Update the progress UI with an indeterminate state\n        if (typeof window.updateBatchDeleteProgress === 'function') {\n          window.updateBatchDeleteProgress({\n            current: 0,\n            total: 0, // We don't know the total yet\n            succeeded: 0,\n            failed: 0,\n            status: `Preparing to delete recordings matching filter...`,\n            complete: false\n          });\n        }\n      }\n\n      // Get the total count from the current page's filter\n      // This will help us set a more accurate progress indicator\n      let totalCount = 0;\n      try {\n        // Build query parameters for the API request\n        const params = new URLSearchParams();\n\n        // Add date range parameters\n        if (filter.start) {\n          params.append('start', filter.start);\n        }\n\n        if (filter.end) {\n          params.append('end', filter.end);\n        }\n\n        // Add stream filter\n        if (filter.stream_name) {\n          params.append('stream', filter.stream_name);\n        }\n\n        // Add detection filter\n        if (filter.detection) {\n          params.append('detection', '1');\n        }\n\n        // Set page size to 1 to minimize data transfer, we just need the total count\n        params.append('page', '1');\n        params.append('limit', '1');\n\n        console.log('Getting total count with params:', params.toString());\n\n        // Fetch recordings to get pagination info\n        const response = await fetch(`/api/recordings?${params.toString()}`);\n        if (response.ok) {\n          const data = await response.json();\n          if (data && data.pagination && data.pagination.total) {\n            totalCount = data.pagination.total;\n            console.log(`Found ${totalCount} recordings matching filter`);\n\n            // Update the progress UI with the total count\n            if (typeof window.updateBatchDeleteProgress === 'function') {\n              window.updateBatchDeleteProgress({\n                current: 0,\n                total: totalCount,\n                succeeded: 0,\n                failed: 0,\n                status: `Found ${totalCount} recordings matching filter. Starting deletion...`,\n                complete: false\n              });\n            }\n          }\n        }\n      } catch (countError) {\n        console.warn('Error getting recording count:', countError);\n        // Continue anyway, we'll just show an indeterminate progress\n      }\n\n      // Set up an error handler in case the operation fails\n      const handleOperationError = (error) => {\n        console.error('Error in delete all operation:', error);\n        showStatusMessage('Error in delete all operation: ' + error.message);\n\n        // Update the progress UI to show the error\n        if (typeof window.updateBatchDeleteProgress === 'function') {\n          window.updateBatchDeleteProgress({\n            current: 0,\n            total: 0,\n            succeeded: 0,\n            failed: 0,\n            status: `Error: ${error.message}`,\n            complete: true\n          });\n        }\n\n        return { succeeded: 0, failed: 0 };\n      };\n\n        // Check if WebSocket client is available\n        if (window.wsClient) {\n          console.log('Using WebSocket for batch delete with filter');\n\n          // Connect the WebSocket client if not already connected\n          if (!window.wsClient.isConnected()) {\n            console.log('WebSocket not connected, connecting now...');\n            window.wsClient.connect();\n          }\n\n          // Initialize batch delete client if needed\n          if (!window.batchDeleteClient) {\n            if (typeof BatchDeleteRecordingsClient !== 'undefined') {\n              console.log('Creating new BatchDeleteRecordingsClient for filtered delete');\n              window.batchDeleteClient = new BatchDeleteRecordingsClient(window.wsClient);\n            } else {\n              console.warn('BatchDeleteRecordingsClient not available, falling back to HTTP');\n              return recordingsAPI.deleteAllFilteredRecordingsHttp(filter);\n            }\n          }\n\n          // Log the client ID being used\n          console.log('Using WebSocket client ID for filtered batch delete:', window.wsClient.getClientId());\n\n          // Set up a timeout to handle server crashes\n          const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => {\n              reject(new Error('Operation timed out or server crashed. Some recordings may have been deleted.'));\n            }, 60000); // 60 second timeout\n          });\n\n          try {\n            // Race between the delete operation and the timeout\n            // Pass the total count to the WebSocket client\n            const result = await Promise.race([\n              window.batchDeleteClient.deleteWithProgress({\n                filter,\n                totalCount // Pass the total count to the WebSocket client\n              }),\n              timeoutPromise\n            ]);\n\n            return result;\n          } catch (wsError) {\n            console.error('WebSocket error or timeout:', wsError);\n\n            // If we got a timeout or server crash, reload the recordings to show what was deleted\n            setTimeout(() => {\n              if (typeof loadRecordings === 'function') {\n                loadRecordings();\n              }\n            }, 1000);\n\n            return handleOperationError(wsError);\n          }\n        } else {\n          console.log('WebSocket client not available, using HTTP for batch delete with filter');\n          return recordingsAPI.deleteAllFilteredRecordingsHttp(filter);\n        }\n    } catch (error) {\n      console.error('Error in delete all operation:', error);\n      showStatusMessage('Error in delete all operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Delete all recordings matching filter using HTTP (fallback)\n   * @param {Object} filter Filter object\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteAllFilteredRecordingsHttp: async (filter) => {\n    try {\n      // Use the batch delete endpoint with filter and enhanced fetch\n      const deleteResponse = await enhancedFetch('/api/recordings/batch-delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          filter: filter\n        }),\n        timeout: 120000, // 120 second timeout for potentially large batch operations\n        retries: 1,      // Retry once\n        retryDelay: 3000 // 3 seconds between retries\n      });\n\n      const result = await deleteResponse.json();\n      const successCount = result.succeeded;\n      const errorCount = result.failed;\n\n      // Show status message\n      if (successCount > 0 && errorCount === 0) {\n        showStatusMessage(`Successfully deleted ${successCount} recording${successCount !== 1 ? 's' : ''}`);\n      } else if (successCount > 0 && errorCount > 0) {\n        showStatusMessage(`Deleted ${successCount} recording${successCount !== 1 ? 's' : ''}, but failed to delete ${errorCount}`);\n      } else {\n        showStatusMessage(`Failed to delete ${errorCount} recording${errorCount !== 1 ? 's' : ''}`);\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Error in HTTP delete all operation:', error);\n      showStatusMessage('Error in delete all operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Check if a recording has associated detections\n   * @param {Object} recording Recording to check\n   * @returns {Promise<boolean>} True if the recording has detections, false otherwise\n   */\n  checkRecordingHasDetections: async (recording) => {\n    if (!recording || !recording.id || !recording.stream || !recording.start_time || !recording.end_time) {\n      return false;\n    }\n\n    try {\n      // Convert timestamps to seconds\n      const startTime = Math.floor(new Date(recording.start_time).getTime() / 1000);\n      const endTime = Math.floor(new Date(recording.end_time).getTime() / 1000);\n\n      // Query the detections API to check if there are any detections in this time range\n      const params = new URLSearchParams({\n        start: startTime,\n        end: endTime\n      });\n\n      const data = await fetchJSON(`/api/detection/results/${recording.stream}?${params.toString()}`, {\n        timeout: 10000, // 10 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 500 // 0.5 second between retries\n      });\n\n      return data.detections && data.detections.length > 0;\n    } catch (error) {\n      console.error('Error checking detections:', error);\n      return false;\n    }\n  },\n\n  /**\n   * Get detections for a recording\n   * @param {Object} recording Recording to get detections for\n   * @returns {Promise<Array>} Array of detections\n   */\n  getRecordingDetections: async (recording) => {\n    if (!recording || !recording.id || !recording.stream || !recording.start_time || !recording.end_time) {\n      return [];\n    }\n\n    try {\n      // Convert timestamps to seconds\n      const startTime = Math.floor(new Date(recording.start_time).getTime() / 1000);\n      const endTime = Math.floor(new Date(recording.end_time).getTime() / 1000);\n\n      // Query the detections API to get detections in this time range\n      const params = new URLSearchParams({\n        start: startTime,\n        end: endTime\n      });\n\n      const data = await fetchJSON(`/api/detection/results/${recording.stream}?${params.toString()}`, {\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      return data.detections || [];\n    } catch (error) {\n      console.error('Error getting detections:', error);\n      return [];\n    }\n  },\n\n  /**\n   * Play recording\n   * @param {Object} recording Recording to play\n   */\n  playRecording: (recording, showVideoModal) => {\n    console.log('Play recording clicked:', recording);\n\n    // Check if recording has an id property\n    if (!recording.id) {\n      console.error('Recording has no id property:', recording);\n      showStatusMessage('Error: Recording has no id property');\n      return;\n    }\n\n    // Build video URL\n    const videoUrl = `/api/recordings/play/${recording.id}`;\n    const title = `${recording.stream} - ${formatUtils.formatDateTime(recording.start_time)}`;\n    const downloadUrl = `/api/recordings/download/${recording.id}`;\n\n    console.log('Video URL:', videoUrl);\n    console.log('Title:', title);\n    console.log('Download URL:', downloadUrl);\n\n    // Show video modal\n    showVideoModal(videoUrl, title, downloadUrl);\n    console.log('Video modal should be shown now');\n  },\n\n  /**\n   * Download recording\n   * @param {Object} recording Recording to download\n   */\n  downloadRecording: (recording) => {\n    // Create download link\n    const downloadUrl = `/api/recordings/download/${recording.id}`;\n    const link = document.createElement('a');\n    link.href = downloadUrl;\n    link.download = `${recording.stream}_${new Date(recording.start_time).toISOString().replace(/[:.]/g, '-')}.mp4`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    showStatusMessage('Download started');\n  }\n};\n","/**\n * URL utility functions for RecordingsView\n */\n\n/**\n * URL utilities for RecordingsView\n */\nexport const urlUtils = {\n  /**\n   * Get filters from URL\n   * @returns {Object|null} Filters object or null if no filters in URL\n   */\n  getFiltersFromUrl: () => {\n    // Get URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    \n    // Check if we have any filter parameters\n    if (!urlParams.has('dateRange') && !urlParams.has('page') && !urlParams.has('sort') && !urlParams.has('detection') && !urlParams.has('stream')) {\n      return null;\n    }\n    \n    // Create result object\n    const result = {\n      filters: {\n        dateRange: 'last7days',\n        startDate: '',\n        startTime: '00:00',\n        endDate: '',\n        endTime: '23:59',\n        streamId: 'all',\n        recordingType: 'all'\n      },\n      page: 1,\n      limit: 20,\n      sort: 'start_time',\n      order: 'desc'\n    };\n    \n    // Date range\n    if (urlParams.has('dateRange')) {\n      result.filters.dateRange = urlParams.get('dateRange');\n      \n      if (result.filters.dateRange === 'custom') {\n        if (urlParams.has('startDate')) {\n          result.filters.startDate = urlParams.get('startDate');\n        }\n        if (urlParams.has('startTime')) {\n          result.filters.startTime = urlParams.get('startTime');\n        }\n        if (urlParams.has('endDate')) {\n          result.filters.endDate = urlParams.get('endDate');\n        }\n        if (urlParams.has('endTime')) {\n          result.filters.endTime = urlParams.get('endTime');\n        }\n      }\n    }\n    \n    // Stream\n    if (urlParams.has('stream')) {\n      result.filters.streamId = urlParams.get('stream');\n    }\n    \n    // Recording type\n    if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n      result.filters.recordingType = 'detection';\n    }\n    \n    // Pagination\n    if (urlParams.has('page')) {\n      result.page = parseInt(urlParams.get('page'), 10);\n    }\n    if (urlParams.has('limit')) {\n      result.limit = parseInt(urlParams.get('limit'), 10);\n    }\n    \n    // Sorting\n    if (urlParams.has('sort')) {\n      result.sort = urlParams.get('sort');\n    }\n    if (urlParams.has('order')) {\n      result.order = urlParams.get('order');\n    }\n    \n    return result;\n  },\n  \n  /**\n   * Get active filters display\n   * @param {Object} filters Current filters\n   * @returns {Array} Array of active filter objects with key and label\n   */\n  getActiveFiltersDisplay: (filters) => {\n    const activeFilters = [];\n    \n    // Check if we have any active filters\n    const hasFilters = (\n      filters.dateRange !== 'last7days' ||\n      filters.streamId !== 'all' ||\n      filters.recordingType !== 'all'\n    );\n    \n    if (hasFilters) {\n      // Date range filter\n      if (filters.dateRange !== 'last7days') {\n        let label = '';\n        switch (filters.dateRange) {\n          case 'today':\n            label = 'Today';\n            break;\n          case 'yesterday':\n            label = 'Yesterday';\n            break;\n          case 'last30days':\n            label = 'Last 30 Days';\n            break;\n          case 'custom':\n            label = `${filters.startDate} to ${filters.endDate}`;\n            break;\n        }\n        activeFilters.push({ key: 'dateRange', label: `Date: ${label}` });\n      }\n      \n      // Stream filter\n      if (filters.streamId !== 'all') {\n        activeFilters.push({ key: 'streamId', label: `Stream: ${filters.streamId}` });\n      }\n      \n      // Recording type filter\n      if (filters.recordingType !== 'all') {\n        activeFilters.push({ key: 'recordingType', label: 'Detection Events Only' });\n      }\n    }\n    \n    return activeFilters;\n  },\n  \n  /**\n   * Load filters from URL\n   * @param {Object} filters Current filters\n   * @param {Object} pagination Current pagination\n   * @param {Function} setFilters Function to update filters\n   * @param {Function} setPagination Function to update pagination\n   * @param {Function} setSortField Function to update sort field\n   * @param {Function} setSortDirection Function to update sort direction\n   */\n  loadFiltersFromUrl: (filters, pagination, setFilters, setPagination, setSortField, setSortDirection) => {\n    // Get URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    \n    // Create a new filters object based on the current filters\n    const newFilters = { ...filters };\n    \n    // Date range\n    if (urlParams.has('dateRange')) {\n      newFilters.dateRange = urlParams.get('dateRange');\n      \n      if (newFilters.dateRange === 'custom') {\n        if (urlParams.has('startDate')) {\n          newFilters.startDate = urlParams.get('startDate');\n        }\n        if (urlParams.has('startTime')) {\n          newFilters.startTime = urlParams.get('startTime');\n        }\n        if (urlParams.has('endDate')) {\n          newFilters.endDate = urlParams.get('endDate');\n        }\n        if (urlParams.has('endTime')) {\n          newFilters.endTime = urlParams.get('endTime');\n        }\n      }\n    }\n    \n    // Stream\n    if (urlParams.has('stream')) {\n      newFilters.streamId = urlParams.get('stream');\n    }\n    \n    // Recording type - IMPORTANT: Check for this parameter even if dateRange is not present\n    if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n      newFilters.recordingType = 'detection';\n    }\n    \n    // Update filters state\n    setFilters(newFilters);\n    \n    // Pagination\n    if (urlParams.has('page')) {\n      setPagination(prev => ({\n        ...prev,\n        currentPage: parseInt(urlParams.get('page'), 10)\n      }));\n    }\n    if (urlParams.has('limit')) {\n      setPagination(prev => ({\n        ...prev,\n        pageSize: parseInt(urlParams.get('limit'), 10)\n      }));\n    }\n    \n    // Sorting\n    if (urlParams.has('sort')) {\n      setSortField(urlParams.get('sort'));\n    }\n    if (urlParams.has('order')) {\n      setSortDirection(urlParams.get('order'));\n    }\n  },\n  \n  /**\n   * Update URL with filters\n   * @param {Object} filters Current filters\n   * @param {Object} pagination Current pagination\n   * @param {string} sortField Current sort field\n   * @param {string} sortDirection Current sort direction\n   */\n  updateUrlWithFilters: (filters, pagination, sortField, sortDirection) => {\n    // Create URL parameters object based on current URL to preserve any existing parameters\n    const params = new URLSearchParams(window.location.search);\n    \n    // Add a timestamp parameter to prevent caching issues\n    params.set('t', Date.now().toString());\n    \n    // Update or add date range parameters\n    params.set('dateRange', filters.dateRange);\n    \n    // Handle custom date range\n    if (filters.dateRange === 'custom') {\n      params.set('startDate', filters.startDate);\n      params.set('startTime', filters.startTime);\n      params.set('endDate', filters.endDate);\n      params.set('endTime', filters.endTime);\n    } else {\n      // Remove custom date parameters if not using custom date range\n      params.delete('startDate');\n      params.delete('startTime');\n      params.delete('endDate');\n      params.delete('endTime');\n    }\n    \n    // Update stream filter\n    if (filters.streamId !== 'all') {\n      params.set('stream', filters.streamId);\n    } else {\n      params.delete('stream');\n    }\n    \n    // Update recording type filter\n    if (filters.recordingType === 'detection') {\n      params.set('detection', '1');\n    } else {\n      params.delete('detection');\n    }\n    \n    // Update pagination\n    params.set('page', pagination.currentPage.toString());\n    params.set('limit', pagination.pageSize.toString());\n    \n    // Update sorting\n    params.set('sort', sortField);\n    params.set('order', sortDirection);\n    \n    // Update URL without reloading the page\n    const newUrl = `${window.location.pathname}?${params.toString()}`;\n    window.history.pushState({ path: newUrl }, '', newUrl);\n    \n    // Also update the reload behavior to maintain URL parameters\n    // This is the key to preserving parameters during page reload\n    const reloadUrl = newUrl;\n    window.onbeforeunload = function() {\n      // Replace the current URL with our preserved URL just before reload\n      window.history.replaceState({ path: reloadUrl }, '', reloadUrl);\n    };\n  }\n};\n"],"names":["FiltersSidebar","filters","setFilters","pagination","setPagination","streams","filtersVisible","applyFilters","resetFilters","handleDateRangeChange","setDefaultDateRange","html","dateRange","startDate","e","prev","target","value","startTime","endDate","endTime","streamId","map","stream","name","recordingType","pageSize","parseInt","ActiveFilters","activeFiltersDisplay","removeFilter","hasActiveFilters","filter","index","label","key","mainContent","document","getElementById","__vitePreload","async","render","module","import","then","n","p","meta","url","QueryClientProvider","queryClient","RecordingsView","formatUtils","formatDateTime","isoString","Date","toLocaleString","formatDuration","seconds","hours","Math","floor","minutes","secs","toString","padStart","join","formatFileSize","bytes","units","i","size","length","toFixed","RecordingsTable","recordings","sortField","sortDirection","sortBy","selectedRecordings","toggleRecordingSelection","selectAll","toggleSelectAll","getSelectedCount","openDeleteModal","playRecording","downloadRecording","deleteRecording","recordingsTableBodyRef","totalItems","recording","id","start_time","duration","has_detections","PaginationControls","goToPage","startItem","endItem","currentPage","totalPages","recordingsAPI","hooks","useStreams","useQuery","timeout","retries","retryDelay","useRecordings","params","URLSearchParams","append","start","end","getDateRangeFromPreset","onSuccess","data","forEach","useRecordingDetections","end_time","detections","getTime","enabled","useDeleteRecording","useQueryClient","useMutation","mutationFn","recordingId","fetchJSON","method","invalidateQueries","queryKey","showStatusMessage","onError","error","console","message","useBatchDeleteRecordings","usePostMutation","result","successCount","succeeded","errorCount","failed","loadStreams","preset","now","today","getFullYear","getMonth","getDate","todayStart","toISOString","yesterday","setDate","yesterdayEnd","setHours","sevenDaysAgo","thirtyDaysAgo","defaultStart","loadRecordings","log","batchSize","batch","slice","Promise","all","checkRecordingHasDetections","enhancedFetch","deleteSelectedRecordings","selectedIds","Object","entries","_","isSelected","window","wsClient","isConnected","connect","batchDeleteClient","BatchDeleteRecordingsClient","warn","deleteSelectedRecordingsHttp","showBatchDeleteModal","deleteWithProgress","ids","response","headers","body","JSON","stringify","json","deleteAllFilteredRecordings","stream_name","detection","updateBatchDeleteProgress","current","total","status","complete","totalCount","fetch","ok","countError","handleOperationError","deleteAllFilteredRecordingsHttp","getClientId","timeoutPromise","reject","setTimeout","Error","race","wsError","deleteResponse","getRecordingDetections","showVideoModal","videoUrl","title","downloadUrl","link","createElement","href","download","replace","appendChild","click","removeChild","urlUtils","getFiltersFromUrl","urlParams","location","search","has","page","limit","sort","order","get","getActiveFiltersDisplay","activeFilters","push","loadFiltersFromUrl","setSortField","setSortDirection","newFilters","updateUrlWithFilters","set","delete","newUrl","pathname","history","pushState","path","reloadUrl","onbeforeunload","replaceState","setRecordings","useState","setStreams","setFiltersVisible","setHasActiveFilters","setActiveFiltersDisplay","setSelectedRecordings","setSelectAll","isDeleteModalOpen","setIsDeleteModalOpen","deleteMode","setDeleteMode","useRef","streamsData","isLoading","isLoadingStreams","streamsError","useEffect","Array","isArray","urlFilters","handleResponsiveFilters","addEventListener","removeEventListener","updateActiveFilters","split","recordingsData","isLoadingRecordings","recordingsError","refetch","refetchRecordings","recordingsArray","setHasData","updatePaginationFromResponse","innerWidth","hasData","pages","min","recordingsLength","ceil","resetToFirstPage","values","Boolean","closeDeleteModal","reloadRecordingsWithPreservedParams","updatedPagination","catch","mutate","deleteRecordingMutation","toggleFilters","defaultFilters","baseUrl","newDateRange","ContentLoader","field","newSelectAll","newSelectedRecordings","mode","confirm","DeleteConfirmationModal","currentUrlParams","currentSortField","currentSortDirection","updateUrl","paginationWithPage"],"mappings":"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"}