{"version":3,"file":"users-legacy-YfOibAKT.js","sources":["../../js/components/preact/users/UserRoles.js","../../js/components/preact/users/UsersTable.js","../../js/components/preact/users/AddUserModal.js","../../js/components/preact/users/EditUserModal.js","../../js/components/preact/users/DeleteUserModal.js","../../js/components/preact/users/ApiKeyModal.js","../../js/components/preact/UsersView.jsx","../../js/pages/users-page.jsx"],"sourcesContent":["/**\n * User role definitions\n */\nexport const USER_ROLES = {\n  0: 'Admin',\n  1: 'User',\n  2: 'Viewer',\n  3: 'API'\n};\n","/**\n * Users Table Component\n */\n\n\nimport { html } from '../../../html-helper.js';\nimport { USER_ROLES } from './UserRoles.js';\n\n/**\n * Users Table Component\n * @param {Object} props - Component props\n * @param {Array} props.users - List of users to display\n * @param {Function} props.onEdit - Function to handle edit action\n * @param {Function} props.onDelete - Function to handle delete action\n * @param {Function} props.onApiKey - Function to handle API key action\n * @returns {JSX.Element} Users table\n */\nexport function UsersTable({ users, onEdit, onDelete, onApiKey }) {\n  // Create direct handlers for each button\n  const handleEdit = (user, e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onEdit(user);\n  };\n  \n  const handleDelete = (user, e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onDelete(user);\n  };\n  \n  const handleApiKey = (user, e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onApiKey(user);\n  };\n  \n  return html`\n    <div class=\"overflow-x-auto\">\n      <table class=\"w-full border-collapse\">\n        <thead class=\"bg-gray-50 dark:bg-gray-700\">\n          <tr>\n            <th class=\"py-3 px-6 text-left font-semibold\">ID</th>\n            <th class=\"py-3 px-6 text-left font-semibold\">Username</th>\n            <th class=\"py-3 px-6 text-left font-semibold\">Email</th>\n            <th class=\"py-3 px-6 text-left font-semibold\">Role</th>\n            <th class=\"py-3 px-6 text-left font-semibold\">Status</th>\n            <th class=\"py-3 px-6 text-left font-semibold\">Last Login</th>\n            <th class=\"py-3 px-6 text-left font-semibold\">Actions</th>\n          </tr>\n        </thead>\n        <tbody class=\"divide-y divide-gray-200 dark:divide-gray-700\">\n          ${users.map(user => html`\n            <tr key=${user.id} class=\"hover:bg-gray-100 dark:hover:bg-gray-600\">\n              <td class=\"py-3 px-6 border-b border-gray-200 dark:border-gray-700\">${user.id}</td>\n              <td class=\"py-3 px-6 border-b border-gray-200 dark:border-gray-700\">${user.username}</td>\n              <td class=\"py-3 px-6 border-b border-gray-200 dark:border-gray-700\">${user.email || '-'}</td>\n              <td class=\"py-3 px-6 border-b border-gray-200 dark:border-gray-700\">${USER_ROLES[user.role] || 'Unknown'}</td>\n              <td class=\"py-3 px-6 border-b border-gray-200 dark:border-gray-700\">\n                <span class=${`inline-block px-2 py-1 text-xs font-semibold rounded-full ${user.is_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\n                  ${user.is_active ? 'Active' : 'Inactive'}\n                </span>\n              </td>\n              <td class=\"py-3 px-6 border-b border-gray-200 dark:border-gray-700\">${user.last_login ? new Date(user.last_login * 1000).toLocaleString() : 'Never'}</td>\n              <td class=\"py-3 px-6 border-b border-gray-200 dark:border-gray-700\">\n                <div class=\"flex space-x-2\">\n                  <button \n                    class=\"p-1 text-blue-600 hover:text-blue-800 rounded hover:bg-blue-100 transition-colors\"\n                    onClick=${(e) => handleEdit(user, e)}\n                    title=\"Edit User\"\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                    </svg>\n                  </button>\n                  <button \n                    class=\"p-1 text-red-600 hover:text-red-800 rounded hover:bg-red-100 transition-colors\"\n                    onClick=${(e) => handleDelete(user, e)}\n                    title=\"Delete User\"\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                    </svg>\n                  </button>\n                  <button \n                    class=\"p-1 text-gray-600 hover:text-gray-800 rounded hover:bg-gray-100 transition-colors\"\n                    onClick=${(e) => handleApiKey(user, e)}\n                    title=\"Manage API Key\"\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z\" />\n                    </svg>\n                  </button>\n                </div>\n              </td>\n            </tr>\n          `)}\n        </tbody>\n      </table>\n    </div>\n  `;\n}\n","/**\n * Add User Modal Component\n */\n\n\nimport { html } from '../../../html-helper.js';\nimport { USER_ROLES } from './UserRoles.js';\n\n/**\n * Add User Modal Component\n * @param {Object} props - Component props\n * @param {Object} props.formData - Form data for adding a user\n * @param {Function} props.handleInputChange - Function to handle input changes\n * @param {Function} props.handleAddUser - Function to handle user addition\n * @param {Function} props.onClose - Function to close the modal\n * @returns {JSX.Element} Add user modal\n */\nexport function AddUserModal({ formData, handleInputChange, handleAddUser, onClose }) {\n  // Direct submit handler\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    e.stopPropagation(); // Stop event from bubbling up\n    handleAddUser(e);\n  };\n\n  // Stop click propagation on modal content\n  const stopPropagation = (e) => {\n    e.stopPropagation();\n  };\n\n  return html`\n    <div class=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\" onClick=${onClose}>\n      <div class=\"bg-white rounded-lg p-6 max-w-md w-full dark:bg-gray-800 dark:text-white\" onClick=${stopPropagation}>\n        <h2 class=\"text-xl font-bold mb-4\">Add New User</h2>\n        \n        <form onSubmit=${handleSubmit}>\n          <div class=\"mb-4\">\n            <label class=\"block text-sm font-bold mb-2\" for=\"username\">\n              Username\n            </label>\n            <input\n              class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"username\"\n              type=\"text\"\n              name=\"username\"\n              value=${formData.username}\n              onChange=${handleInputChange}\n              required\n            />\n          </div>\n          \n          <div class=\"mb-4\">\n            <label class=\"block text-sm font-bold mb-2\" for=\"password\">\n              Password\n            </label>\n            <input\n              class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"password\"\n              type=\"password\"\n              name=\"password\"\n              value=${formData.password}\n              onChange=${handleInputChange}\n              required\n            />\n          </div>\n          \n          <div class=\"mb-4\">\n            <label class=\"block text-sm font-bold mb-2\" for=\"email\">\n              Email\n            </label>\n            <input\n              class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"email\"\n              type=\"email\"\n              name=\"email\"\n              value=${formData.email}\n              onChange=${handleInputChange}\n            />\n          </div>\n          \n          <div class=\"mb-4\">\n            <label class=\"block text-sm font-bold mb-2\" for=\"role\">\n              Role\n            </label>\n            <select\n              class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"role\"\n              name=\"role\"\n              value=${formData.role}\n              onChange=${handleInputChange}\n            >\n              ${Object.entries(USER_ROLES).map(([value, label]) => html`\n                <option value=${value}>${label}</option>\n              `)}\n            </select>\n          </div>\n          \n          <div class=\"mb-6\">\n            <label class=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"is_active\"\n                checked=${formData.is_active}\n                onChange=${handleInputChange}\n                class=\"mr-2\"\n              />\n              <span class=\"text-sm font-bold\">Active</span>\n            </label>\n          </div>\n          \n          <div class=\"flex justify-end mt-6\">\n            <button\n              type=\"button\"\n              class=\"px-4 py-2 bg-gray-300 text-gray-800 dark:bg-gray-600 dark:text-white rounded hover:bg-gray-400 dark:hover:bg-gray-500 mr-2\"\n              onClick=${onClose}\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              class=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n            >\n              Add User\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  `;\n}\n","/**\n * Edit User Modal Component\n */\n\nimport { html } from '../../../html-helper.js';\nimport { USER_ROLES } from './UserRoles.js';\n\n/**\n * Edit User Modal Component\n * @param {Object} props - Component props\n * @param {Object} props.currentUser - Current user being edited\n * @param {Object} props.formData - Form data for editing a user\n * @param {Function} props.handleInputChange - Function to handle input changes\n * @param {Function} props.handleEditUser - Function to handle user editing\n * @param {Function} props.onClose - Function to close the modal\n * @returns {JSX.Element} Edit user modal\n */\nexport function EditUserModal({ currentUser, formData, handleInputChange, handleEditUser, onClose }) {\n  // Direct submit handler\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    e.stopPropagation(); // Stop event from bubbling up\n    handleEditUser(e);\n  };\n\n  // Stop click propagation on modal content\n  const stopPropagation = (e) => {\n    e.stopPropagation();\n  };\n\n  return html`\n    <div class=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\" onClick=${onClose}>\n      <div class=\"bg-white rounded-lg p-6 max-w-md w-full dark:bg-gray-800 dark:text-white\" onClick=${stopPropagation}>\n        <h2 class=\"text-xl font-bold mb-4\">Edit User: ${currentUser.username}</h2>\n        \n        <form onSubmit=${handleSubmit}>\n          <div class=\"mb-4\">\n            <label class=\"block text-sm font-bold mb-2\" for=\"username\">\n              Username\n            </label>\n            <input\n              class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"username\"\n              type=\"text\"\n              name=\"username\"\n              value=${formData.username}\n              onChange=${handleInputChange}\n              required\n            />\n          </div>\n          \n          <div class=\"mb-4\">\n            <label class=\"block text-sm font-bold mb-2\" for=\"password\">\n              Password (leave blank to keep current)\n            </label>\n            <input\n              class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"password\"\n              type=\"password\"\n              name=\"password\"\n              value=${formData.password}\n              onChange=${handleInputChange}\n            />\n          </div>\n          \n          <div class=\"mb-4\">\n            <label class=\"block text-sm font-bold mb-2\" for=\"email\">\n              Email\n            </label>\n            <input\n              class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"email\"\n              type=\"email\"\n              name=\"email\"\n              value=${formData.email}\n              onChange=${handleInputChange}\n            />\n          </div>\n          \n          <div class=\"mb-4\">\n            <label class=\"block text-sm font-bold mb-2\" for=\"role\">\n              Role\n            </label>\n            <select\n              class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"role\"\n              name=\"role\"\n              value=${formData.role}\n              onChange=${handleInputChange}\n            >\n              ${Object.entries(USER_ROLES).map(([value, label]) => html`\n                <option value=${value}>${label}</option>\n              `)}\n            </select>\n          </div>\n          \n          <div class=\"mb-6\">\n            <label class=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                name=\"is_active\"\n                checked=${formData.is_active}\n                onChange=${handleInputChange}\n                class=\"mr-2\"\n              />\n              <span class=\"text-sm font-bold\">Active</span>\n            </label>\n          </div>\n          \n          <div class=\"flex justify-end mt-6\">\n            <button\n              type=\"button\"\n              class=\"px-4 py-2 bg-gray-300 text-gray-800 dark:bg-gray-600 dark:text-white rounded hover:bg-gray-400 dark:hover:bg-gray-500 mr-2\"\n              onClick=${onClose}\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              class=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n            >\n              Update User\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  `;\n}\n","/**\n * Delete User Modal Component\n */\n\n\nimport { html } from '../../../html-helper.js';\n\n/**\n * Delete User Modal Component\n * @param {Object} props - Component props\n * @param {Object} props.currentUser - Current user being deleted\n * @param {Function} props.handleDeleteUser - Function to handle user deletion\n * @param {Function} props.onClose - Function to close the modal\n * @returns {JSX.Element} Delete user modal\n */\nexport function DeleteUserModal({ currentUser, handleDeleteUser, onClose }) {\n  // Direct delete handler\n  const handleDeleteClick = (e) => {\n    e.stopPropagation(); // Stop event from bubbling up\n    handleDeleteUser();\n  };\n\n  // Stop click propagation on modal content\n  const stopPropagation = (e) => {\n    e.stopPropagation();\n  };\n\n  return html`\n    <div class=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\" onClick=${onClose}>\n      <div class=\"bg-white rounded-lg p-6 max-w-md w-full dark:bg-gray-800 dark:text-white\" onClick=${stopPropagation}>\n        <h2 class=\"text-xl font-bold mb-4\">Delete User</h2>\n        \n        <p class=\"mb-6\">\n          Are you sure you want to delete the user \"${currentUser.username}\"? This action cannot be undone.\n        </p>\n        \n        <div class=\"flex justify-end\">\n          <button\n            class=\"px-4 py-2 bg-gray-300 text-gray-800 dark:bg-gray-600 dark:text-white rounded hover:bg-gray-400 dark:hover:bg-gray-500 mr-2\"\n            onClick=${onClose}\n          >\n            Cancel\n          </button>\n          <button\n            class=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\n            onClick=${handleDeleteClick}\n          >\n            Delete User\n          </button>\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * API Key Modal Component\n */\n\n\nimport { html } from '../../../html-helper.js';\n\n/**\n * API Key Modal Component\n * @param {Object} props - Component props\n * @param {Object} props.currentUser - Current user for API key generation\n * @param {string} props.newApiKey - Newly generated API key\n * @param {Function} props.handleGenerateApiKey - Function to handle API key generation\n * @param {Function} props.copyApiKey - Function to copy API key to clipboard\n * @param {Function} props.onClose - Function to close the modal\n * @returns {JSX.Element} API key modal\n */\nexport function ApiKeyModal({ currentUser, newApiKey, handleGenerateApiKey, copyApiKey, onClose }) {\n  // Stop click propagation on modal content\n  const stopPropagation = (e) => {\n    e.stopPropagation();\n  };\n\n  // Log the API key for debugging\n  console.log('API Key Modal - newApiKey:', newApiKey);\n\n  // Create a custom close handler that prevents closing if an API key is displayed\n  const handleClose = (e) => {\n    // If we have an API key, prevent closing when clicking outside\n    if (newApiKey && newApiKey !== 'Generating...') {\n      // Only allow closing via the close button\n      return;\n    }\n    // Otherwise, proceed with normal close\n    onClose(e);\n  };\n\n  return html`\n    <div class=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\" onClick=${handleClose}>\n      <div class=\"bg-white rounded-lg p-6 max-w-md w-full dark:bg-gray-800 dark:text-white\" onClick=${stopPropagation}>\n        <h2 class=\"text-xl font-bold mb-4\">API Key for ${currentUser.username}</h2>\n\n        <div class=\"mb-6\">\n          ${newApiKey ? html`\n            <div class=\"mb-4\">\n              <label class=\"block text-sm font-bold mb-2\">\n                API Key\n              </label>\n              <div class=\"flex\">\n                <input\n                  class=\"shadow appearance-none border rounded-l w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                  type=\"text\"\n                  value=${newApiKey}\n                  readonly\n                />\n                <button\n                  class=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-r\"\n                  onClick=${copyApiKey}\n                >\n                  Copy\n                </button>\n              </div>\n              <p class=\"text-sm text-gray-600 dark:text-gray-300 mt-2\">\n                This key will only be shown once. Save it securely.\n              </p>\n            </div>\n          ` : html`\n            <p class=\"mb-4\">\n              Generate a new API key for this user. This will invalidate any existing API key.\n            </p>\n            <button\n              class=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-4\"\n              onClick=${handleGenerateApiKey}\n            >\n              Generate New API Key\n            </button>\n          `}\n        </div>\n\n        <div class=\"flex justify-end\">\n          <button\n            class=\"${newApiKey && newApiKey !== 'Generating...' ? 'px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700' : 'px-4 py-2 bg-gray-300 text-gray-800 dark:bg-gray-600 dark:text-white rounded hover:bg-gray-400 dark:hover:bg-gray-500'}\"\n            onClick=${onClose}\n          >\n            ${newApiKey && newApiKey !== 'Generating...' ? 'Done' : 'Close'}\n          </button>\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * LightNVR Web Interface Users View Component\n * Preact component for the user management page\n */\n\nimport { useState, useEffect, useRef, useCallback } from 'preact/hooks';\nimport { showStatusMessage } from './UI.js';\nimport { useQuery, useMutation, fetchJSON } from '../../query-client.js';\n\n// Import user components\nimport { USER_ROLES } from './users/UserRoles.js';\nimport { UsersTable } from './users/UsersTable.js';\nimport { AddUserModal } from './users/AddUserModal.js';\nimport { EditUserModal } from './users/EditUserModal.js';\nimport { DeleteUserModal } from './users/DeleteUserModal.js';\nimport { ApiKeyModal } from './users/ApiKeyModal.js';\n\n/**\n * UsersView component\n * @returns {JSX.Element} UsersView component\n */\nexport function UsersView() {\n  // State for modal visibility\n  const [activeModal, setActiveModal] = useState(null); // 'add', 'edit', 'delete', 'apiKey', or null\n\n  // State for selected user and API key\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n\n  // Form state for adding/editing users\n  const [formData, setFormData] = useState({\n    username: '',\n    password: '',\n    email: '',\n    role: 1,\n    is_active: true\n  });\n\n  /**\n   * Get auth headers for requests\n   * @returns {Object} Headers object with Authorization if available\n   */\n  const getAuthHeaders = useCallback(() => {\n    const auth = localStorage.getItem('auth');\n    return auth ? { 'Authorization': 'Basic ' + auth } : {};\n  }, []);\n\n  // Fetch users using useQuery\n  const {\n    data: usersData,\n    isLoading: loading,\n    error,\n    refetch: refetchUsers\n  } = useQuery(\n    ['users'],\n    '/api/auth/users',\n    {\n      headers: getAuthHeaders(),\n      cache: 'no-store',\n      timeout: 15000, // 15 second timeout\n      retries: 2,     // Retry twice\n      retryDelay: 1000 // 1 second between retries\n    }\n  );\n\n  // Extract users array from response\n  const users = usersData?.users || [];\n\n  // Add event listener for the add user button\n  useEffect(() => {\n    const addUserBtn = document.getElementById('add-user-btn');\n    if (addUserBtn) {\n      const handleAddUserClick = () => {\n        // Reset form data for new user\n        setFormData({\n          username: '',\n          password: '',\n          email: '',\n          role: 1,\n          is_active: true\n        });\n        setActiveModal('add');\n      };\n\n      addUserBtn.addEventListener('click', handleAddUserClick);\n\n      return () => {\n        if (addUserBtn) {\n          addUserBtn.removeEventListener('click', handleAddUserClick);\n        }\n      };\n    }\n  }, []);\n\n  /**\n   * Handle form input changes\n   * @param {Event} e - Input change event\n   */\n  const handleInputChange = useCallback((e) => {\n    const { name, value, type, checked } = e.target;\n\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: type === 'checkbox' ? checked : (name === 'role' ? parseInt(value, 10) : value)\n    }));\n  }, []);\n\n  // Add user mutation\n  const addUserMutation = useMutation({\n    mutationFn: async (userData) => {\n      return await fetchJSON('/api/auth/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...getAuthHeaders()\n        },\n        body: JSON.stringify(userData),\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n    },\n    onSuccess: () => {\n      // Close modal and show success message\n      setActiveModal(null);\n      showStatusMessage('User added successfully', 'success', 5000);\n\n      // Refresh users list\n      refetchUsers();\n    },\n    onError: (error) => {\n      console.error('Error adding user:', error);\n      showStatusMessage(`Error adding user: ${error.message}`, 'error', 8000);\n    }\n  });\n\n  // Edit user mutation\n  const editUserMutation = useMutation({\n    mutationFn: async ({ userId, userData }) => {\n      return await fetchJSON(`/api/auth/users/${userId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          ...getAuthHeaders()\n        },\n        body: JSON.stringify(userData),\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n    },\n    onSuccess: () => {\n      // Close modal and show success message\n      setActiveModal(null);\n      showStatusMessage('User updated successfully', 'success', 5000);\n\n      // Refresh users list\n      refetchUsers();\n    },\n    onError: (error) => {\n      console.error('Error updating user:', error);\n      showStatusMessage(`Error updating user: ${error.message}`, 'error', 8000);\n    }\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId) => {\n      return await fetchJSON(`/api/auth/users/${userId}`, {\n        method: 'DELETE',\n        headers: getAuthHeaders(),\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n    },\n    onSuccess: () => {\n      // Close modal and show success message\n      setActiveModal(null);\n      showStatusMessage('User deleted successfully', 'success', 5000);\n\n      // Refresh users list\n      refetchUsers();\n    },\n    onError: (error) => {\n      console.error('Error deleting user:', error);\n      showStatusMessage(`Error deleting user: ${error.message}`, 'error', 8000);\n    }\n  });\n\n  // Generate API key mutation\n  const generateApiKeyMutation = useMutation({\n    mutationFn: async (userId) => {\n      return await fetchJSON(`/api/auth/users/${userId}/api-key`, {\n        method: 'POST',\n        headers: getAuthHeaders(),\n        timeout: 20000, // 20 second timeout for key generation\n        retries: 1,     // Retry once\n        retryDelay: 2000 // 2 seconds between retries\n      });\n    },\n    onMutate: () => {\n      // Show loading state\n      setApiKey('Generating...');\n    },\n    onSuccess: (data) => {\n      // Set the API key and ensure the modal stays open\n      setApiKey(data.api_key);\n      showStatusMessage('API key generated successfully', 'success');\n\n      // Refresh users list without affecting the modal\n      // We'll use a separate function to avoid closing the modal\n      setTimeout(() => {\n        refetchUsers();\n      }, 100);\n    },\n    onError: (error) => {\n      console.error('Error generating API key:', error);\n      setApiKey('');\n      showStatusMessage(`Error generating API key: ${error.message}`, 'error');\n    }\n  });\n\n  /**\n   * Handle form submission for adding a user\n   * @param {Event} e - Form submit event\n   */\n  const handleAddUser = useCallback((e) => {\n    if (e) e.preventDefault();\n\n    console.log('Adding user:', formData.username);\n    addUserMutation.mutate(formData);\n  }, [formData]);\n\n  /**\n   * Handle form submission for editing a user\n   * @param {Event} e - Form submit event\n   */\n  const handleEditUser = useCallback((e) => {\n    if (e) e.preventDefault();\n\n    console.log('Editing user:', selectedUser.id, selectedUser.username);\n    editUserMutation.mutate({\n      userId: selectedUser.id,\n      userData: formData\n    });\n  }, [selectedUser, formData]);\n\n  /**\n   * Handle user deletion\n   */\n  const handleDeleteUser = useCallback(() => {\n    console.log('Deleting user:', selectedUser.id, selectedUser.username);\n    deleteUserMutation.mutate(selectedUser.id);\n  }, [selectedUser]);\n\n  /**\n   * Handle generating a new API key for a user\n   */\n  const handleGenerateApiKey = useCallback(() => {\n    console.log('Generating API key for user:', selectedUser.id, selectedUser.username);\n    generateApiKeyMutation.mutate(selectedUser.id);\n  }, [selectedUser]);\n\n  /**\n   * Copy API key to clipboard\n   */\n  const copyApiKey = useCallback(() => {\n    navigator.clipboard.writeText(apiKey)\n      .then(() => {\n        // Use global toast function if available\n        if (window.showSuccessToast) {\n          window.showSuccessToast('API key copied to clipboard');\n        } else {\n          // Fallback to standard showStatusMessage\n          showStatusMessage('API key copied to clipboard', 'success');\n        }\n      })\n      .catch((err) => {\n        console.error('Error copying API key:', err);\n\n        // Use global toast function if available\n        if (window.showErrorToast) {\n          window.showErrorToast('Failed to copy API key');\n        } else {\n          // Fallback to standard showStatusMessage\n          showStatusMessage('Failed to copy API key', 'error');\n        }\n      });\n  }, [apiKey]);\n\n  /**\n   * Open the edit modal for a user\n   * @param {Object} user - User to edit\n   */\n  const openEditModal = useCallback((user) => {\n    setSelectedUser(user);\n    setFormData({\n      username: user.username,\n      password: '', // Don't include the password in the form\n      email: user.email || '',\n      role: user.role,\n      is_active: user.is_active\n    });\n    setActiveModal('edit');\n  }, []);\n\n  /**\n   * Open the delete modal for a user\n   * @param {Object} user - User to delete\n   */\n  const openDeleteModal = useCallback((user) => {\n    setSelectedUser(user);\n    setActiveModal('delete');\n  }, []);\n\n  /**\n   * Open the API key modal for a user\n   * @param {Object} user - User to generate API key for\n   */\n  const openApiKeyModal = useCallback((user) => {\n    setSelectedUser(user);\n    setApiKey('');\n    setActiveModal('apiKey');\n  }, []);\n\n  /**\n   * Close any open modal\n   */\n  const closeModal = useCallback(() => {\n    setActiveModal(null);\n  }, []);\n\n  // Render loading state\n  if (loading && users.length === 0) {\n    return (\n      <div className=\"flex justify-center items-center p-8\">\n        <div className=\"w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    );\n  }\n\n  // Render empty state\n  if (users.length === 0 && !loading) {\n    return (\n      <div>\n        <div className=\"bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded relative mb-4\">\n          <h4 className=\"font-bold mb-2\">No Users Found</h4>\n          <p>Click the \"Add User\" button to create your first user.</p>\n        </div>\n        {activeModal === 'add' && (\n          <AddUserModal\n            formData={formData}\n            handleInputChange={handleInputChange}\n            handleAddUser={handleAddUser}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    );\n  }\n\n  // Render users table with modals\n  return (\n    <div>\n      <UsersTable\n        users={users}\n        onEdit={openEditModal}\n        onDelete={openDeleteModal}\n        onApiKey={openApiKeyModal}\n      />\n\n      {activeModal === 'add' && (\n        <AddUserModal\n          formData={formData}\n          handleInputChange={handleInputChange}\n          handleAddUser={handleAddUser}\n          onClose={closeModal}\n        />\n      )}\n\n      {activeModal === 'edit' && (\n        <EditUserModal\n          currentUser={selectedUser}\n          formData={formData}\n          handleInputChange={handleInputChange}\n          handleEditUser={handleEditUser}\n          onClose={closeModal}\n        />\n      )}\n\n      {activeModal === 'delete' && (\n        <DeleteUserModal\n          currentUser={selectedUser}\n          handleDeleteUser={handleDeleteUser}\n          onClose={closeModal}\n        />\n      )}\n\n      {activeModal === 'apiKey' && (\n        <ApiKeyModal\n          currentUser={selectedUser}\n          newApiKey={apiKey}\n          handleGenerateApiKey={handleGenerateApiKey}\n          copyApiKey={copyApiKey}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n}\n","/**\n * LightNVR Web Interface Users Page\n * Entry point for the users page\n */\n\nimport { render } from 'preact';\nimport { UsersView } from '../components/preact/UsersView.jsx';\nimport { QueryClientProvider, queryClient } from '../query-client.js';\nimport {Header} from \"../components/preact/Header.jsx\";\nimport {Footer} from \"../components/preact/Footer.jsx\";\n\n// Render the UsersView component when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Get the container element\n  const container = document.getElementById('main-content');\n\n  if (container) {\n    render(\n      <QueryClientProvider client={queryClient}>\n        <Header />\n        <UsersView />\n        <Footer />\n      </QueryClientProvider>,\n      container\n    );\n  }\n});\n"],"names":["USER_ROLES","UsersTable","users","onEdit","onDelete","onApiKey","html","map","user","id","username","email","role","is_active","last_login","Date","toLocaleString","e","handleEdit","preventDefault","stopPropagation","handleDelete","handleApiKey","AddUserModal","formData","handleInputChange","handleAddUser","onClose","password","Object","entries","value","label","EditUserModal","currentUser","handleEditUser","DeleteUserModal","handleDeleteUser","ApiKeyModal","newApiKey","handleGenerateApiKey","copyApiKey","console","log","UsersView","activeModal","setActiveModal","useState","selectedUser","setSelectedUser","apiKey","setApiKey","setFormData","getAuthHeaders","useCallback","auth","localStorage","getItem","Authorization","data","usersData","isLoading","loading","error","refetch","refetchUsers","useQuery","headers","cache","timeout","retries","retryDelay","useEffect","addUserBtn","document","getElementById","handleAddUserClick","addEventListener","removeEventListener","name","type","checked","target","prevData","parseInt","addUserMutation","useMutation","mutationFn","async","fetchJSON","method","body","JSON","stringify","userData","onSuccess","showStatusMessage","onError","message","editUserMutation","userId","deleteUserMutation","generateApiKeyMutation","onMutate","api_key","setTimeout","mutate","navigator","clipboard","writeText","then","window","showSuccessToast","catch","err","showErrorToast","openEditModal","openDeleteModal","openApiKeyModal","closeModal","length","jsxs","className","children","jsx","container","render","QueryClientProvider","client","queryClient","Header","Footer"],"mappings":"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"}