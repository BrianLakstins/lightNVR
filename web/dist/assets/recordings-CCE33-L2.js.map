{"version":3,"file":"recordings-CCE33-L2.js","sources":["../../js/components/preact/recordings/FiltersSidebar.jsx","../../js/components/preact/recordings/ActiveFilters.jsx","../../js/components/preact/recordings/formatUtils.js","../../js/components/preact/recordings/RecordingsTable.jsx","../../js/components/preact/recordings/PaginationControls.jsx","../../js/components/preact/recordings/recordingsAPI.jsx","../../js/components/preact/recordings/urlUtils.js","../../js/components/preact/RecordingsView.jsx","../../js/components/preact/BatchDeleteModal.jsx","../../js/pages/recordings-page.jsx"],"sourcesContent":["/**\n * FiltersSidebar component for RecordingsView\n */\n\nimport { h } from 'preact';\n\n/**\n * FiltersSidebar component\n * @param {Object} props Component props\n * @returns {JSX.Element} FiltersSidebar component\n */\nexport function FiltersSidebar({\n  filters,\n  setFilters,\n  pagination,\n  setPagination,\n  streams,\n  filtersVisible,\n  applyFilters,\n  resetFilters,\n  handleDateRangeChange,\n  setDefaultDateRange\n}) {\n  return (\n    <aside id=\"filters-sidebar\"\n           className={`filters-sidebar w-full md:w-64 bg-white dark:bg-gray-800 rounded-lg shadow p-4 md:sticky md:top-4 md:self-start transition-all duration-300 ${!filtersVisible ? 'hidden md:block' : ''}`}>\n      <div className=\"filter-group mb-4\">\n        <h3 className=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Date Range</h3>\n        <div className=\"filter-option mb-2\">\n          <label htmlFor=\"date-range-select\" className=\"block mb-1 text-sm font-medium\">Quick Select:</label>\n          <select id=\"date-range-select\"\n                  className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value={filters.dateRange}\n                  onChange={handleDateRangeChange}>\n            <option value=\"today\">Today</option>\n            <option value=\"yesterday\">Yesterday</option>\n            <option value=\"last7days\">Last 7 Days</option>\n            <option value=\"last30days\">Last 30 Days</option>\n            <option value=\"custom\">Custom Range</option>\n          </select>\n        </div>\n\n        <div id=\"custom-date-range\"\n             className=\"filter-option space-y-3\"\n             style={{display: filters.dateRange === 'custom' ? 'block' : 'none'}}>\n          <div className=\"space-y-1\">\n            <label htmlFor=\"start-date\" className=\"block text-sm font-medium\">Start Date:</label>\n            <input type=\"date\" id=\"start-date\"\n                   className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                   value={filters.startDate}\n                   onChange={e => setFilters(prev => ({ ...prev, startDate: e.target.value }))} />\n            <div className=\"mt-1\">\n              <label htmlFor=\"start-time\" className=\"block text-sm font-medium\">Time:</label>\n              <input type=\"time\" id=\"start-time\"\n                     className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                     value={filters.startTime}\n                     onChange={e => setFilters(prev => ({ ...prev, startTime: e.target.value }))} />\n            </div>\n          </div>\n\n          <div className=\"space-y-1\">\n            <label htmlFor=\"end-date\" className=\"block text-sm font-medium\">End Date:</label>\n            <input type=\"date\" id=\"end-date\"\n                   className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                   value={filters.endDate}\n                   onChange={e => setFilters(prev => ({ ...prev, endDate: e.target.value }))} />\n            <div className=\"mt-1\">\n              <label htmlFor=\"end-time\" className=\"block text-sm font-medium\">Time:</label>\n              <input type=\"time\" id=\"end-time\"\n                     className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                     value={filters.endTime}\n                     onChange={e => setFilters(prev => ({ ...prev, endTime: e.target.value }))} />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"filter-group mb-4\">\n        <h3 className=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Stream</h3>\n        <div className=\"filter-option\">\n          <select id=\"stream-filter\"\n                  className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value={filters.streamId}\n                  onChange={e => setFilters(prev => ({ ...prev, streamId: e.target.value }))}>\n            <option value=\"all\">All Streams</option>\n            {streams.map(stream => (\n              <option key={stream.name} value={stream.name}>{stream.name}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      <div className=\"filter-group mb-4\">\n        <h3 className=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Recording Type</h3>\n        <div className=\"filter-option\">\n          <select id=\"detection-filter\"\n                  className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value={filters.recordingType}\n                  onChange={e => setFilters(prev => ({ ...prev, recordingType: e.target.value }))}>\n            <option value=\"all\">All Recordings</option>\n            <option value=\"detection\">Detection Events Only</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"filter-group mb-4\">\n        <h3 className=\"text-lg font-medium mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">Display Options</h3>\n        <div className=\"filter-option\">\n          <label htmlFor=\"page-size\" className=\"block mb-1 text-sm font-medium\">Items per page:</label>\n          <select id=\"page-size\"\n                  className=\"w-full p-2 border border-gray-300 rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value={pagination.pageSize}\n                  onChange={e => setPagination(prev => ({ ...prev, pageSize: parseInt(e.target.value, 10) }))}>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n            <option value=\"50\">50</option>\n            <option value=\"100\">100</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"filter-actions flex space-x-2\">\n        <button id=\"apply-filters-btn\"\n                className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n                onClick={applyFilters}>\n          Apply Filters\n        </button>\n        <button id=\"reset-filters-btn\"\n                className=\"flex-1 px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition-colors dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600\"\n                onClick={resetFilters}>\n          Reset\n        </button>\n      </div>\n    </aside>\n  );\n}\n","/**\n * ActiveFilters component for RecordingsView\n */\n\nimport { h } from 'preact';\n\n/**\n * ActiveFilters component\n * @param {Object} props Component props\n * @returns {JSX.Element} ActiveFilters component\n */\nexport function ActiveFilters({ activeFiltersDisplay, removeFilter, hasActiveFilters }) {\n  if (!hasActiveFilters) {\n    return null;\n  }\n\n  return (\n    <div id=\"active-filters\"\n         className=\"active-filters mb-4 p-3 bg-blue-50 dark:bg-blue-900/30 rounded-lg flex flex-wrap gap-2\">\n      {activeFiltersDisplay.map((filter, index) => (\n        <div key={index} className=\"filter-tag inline-flex items-center px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-200\">\n          <span>{filter.label}</span>\n          <button className=\"ml-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 focus:outline-none\"\n                  onClick={() => removeFilter(filter.key)}>\n            Ã—\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n}\n","/**\n * Formatting utility functions for RecordingsView\n */\n\nexport const formatUtils = {\n  /**\n   * Format date time\n   * @param {string} isoString ISO date string\n   * @returns {string} Formatted date time\n   */\n  formatDateTime: (isoString) => {\n    if (!isoString) return '';\n    \n    const date = new Date(isoString);\n    return date.toLocaleString();\n  },\n  \n  /**\n   * Format duration\n   * @param {number} seconds Duration in seconds\n   * @returns {string} Formatted duration\n   */\n  formatDuration: (seconds) => {\n    if (!seconds) return '00:00:00';\n    \n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = Math.floor(seconds % 60);\n    \n    return [\n      hours.toString().padStart(2, '0'),\n      minutes.toString().padStart(2, '0'),\n      secs.toString().padStart(2, '0')\n    ].join(':');\n  },\n  \n  /**\n   * Format file size\n   * @param {number} bytes Size in bytes\n   * @returns {string} Formatted file size\n   */\n  formatFileSize: (bytes) => {\n    if (!bytes) return '0 B';\n    \n    const units = ['B', 'KB', 'MB', 'GB', 'TB'];\n    let i = 0;\n    let size = bytes;\n    \n    while (size >= 1024 && i < units.length - 1) {\n      size /= 1024;\n      i++;\n    }\n    \n    return `${size.toFixed(1)} ${units[i]}`;\n  }\n};\n","/**\n * RecordingsTable component for RecordingsView\n */\n\nimport { h } from 'preact';\nimport { formatUtils } from './formatUtils.js';\n\n/**\n * RecordingsTable component\n * @param {Object} props Component props\n * @returns {JSX.Element} RecordingsTable component\n */\nexport function RecordingsTable({\n  recordings,\n  sortField,\n  sortDirection,\n  sortBy,\n  selectedRecordings,\n  toggleRecordingSelection,\n  selectAll,\n  toggleSelectAll,\n  getSelectedCount,\n  openDeleteModal,\n  playRecording,\n  downloadRecording,\n  deleteRecording,\n  recordingsTableBodyRef,\n  pagination\n}) {\n  return (\n    <div className=\"recordings-container bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden w-full\">\n      <div className=\"batch-actions p-3 border-b border-gray-200 dark:border-gray-700 flex flex-wrap gap-2 items-center\">\n        <div className=\"selected-count text-sm text-gray-600 dark:text-gray-400 mr-2\">\n          {getSelectedCount() > 0 ?\n            `${getSelectedCount()} recording${getSelectedCount() !== 1 ? 's' : ''} selected` :\n            'No recordings selected'}\n        </div>\n        <button\n          className=\"px-3 py-1.5 bg-red-600 text-white rounded hover:bg-red-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          disabled={getSelectedCount() === 0}\n          onClick={() => openDeleteModal('selected')}>\n          Delete Selected\n        </button>\n        <button\n          className=\"px-3 py-1.5 bg-red-600 text-white rounded hover:bg-red-700 transition-colors\"\n          onClick={() => openDeleteModal('all')}>\n          Delete All Filtered\n        </button>\n      </div>\n      <div className=\"overflow-x-auto\">\n        <table id=\"recordings-table\" className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n          <thead className=\"bg-gray-50 dark:bg-gray-700\">\n            <tr>\n              <th className=\"w-10 px-4 py-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectAll}\n                  onChange={toggleSelectAll}\n                  className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"\n                />\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer\"\n                  onClick={() => sortBy('stream_name')}>\n                <div className=\"flex items-center\">\n                  Stream\n                  {sortField === 'stream_name' && (\n                    <span className=\"sort-icon ml-1\">{sortDirection === 'asc' ? 'â–²' : 'â–¼'}</span>\n                  )}\n                </div>\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer\"\n                  onClick={() => sortBy('start_time')}>\n                <div className=\"flex items-center\">\n                  Start Time\n                  {sortField === 'start_time' && (\n                    <span className=\"sort-icon ml-1\">{sortDirection === 'asc' ? 'â–²' : 'â–¼'}</span>\n                  )}\n                </div>\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                Duration\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer\"\n                  onClick={() => sortBy('size_bytes')}>\n                <div className=\"flex items-center\">\n                  Size\n                  {sortField === 'size_bytes' && (\n                    <span className=\"sort-icon ml-1\">{sortDirection === 'asc' ? 'â–²' : 'â–¼'}</span>\n                  )}\n                </div>\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                Detections\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                Actions\n              </th>\n            </tr>\n          </thead>\n          <tbody ref={recordingsTableBodyRef} className=\"bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700\">\n            {recordings.length === 0 ? (\n              <tr>\n                <td colSpan=\"6\" className=\"px-6 py-4 text-center text-gray-500 dark:text-gray-400\">\n                  {pagination.totalItems === 0 ? 'No recordings found' : 'Loading recordings...'}\n                </td>\n              </tr>\n            ) : recordings.map(recording => (\n              <tr key={recording.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                <td className=\"px-4 py-4 whitespace-nowrap\">\n                  <input\n                    type=\"checkbox\"\n                    checked={!!selectedRecordings[recording.id]}\n                    onChange={() => toggleRecordingSelection(recording.id)}\n                    className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"\n                  />\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">{recording.stream || ''}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">{formatUtils.formatDateTime(recording.start_time)}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">{formatUtils.formatDuration(recording.duration)}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">{recording.size || ''}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  {recording.has_detections ? (\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100\">\n                      <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M10 12a2 2 0 100-4 2 2 0 000 4z\"></path>\n                        <path fillRule=\"evenodd\" d=\"M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z\" clipRule=\"evenodd\"></path>\n                      </svg>\n                      Yes\n                    </span>\n                  ) : ''}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"flex space-x-2\">\n                    <button className=\"p-1 rounded-full text-blue-600 hover:bg-blue-100 dark:text-blue-400 dark:hover:bg-blue-900 focus:outline-none\"\n                            onClick={() => playRecording(recording)}\n                            title=\"Play\">\n                      <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                    <button className=\"p-1 rounded-full text-green-600 hover:bg-green-100 dark:text-green-400 dark:hover:bg-green-900 focus:outline-none\"\n                            onClick={() => downloadRecording(recording)}\n                            title=\"Download\">\n                      <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clipRule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                    <button className=\"p-1 rounded-full text-red-600 hover:bg-red-100 dark:text-red-400 dark:hover:bg-red-900 focus:outline-none\"\n                            onClick={() => deleteRecording(recording)}\n                            title=\"Delete\">\n                      <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","/**\n * PaginationControls component for RecordingsView\n */\n\nimport { h } from 'preact';\n\n/**\n * PaginationControls component\n * @param {Object} props Component props\n * @returns {JSX.Element} PaginationControls component\n */\nexport function PaginationControls({ pagination, goToPage }) {\n  return (\n    <div className=\"pagination-controls flex flex-col sm:flex-row justify-between items-center p-4 border-t border-gray-200 dark:border-gray-700\">\n      <div className=\"pagination-info text-sm text-gray-600 dark:text-gray-400 mb-2 sm:mb-0\">\n        Showing <span id=\"pagination-showing\">{pagination.startItem}-{pagination.endItem}</span> of <span id=\"pagination-total\">{pagination.totalItems}</span> recordings\n      </div>\n      <div className=\"pagination-buttons flex items-center space-x-1\">\n        <button id=\"pagination-first\"\n                className=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"First Page\"\n                onClick={() => goToPage(1)}\n                disabled={pagination.currentPage === 1}>\n          Â«\n        </button>\n        <button id=\"pagination-prev\"\n                className=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"Previous Page\"\n                onClick={() => goToPage(pagination.currentPage - 1)}\n                disabled={pagination.currentPage === 1}>\n          â€¹\n        </button>\n        <span id=\"pagination-current\" className=\"px-2 text-sm text-gray-700 dark:text-gray-300\">\n          Page {pagination.currentPage} of {pagination.totalPages}\n        </span>\n        <button id=\"pagination-next\"\n                className=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"Next Page\"\n                onClick={() => goToPage(pagination.currentPage + 1)}\n                disabled={pagination.currentPage === pagination.totalPages}>\n          â€º\n        </button>\n        <button id=\"pagination-last\"\n                className=\"w-8 h-8 flex items-center justify-center rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"Last Page\"\n                onClick={() => goToPage(pagination.totalPages)}\n                disabled={pagination.currentPage === pagination.totalPages}>\n          Â»\n        </button>\n      </div>\n    </div>\n  );\n}\n","/**\n * API functions for RecordingsView\n */\n\nimport { showStatusMessage } from '../ToastContainer.jsx';\nimport { formatUtils } from './formatUtils.js';\nimport { fetchJSON, enhancedFetch } from '../../../fetch-utils.js';\nimport {\n  useQuery,\n  useMutation,\n  useQueryClient,\n  usePostMutation,\n} from '../../../query-client.js';\n\n/**\n * RecordingsAPI - Handles all API calls related to recordings\n */\nexport const recordingsAPI = {\n  /**\n   * Custom hooks for preact-query\n   */\n  hooks: {\n    /**\n     * Hook to fetch streams list\n     * @returns {Object} Query result\n     */\n    useStreams: () => {\n      return useQuery('streams', '/api/streams', {\n        timeout: 15000, // 15 second timeout\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n    },\n\n    /**\n     * Hook to fetch recordings with filters\n     * @param {Object} filters Filter settings\n     * @param {Object} pagination Pagination settings\n     * @param {string} sortField Sort field\n     * @param {string} sortDirection Sort direction\n     * @returns {Object} Query result\n     */\n    useRecordings: (filters, pagination, sortField, sortDirection) => {\n      // Build query parameters\n      const params = new URLSearchParams();\n      params.append('page', pagination.currentPage);\n      params.append('limit', pagination.pageSize);\n      params.append('sort', sortField);\n      params.append('order', sortDirection);\n\n      // Add date range filters\n      if (filters.dateRange === 'custom') {\n        params.append('start', `${filters.startDate}T${filters.startTime}:00`);\n        params.append('end', `${filters.endDate}T${filters.endTime}:00`);\n      } else {\n        // Convert predefined range to actual dates\n        const { start, end } = recordingsAPI.getDateRangeFromPreset(filters.dateRange);\n        params.append('start', start);\n        params.append('end', end);\n      }\n\n      // Add stream filter\n      if (filters.streamId !== 'all') {\n        params.append('stream', filters.streamId);\n      }\n\n      // Add recording type filter\n      if (filters.recordingType === 'detection') {\n        params.append('detection', '1');\n      }\n\n      // Create query key that includes all filter parameters\n      const queryKey = ['recordings', filters, pagination, sortField, sortDirection];\n\n      return useQuery(\n        queryKey,\n        `/api/recordings?${params.toString()}`,\n        {\n          timeout: 30000, // 30 second timeout for potentially large data\n          retries: 2,     // Retry twice\n          retryDelay: 1000 // 1 second between retries\n        },\n        // No special handling needed - we rely on the backend API for detection information\n      );\n    },\n\n    // useRecordingDetections hook removed - we rely on the backend API for detection information\n\n    /**\n     * Hook to delete a recording\n     * @returns {Object} Mutation result\n     */\n    useDeleteRecording: () => {\n      const queryClient = useQueryClient();\n\n      return useMutation({\n        mutationFn: async (recordingId) => {\n          const url = `/api/recordings/${recordingId}`;\n          return await fetchJSON(url, {\n            method: 'DELETE',\n            timeout: 15000, // 15 second timeout\n            retries: 1,     // Retry once\n            retryDelay: 1000 // 1 second between retries\n          });\n        },\n        onSuccess: () => {\n          // Invalidate recordings queries to refresh the list\n          queryClient.invalidateQueries({ queryKey: ['recordings'] });\n          showStatusMessage('Recording deleted successfully');\n        },\n        onError: (error) => {\n          console.error('Error deleting recording:', error);\n          showStatusMessage('Error deleting recording: ' + error.message);\n        }\n      });\n    },\n\n    /**\n     * Hook to delete multiple recordings\n     * @returns {Object} Mutation result\n     */\n    useBatchDeleteRecordings: () => {\n      const queryClient = useQueryClient();\n\n      return usePostMutation(\n        '/api/recordings/batch-delete',\n        {\n          timeout: 60000, // 60 second timeout for batch operations\n          retries: 1,     // Retry once\n          retryDelay: 2000 // 2 seconds between retries\n        },\n        {\n          onSuccess: (result) => {\n            // Invalidate recordings queries to refresh the list\n            queryClient.invalidateQueries({ queryKey: ['recordings'] });\n\n            const successCount = result.succeeded;\n            const errorCount = result.failed;\n\n            // Show status message\n            if (successCount > 0 && errorCount === 0) {\n              showStatusMessage(`Successfully deleted ${successCount} recording${successCount !== 1 ? 's' : ''}`);\n            } else if (successCount > 0 && errorCount > 0) {\n              showStatusMessage(`Deleted ${successCount} recording${successCount !== 1 ? 's' : ''}, but failed to delete ${errorCount}`);\n            } else {\n              showStatusMessage(`Failed to delete ${errorCount} recording${errorCount !== 1 ? 's' : ''}`);\n            }\n          },\n          onError: (error) => {\n            console.error('Error in batch delete operation:', error);\n            showStatusMessage('Error in batch delete operation: ' + error.message);\n          }\n        }\n      );\n    }\n  },\n  /**\n   * Load streams from API\n   * @returns {Promise<Array>} Array of streams\n   */\n  loadStreams: async () => {\n    try {\n      const data = await fetchJSON('/api/streams', {\n        timeout: 15000, // 15 second timeout\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      return data || [];\n    } catch (error) {\n      console.error('Error loading streams for filter:', error);\n      showStatusMessage('Error loading streams: ' + error.message);\n      return [];\n    }\n  },\n\n  /**\n   * Get date range from preset\n   * @param {string} preset Preset name\n   * @returns {Object} Start and end dates\n   */\n  getDateRangeFromPreset: (preset) => {\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);\n    const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);\n\n    let start, end;\n\n    switch (preset) {\n      case 'today':\n        start = todayStart.toISOString();\n        end = today.toISOString();\n        break;\n      case 'yesterday':\n        const yesterday = new Date(todayStart);\n        yesterday.setDate(yesterday.getDate() - 1);\n        const yesterdayEnd = new Date(yesterday);\n        yesterdayEnd.setHours(23, 59, 59);\n        start = yesterday.toISOString();\n        end = yesterdayEnd.toISOString();\n        break;\n      case 'last7days':\n        const sevenDaysAgo = new Date(todayStart);\n        sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n        start = sevenDaysAgo.toISOString();\n        end = today.toISOString();\n        break;\n      case 'last30days':\n        const thirtyDaysAgo = new Date(todayStart);\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        start = thirtyDaysAgo.toISOString();\n        end = today.toISOString();\n        break;\n      default:\n        // Default to last 7 days\n        const defaultStart = new Date(todayStart);\n        defaultStart.setDate(defaultStart.getDate() - 7);\n        start = defaultStart.toISOString();\n        end = today.toISOString();\n    }\n\n    return { start, end };\n  },\n\n  /**\n   * Load recordings\n   * @param {Object} filters Filter settings\n   * @param {Object} pagination Pagination settings\n   * @param {string} sortField Sort field\n   * @param {string} sortDirection Sort direction\n   * @returns {Promise<Object>} Recordings data and pagination info\n   */\n  loadRecordings: async (filters, pagination, sortField, sortDirection) => {\n    try {\n      // Build query parameters\n      const params = new URLSearchParams();\n      params.append('page', pagination.currentPage);\n      params.append('limit', pagination.pageSize);\n      params.append('sort', sortField);\n      params.append('order', sortDirection);\n\n      // Add date range filters\n      if (filters.dateRange === 'custom') {\n        params.append('start', `${filters.startDate}T${filters.startTime}:00`);\n        params.append('end', `${filters.endDate}T${filters.endTime}:00`);\n      } else {\n        // Convert predefined range to actual dates\n        const { start, end } = recordingsAPI.getDateRangeFromPreset(filters.dateRange);\n        params.append('start', start);\n        params.append('end', end);\n      }\n\n      // Add stream filter\n      if (filters.streamId !== 'all') {\n        params.append('stream', filters.streamId);\n      }\n\n      // Add recording type filter\n      if (filters.recordingType === 'detection') {\n        params.append('detection', '1');\n      }\n\n      // Log the API request\n      console.log('API Request:', `/api/recordings?${params.toString()}`);\n\n      // Fetch recordings with enhanced fetch\n      const data = await fetchJSON(`/api/recordings?${params.toString()}`, {\n        timeout: 30000, // 30 second timeout for potentially large data\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      console.log('Recordings data received:', data);\n\n      // Set has_detections to false by default instead of making API calls\n      // This prevents unnecessary detection API calls on the recordings page\n      if (data.recordings && data.recordings.length > 0) {\n        // Process recordings in batches to avoid too many parallel requests\n        const batchSize = 5;\n        for (let i = 0; i < data.recordings.length; i += batchSize) {\n          const batch = data.recordings.slice(i, i + batchSize);\n          await Promise.all(batch.map(async (recording) => {\n            try {\n              recording.has_detections = await recordingsAPI.checkRecordingHasDetections(recording);\n            } catch (error) {\n              console.error(`Error checking detections for recording ${recording.id}:`, error);\n              recording.has_detections = false;\n            }\n          }));\n        }\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Error loading recordings:', error);\n      showStatusMessage('Error loading recordings: ' + error.message);\n      throw error;\n    }\n  },\n\n  /**\n   * Delete a single recording\n   * @param {Object} recording Recording to delete\n   * @returns {Promise<boolean>} Success status\n   */\n  deleteRecording: async (recording) => {\n    try {\n      await enhancedFetch(`/api/recordings/${recording.id}`, {\n        method: 'DELETE',\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      showStatusMessage('Recording deleted successfully');\n      return true;\n    } catch (error) {\n      console.error('Error deleting recording:', error);\n      showStatusMessage('Error deleting recording: ' + error.message);\n      return false;\n    }\n  },\n\n  /**\n   * Delete selected recordings\n   * @param {Object} selectedRecordings Object with recording IDs as keys\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteSelectedRecordings: async (selectedRecordings) => {\n    const selectedIds = Object.entries(selectedRecordings)\n      .filter(([_, isSelected]) => isSelected)\n      .map(([id, _]) => parseInt(id, 10));\n\n    if (selectedIds.length === 0) {\n      showStatusMessage('No recordings selected');\n      return { succeeded: 0, failed: 0 };\n    }\n\n    try {\n      // Check if WebSocket client is available\n      if (window.wsClient) {\n        console.log('Using WebSocket for batch delete operation');\n\n        // Connect the WebSocket client if not already connected\n        if (!window.wsClient.isConnected()) {\n          console.log('WebSocket not connected, connecting now...');\n          window.wsClient.connect();\n        }\n\n        // Initialize batch delete client if needed\n        if (!window.batchDeleteClient) {\n          if (typeof BatchDeleteRecordingsClient !== 'undefined') {\n            console.log('Creating new BatchDeleteRecordingsClient');\n            window.batchDeleteClient = new BatchDeleteRecordingsClient(window.wsClient);\n          } else {\n            console.warn('BatchDeleteRecordingsClient not available, falling back to HTTP');\n            return recordingsAPI.deleteSelectedRecordingsHttp(selectedIds);\n          }\n        }\n\n        // Show batch delete modal\n        if (typeof showBatchDeleteModal === 'function') {\n          showBatchDeleteModal();\n        }\n\n        // Use HTTP for batch delete\n        return recordingsAPI.deleteSelectedRecordingsHttp(selectedIds);\n      }\n\n      // Use HTTP for batch delete\n      return recordingsAPI.deleteSelectedRecordingsHttp(selectedIds);\n    } catch (error) {\n      console.error('Error in batch delete operation:', error);\n      showStatusMessage('Error in batch delete operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Delete selected recordings using HTTP (fallback)\n   * @param {Array<number>} selectedIds Array of recording IDs\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteSelectedRecordingsHttp: async (selectedIds) => {\n    try {\n      // Use the batch delete endpoint with enhanced fetch\n      const response = await enhancedFetch('/api/recordings/batch-delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ids: selectedIds\n        }),\n        timeout: 60000, // 60 second timeout for batch operations\n        retries: 1,     // Retry once\n        retryDelay: 2000 // 2 seconds between retries\n      });\n\n      const result = await response.json();\n      const successCount = result.succeeded;\n      const errorCount = result.failed;\n\n      // Show status message\n      if (successCount > 0 && errorCount === 0) {\n        showStatusMessage(`Successfully deleted ${successCount} recording${successCount !== 1 ? 's' : ''}`);\n      } else if (successCount > 0 && errorCount > 0) {\n        showStatusMessage(`Deleted ${successCount} recording${successCount !== 1 ? 's' : ''}, but failed to delete ${errorCount}`);\n      } else {\n        showStatusMessage(`Failed to delete ${errorCount} recording${errorCount !== 1 ? 's' : ''}`);\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Error in HTTP batch delete operation:', error);\n      showStatusMessage('Error in batch delete operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Delete all recordings matching current filter\n   * @param {Object} filters Current filters\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteAllFilteredRecordings: async (filters) => {\n    try {\n      // Create filter object\n      const filter = {};\n\n      // Add date range filters\n      if (filters.dateRange === 'custom') {\n        filter.start = `${filters.startDate}T${filters.startTime}:00`;\n        filter.end = `${filters.endDate}T${filters.endTime}:00`;\n      } else {\n        // Convert predefined range to actual dates\n        const { start, end } = recordingsAPI.getDateRangeFromPreset(filters.dateRange);\n        filter.start = start;\n        filter.end = end;\n      }\n\n      // Add stream filter\n      if (filters.streamId !== 'all') {\n        filter.stream_name = filters.streamId; // Changed from 'stream' to 'stream_name' to match API expectations\n      }\n\n      // Add recording type filter\n      if (filters.recordingType === 'detection') {\n        filter.detection = 1;\n      }\n\n      console.log('Deleting with filter:', filter);\n\n      // Show batch delete modal with indeterminate progress initially\n      if (typeof showBatchDeleteModal === 'function') {\n        showBatchDeleteModal();\n\n        // Update the progress UI with an indeterminate state\n        if (typeof window.updateBatchDeleteProgress === 'function') {\n          window.updateBatchDeleteProgress({\n            current: 0,\n            total: 0, // We don't know the total yet\n            succeeded: 0,\n            failed: 0,\n            status: `Preparing to delete recordings matching filter...`,\n            complete: false\n          });\n        }\n      }\n\n      // Get the total count from the current page's filter\n      // This will help us set a more accurate progress indicator\n      let totalCount = 0;\n      try {\n        // Build query parameters for the API request\n        const params = new URLSearchParams();\n\n        // Add date range parameters\n        if (filter.start) {\n          params.append('start', filter.start);\n        }\n\n        if (filter.end) {\n          params.append('end', filter.end);\n        }\n\n        // Add stream filter\n        if (filter.stream_name) {\n          params.append('stream', filter.stream_name);\n        }\n\n        // Add detection filter\n        if (filter.detection) {\n          params.append('detection', '1');\n        }\n\n        // Set page size to 1 to minimize data transfer, we just need the total count\n        params.append('page', '1');\n        params.append('limit', '1');\n\n        console.log('Getting total count with params:', params.toString());\n\n        // Fetch recordings to get pagination info\n        const response = await fetch(`/api/recordings?${params.toString()}`);\n        if (response.ok) {\n          const data = await response.json();\n          if (data && data.pagination && data.pagination.total) {\n            totalCount = data.pagination.total;\n            console.log(`Found ${totalCount} recordings matching filter`);\n\n            // Update the progress UI with the total count\n            if (typeof window.updateBatchDeleteProgress === 'function') {\n              window.updateBatchDeleteProgress({\n                current: 0,\n                total: totalCount,\n                succeeded: 0,\n                failed: 0,\n                status: `Found ${totalCount} recordings matching filter. Starting deletion...`,\n                complete: false\n              });\n            }\n          }\n        }\n      } catch (countError) {\n        console.warn('Error getting recording count:', countError);\n        // Continue anyway, we'll just show an indeterminate progress\n      }\n\n      // Set up an error handler in case the operation fails\n      const handleOperationError = (error) => {\n        console.error('Error in delete all operation:', error);\n        showStatusMessage('Error in delete all operation: ' + error.message);\n\n        // Update the progress UI to show the error\n        if (typeof window.updateBatchDeleteProgress === 'function') {\n          window.updateBatchDeleteProgress({\n            current: 0,\n            total: 0,\n            succeeded: 0,\n            failed: 0,\n            status: `Error: ${error.message}`,\n            complete: true\n          });\n        }\n\n        return { succeeded: 0, failed: 0 };\n      };\n\n        // Check if WebSocket client is available\n        if (window.wsClient) {\n          console.log('Using WebSocket for batch delete with filter');\n\n          // Connect the WebSocket client if not already connected\n          if (!window.wsClient.isConnected()) {\n            console.log('WebSocket not connected, connecting now...');\n            window.wsClient.connect();\n          }\n\n          // Initialize batch delete client if needed\n          if (!window.batchDeleteClient) {\n            if (typeof BatchDeleteRecordingsClient !== 'undefined') {\n              console.log('Creating new BatchDeleteRecordingsClient for filtered delete');\n              window.batchDeleteClient = new BatchDeleteRecordingsClient(window.wsClient);\n            } else {\n              console.warn('BatchDeleteRecordingsClient not available, falling back to HTTP');\n              return recordingsAPI.deleteAllFilteredRecordingsHttp(filter);\n            }\n          }\n\n          // Log the client ID being used\n          console.log('Using WebSocket client ID for filtered batch delete:', window.wsClient.getClientId());\n\n          // Set up a timeout to handle server crashes\n          const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => {\n              reject(new Error('Operation timed out or server crashed. Some recordings may have been deleted.'));\n            }, 60000); // 60 second timeout\n          });\n\n          // Use HTTP for batch delete with filter\n          return recordingsAPI.deleteAllFilteredRecordingsHttp(filter);\n        }\n\n        // Use HTTP for batch delete with filter\n        return recordingsAPI.deleteAllFilteredRecordingsHttp(filter);\n    } catch (error) {\n      console.error('Error in delete all operation:', error);\n      showStatusMessage('Error in delete all operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Delete all recordings matching filter using HTTP (fallback)\n   * @param {Object} filter Filter object\n   * @returns {Promise<Object>} Result with success and error counts\n   */\n  deleteAllFilteredRecordingsHttp: async (filter) => {\n    try {\n      // Use the batch delete endpoint with filter and enhanced fetch\n      const deleteResponse = await enhancedFetch('/api/recordings/batch-delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          filter: filter\n        }),\n        timeout: 120000, // 120 second timeout for potentially large batch operations\n        retries: 1,      // Retry once\n        retryDelay: 3000 // 3 seconds between retries\n      });\n\n      const result = await deleteResponse.json();\n      const successCount = result.succeeded;\n      const errorCount = result.failed;\n\n      // Show status message\n      if (successCount > 0 && errorCount === 0) {\n        showStatusMessage(`Successfully deleted ${successCount} recording${successCount !== 1 ? 's' : ''}`);\n      } else if (successCount > 0 && errorCount > 0) {\n        showStatusMessage(`Deleted ${successCount} recording${successCount !== 1 ? 's' : ''}, but failed to delete ${errorCount}`);\n      } else {\n        showStatusMessage(`Failed to delete ${errorCount} recording${errorCount !== 1 ? 's' : ''}`);\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Error in HTTP delete all operation:', error);\n      showStatusMessage('Error in delete all operation: ' + error.message);\n      return { succeeded: 0, failed: 0 };\n    }\n  },\n\n  /**\n   * Check if a recording has associated detections\n   * @param {Object} recording Recording to check\n   * @returns {Promise<boolean>} True if the recording has detections, false otherwise\n   */\n  checkRecordingHasDetections: async (recording) => {\n    if (!recording || !recording.id || !recording.stream || !recording.start_time || !recording.end_time) {\n      return false;\n    }\n\n    try {\n      // Convert timestamps to seconds\n      const startTime = Math.floor(new Date(recording.start_time).getTime() / 1000);\n      const endTime = Math.floor(new Date(recording.end_time).getTime() / 1000);\n\n      // Query the detections API to check if there are any detections in this time range\n      const params = new URLSearchParams({\n        start: startTime,\n        end: endTime\n      });\n\n      const data = await fetchJSON(`/api/detection/results/${recording.stream}?${params.toString()}`, {\n        timeout: 10000, // 10 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 500 // 0.5 second between retries\n      });\n\n      return data.detections && data.detections.length > 0;\n    } catch (error) {\n      console.error('Error checking detections:', error);\n      return false;\n    }\n  },\n\n  /**\n   * Get detections for a recording\n   * @param {Object} recording Recording to get detections for\n   * @returns {Promise<Array>} Array of detections\n   */\n  getRecordingDetections: async (recording) => {\n    if (!recording || !recording.id || !recording.stream || !recording.start_time || !recording.end_time) {\n      return [];\n    }\n\n    try {\n      // Convert timestamps to seconds\n      const startTime = Math.floor(new Date(recording.start_time).getTime() / 1000);\n      const endTime = Math.floor(new Date(recording.end_time).getTime() / 1000);\n\n      // Query the detections API to get detections in this time range\n      const params = new URLSearchParams({\n        start: startTime,\n        end: endTime\n      });\n\n      const data = await fetchJSON(`/api/detection/results/${recording.stream}?${params.toString()}`, {\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n\n      return data.detections || [];\n    } catch (error) {\n      console.error('Error getting detections:', error);\n      return [];\n    }\n  },\n\n  /**\n   * Play recording\n   * @param {Object} recording Recording to play\n   * @param {Function} showVideoModal Function to show video modal\n   */\n  playRecording: (recording, showVideoModal) => {\n    console.log('Play recording clicked:', recording);\n\n    // Check if recording has an id property\n    if (!recording.id) {\n      console.error('Recording has no id property:', recording);\n      showStatusMessage('Error: Recording has no id property');\n      return;\n    }\n\n    // Build video URL\n    const videoUrl = `/api/recordings/play/${recording.id}`;\n    const title = `${recording.stream} - ${formatUtils.formatDateTime(recording.start_time)}`;\n    const downloadUrl = `/api/recordings/download/${recording.id}`;\n\n    console.log('Video URL:', videoUrl);\n    console.log('Title:', title);\n    console.log('Download URL:', downloadUrl);\n\n    // Check if we're using the context-based showVideoModal or the direct function\n    if (window.__modalContext && window.__modalContext.showVideoModal) {\n      // Use the context-based function if available\n      window.__modalContext.showVideoModal(videoUrl, title, downloadUrl);\n    } else {\n      // Fall back to the provided function\n      showVideoModal(videoUrl, title, downloadUrl);\n    }\n\n    console.log('Video modal should be shown now');\n  },\n\n  /**\n   * Download recording\n   * @param {Object} recording Recording to download\n   */\n  downloadRecording: (recording) => {\n    // Create download link\n    const downloadUrl = `/api/recordings/download/${recording.id}`;\n    const link = document.createElement('a');\n    link.href = downloadUrl;\n    link.download = `${recording.stream}_${new Date(recording.start_time).toISOString().replace(/[:.]/g, '-')}.mp4`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    showStatusMessage('Download started');\n  }\n};\n","/**\n * URL utility functions for RecordingsView\n */\n\n/**\n * URL utilities for RecordingsView\n */\nexport const urlUtils = {\n  /**\n   * Get filters from URL\n   * @returns {Object|null} Filters object or null if no filters in URL\n   */\n  getFiltersFromUrl: () => {\n    // Get URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    \n    // Check if we have any filter parameters\n    if (!urlParams.has('dateRange') && !urlParams.has('page') && !urlParams.has('sort') && !urlParams.has('detection') && !urlParams.has('stream')) {\n      return null;\n    }\n    \n    // Create result object\n    const result = {\n      filters: {\n        dateRange: 'last7days',\n        startDate: '',\n        startTime: '00:00',\n        endDate: '',\n        endTime: '23:59',\n        streamId: 'all',\n        recordingType: 'all'\n      },\n      page: 1,\n      limit: 20,\n      sort: 'start_time',\n      order: 'desc'\n    };\n    \n    // Date range\n    if (urlParams.has('dateRange')) {\n      result.filters.dateRange = urlParams.get('dateRange');\n      \n      if (result.filters.dateRange === 'custom') {\n        if (urlParams.has('startDate')) {\n          result.filters.startDate = urlParams.get('startDate');\n        }\n        if (urlParams.has('startTime')) {\n          result.filters.startTime = urlParams.get('startTime');\n        }\n        if (urlParams.has('endDate')) {\n          result.filters.endDate = urlParams.get('endDate');\n        }\n        if (urlParams.has('endTime')) {\n          result.filters.endTime = urlParams.get('endTime');\n        }\n      }\n    }\n    \n    // Stream\n    if (urlParams.has('stream')) {\n      result.filters.streamId = urlParams.get('stream');\n    }\n    \n    // Recording type\n    if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n      result.filters.recordingType = 'detection';\n    }\n    \n    // Pagination\n    if (urlParams.has('page')) {\n      result.page = parseInt(urlParams.get('page'), 10);\n    }\n    if (urlParams.has('limit')) {\n      result.limit = parseInt(urlParams.get('limit'), 10);\n    }\n    \n    // Sorting\n    if (urlParams.has('sort')) {\n      result.sort = urlParams.get('sort');\n    }\n    if (urlParams.has('order')) {\n      result.order = urlParams.get('order');\n    }\n    \n    return result;\n  },\n  \n  /**\n   * Get active filters display\n   * @param {Object} filters Current filters\n   * @returns {Array} Array of active filter objects with key and label\n   */\n  getActiveFiltersDisplay: (filters) => {\n    const activeFilters = [];\n    \n    // Check if we have any active filters\n    const hasFilters = (\n      filters.dateRange !== 'last7days' ||\n      filters.streamId !== 'all' ||\n      filters.recordingType !== 'all'\n    );\n    \n    if (hasFilters) {\n      // Date range filter\n      if (filters.dateRange !== 'last7days') {\n        let label = '';\n        switch (filters.dateRange) {\n          case 'today':\n            label = 'Today';\n            break;\n          case 'yesterday':\n            label = 'Yesterday';\n            break;\n          case 'last30days':\n            label = 'Last 30 Days';\n            break;\n          case 'custom':\n            label = `${filters.startDate} to ${filters.endDate}`;\n            break;\n        }\n        activeFilters.push({ key: 'dateRange', label: `Date: ${label}` });\n      }\n      \n      // Stream filter\n      if (filters.streamId !== 'all') {\n        activeFilters.push({ key: 'streamId', label: `Stream: ${filters.streamId}` });\n      }\n      \n      // Recording type filter\n      if (filters.recordingType !== 'all') {\n        activeFilters.push({ key: 'recordingType', label: 'Detection Events Only' });\n      }\n    }\n    \n    return activeFilters;\n  },\n  \n  /**\n   * Load filters from URL\n   * @param {Object} filters Current filters\n   * @param {Object} pagination Current pagination\n   * @param {Function} setFilters Function to update filters\n   * @param {Function} setPagination Function to update pagination\n   * @param {Function} setSortField Function to update sort field\n   * @param {Function} setSortDirection Function to update sort direction\n   */\n  loadFiltersFromUrl: (filters, pagination, setFilters, setPagination, setSortField, setSortDirection) => {\n    // Get URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    \n    // Create a new filters object based on the current filters\n    const newFilters = { ...filters };\n    \n    // Date range\n    if (urlParams.has('dateRange')) {\n      newFilters.dateRange = urlParams.get('dateRange');\n      \n      if (newFilters.dateRange === 'custom') {\n        if (urlParams.has('startDate')) {\n          newFilters.startDate = urlParams.get('startDate');\n        }\n        if (urlParams.has('startTime')) {\n          newFilters.startTime = urlParams.get('startTime');\n        }\n        if (urlParams.has('endDate')) {\n          newFilters.endDate = urlParams.get('endDate');\n        }\n        if (urlParams.has('endTime')) {\n          newFilters.endTime = urlParams.get('endTime');\n        }\n      }\n    }\n    \n    // Stream\n    if (urlParams.has('stream')) {\n      newFilters.streamId = urlParams.get('stream');\n    }\n    \n    // Recording type - IMPORTANT: Check for this parameter even if dateRange is not present\n    if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n      newFilters.recordingType = 'detection';\n    }\n    \n    // Update filters state\n    setFilters(newFilters);\n    \n    // Pagination\n    if (urlParams.has('page')) {\n      setPagination(prev => ({\n        ...prev,\n        currentPage: parseInt(urlParams.get('page'), 10)\n      }));\n    }\n    if (urlParams.has('limit')) {\n      setPagination(prev => ({\n        ...prev,\n        pageSize: parseInt(urlParams.get('limit'), 10)\n      }));\n    }\n    \n    // Sorting\n    if (urlParams.has('sort')) {\n      setSortField(urlParams.get('sort'));\n    }\n    if (urlParams.has('order')) {\n      setSortDirection(urlParams.get('order'));\n    }\n  },\n  \n  /**\n   * Update URL with filters\n   * @param {Object} filters Current filters\n   * @param {Object} pagination Current pagination\n   * @param {string} sortField Current sort field\n   * @param {string} sortDirection Current sort direction\n   */\n  updateUrlWithFilters: (filters, pagination, sortField, sortDirection) => {\n    // Create URL parameters object based on current URL to preserve any existing parameters\n    const params = new URLSearchParams(window.location.search);\n    \n    // Add a timestamp parameter to prevent caching issues\n    params.set('t', Date.now().toString());\n    \n    // Update or add date range parameters\n    params.set('dateRange', filters.dateRange);\n    \n    // Handle custom date range\n    if (filters.dateRange === 'custom') {\n      params.set('startDate', filters.startDate);\n      params.set('startTime', filters.startTime);\n      params.set('endDate', filters.endDate);\n      params.set('endTime', filters.endTime);\n    } else {\n      // Remove custom date parameters if not using custom date range\n      params.delete('startDate');\n      params.delete('startTime');\n      params.delete('endDate');\n      params.delete('endTime');\n    }\n    \n    // Update stream filter\n    if (filters.streamId !== 'all') {\n      params.set('stream', filters.streamId);\n    } else {\n      params.delete('stream');\n    }\n    \n    // Update recording type filter\n    if (filters.recordingType === 'detection') {\n      params.set('detection', '1');\n    } else {\n      params.delete('detection');\n    }\n    \n    // Update pagination\n    params.set('page', pagination.currentPage.toString());\n    params.set('limit', pagination.pageSize.toString());\n    \n    // Update sorting\n    params.set('sort', sortField);\n    params.set('order', sortDirection);\n    \n    // Update URL without reloading the page\n    const newUrl = `${window.location.pathname}?${params.toString()}`;\n    window.history.pushState({ path: newUrl }, '', newUrl);\n    \n    // Also update the reload behavior to maintain URL parameters\n    // This is the key to preserving parameters during page reload\n    const reloadUrl = newUrl;\n    window.onbeforeunload = function() {\n      // Replace the current URL with our preserved URL just before reload\n      window.history.replaceState({ path: reloadUrl }, '', reloadUrl);\n    };\n  }\n};\n","/**\n * LightNVR Web Interface RecordingsView Component\n * Preact component for the recordings page\n */\n\nimport { h } from 'preact';\nimport { useState, useEffect, useRef, useContext } from 'preact/hooks';\nimport { showStatusMessage } from './ToastContainer.jsx';\nimport { showVideoModal, DeleteConfirmationModal, ModalContext } from './UI.jsx';\nimport { ContentLoader } from './LoadingIndicator.jsx';\n\n// Import components\nimport { FiltersSidebar } from './recordings/FiltersSidebar.jsx';\nimport { ActiveFilters } from './recordings/ActiveFilters.jsx';\nimport { RecordingsTable } from './recordings/RecordingsTable.jsx';\nimport { PaginationControls } from './recordings/PaginationControls.jsx';\n\n// Import utilities\nimport { formatUtils } from './recordings/formatUtils.js';\nimport { recordingsAPI } from './recordings/recordingsAPI.jsx';\nimport { urlUtils } from './recordings/urlUtils.js';\nimport { useQueryClient, invalidateQueries } from '../../query-client.js';\n\n/**\n * RecordingsView component\n * @returns {JSX.Element} RecordingsView component\n */\nexport function RecordingsView() {\n  const [recordings, setRecordings] = useState([]);\n  const [streams, setStreams] = useState([]);\n  const [filtersVisible, setFiltersVisible] = useState(true);\n  const [sortField, setSortField] = useState('start_time');\n  const [sortDirection, setSortDirection] = useState('desc');\n  const [filters, setFilters] = useState({\n    dateRange: 'last7days',\n    startDate: '',\n    startTime: '00:00',\n    endDate: '',\n    endTime: '23:59',\n    streamId: 'all',\n    recordingType: 'all'\n  });\n  const [pagination, setPagination] = useState({\n    currentPage: 1,\n    pageSize: 20,\n    totalItems: 0,\n    totalPages: 1,\n    startItem: 0,\n    endItem: 0\n  });\n  const [hasActiveFilters, setHasActiveFilters] = useState(false);\n  const [activeFiltersDisplay, setActiveFiltersDisplay] = useState([]);\n  const [selectedRecordings, setSelectedRecordings] = useState({});\n  const [selectAll, setSelectAll] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [deleteMode, setDeleteMode] = useState('selected'); // 'selected' or 'all'\n  const recordingsTableBodyRef = useRef(null);\n\n  // Get modal context for video playback\n  const modalContext = useContext(ModalContext);\n\n  // Store modal context in window for global access\n  useEffect(() => {\n    if (modalContext) {\n      console.log('Modal context available in RecordingsView');\n      window.__modalContext = modalContext;\n\n      // Log the available methods for debugging\n      console.log('Available modal methods:',\n        Object.keys(modalContext).map(key => key)\n      );\n    } else {\n      console.warn('Modal context not available in RecordingsView');\n    }\n  }, [modalContext]);\n\n  // Get query client for invalidating queries\n  const queryClient = useQueryClient();\n\n  // Fetch streams using preact-query\n  const {\n    data: streamsData,\n    isLoading: isLoadingStreams,\n    error: streamsError\n  } = recordingsAPI.hooks.useStreams();\n\n  // Update streams state when data is loaded\n  useEffect(() => {\n    if (streamsData && Array.isArray(streamsData)) {\n      setStreams(streamsData);\n    }\n  }, [streamsData]);\n\n  // Handle streams error\n  useEffect(() => {\n    if (streamsError) {\n      console.error('Error loading streams for filter:', streamsError);\n      showStatusMessage('Error loading streams: ' + streamsError.message);\n    }\n  }, [streamsError]);\n\n  // Initialize component\n  useEffect(() => {\n    // Set default date range\n    setDefaultDateRange();\n\n    // Check for URL parameters\n    const urlFilters = urlUtils.getFiltersFromUrl();\n\n    if (urlFilters) {\n      console.log('Found URL filters:', urlFilters);\n\n      // Check specifically for detection parameter\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n        // Ensure recordingType is set to 'detection'\n        urlFilters.filters.recordingType = 'detection';\n      }\n\n      // Update state with URL filters\n      setFilters(urlFilters.filters);\n      setPagination(prev => ({\n        ...prev,\n        currentPage: urlFilters.page || 1,\n        pageSize: urlFilters.limit || 20\n      }));\n      setSortField(urlFilters.sort || 'start_time');\n      setSortDirection(urlFilters.order || 'desc');\n    }\n\n    // Handle responsive behavior\n    handleResponsiveFilters();\n    window.addEventListener('resize', handleResponsiveFilters);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResponsiveFilters);\n    };\n  }, []);\n\n  // Update active filters when filters change\n  useEffect(() => {\n    updateActiveFilters();\n  }, [filters]);\n\n  // Set default date range\n  const setDefaultDateRange = () => {\n    const now = new Date();\n    const sevenDaysAgo = new Date(now);\n    sevenDaysAgo.setDate(now.getDate() - 7);\n\n    setFilters(prev => ({\n      ...prev,\n      endDate: now.toISOString().split('T')[0],\n      startDate: sevenDaysAgo.toISOString().split('T')[0]\n    }));\n  };\n\n  // Fetch recordings using preact-query\n  const {\n    data: recordingsData,\n    isLoading: isLoadingRecordings,\n    error: recordingsError,\n    refetch: refetchRecordings\n  } = recordingsAPI.hooks.useRecordings(filters, pagination, sortField, sortDirection);\n\n  // Update recordings state when data is loaded\n  useEffect(() => {\n    if (recordingsData) {\n      // Store recordings in the component state\n      const recordingsArray = recordingsData.recordings || [];\n\n      // When filtering for detection events, all returned recordings should have detections\n      if (filters.recordingType === 'detection') {\n        recordingsArray.forEach(recording => {\n          recording.has_detections = true;\n        });\n      }\n\n      // Set the recordings state\n      setRecordings(recordingsArray);\n      setHasData(recordingsArray.length > 0);\n\n      // Update pagination\n      if (recordingsData.pagination) {\n        updatePaginationFromResponse(recordingsData, pagination.currentPage);\n      }\n    }\n  }, [recordingsData, filters.recordingType]);\n\n  // Handle recordings error\n  useEffect(() => {\n    if (recordingsError) {\n      console.error('Error loading recordings:', recordingsError);\n      showStatusMessage('Error loading recordings: ' + recordingsError.message);\n      setHasData(false);\n    }\n  }, [recordingsError]);\n\n  // Load filters from URL\n  const loadFiltersFromUrl = () => {\n    const urlFilters = urlUtils.getFiltersFromUrl();\n    if (urlFilters) {\n      // Check specifically for detection parameter\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n        // Ensure recordingType is set to 'detection'\n        urlFilters.filters.recordingType = 'detection';\n      }\n\n      setFilters(urlFilters.filters);\n      setPagination(prev => ({\n        ...prev,\n        currentPage: urlFilters.page || 1,\n        pageSize: urlFilters.limit || 20\n      }));\n      setSortField(urlFilters.sort || 'start_time');\n      setSortDirection(urlFilters.order || 'desc');\n\n      // If detection parameter is present, ensure it's included in the URL when we update it\n      if (urlParams.has('detection') && urlParams.get('detection') === '1') {\n        setTimeout(() => {\n          const currentUrl = new URL(window.location.href);\n          if (!currentUrl.searchParams.has('detection')) {\n            currentUrl.searchParams.set('detection', '1');\n            window.history.replaceState({ path: currentUrl.href }, '', currentUrl.href);\n          }\n        }, 0);\n      }\n\n      return urlFilters; // Return the filters so we can use them directly\n    }\n    return null;\n  };\n\n  // Handle responsive filters\n  const handleResponsiveFilters = () => {\n    // On mobile, hide filters by default\n    if (window.innerWidth < 768) {\n      setFiltersVisible(false);\n    } else {\n      setFiltersVisible(true);\n    }\n  };\n\n  // Toggle filters visibility\n  const toggleFilters = () => {\n    setFiltersVisible(!filtersVisible);\n  };\n\n  // State for data status\n  const [hasData, setHasData] = useState(false);\n\n  // Load recordings (now just updates pagination and URL)\n  const loadRecordings = (page = pagination.currentPage, updateUrl = true) => {\n    // Debug log to check filters\n    console.log('Loading recordings with filters:', JSON.stringify(filters));\n\n    // Create a pagination object with the specified page\n    const paginationWithPage = {\n      ...pagination,\n      currentPage: page\n    };\n\n    // Update pagination state\n    setPagination(paginationWithPage);\n\n    // Update URL with filters if requested\n    if (updateUrl) {\n      urlUtils.updateUrlWithFilters(filters, paginationWithPage, sortField, sortDirection);\n    }\n  };\n\n  // Update pagination from API response\n  const updatePaginationFromResponse = (data, currentPage) => {\n    // Use the provided page parameter instead of the state\n    currentPage = currentPage || pagination.currentPage;\n\n    if (data.pagination) {\n      const pageSize = data.pagination.limit || 20;\n      const totalItems = data.pagination.total || 0;\n      const totalPages = data.pagination.pages || 1;\n\n      // Calculate start and end items based on current page\n      let startItem = 0;\n      let endItem = 0;\n\n      if (data.recordings.length > 0) {\n        startItem = (currentPage - 1) * pageSize + 1;\n        endItem = Math.min(startItem + data.recordings.length - 1, totalItems);\n      }\n\n      console.log('Pagination update:', {\n        currentPage,\n        pageSize,\n        totalItems,\n        totalPages,\n        startItem,\n        endItem,\n        recordingsLength: data.recordings.length\n      });\n\n      setPagination(prev => ({\n        ...prev,\n        totalItems,\n        totalPages,\n        pageSize,\n        startItem,\n        endItem\n      }));\n    } else {\n      // Fallback if pagination object is not provided\n      const pageSize = pagination.pageSize;\n      const totalItems = data.total || 0;\n      const totalPages = Math.ceil(totalItems / pageSize) || 1;\n\n      // Calculate start and end items based on current page\n      let startItem = 0;\n      let endItem = 0;\n\n      if (data.recordings.length > 0) {\n        startItem = (currentPage - 1) * pageSize + 1;\n        endItem = Math.min(startItem + data.recordings.length - 1, totalItems);\n      }\n\n      console.log('Pagination update (fallback):', {\n        currentPage,\n        pageSize,\n        totalItems,\n        totalPages,\n        startItem,\n        endItem,\n        recordingsLength: data.recordings.length\n      });\n\n      setPagination(prev => ({\n        ...prev,\n        totalItems,\n        totalPages,\n        startItem,\n        endItem\n      }));\n    }\n  };\n\n  // Handle date range change\n  const handleDateRangeChange = (e) => {\n    const newDateRange = e.target.value;\n\n    setFilters(prev => ({\n      ...prev,\n      dateRange: newDateRange\n    }));\n\n    if (newDateRange === 'custom') {\n      // If custom is selected, make sure we have default dates\n      if (!filters.startDate || !filters.endDate) {\n        const now = new Date();\n        const sevenDaysAgo = new Date(now);\n        sevenDaysAgo.setDate(now.getDate() - 7);\n\n        setFilters(prev => ({\n          ...prev,\n          endDate: now.toISOString().split('T')[0],\n          startDate: sevenDaysAgo.toISOString().split('T')[0]\n        }));\n      }\n    }\n  };\n\n  // Update active filters\n  const updateActiveFilters = () => {\n    const activeFilters = urlUtils.getActiveFiltersDisplay(filters);\n    setHasActiveFilters(activeFilters.length > 0);\n    setActiveFiltersDisplay(activeFilters);\n  };\n\n  // Apply filters\n  const applyFilters = (resetToFirstPage = true) => {\n    // Reset to first page when applying filters (unless specified otherwise)\n    if (resetToFirstPage) {\n      setPagination(prev => ({\n        ...prev,\n        currentPage: 1\n      }));\n    }\n\n    // Update URL with filters\n    urlUtils.updateUrlWithFilters(\n      filters,\n      resetToFirstPage ? {...pagination, currentPage: 1} : pagination,\n      sortField,\n      sortDirection\n    );\n  };\n\n  // Reset filters\n  const resetFilters = () => {\n    // Create default filters\n    const defaultFilters = {\n      dateRange: 'last7days',\n      startDate: '',\n      startTime: '00:00',\n      endDate: '',\n      endTime: '23:59',\n      streamId: 'all',\n      recordingType: 'all'\n    };\n\n    // Get default date range\n    const now = new Date();\n    const sevenDaysAgo = new Date(now);\n    sevenDaysAgo.setDate(now.getDate() - 7);\n\n    defaultFilters.endDate = now.toISOString().split('T')[0];\n    defaultFilters.startDate = sevenDaysAgo.toISOString().split('T')[0];\n\n    // Reset filter state\n    setFilters(defaultFilters);\n\n    // Reset pagination to first page\n    setPagination(prev => ({\n      ...prev,\n      currentPage: 1\n    }));\n\n    // Reset sort\n    setSortField('start_time');\n    setSortDirection('desc');\n\n    // Clear all URL parameters by replacing the current URL with the base URL\n    const baseUrl = window.location.pathname;\n    window.history.pushState({ path: baseUrl }, '', baseUrl);\n  };\n\n  // Remove filter\n  const removeFilter = (key) => {\n    switch (key) {\n      case 'dateRange':\n        setFilters(prev => ({\n          ...prev,\n          dateRange: 'last7days'\n        }));\n        break;\n      case 'streamId':\n        setFilters(prev => ({\n          ...prev,\n          streamId: 'all'\n        }));\n        break;\n      case 'recordingType':\n        setFilters(prev => ({\n          ...prev,\n          recordingType: 'all'\n        }));\n        break;\n    }\n\n    applyFilters();\n  };\n\n  // Sort by field\n  const sortBy = (field) => {\n    if (sortField === field) {\n      // Toggle direction if already sorting by this field\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      // Default to descending for start_time, ascending for others\n      setSortDirection(field === 'start_time' ? 'desc' : 'asc');\n      setSortField(field);\n    }\n\n    // Reset to first page\n    setPagination(prev => ({\n      ...prev,\n      currentPage: 1\n    }));\n\n    // Update URL with new sort parameters\n    urlUtils.updateUrlWithFilters(\n      filters,\n      {...pagination, currentPage: 1},\n      field,\n      field === sortField ? (sortDirection === 'asc' ? 'desc' : 'asc') : (field === 'start_time' ? 'desc' : 'asc')\n    );\n  };\n\n  // Go to page\n  const goToPage = (page) => {\n    if (page < 1 || page > pagination.totalPages) return;\n\n    // Set the current page in pagination state\n    setPagination(prev => ({\n      ...prev,\n      currentPage: page\n    }));\n\n    // Update URL with all filters and the new page\n    urlUtils.updateUrlWithFilters(filters, {...pagination, currentPage: page}, sortField, sortDirection);\n  };\n\n  // Toggle selection of a recording\n  const toggleRecordingSelection = (recordingId) => {\n    setSelectedRecordings(prev => ({\n      ...prev,\n      [recordingId]: !prev[recordingId]\n    }));\n  };\n\n  // Toggle select all recordings\n  const toggleSelectAll = () => {\n    const newSelectAll = !selectAll;\n    setSelectAll(newSelectAll);\n\n    const newSelectedRecordings = {};\n    if (newSelectAll) {\n      // Select all recordings\n      recordings.forEach(recording => {\n        newSelectedRecordings[recording.id] = true;\n      });\n    }\n    // Always update selectedRecordings, even when deselecting all\n    setSelectedRecordings(newSelectedRecordings);\n  };\n\n  // Get count of selected recordings\n  const getSelectedCount = () => {\n    return Object.values(selectedRecordings).filter(Boolean).length;\n  };\n\n  // Open delete confirmation modal\n  const openDeleteModal = (mode) => {\n    setDeleteMode(mode);\n    setIsDeleteModalOpen(true);\n  };\n\n  // Close delete confirmation modal\n  const closeDeleteModal = () => {\n    setIsDeleteModalOpen(false);\n  };\n\n  // Handle delete confirmation\n  const handleDeleteConfirm = async () => {\n    closeDeleteModal();\n\n    // Save current URL parameters before deletion\n    const currentUrlParams = new URLSearchParams(window.location.search);\n    const currentSortField = currentUrlParams.get('sort') || sortField;\n    const currentSortDirection = currentUrlParams.get('order') || sortDirection;\n    const currentPage = parseInt(currentUrlParams.get('page'), 10) || pagination.currentPage;\n\n    if (deleteMode === 'selected') {\n      // Use the recordingsAPI to delete selected recordings\n      const result = await recordingsAPI.deleteSelectedRecordings(selectedRecordings);\n\n      // Reset selection\n      setSelectedRecordings({});\n      setSelectAll(false);\n\n      // Only reload if some recordings were deleted successfully\n      if (result.succeeded > 0) {\n        // Reload recordings with preserved parameters\n        reloadRecordingsWithPreservedParams(currentSortField, currentSortDirection, currentPage);\n      }\n    } else {\n      // Use the recordingsAPI to delete all filtered recordings\n      const result = await recordingsAPI.deleteAllFilteredRecordings(filters);\n\n      // Reset selection\n      setSelectedRecordings({});\n      setSelectAll(false);\n\n      // Always reload to reflect the changes (even if all recordings were deleted)\n      // This ensures the UI shows the correct state\n      loadRecordings();\n    }\n  };\n\n  // Helper function to reload recordings with preserved parameters\n  const reloadRecordingsWithPreservedParams = (sortField, sortDirection, page) => {\n    // Set the sort parameters directly\n    setSortField(sortField);\n    setSortDirection(sortDirection);\n\n    // Update pagination with the preserved page\n    setPagination(prev => ({\n      ...prev,\n      currentPage: page\n    }));\n\n    // Wait for state to update\n    setTimeout(() => {\n      // Create a new pagination object with the updated page\n      const updatedPagination = {\n        ...pagination,\n        currentPage: page\n      };\n\n      // Update URL with all filters and the preserved parameters\n      urlUtils.updateUrlWithFilters(filters, updatedPagination, sortField, sortDirection);\n\n      // Load recordings from API\n      recordingsAPI.loadRecordings(filters, updatedPagination, sortField, sortDirection)\n        .then(data => {\n          console.log('Recordings data received:', data);\n\n          // Store recordings in the component state\n          setRecordings(data.recordings || []);\n\n          // Update pagination without changing the current page\n          updatePaginationFromResponse(data, page);\n        })\n        .catch(error => {\n          console.error('Error loading recordings:', error);\n          showStatusMessage('Error loading recordings: ' + error.message);\n        });\n    }, 0);\n  };\n\n  // Delete recording using preact-query mutation\n  const { mutate: deleteRecordingMutation } = recordingsAPI.hooks.useDeleteRecording();\n\n  // Delete a single recording\n  const deleteRecording = (recording) => {\n    if (!confirm(`Are you sure you want to delete this recording from ${recording.stream}?`)) {\n      return;\n    }\n\n    // Call the mutation with the recording ID\n    deleteRecordingMutation(recording.id);\n  };\n\n  // Play recording\n  const playRecording = (recording) => {\n    console.log('RecordingsView.playRecording called with:', recording);\n\n    // Use the modal context if available, otherwise fall back to the imported function\n    if (modalContext && modalContext.showVideoModal) {\n      console.log('Using modal context showVideoModal');\n      const videoUrl = `/api/recordings/play/${recording.id}`;\n      const title = `${recording.stream} - ${formatUtils.formatDateTime(recording.start_time)}`;\n      const downloadUrl = `/api/recordings/download/${recording.id}`;\n\n      // Call the context function directly\n      modalContext.showVideoModal(videoUrl, title, downloadUrl);\n    } else {\n      console.log('Falling back to recordingsAPI.playRecording');\n      // Fall back to the API function which will use the imported showVideoModal\n      recordingsAPI.playRecording(recording, showVideoModal);\n    }\n  };\n\n  // Download recording\n  const downloadRecording = (recording) => {\n    recordingsAPI.downloadRecording(recording);\n  };\n\n  return (\n    <section id=\"recordings-page\" class=\"page\">\n      <div class=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <div class=\"flex items-center\">\n          <h2 class=\"text-xl font-bold\">Recordings</h2>\n          <div class=\"ml-4 flex\">\n            <a href=\"recordings.html\" class=\"px-3 py-1 bg-blue-500 text-white rounded-l-md\">Table View</a>\n            <a href=\"timeline.html\" class=\"px-3 py-1 bg-gray-300 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-400 dark:hover:bg-gray-600 rounded-r-md\">Timeline View</a>\n          </div>\n        </div>\n        <button id=\"toggle-filters-btn\"\n                class=\"p-2 rounded-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none\"\n                title=\"Toggle Filters\"\n                onClick={toggleFilters}>\n          <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path fill-rule=\"evenodd\" d=\"M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clip-rule=\"evenodd\"></path>\n          </svg>\n        </button>\n      </div>\n\n      <div class=\"recordings-layout flex flex-col md:flex-row gap-4 w-full\">\n        <FiltersSidebar\n          filters={filters}\n          setFilters={setFilters}\n          pagination={pagination}\n          setPagination={setPagination}\n          streams={streams}\n          filtersVisible={filtersVisible}\n          applyFilters={applyFilters}\n          resetFilters={resetFilters}\n          handleDateRangeChange={handleDateRangeChange}\n          setDefaultDateRange={setDefaultDateRange}\n        />\n\n        <div class=\"recordings-content flex-1\">\n          <ActiveFilters\n            activeFiltersDisplay={activeFiltersDisplay}\n            removeFilter={removeFilter}\n            hasActiveFilters={hasActiveFilters}\n          />\n\n          <ContentLoader\n            isLoading={isLoadingRecordings}\n            hasData={hasData}\n            loadingMessage=\"Loading recordings...\"\n            emptyMessage=\"No recordings found matching your criteria\"\n          >\n            <RecordingsTable\n              recordings={recordings}\n              sortField={sortField}\n              sortDirection={sortDirection}\n              sortBy={sortBy}\n              selectedRecordings={selectedRecordings}\n              toggleRecordingSelection={toggleRecordingSelection}\n              selectAll={selectAll}\n              toggleSelectAll={toggleSelectAll}\n              getSelectedCount={getSelectedCount}\n              openDeleteModal={openDeleteModal}\n              playRecording={playRecording}\n              downloadRecording={downloadRecording}\n              deleteRecording={deleteRecording}\n              recordingsTableBodyRef={recordingsTableBodyRef}\n              pagination={pagination}\n            />\n\n            <PaginationControls\n              pagination={pagination}\n              goToPage={goToPage}\n            />\n          </ContentLoader>\n        </div>\n      </div>\n\n      <DeleteConfirmationModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={handleDeleteConfirm}\n        mode={deleteMode}\n        count={getSelectedCount()}\n      />\n    </section>\n  );\n}\n","/**\n * LightNVR Web Interface Batch Delete Modal Component\n * Preact component for displaying progress of batch delete operations\n */\n\nimport { h } from 'preact';\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { showStatusMessage } from './ToastContainer.jsx';\n\n/**\n * BatchDeleteModal component\n * @returns {JSX.Element} BatchDeleteModal component\n */\nexport function BatchDeleteModal() {\n  // State for modal visibility and progress\n  const [isVisible, setIsVisible] = useState(false);\n  const [progress, setProgress] = useState({\n    current: 0,\n    total: 0,\n    succeeded: 0,\n    failed: 0,\n    status: 'Preparing to delete recordings...',\n    complete: false,\n    error: false\n  });\n\n  // Component initialization\n  useEffect(() => {\n    console.log('BatchDeleteModal initialized');\n\n\n    // Make functions globally available\n    window.showBatchDeleteModal = showModal;\n    window.updateBatchDeleteProgress = updateProgress;\n    window.batchDeleteRecordingsByHttpRequest = batchDeleteRecordingsByHttpRequest;\n  }, []);\n\n  /**\n   * Update progress state\n   * @param {Object} newProgress - New progress data\n   */\n  const updateProgress = (newProgress) => {\n    setProgress(prevProgress => ({\n      ...prevProgress,\n      ...newProgress\n    }));\n\n    // Show modal if it's not already visible\n    if (!isVisible) {\n      setIsVisible(true);\n    }\n  };\n\n  /**\n   * Show the modal\n   */\n  const showModal = () => {\n    // Reset progress state\n    setProgress({\n      current: 0,\n      total: 0,\n      succeeded: 0,\n      failed: 0,\n      status: 'Preparing to delete recordings...',\n      complete: false,\n      error: false\n    });\n\n    // Show modal\n    setIsVisible(true);\n  };\n\n  /**\n   * Close the modal\n   */\n  const closeModal = () => {\n    setIsVisible(false);\n  };\n\n  /**\n   * Cancel batch delete operation\n   */\n  const cancelBatchDelete = () => {\n    // Close modal\n    closeModal();\n\n    // Show status message\n    showStatusMessage('Batch delete operation cancelled', 'warning', 5000);\n  };\n\n  /**\n   * Delete recordings by HTTP request\n   * @param {Object} params - Delete parameters (ids or filter)\n   * @returns {Promise<Object>} Promise that resolves when the operation is complete\n   */\n  const batchDeleteRecordingsByHttpRequest = (params) => {\n    console.log('Using HTTP for batch delete with params:', params);\n\n    return new Promise((resolve, reject) => {\n      // Show modal\n      showModal();\n\n      // Calculate total count for progress bar\n      let totalCount = 0;\n      if (params.ids) {\n        totalCount = params.ids.length;\n      } else if (params.filter && params.totalCount) {\n        totalCount = params.totalCount;\n      }\n\n      // Update progress to show we're using HTTP\n      updateProgress({\n        current: 0,\n        total: totalCount,\n        status: 'Using HTTP fallback for batch delete operation',\n        succeeded: 0,\n        failed: 0\n      });\n\n      // Send HTTP request\n      fetch('/api/recordings/batch-delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(params)\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error ${response.status}: ${response.statusText}`);\n        }\n        return response.json();\n      })\n      .then(result => {\n        console.log('HTTP batch delete result:', result);\n\n        // Make sure we have valid data\n        const total = result.total || totalCount || 0;\n        const succeeded = result.succeeded || 0;\n        const failed = result.failed || 0;\n\n        // Update final progress\n        updateProgress({\n          current: total,\n          total: total,\n          succeeded: succeeded,\n          failed: failed,\n          status: 'Batch delete operation complete',\n          complete: true\n        });\n\n        // Show status message\n        const message = result.success\n          ? `Successfully deleted ${succeeded} recordings`\n          : `Deleted ${succeeded} recordings with ${failed} failures`;\n\n        showStatusMessage(message, 'success', 5000);\n\n        // Reload recordings after a short delay\n        setTimeout(() => {\n          if (typeof window.loadRecordings === 'function') {\n            window.loadRecordings();\n          }\n        }, 1000);\n\n        resolve(result);\n      })\n      .catch(error => {\n        console.error('HTTP batch delete error:', error);\n\n        // Update progress UI to show error\n        updateProgress({\n          current: 0,\n          total: 0,\n          succeeded: 0,\n          failed: 0,\n          status: `Error: ${error.message || 'Unknown error'}`,\n          complete: true,\n          error: true\n        });\n\n        // Show error message\n        showStatusMessage(`Error: ${error.message || 'Unknown error'}`, 'error', 5000);\n\n        reject(error);\n      });\n    });\n  };\n\n  // Calculate progress percentage\n  const getProgressPercentage = () => {\n    if (progress.total > 0) {\n      return Math.round((progress.current / progress.total) * 100);\n    } else if (progress.complete) {\n      return 100;\n    } else if (progress.current > 0) {\n      return Math.min(90, progress.current / 10);\n    } else {\n      return 50; // Indeterminate\n    }\n  };\n\n  // Get progress bar classes\n  const getProgressBarClasses = () => {\n    let classes = 'h-4 rounded-full text-center text-xs text-white';\n    \n    // Add color class\n    if (progress.error) {\n      classes += ' bg-red-500';\n    } else {\n      classes += ' bg-green-500';\n    }\n    \n    // Add animation class if needed\n    if (!progress.complete && progress.total === 0) {\n      classes += ' animate-pulse';\n    }\n    \n    return classes;\n  };\n\n  // Get count text\n  const getCountText = () => {\n    if (progress.total > 0) {\n      return `${progress.current} / ${progress.total}`;\n    } else {\n      return `${progress.current} / ?`;\n    }\n  };\n\n  // Get percentage text\n  const getPercentageText = () => {\n    if (progress.total > 0) {\n      return `${Math.round((progress.current / progress.total) * 100)}%`;\n    } else if (progress.complete) {\n      return '100%';\n    } else {\n      return 'In progress';\n    }\n  };\n\n  // If not visible, don't render anything\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <div \n      id=\"batch-delete-modal\" \n      className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center z-50\"\n    >\n      <div className=\"relative bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md mx-auto p-6 w-full\">\n        <div className=\"flex justify-between items-center mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">\n          <h3 id=\"batch-delete-modal-title\" className=\"text-xl font-bold text-gray-900 dark:text-white\">\n            Batch Delete Progress\n          </h3>\n          <button \n            className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 text-2xl font-bold\"\n            onClick={closeModal}\n          >\n            &times;\n          </button>\n        </div>\n        \n        <div className=\"modal-body\">\n          <div className=\"mb-4 text-gray-700 dark:text-gray-300\">\n            {progress.status}\n          </div>\n          \n          <div className=\"progress-container bg-gray-200 dark:bg-gray-700 rounded-full h-4 mb-4\">\n            <div \n              className={getProgressBarClasses()}\n              style={{ width: `${getProgressPercentage()}%` }}\n            ></div>\n          </div>\n          \n          <div className=\"flex justify-between text-sm text-gray-600 dark:text-gray-400 mb-6\">\n            <div>{getCountText()}</div>\n            <div>{getPercentageText()}</div>\n          </div>\n          \n          <div className=\"mb-4\">\n            <div className=\"flex justify-between mb-2\">\n              <span className=\"text-gray-700 dark:text-gray-300\">Succeeded:</span>\n              <span className=\"font-bold text-green-600 dark:text-green-400\">{progress.succeeded}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-700 dark:text-gray-300\">Failed:</span>\n              <span className=\"font-bold text-red-600 dark:text-red-400\">{progress.failed}</span>\n            </div>\n          </div>\n          \n          <div className=\"text-sm italic text-gray-600 dark:text-gray-400 mb-4\">\n            {progress.message}\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end pt-2 border-t border-gray-200 dark:border-gray-700\">\n          {progress.complete ? (\n            <button \n              className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n              onClick={closeModal}\n            >\n              Done\n            </button>\n          ) : (\n            <button \n              className=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors\"\n              onClick={cancelBatchDelete}\n            >\n              Cancel\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Delete multiple recordings by IDs\n * @param {Array<number>} ids - Recording IDs to delete\n */\nexport function batchDeleteRecordings(ids) {\n  if (!ids || ids.length === 0) {\n    showStatusMessage('No recordings selected for deletion', 'warning', 5000);\n    return;\n  }\n\n  // Confirm deletion\n  if (!confirm(`Are you sure you want to delete ${ids.length} recordings?`)) {\n    return;\n  }\n\n  // Show modal\n  if (typeof window.showBatchDeleteModal === 'function') {\n    window.showBatchDeleteModal();\n  }\n\n  // Use HTTP fallback for batch delete\n  if (typeof window.batchDeleteRecordingsByHttpRequest === 'function') {\n    window.batchDeleteRecordingsByHttpRequest({ ids })\n      .catch(error => {\n        console.error('Error starting batch delete:', error);\n        showStatusMessage(`Error: ${error.message || 'Failed to start batch delete operation'}`, 'error', 5000);\n\n        // Close modal if it's open\n        if (typeof window.closeBatchDeleteModal === 'function') {\n          window.closeBatchDeleteModal();\n        }\n      });\n  } else {\n    showStatusMessage('Batch delete function not available', 'error', 5000);\n  }\n}\n\n/**\n * Delete recordings by filter\n * @param {Object} filter - Filter to delete by\n */\nexport function batchDeleteRecordingsByFilter(filter) {\n  if (!filter) {\n    showStatusMessage('No filter specified for deletion', 'warning', 5000);\n    return;\n  }\n\n  // Confirm deletion\n  if (!confirm('Are you sure you want to delete all recordings matching the current filter?')) {\n    return;\n  }\n\n  // Show modal\n  if (typeof window.showBatchDeleteModal === 'function') {\n    window.showBatchDeleteModal();\n  }\n\n  // Use HTTP fallback for batch delete\n  if (typeof window.batchDeleteRecordingsByHttpRequest === 'function') {\n    window.batchDeleteRecordingsByHttpRequest({ filter })\n      .catch(error => {\n        console.error('Error starting batch delete:', error);\n        showStatusMessage(`Error: ${error.message || 'Failed to start batch delete operation'}`, 'error', 5000);\n\n        // Close modal if it's open\n        if (typeof window.closeBatchDeleteModal === 'function') {\n          window.closeBatchDeleteModal();\n        }\n      });\n  } else {\n    showStatusMessage('Batch delete function not available', 'error', 5000);\n  }\n}\n\n// Export for global use\nif (typeof window !== 'undefined') {\n  window.batchDeleteRecordings = batchDeleteRecordings;\n  window.batchDeleteRecordingsByFilter = batchDeleteRecordingsByFilter;\n}\n","/**\n * LightNVR Web Interface Streams Page\n * Entry point for the streams page\n */\n\nimport { render } from 'preact';\nimport { RecordingsView } from '../components/preact/RecordingsView.jsx';\nimport { QueryClientProvider, queryClient } from '../query-client.js';\nimport { Header } from \"../components/preact/Header.jsx\";\nimport { Footer } from \"../components/preact/Footer.jsx\";\nimport { ToastContainer } from \"../components/preact/ToastContainer.jsx\";\nimport { BatchDeleteModal } from \"../components/preact/BatchDeleteModal.jsx\";\nimport { ModalProvider } from \"../components/preact/UI.jsx\";\n\n// Render the StreamsView component when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Get the container element\n    const container = document.getElementById('main-content');\n\n    if (container) {\n        render(\n            <QueryClientProvider client={queryClient}>\n                <ModalProvider>\n                    <Header />\n                    <ToastContainer />\n                    <BatchDeleteModal />\n                    <RecordingsView />\n                    <Footer />\n                </ModalProvider>\n            </QueryClientProvider>,\n            container\n        );\n    }\n});\n"],"names":["FiltersSidebar","filters","setFilters","pagination","setPagination","streams","filtersVisible","applyFilters","resetFilters","handleDateRangeChange","setDefaultDateRange","jsxs","jsx","e","prev","stream","ActiveFilters","activeFiltersDisplay","removeFilter","hasActiveFilters","filter","index","formatUtils","isoString","seconds","hours","minutes","secs","bytes","units","i","size","RecordingsTable","recordings","sortField","sortDirection","sortBy","selectedRecordings","toggleRecordingSelection","selectAll","toggleSelectAll","getSelectedCount","openDeleteModal","playRecording","downloadRecording","deleteRecording","recordingsTableBodyRef","recording","PaginationControls","goToPage","recordingsAPI","useQuery","params","start","end","queryClient","useQueryClient","useMutation","recordingId","url","fetchJSON","showStatusMessage","error","usePostMutation","result","successCount","errorCount","preset","now","today","todayStart","yesterday","yesterdayEnd","sevenDaysAgo","thirtyDaysAgo","defaultStart","data","batch","enhancedFetch","selectedIds","_","isSelected","id","totalCount","response","countError","handleOperationError","timeoutPromise","reject","startTime","endTime","showVideoModal","videoUrl","title","downloadUrl","link","urlUtils","urlParams","activeFilters","label","setSortField","setSortDirection","newFilters","newUrl","reloadUrl","RecordingsView","setRecordings","useState","setStreams","setFiltersVisible","setHasActiveFilters","setActiveFiltersDisplay","setSelectedRecordings","setSelectAll","isDeleteModalOpen","setIsDeleteModalOpen","deleteMode","setDeleteMode","useRef","modalContext","useContext","ModalContext","useEffect","key","streamsData","isLoadingStreams","streamsError","urlFilters","handleResponsiveFilters","updateActiveFilters","recordingsData","isLoadingRecordings","recordingsError","refetchRecordings","recordingsArray","setHasData","updatePaginationFromResponse","toggleFilters","hasData","loadRecordings","page","updateUrl","paginationWithPage","currentPage","pageSize","totalItems","totalPages","startItem","endItem","newDateRange","resetToFirstPage","defaultFilters","baseUrl","field","newSelectAll","newSelectedRecordings","mode","closeDeleteModal","handleDeleteConfirm","currentUrlParams","currentSortField","currentSortDirection","reloadRecordingsWithPreservedParams","updatedPagination","deleteRecordingMutation","ContentLoader","DeleteConfirmationModal","BatchDeleteModal","isVisible","setIsVisible","progress","setProgress","showModal","updateProgress","batchDeleteRecordingsByHttpRequest","newProgress","prevProgress","closeModal","cancelBatchDelete","resolve","total","succeeded","failed","message","getProgressPercentage","getProgressBarClasses","classes","getCountText","getPercentageText","batchDeleteRecordings","ids","batchDeleteRecordingsByFilter","container","render","QueryClientProvider","ModalProvider","Header","ToastContainer","Footer"],"mappings":"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"}