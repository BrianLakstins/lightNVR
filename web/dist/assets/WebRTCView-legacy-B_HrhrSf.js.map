{"version":3,"file":"WebRTCView-legacy-B_HrhrSf.js","sources":["../../js/components/preact/WebRTCView.js"],"sourcesContent":["/**\n * LightNVR Web Interface WebRTCView Component\n * Preact component for the WebRTC view page\n */\n\nimport { h } from '../../preact.min.js';\nimport { html } from '../../html-helper.js';\nimport { useState, useEffect, useRef } from '../../preact.hooks.module.js';\nimport { showStatusMessage, showSnapshotPreview, setupModals, addStatusMessageStyles, addModalStyles } from './UI.js';\nimport { toggleFullscreen, exitFullscreenMode } from './FullscreenManager.js';\nimport { startDetectionPolling, cleanupDetectionPolling } from './DetectionOverlay.js';\n\n/**\n * WebRTCView component\n * @returns {JSX.Element} WebRTCView component\n */\nexport function WebRTCView() {\n  const [streams, setStreams] = useState([]);\n  const [layout, setLayout] = useState('4');\n  const [selectedStream, setSelectedStream] = useState('');\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0);\n  const videoGridRef = useRef(null);\n  const webrtcConnections = useRef({});\n  const detectionIntervals = useRef({});\n  \n  // Set up event listeners and UI components\n  useEffect(() => {\n    // Set up modals for snapshot preview\n    setupModals();\n    addStatusMessageStyles();\n    addModalStyles();\n    \n    // Set up Escape key to exit fullscreen mode\n    const handleEscape = (e) => {\n      if (e.key === 'Escape') {\n        console.log(\"Escape key pressed, current fullscreen state:\", isFullscreen);\n        // Check if we're in fullscreen mode by checking the DOM directly\n        const livePage = document.getElementById('live-page');\n        if (livePage && livePage.classList.contains('fullscreen-mode')) {\n          console.log(\"Detected fullscreen mode via DOM, exiting fullscreen\");\n          exitFullscreenMode(null, setIsFullscreen);\n        }\n      }\n    };\n    \n    document.addEventListener('keydown', handleEscape);\n    \n    // Add event listener to stop streams when leaving the page\n    const handleBeforeUnload = () => {\n      stopAllWebRTCStreams();\n    };\n    \n    // Add event listener for visibility change to handle tab switching\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        console.log(\"Page hidden, pausing WebRTC streams\");\n        // Mark connections as inactive but don't close them yet\n        Object.keys(webrtcConnections.current).forEach(streamName => {\n          const pc = webrtcConnections.current[streamName];\n          if (pc && pc.connectionState !== 'closed') {\n            // Pause video elements to reduce resource usage\n            const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n            const videoElement = document.getElementById(videoElementId);\n            if (videoElement) {\n              videoElement.pause();\n            }\n          }\n        });\n      } else {\n        console.log(\"Page visible, resuming WebRTC streams\");\n        // Resume video playback\n        Object.keys(webrtcConnections.current).forEach(streamName => {\n          const pc = webrtcConnections.current[streamName];\n          if (pc && pc.connectionState !== 'closed') {\n            const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n            const videoElement = document.getElementById(videoElementId);\n            if (videoElement) {\n              videoElement.play().catch(e => {\n                console.warn(`Could not resume video for ${streamName}:`, e);\n              });\n            }\n          }\n        });\n      }\n    };\n    \n    window.addEventListener('beforeunload', handleBeforeUnload);\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    // Set up periodic connection check\n    const connectionCheckInterval = setInterval(() => {\n      Object.keys(webrtcConnections.current).forEach(streamName => {\n        const pc = webrtcConnections.current[streamName];\n        if (pc) {\n          // Log connection state for debugging\n          console.debug(`WebRTC connection state for ${streamName}: ${pc.connectionState}, ICE state: ${pc.iceConnectionState}`);\n          \n          // If connection is failed or disconnected for too long, try to reconnect\n          if (pc.iceConnectionState === 'failed' || pc.iceConnectionState === 'disconnected') {\n            console.warn(`WebRTC connection for ${streamName} is in ${pc.iceConnectionState} state, will attempt reconnect`);\n            \n            // Clean up the old connection\n            cleanupWebRTCPlayer(streamName);\n            \n            // Find the stream info and reinitialize\n            const stream = streams.find(s => s.name === streamName);\n            if (stream) {\n              console.log(`Attempting to reconnect WebRTC for stream ${streamName}`);\n              initializeWebRTCPlayer(stream);\n            }\n          }\n        }\n      });\n    }, 30000); // Check every 30 seconds\n    \n    // Cleanup\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      clearInterval(connectionCheckInterval);\n      stopAllWebRTCStreams();\n    };\n  }, [streams]); // Add streams as dependency to ensure we have the latest stream data\n  \n  // Load streams after the component has rendered and videoGridRef is available\n  useEffect(() => {\n      // Set loading state initially\n      setIsLoading(true);\n      \n      // Create a timeout to handle potential stalls in loading\n      const timeoutId = setTimeout(() => {\n        console.warn('Stream loading timed out');\n        setIsLoading(false);\n        showStatusMessage('Loading streams timed out. Please try refreshing the page.');\n      }, 15000); // 15 second timeout\n      \n      // Load streams from API with timeout handling\n      loadStreams()\n        .then((streamData) => {\n          clearTimeout(timeoutId);\n          if (streamData && streamData.length > 0) {\n            setStreams(streamData);\n            setSelectedStream(streamData[0].name);\n          } else {\n            console.warn('No streams returned from API');\n          }\n          setIsLoading(false);\n        })\n        .catch((error) => {\n          clearTimeout(timeoutId);\n          console.error('Error loading streams:', error);\n          showStatusMessage('Error loading streams: ' + error.message);\n          setIsLoading(false);\n        });\n  }, []);\n  \n  // Update video grid when layout, page, or streams change\n  useEffect(() => {\n    updateVideoGrid();\n  }, [layout, selectedStream, streams, currentPage]);\n  \n  /**\n   * Load streams from API\n   * @returns {Promise<Array>} Promise resolving to array of streams\n   */\n  const loadStreams = async () => {\n    try {\n      // Create a timeout promise to handle potential stalls\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('Request timed out')), 5000); // 5 second timeout\n      });\n      \n      // Fetch streams from API with timeout\n      const fetchPromise = fetch('/api/streams');\n      const response = await Promise.race([fetchPromise, timeoutPromise]);\n      \n      if (!response.ok) {\n        throw new Error('Failed to load streams');\n      }\n      \n      // Create another timeout for the JSON parsing\n      const jsonTimeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('JSON parsing timed out')), 3000); // 3 second timeout\n      });\n      \n      const jsonPromise = response.json();\n      const data = await Promise.race([jsonPromise, jsonTimeoutPromise]);\n      \n      // For WebRTC view, we need to fetch full details for each stream\n      const streamPromises = (data || []).map(stream => {\n        // Create a timeout promise for this stream's details fetch\n        const detailsTimeoutPromise = new Promise((_, reject) => {\n          setTimeout(() => reject(new Error(`Timeout fetching details for stream ${stream.name}`)), 3000);\n        });\n        \n        // Fetch stream details with timeout\n        const detailsFetchPromise = fetch(`/api/streams/${encodeURIComponent(stream.id || stream.name)}`)\n          .then(response => {\n            if (!response.ok) {\n              throw new Error(`Failed to load details for stream ${stream.name}`);\n            }\n            return response.json();\n          });\n          \n        // Race the fetch against the timeout\n        return Promise.race([detailsFetchPromise, detailsTimeoutPromise])\n          .catch(error => {\n            console.error(`Error loading details for stream ${stream.name}:`, error);\n            // Return the basic stream info if we can't get details\n            return stream;\n          });\n      });\n      \n      const detailedStreams = await Promise.all(streamPromises);\n      console.log('Loaded detailed streams for WebRTC view:', detailedStreams);\n      \n      // Filter out streams that are soft deleted, inactive, or not configured for HLS\n      const filteredStreams = detailedStreams.filter(stream => {\n        // Filter out soft deleted streams\n        if (stream.is_deleted) {\n          console.log(`Stream ${stream.name} is soft deleted, filtering out`);\n          return false;\n        }\n        \n        // Filter out inactive streams\n        if (!stream.enabled) {\n          console.log(`Stream ${stream.name} is inactive, filtering out`);\n          return false;\n        }\n        \n        // Filter out streams not configured for HLS\n        if (!stream.streaming_enabled) {\n          console.log(`Stream ${stream.name} is not configured for HLS, filtering out`);\n          return false;\n        }\n        \n        return true;\n      });\n      \n      console.log('Filtered streams for WebRTC view:', filteredStreams);\n      \n      return filteredStreams || [];\n    } catch (error) {\n      console.error('Error loading streams for WebRTC view:', error);\n      showStatusMessage('Error loading streams: ' + error.message);\n      \n      return [];\n    }\n  };\n  \n  /**\n   * Get maximum number of streams to display based on layout\n   * @returns {number} Maximum number of streams\n   */\n  const getMaxStreamsForLayout = () => {\n    switch (layout) {\n      case '1': return 1;  // Single view\n      case '2': return 2;  // 2x1 grid\n      case '4': return 4;  // 2x2 grid\n      case '6': return 6;  // 2x3 grid\n      case '9': return 9;  // 3x3 grid\n      case '16': return 16; // 4x4 grid\n      default: return 4;\n    }\n  };\n\n  /**\n   * Update video grid based on layout, streams, and pagination\n   */\n  const updateVideoGrid = () => {\n    if (!videoGridRef.current) return;\n    \n    // Clear existing content except placeholder\n    const placeholder = videoGridRef.current.querySelector('.placeholder');\n    videoGridRef.current.innerHTML = '';\n    \n    // If placeholder exists and no streams, add it back\n    if (placeholder && streams.length === 0) {\n      videoGridRef.current.appendChild(placeholder);\n      return;\n    }\n    \n    // Filter streams based on layout and selected stream\n    let streamsToShow = streams;\n    if (layout === '1' && selectedStream) {\n      streamsToShow = streams.filter(stream => stream.name === selectedStream);\n    } else {\n      // Apply pagination\n      const maxStreams = getMaxStreamsForLayout();\n      const totalPages = Math.ceil(streams.length / maxStreams);\n      \n      // Ensure current page is valid\n      if (currentPage >= totalPages) {\n        setCurrentPage(Math.max(0, totalPages - 1));\n        return; // Will re-render with corrected page\n      }\n      \n      // Get streams for current page\n      const startIdx = currentPage * maxStreams;\n      const endIdx = Math.min(startIdx + maxStreams, streams.length);\n      streamsToShow = streams.slice(startIdx, endIdx);\n    }\n    \n    // Get names of streams that should be shown\n    const streamsToShowNames = streamsToShow.map(stream => stream.name);\n    \n    // Clean up connections for streams that are no longer visible\n    Object.keys(webrtcConnections.current).forEach(streamName => {\n      if (!streamsToShowNames.includes(streamName)) {\n        console.log(`Cleaning up WebRTC connection for stream ${streamName} (not visible in current view)`);\n        cleanupWebRTCPlayer(streamName);\n      }\n    });\n    \n    // Add video elements for each stream\n    streamsToShow.forEach(stream => {\n      // Ensure we have an ID for the stream (use name as fallback if needed)\n      const streamId = stream.id || stream.name;\n      \n      const videoCell = document.createElement('div');\n      videoCell.className = 'video-cell';\n      \n      videoCell.innerHTML = `\n        <video id=\"video-${stream.name.replace(/\\s+/g, '-')}\" autoplay muted></video>\n        <div class=\"stream-info\">\n          <span>${stream.name}</span>\n          <span>${stream.width}x${stream.height} · ${stream.fps}fps</span>\n          <div class=\"stream-controls\">\n            <button class=\"snapshot-btn\" data-id=\"${streamId}\" data-name=\"${stream.name}\">\n              <span>📷</span> Snapshot\n            </button>\n            <button class=\"fullscreen-btn\" data-id=\"${streamId}\" data-name=\"${stream.name}\">\n              <span>⛶</span> Fullscreen\n            </button>\n          </div>\n        </div>\n        <div class=\"loading-indicator\">\n          <div class=\"loading-spinner\"></div>\n          <span>Connecting WebRTC...</span>\n        </div>\n      `;\n      \n      videoGridRef.current.appendChild(videoCell);\n      \n      // Initialize WebRTC player\n      initializeWebRTCPlayer(stream);\n      \n      // Add event listeners for buttons\n      const snapshotBtn = videoCell.querySelector('.snapshot-btn');\n      if (snapshotBtn) {\n        snapshotBtn.addEventListener('click', () => {\n          takeSnapshot(streamId);\n        });\n      }\n      \n      const fullscreenBtn = videoCell.querySelector('.fullscreen-btn');\n      if (fullscreenBtn) {\n        fullscreenBtn.addEventListener('click', () => {\n          toggleStreamFullscreen(stream.name);\n        });\n      }\n    });\n  };\n  \n  /**\n   * Initialize WebRTC player for a stream\n   * @param {Object} stream - Stream object\n   */\n  const initializeWebRTCPlayer = (stream) => {\n    const videoElementId = `video-${stream.name.replace(/\\s+/g, '-')}`;\n    const videoElement = document.getElementById(videoElementId);\n    const videoCell = videoElement ? videoElement.closest('.video-cell') : null;\n    \n    if (!videoElement || !videoCell) return;\n    \n    // Show loading state\n    const loadingIndicator = videoCell.querySelector('.loading-indicator');\n    if (loadingIndicator) {\n      loadingIndicator.style.display = 'flex';\n    }\n    \n    // Create canvas overlay for detection bounding boxes\n    const canvasId = `canvas-${stream.name.replace(/\\s+/g, '-')}`;\n    let canvasOverlay = document.getElementById(canvasId);\n    \n    if (!canvasOverlay) {\n      canvasOverlay = document.createElement('canvas');\n      canvasOverlay.id = canvasId;\n      canvasOverlay.className = 'detection-overlay';\n      canvasOverlay.style.position = 'absolute';\n      canvasOverlay.style.top = '0';\n      canvasOverlay.style.left = '0';\n      canvasOverlay.style.width = '100%';\n      canvasOverlay.style.height = '100%';\n      canvasOverlay.style.pointerEvents = 'none'; // Allow clicks to pass through\n      videoCell.appendChild(canvasOverlay);\n    }\n    \n    // Create a new RTCPeerConnection with ICE servers\n    const pc = new RTCPeerConnection({\n      iceServers: [\n        { urls: 'stun:stun.l.google.com:19302' }\n      ],\n      // Add additional configuration to ensure proper ICE credentials\n      iceTransportPolicy: 'all',\n      bundlePolicy: 'balanced',\n      rtcpMuxPolicy: 'require',\n      sdpSemantics: 'unified-plan'\n    });\n    \n    // Store the connection for cleanup\n    webrtcConnections.current[stream.name] = pc;\n    \n    // Add event listeners\n    pc.ontrack = (event) => {\n      console.log(`Track received for stream ${stream.name}:`, event);\n      if (event.track.kind === 'video') {\n        videoElement.srcObject = event.streams[0];\n        \n        // Hide loading indicator when video starts playing\n        videoElement.onloadeddata = () => {\n          if (loadingIndicator) {\n            loadingIndicator.style.display = 'none';\n          }\n        };\n      }\n    };\n    \n    pc.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log(`ICE candidate for stream ${stream.name}:`, event.candidate);\n        // go2rtc doesn't use a separate ICE endpoint, so we don't need to send ICE candidates\n      }\n    };\n    \n    pc.oniceconnectionstatechange = () => {\n      console.log(`ICE connection state for stream ${stream.name}:`, pc.iceConnectionState);\n      if (pc.iceConnectionState === 'failed' || pc.iceConnectionState === 'disconnected') {\n        // Handle connection failure\n        handleWebRTCError(stream.name, 'WebRTC connection failed');\n      }\n    };\n    \n    // Add transceivers to ensure we get both audio and video tracks\n    pc.addTransceiver('video', {direction: 'recvonly'});\n    pc.addTransceiver('audio', {direction: 'recvonly'});\n    \n    // Create an offer with specific codec requirements\n    const offerOptions = {\n      offerToReceiveAudio: true,\n      offerToReceiveVideo: true\n    };\n    \n    // Create a timeout for the entire WebRTC setup process\n    const setupTimeoutId = setTimeout(() => {\n      console.warn(`WebRTC setup timed out for stream ${stream.name}`);\n      handleWebRTCError(stream.name, 'WebRTC setup timed out');\n      \n      // Clean up the connection if it exists\n      if (webrtcConnections.current[stream.name]) {\n        cleanupWebRTCPlayer(stream.name);\n      }\n    }, 15000); // 15 second timeout for the entire setup process\n    \n    pc.createOffer(offerOptions)\n      .then(offer => {\n        console.log(`Created offer for stream ${stream.name}:`, offer);\n        \n        // Log the original SDP to ensure it has ice-ufrag and ice-pwd\n        console.log(`Original SDP for stream ${stream.name}:`, offer.sdp);\n        \n        // Check if the SDP has ice-ufrag and ice-pwd\n        if (!offer.sdp.includes('a=ice-ufrag:') || !offer.sdp.includes('a=ice-pwd:')) {\n          console.warn(`SDP for stream ${stream.name} is missing ice-ufrag or ice-pwd!`);\n        }\n        \n        // We'll use the original offer without modifications to preserve ice-ufrag and ice-pwd\n        console.log(`Using original offer for stream ${stream.name}`);\n        return pc.setLocalDescription(offer);\n      })\n      .then(() => {\n        console.log(`Set local description for stream ${stream.name}`);\n        // Send the offer to the server\n        return sendOffer(stream.name, pc.localDescription);\n      })\n      .then(answer => {\n        console.log(`Received answer for stream ${stream.name}:`, answer);\n        // Set the remote description\n        return pc.setRemoteDescription(new RTCSessionDescription(answer));\n      })\n      .then(() => {\n        console.log(`Set remote description for stream ${stream.name}`);\n        \n        // Clear the setup timeout since we've successfully set up the connection\n        clearTimeout(setupTimeoutId);\n        \n        // Start detection polling if detection is enabled for this stream\n        console.log(`Stream ${stream.name} detection settings:`, {\n          detection_based_recording: stream.detection_based_recording,\n          detection_model: stream.detection_model,\n          detection_threshold: stream.detection_threshold\n        });\n        \n        if (stream.detection_based_recording && stream.detection_model) {\n          console.log(`Starting detection polling for stream ${stream.name}`);\n          startDetectionPolling(stream.name, canvasOverlay, videoElement, detectionIntervals.current);\n        } else {\n          console.log(`Detection not enabled for stream ${stream.name}`);\n        }\n      })\n      .catch(error => {\n        // Clear the setup timeout\n        clearTimeout(setupTimeoutId);\n        \n        console.error(`Error setting up WebRTC for stream ${stream.name}:`, error);\n        handleWebRTCError(stream.name, error.message);\n      });\n  };\n  \n  /**\n   * Send WebRTC offer to server\n   * @param {string} streamName - Stream name\n   * @param {RTCSessionDescription} offer - WebRTC offer\n   * @returns {Promise<RTCSessionDescription>} Promise resolving to WebRTC answer\n   */\n  const sendOffer = async (streamName, offer) => {\n    try {\n      // Get auth from localStorage\n      const auth = localStorage.getItem('auth');\n      \n      // Send the offer to the server\n      // Format the offer according to go2rtc expectations\n      const formattedOffer = {\n        type: offer.type,\n        sdp: offer.sdp\n      };\n      \n      console.log(`Sending formatted offer for stream ${streamName}:`, formattedOffer);\n      \n      // Create an AbortController for the fetch request\n      const controller = new AbortController();\n      const signal = controller.signal;\n      \n      // Set a timeout to abort the fetch after 8 seconds\n      const timeoutId = setTimeout(() => {\n        console.warn(`Aborting WebRTC offer request for stream ${streamName} due to timeout`);\n        controller.abort();\n      }, 8000);\n      \n      try {\n        // Note: Session cookie is automatically included in fetch requests\n        // We only need to add the Authorization header if we have it in localStorage\n        const response = await fetch(`/api/webrtc?src=${encodeURIComponent(streamName)}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            ...(auth ? { 'Authorization': 'Basic ' + auth } : {})\n          },\n          body: JSON.stringify(formattedOffer),\n          signal: signal\n        });\n        \n        // Clear the timeout since the request completed\n        clearTimeout(timeoutId);\n        \n        if (!response.ok) {\n          throw new Error(`Failed to send offer: ${response.status} ${response.statusText}`);\n        }\n        \n        // Create another AbortController for the JSON parsing\n        const jsonController = new AbortController();\n        const jsonSignal = jsonController.signal;\n        \n        // Set a timeout to abort the JSON parsing after 5 seconds\n        const jsonTimeoutId = setTimeout(() => {\n          console.warn(`Aborting JSON parsing for stream ${streamName} due to timeout`);\n          jsonController.abort();\n        }, 5000);\n        \n        try {\n          // Use a separate try/catch for the JSON parsing\n          const text = await response.text();\n          \n          // Clear the JSON timeout\n          clearTimeout(jsonTimeoutId);\n          \n          // Try to parse the JSON\n          try {\n            const answer = JSON.parse(text);\n            return answer;\n          } catch (jsonError) {\n            console.error(`Error parsing JSON for stream ${streamName}:`, jsonError);\n            console.log(`Raw response text: ${text}`);\n            throw new Error(`Failed to parse WebRTC answer: ${jsonError.message}`);\n          }\n        } catch (textError) {\n          // Clear the JSON timeout if it hasn't been cleared yet\n          clearTimeout(jsonTimeoutId);\n          \n          if (textError.name === 'AbortError') {\n            throw new Error(`WebRTC answer parsing timed out for stream ${streamName}`);\n          }\n          throw textError;\n        }\n      } catch (fetchError) {\n        // Clear the timeout if it hasn't been cleared yet\n        clearTimeout(timeoutId);\n        \n        if (fetchError.name === 'AbortError') {\n          throw new Error(`WebRTC offer request timed out for stream ${streamName}`);\n        }\n        throw fetchError;\n      }\n    } catch (error) {\n      console.error(`Error sending offer for stream ${streamName}:`, error);\n      throw error;\n    }\n  };\n  \n  // ICE candidates are handled internally by the browser for go2rtc\n  \n  /**\n   * Handle WebRTC error\n   * @param {string} streamName - Stream name\n   * @param {string} message - Error message\n   */\n  const handleWebRTCError = (streamName, message) => {\n    const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n    const videoElement = document.getElementById(videoElementId);\n    const videoCell = videoElement ? videoElement.closest('.video-cell') : null;\n    \n    if (!videoCell) return;\n    \n    // Hide loading indicator\n    const loadingIndicator = videoCell.querySelector('.loading-indicator');\n    if (loadingIndicator) {\n      loadingIndicator.style.display = 'none';\n    }\n    \n    // Create error indicator if it doesn't exist\n    let errorIndicator = videoCell.querySelector('.error-indicator');\n    if (!errorIndicator) {\n      errorIndicator = document.createElement('div');\n      errorIndicator.className = 'error-indicator';\n      videoCell.appendChild(errorIndicator);\n    }\n    \n    errorIndicator.innerHTML = `\n      <div class=\"error-icon\">!</div>\n      <p>${message || 'WebRTC connection failed'}</p>\n      <button class=\"retry-button mt-4 px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\">Retry</button>\n    `;\n    \n    // Add retry button handler\n    const retryButton = errorIndicator.querySelector('.retry-button');\n    if (retryButton) {\n      retryButton.addEventListener('click', () => {\n        // Show loading indicator again\n        if (loadingIndicator) {\n          loadingIndicator.style.display = 'flex';\n        }\n        \n        // Hide error indicator\n        errorIndicator.style.display = 'none';\n        \n        // Cleanup existing connection\n        cleanupWebRTCPlayer(streamName);\n        \n        // Fetch stream info again and reinitialize\n        fetch(`/api/streams/${encodeURIComponent(streamName)}`)\n          .then(response => response.json())\n          .then(streamInfo => {\n            // Reinitialize\n            initializeWebRTCPlayer(streamInfo);\n          })\n          .catch(error => {\n            console.error('Error fetching stream info:', error);\n            \n            // Show error indicator again with new message\n            errorIndicator.style.display = 'flex';\n            const errorMsg = errorIndicator.querySelector('p');\n            if (errorMsg) {\n              errorMsg.textContent = 'Could not reconnect: ' + error.message;\n            }\n            \n            // Hide loading indicator\n            if (loadingIndicator) {\n              loadingIndicator.style.display = 'none';\n            }\n          });\n      });\n    }\n  };\n  \n  /**\n   * Cleanup WebRTC player\n   * @param {string} streamName - Stream name\n   */\n  const cleanupWebRTCPlayer = (streamName) => {\n    // Close and remove the RTCPeerConnection\n    if (webrtcConnections.current[streamName]) {\n      webrtcConnections.current[streamName].close();\n      delete webrtcConnections.current[streamName];\n    }\n    \n    // Reset video element\n    const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n    const videoElement = document.getElementById(videoElementId);\n    if (videoElement) {\n      videoElement.srcObject = null;\n    }\n    \n    // Clean up detection polling\n    cleanupDetectionPolling(streamName, detectionIntervals.current);\n  };\n  \n  /**\n   * Stop all WebRTC streams\n   */\n  const stopAllWebRTCStreams = () => {\n    // Close all RTCPeerConnections\n    Object.keys(webrtcConnections.current).forEach(streamName => {\n      cleanupWebRTCPlayer(streamName);\n    });\n  };\n  \n/**\n * Take snapshot of a stream\n * @param {string} streamId - Stream ID\n */\nconst takeSnapshot = (streamId) => {\n  // Find the stream by ID or name\n  const streamElement = document.querySelector(`.snapshot-btn[data-id=\"${streamId}\"]`);\n  if (!streamElement) {\n    console.error('Stream element not found for ID:', streamId);\n    return;\n  }\n\n  // Get the stream name from the data attribute\n  const streamName = streamElement.getAttribute('data-name');\n  if (!streamName) {\n    console.error('Stream name not found for ID:', streamId);\n    return;\n  }\n\n  // Find the video element\n  const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n  const videoElement = document.getElementById(videoElementId);\n  if (!videoElement) {\n    console.error('Video element not found for stream:', streamName);\n    return;\n  }\n\n  // Create a canvas element to capture the frame\n  const canvas = document.createElement('canvas');\n  canvas.width = videoElement.videoWidth;\n  canvas.height = videoElement.videoHeight;\n\n  // Check if we have valid dimensions\n  if (canvas.width === 0 || canvas.height === 0) {\n    console.error('Invalid video dimensions:', canvas.width, canvas.height);\n    showStatusMessage('Cannot take snapshot: Video not loaded or has invalid dimensions');\n    return;\n  }\n\n  // Draw the current frame to the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n\n  try {\n    // Save the canvas to global scope for direct access in the overlay\n    window.__snapshotCanvas = canvas;\n    \n    // Generate a filename\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const fileName = `snapshot-${streamName.replace(/\\s+/g, '-')}-${timestamp}.jpg`;\n    window.__snapshotFileName = fileName;\n    \n    // Show the standard preview\n    showSnapshotPreview(canvas.toDataURL('image/jpeg', 0.95), `Snapshot: ${streamName}`);\n    \n    // Show success message\n    showStatusMessage('Snapshot taken successfully');\n  } catch (error) {\n    console.error('Error creating snapshot:', error);\n    showStatusMessage('Failed to create snapshot: ' + error.message);\n  }\n};\n  \n  /**\n   * Toggle fullscreen mode for a specific stream\n   * @param {string} streamName - Stream name\n   */\n  const toggleStreamFullscreen = (streamName) => {\n    const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n    const videoElement = document.getElementById(videoElementId);\n    const videoCell = videoElement ? videoElement.closest('.video-cell') : null;\n    \n    if (!videoCell) {\n      console.error('Stream not found:', streamName);\n      return;\n    }\n    \n    if (!document.fullscreenElement) {\n      videoCell.requestFullscreen().catch(err => {\n        console.error(`Error attempting to enable fullscreen: ${err.message}`);\n        showStatusMessage(`Could not enable fullscreen mode: ${err.message}`);\n      });\n    } else {\n      document.exitFullscreen();\n    }\n  };\n  \n  return html`\n    <section id=\"live-page\" class=\"page\">\n      <div class=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <div class=\"flex items-center space-x-2\">\n          <h2 class=\"text-xl font-bold mr-4\">Live View</h2>\n          <div class=\"flex space-x-2\">\n            <button \n              id=\"hls-toggle-btn\" \n              class=\"px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n              onClick=${() => window.location.href = '/hls.html'}\n            >\n              HLS View\n            </button>\n            <button \n              id=\"fullscreen-btn\" \n              class=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n              onClick=${() => toggleFullscreen(isFullscreen, setIsFullscreen)}\n            >\n              Fullscreen\n            </button>\n          </div>\n        </div>\n        <div class=\"controls flex items-center space-x-2\">\n          <select \n            id=\"layout-selector\" \n            class=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600\"\n            value=${layout}\n            onChange=${(e) => {\n              setLayout(e.target.value);\n              setCurrentPage(0); // Reset to first page when layout changes\n            }}\n          >\n            <option value=\"1\">Single View</option>\n            <option value=\"2\">2x1 Grid</option>\n            <option value=\"4\" selected>2x2 Grid</option>\n            <option value=\"6\">2x3 Grid</option>\n            <option value=\"9\">3x3 Grid</option>\n            <option value=\"16\">4x4 Grid</option>\n          </select>\n          \n          ${layout === '1' && html`\n            <select \n              id=\"stream-selector\" \n              class=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600\"\n              value=${selectedStream}\n              onChange=${(e) => setSelectedStream(e.target.value)}\n            >\n              ${streams.map(stream => html`\n                <option key=${stream.name} value=${stream.name}>${stream.name}</option>\n              `)}\n            </select>\n          `}\n        </div>\n      </div>\n      \n      <div class=\"flex flex-col space-y-4\">\n        <div \n          id=\"video-grid\" \n          class=${`video-container layout-${layout}`}\n          ref=${videoGridRef}\n        >\n          ${isLoading ? html`\n            <div class=\"flex justify-center items-center col-span-full row-span-full h-64 w-full\">\n              <div class=\"flex flex-col items-center justify-center py-8\">\n                <div class=\"inline-block animate-spin rounded-full border-4 border-gray-300 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-500 w-16 h-16\"></div>\n                <p class=\"mt-4 text-gray-700 dark:text-gray-300\">Loading streams...</p>\n              </div>\n            </div>\n          ` : streams.length === 0 ? html`\n            <div class=\"placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8\">\n              <p class=\"mb-6 text-gray-600 dark:text-gray-300 text-lg\">No streams configured</p>\n              <a href=\"streams.html\" class=\"btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\">Configure Streams</a>\n            </div>\n          ` : null}\n          <!-- Video cells will be dynamically added by the updateVideoGrid function -->\n        </div>\n        \n        ${layout !== '1' && streams.length > getMaxStreamsForLayout() ? html`\n          <div class=\"pagination-controls flex justify-center items-center space-x-4 mt-4\">\n            <button \n              class=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              onClick=${() => setCurrentPage(Math.max(0, currentPage - 1))}\n              disabled=${currentPage === 0}\n            >\n              Previous\n            </button>\n            <span class=\"text-gray-700 dark:text-gray-300\">\n              Page ${currentPage + 1} of ${Math.ceil(streams.length / getMaxStreamsForLayout())}\n            </span>\n            <button \n              class=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n              onClick=${() => setCurrentPage(Math.min(Math.ceil(streams.length / getMaxStreamsForLayout()) - 1, currentPage + 1))}\n              disabled=${currentPage >= Math.ceil(streams.length / getMaxStreamsForLayout()) - 1}\n            >\n              Next\n            </button>\n          </div>\n        ` : null}\n      </div>\n    </section>\n  `;\n}\n\n/**\n * Load WebRTCView component\n */\nexport function loadWebRTCView() {\n  const mainContent = document.getElementById('main-content');\n  if (!mainContent) return;\n  \n  // Render the WebRTCView component to the container\n  import('../../preact.min.js').then(({ render }) => {\n    render(html`<${WebRTCView} />`, mainContent);\n  });\n}\n\n// The component is initialized by preact-app.js when needed\n"],"names":["WebRTCView","streams","setStreams","useState","layout","setLayout","selectedStream","setSelectedStream","isFullscreen","setIsFullscreen","isLoading","setIsLoading","currentPage","setCurrentPage","videoGridRef","useRef","webrtcConnections","detectionIntervals","useEffect","setupModals","addStatusMessageStyles","addModalStyles","handleEscape","e","key","console","log","livePage","document","getElementById","classList","contains","exitFullscreenMode","addEventListener","handleBeforeUnload","stopAllWebRTCStreams","handleVisibilityChange","hidden","Object","keys","current","forEach","streamName","pc","connectionState","videoElementId","replace","videoElement","pause","play","catch","warn","window","connectionCheckInterval","setInterval","debug","iceConnectionState","cleanupWebRTCPlayer","stream","find","s","name","initializeWebRTCPlayer","removeEventListener","clearInterval","timeoutId","setTimeout","showStatusMessage","loadStreams","then","streamData","clearTimeout","length","error","message","updateVideoGrid","async","timeoutPromise","Promise","_","reject","Error","fetchPromise","fetch","response","race","ok","jsonTimeoutPromise","jsonPromise","json","streamPromises","map","detailsTimeoutPromise","detailsFetchPromise","encodeURIComponent","id","detailedStreams","all","filteredStreams","filter","is_deleted","enabled","streaming_enabled","getMaxStreamsForLayout","placeholder","querySelector","innerHTML","appendChild","streamsToShow","maxStreams","totalPages","Math","ceil","max","startIdx","endIdx","min","slice","streamsToShowNames","includes","streamId","videoCell","createElement","className","width","height","fps","snapshotBtn","takeSnapshot","fullscreenBtn","toggleStreamFullscreen","closest","loadingIndicator","style","display","canvasId","canvasOverlay","position","top","left","pointerEvents","RTCPeerConnection","iceServers","urls","iceTransportPolicy","bundlePolicy","rtcpMuxPolicy","sdpSemantics","ontrack","event","track","kind","srcObject","onloadeddata","onicecandidate","candidate","oniceconnectionstatechange","handleWebRTCError","addTransceiver","direction","setupTimeoutId","createOffer","offerToReceiveAudio","offerToReceiveVideo","offer","sdp","setLocalDescription","sendOffer","localDescription","answer","setRemoteDescription","RTCSessionDescription","detection_based_recording","detection_model","detection_threshold","startDetectionPolling","auth","localStorage","getItem","formattedOffer","type","controller","AbortController","signal","abort","method","headers","Authorization","body","JSON","stringify","status","statusText","jsonController","jsonTimeoutId","text","parse","jsonError","textError","fetchError","errorIndicator","retryButton","streamInfo","errorMsg","textContent","close","cleanupDetectionPolling","streamElement","getAttribute","canvas","videoWidth","videoHeight","getContext","drawImage","__snapshotCanvas","timestamp","Date","toISOString","fileName","__snapshotFileName","showSnapshotPreview","toDataURL","fullscreenElement","exitFullscreen","requestFullscreen","err","html","location","href","toggleFullscreen","target","value","mainContent","__vitePreload","render","module","import","n","p","meta","url"],"mappings":"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"}