{"version":3,"file":"hls-Bz5lML7w.js","sources":["../../js/pages/hls-page.jsx"],"sourcesContent":["/**\n * LightNVR Web Interface Live View Page\n * Entry point for the live view page with WebRTC/HLS support\n */\n\nimport { render } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { LiveView } from '../components/preact/LiveView.jsx';\nimport { ToastContainer } from \"../components/preact/ToastContainer.jsx\";\nimport { QueryClientProvider, queryClient } from '../query-client.js';\nimport { Header } from \"../components/preact/Header.jsx\";\nimport { Footer } from \"../components/preact/Footer.jsx\";\n\n/**\n * Main App component that conditionally renders WebRTCView or LiveView\n * based on whether WebRTC is disabled in settings\n */\nfunction App() {\n    const [isWebRTCDisabled, setIsWebRTCDisabled] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        // Check if WebRTC is disabled in settings\n        async function checkWebRTCStatus() {\n            try {\n                const response = await fetch('/api/settings');\n                if (!response.ok) {\n                    console.error('Failed to fetch settings:', response.status, response.statusText);\n                    setIsLoading(false);\n                    return;\n                }\n\n                const settings = await response.json();\n\n                if (settings.webrtc_disabled) {\n                    console.log('WebRTC is disabled, using HLS view');\n                    setIsWebRTCDisabled(true);\n                } else {\n                    console.log('WebRTC is enabled, using WebRTC view');\n                    setIsWebRTCDisabled(false);\n                }\n            } catch (error) {\n                console.error('Error checking WebRTC status:', error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n\n        checkWebRTCStatus();\n    }, []);\n\n    if (isLoading) {\n        return <div className=\"loading\">Loading...</div>;\n    }\n\n    return (\n        <>\n            <Header />\n            <ToastContainer />\n            <LiveView isWebRTCDisabled={isWebRTCDisabled} />\n            <Footer />\n        </>\n    );\n}\n\n// Render the App component when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Get the container element\n    const container = document.getElementById('main-content');\n\n    if (container) {\n        render(\n            <QueryClientProvider client={queryClient}>\n                <App />\n            </QueryClientProvider>,\n            container\n        );\n    }\n});\n"],"names":["App","isWebRTCDisabled","setIsWebRTCDisabled","useState","isLoading","setIsLoading","useEffect","checkWebRTCStatus","response","error","jsx","jsxs","Fragment","Header","ToastContainer","LiveView","Footer","container","render","QueryClientProvider","queryClient"],"mappings":"2WAiBA,SAASA,GAAM,CACX,KAAM,CAACC,EAAkBC,CAAmB,EAAIC,EAAS,EAAK,EACxD,CAACC,EAAWC,CAAY,EAAIF,EAAS,EAAI,EAgC/C,OA9BAG,EAAU,IAAM,CAEZ,eAAeC,GAAoB,CAC3B,GAAA,CACM,MAAAC,EAAW,MAAM,MAAM,eAAe,EACxC,GAAA,CAACA,EAAS,GAAI,CACd,QAAQ,MAAM,4BAA6BA,EAAS,OAAQA,EAAS,UAAU,EAC/EH,EAAa,EAAK,EAClB,MAAA,EAGa,MAAMG,EAAS,KAAK,GAExB,iBACT,QAAQ,IAAI,oCAAoC,EAChDN,EAAoB,EAAI,IAExB,QAAQ,IAAI,sCAAsC,EAClDA,EAAoB,EAAK,SAExBO,EAAO,CACJ,QAAA,MAAM,gCAAiCA,CAAK,CAAA,QACtD,CACEJ,EAAa,EAAK,CAAA,CACtB,CAGcE,EAAA,CACtB,EAAG,EAAE,EAEDH,EACQM,EAAA,MAAA,CAAI,UAAU,UAAU,SAAU,aAAA,EAKtCC,EAAAC,EAAA,CAAA,SAAA,CAAAF,EAACG,EAAO,EAAA,IACPC,EAAe,EAAA,EAChBJ,EAACK,GAAS,iBAAAd,EAAoC,IAC7Ce,EAAO,CAAA,CAAA,CAAA,EACZ,CAER,CAGA,SAAS,iBAAiB,mBAAoB,IAAM,CAE1C,MAAAC,EAAY,SAAS,eAAe,cAAc,EAEpDA,GACAC,IACKC,EAAoB,CAAA,OAAQC,EACzB,SAAAV,EAACV,GAAI,CAAA,EACT,EACAiB,CACJ,CAER,CAAC"}