{"version":3,"file":"StreamsView-legacy-CymTV3HK.js","sources":["../../js/components/preact/StreamDeleteModal.js","../../js/components/preact/StreamsView.js"],"sourcesContent":["/**\n * LightNVR Web Interface Stream Delete Modal Component\n * Preact component for the stream delete modal\n */\n\nimport { html } from '../../html-helper.js';\nimport { useState } from 'preact/hooks';\n\n/**\n * StreamDeleteModal component\n * @param {Object} props Component props\n * @param {string} props.streamId ID of the stream to delete\n * @param {string} props.streamName Name of the stream to display\n * @param {Function} props.onClose Function to call when the modal is closed\n * @param {Function} props.onDisable Function to call when the disable button is clicked\n * @param {Function} props.onDelete Function to call when the delete button is clicked\n * @returns {JSX.Element} StreamDeleteModal component\n */\nexport function StreamDeleteModal({ streamId, streamName, onClose, onDisable, onDelete }) {\n  const [isConfirmDelete, setIsConfirmDelete] = useState(false);\n  \n  // Show delete confirmation step\n  const showDeleteConfirmation = () => {\n    setIsConfirmDelete(true);\n  };\n  \n  // Handle disable stream\n  const handleDisable = () => {\n    onDisable(streamId);\n    onClose();\n  };\n  \n  // Handle delete stream\n  const handleDelete = () => {\n    onDelete(streamId);\n    onClose();\n  };\n  \n  return html`\n    <div class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300\">\n      <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full\">\n        <div class=\"flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700\">\n          <h3 class=\"text-lg font-medium\">${isConfirmDelete ? 'Confirm Permanent Deletion' : 'Stream Actions'}</h3>\n          <span class=\"text-2xl cursor-pointer\" onClick=${onClose}>Ã—</span>\n        </div>\n        \n        <div class=\"p-6\">\n          ${!isConfirmDelete ? html`\n            <div class=\"mb-6\">\n              <h4 class=\"text-lg font-medium mb-2\">What would you like to do with \"${streamName}\"?</h4>\n              <p class=\"text-gray-600 dark:text-gray-400 mb-4\">\n                Please choose one of the following options:\n              </p>\n              \n              <div class=\"space-y-4\">\n                <div class=\"p-4 border border-yellow-200 bg-yellow-50 dark:bg-yellow-900/20 dark:border-yellow-900/30 rounded-lg\">\n                  <h5 class=\"font-medium text-yellow-800 dark:text-yellow-500 mb-2\">Disable Stream (Soft Delete)</h5>\n                  <p class=\"text-gray-600 dark:text-gray-400 mb-2\">\n                    This option will disable the stream but keep its configuration in the database. You can re-enable it later.\n                  </p>\n                  <ul class=\"list-disc list-inside text-sm text-gray-600 dark:text-gray-400 mb-3\">\n                    <li>Stream will stop processing</li>\n                    <li>Live streaming will be disabled</li>\n                    <li>Recording will be disabled</li>\n                    <li>Audio recording will be disabled</li>\n                    <li>Detection-based recording will be disabled</li>\n                    <li>Configuration is preserved</li>\n                    <li>Existing recordings are kept</li>\n                    <li>Can be re-enabled later</li>\n                  </ul>\n                  <button \n                    class=\"w-full px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700 transition-colors focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n                    onClick=${handleDisable}\n                  >\n                    Disable Stream\n                  </button>\n                </div>\n                \n                <div class=\"p-4 border border-red-200 bg-red-50 dark:bg-red-900/20 dark:border-red-900/30 rounded-lg\">\n                  <h5 class=\"font-medium text-red-800 dark:text-red-500 mb-2\">Delete Stream (Permanent)</h5>\n                  <p class=\"text-gray-600 dark:text-gray-400 mb-2\">\n                    This option will permanently delete the stream configuration from the database. This action cannot be undone.\n                  </p>\n                  <ul class=\"list-disc list-inside text-sm text-gray-600 dark:text-gray-400 mb-3\">\n                    <li>Stream will be completely removed</li>\n                    <li>Configuration is deleted</li>\n                    <li>Recordings remain accessible</li>\n                    <li>Cannot be recovered</li>\n                  </ul>\n                  <button \n                    class=\"w-full px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n                    onClick=${showDeleteConfirmation}\n                  >\n                    Delete Stream\n                  </button>\n                </div>\n              </div>\n            </div>\n          ` : html`\n            <div class=\"mb-6\">\n              <div class=\"flex items-center justify-center mb-4 text-red-600 dark:text-red-500\">\n                <svg class=\"w-12 h-12\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path fill-rule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\"></path>\n                </svg>\n              </div>\n              <h4 class=\"text-lg font-medium mb-2 text-center\">Are you sure you want to permanently delete \"${streamName}\"?</h4>\n              <p class=\"text-gray-600 dark:text-gray-400 mb-4 text-center\">\n                This action cannot be undone. The stream configuration will be permanently removed from the database.\n              </p>\n            </div>\n            \n            <div class=\"flex justify-center space-x-3\">\n              <button \n                class=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n                onClick=${() => setIsConfirmDelete(false)}\n              >\n                Cancel\n              </button>\n              <button \n                class=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n                onClick=${handleDelete}\n              >\n                Yes, Delete Permanently\n              </button>\n            </div>\n          `}\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * LightNVR Web Interface StreamsView Component\n * Preact component for the streams page\n */\n\nimport { h } from 'preact';\nimport { html } from '../../html-helper.js';\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { showStatusMessage } from './UI.js';\nimport { ContentLoader } from './LoadingIndicator.js';\nimport { StreamDeleteModal } from './StreamDeleteModal.js';\nimport {\n  useQuery,\n  useMutation,\n  useQueryClient,\n  usePostMutation,\n  usePutMutation,\n  useDeleteMutation,\n  fetchJSON\n} from '../../query-client.js';\n\n/**\n * StreamsView component\n * @returns {JSX.Element} StreamsView component\n */\nexport function StreamsView() {\n  const queryClient = useQueryClient();\n\n  // State for streams data\n  const [modalVisible, setModalVisible] = useState(false);\n  const [onvifModalVisible, setOnvifModalVisible] = useState(false);\n  const [showCustomNameInput, setShowCustomNameInput] = useState(false);\n  const [isAddingStream, setIsAddingStream] = useState(false);\n  const [discoveredDevices, setDiscoveredDevices] = useState([]);\n  const [deviceProfiles, setDeviceProfiles] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState(null);\n  const [selectedProfile, setSelectedProfile] = useState(null);\n  const [customStreamName, setCustomStreamName] = useState('');\n  const [onvifCredentials, setOnvifCredentials] = useState({ username: '', password: '' });\n  const [isDiscovering, setIsDiscovering] = useState(false);\n  const [isLoadingProfiles, setIsLoadingProfiles] = useState(false);\n\n  // Fetch streams data\n  const {\n    data: streamsResponse = [],\n    isLoading,\n    error\n  } = useQuery(['streams'], '/api/streams', {\n    timeout: 10000,\n    retries: 2,\n    retryDelay: 1000\n  });\n\n  // Fetch detection models\n  const {\n    data: detectionModelsData\n  } = useQuery(['detectionModels'], '/api/detection/models', {\n    timeout: 5000,\n    retries: 1,\n    retryDelay: 1000\n  });\n\n  // Process the response to handle both array and object formats\n  const streams = Array.isArray(streamsResponse) ? streamsResponse : (streamsResponse.streams || []);\n\n  // Log streams data for debugging\n  console.log('API Response:', streamsResponse);\n\n  // Log streams data for debugging\n  console.log('Streams data:', streams);\n  console.log('hasData:', streams && streams.length > 0);\n\n  // Default stream state\n  const [currentStream, setCurrentStream] = useState({\n    name: '',\n    url: '',\n    enabled: true,\n    streamingEnabled: true,\n    width: 1280,\n    height: 720,\n    fps: 15,\n    codec: 'h264',\n    protocol: '0',\n    priority: '5',\n    segment: 30,\n    record: true,\n    recordAudio: true,\n    detectionEnabled: false,\n    detectionModel: '',\n    detectionThreshold: 50,\n    detectionInterval: 10,\n    preBuffer: 10,\n    postBuffer: 30\n  });\n  const [isEditing, setIsEditing] = useState(false);\n\n  // State for delete modal\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\n  const [streamToDelete, setStreamToDelete] = useState(null);\n\n  // Compute hasData from streams\n  const hasData = streams && streams.length > 0;\n\n  // Extract detection models from query result\n  const detectionModels = detectionModelsData?.models || [];\n\n  // Mutations for saving stream (create or update)\n  const createStreamMutation = usePostMutation(\n    '/api/streams',\n    {\n      timeout: 15000,\n      retries: 1,\n      retryDelay: 1000\n    },\n    {\n      onSuccess: () => {\n        showStatusMessage('Stream added successfully');\n        closeModal();\n        // Invalidate and refetch streams data\n        queryClient.invalidateQueries({ queryKey: ['streams'] });\n      },\n      onError: (error) => {\n        showStatusMessage(`Error adding stream: ${error.message}`, 5000, 'error');\n      }\n    }\n  );\n\n  const updateStreamMutation = useMutation({\n    mutationFn: async (data) => {\n      const { streamName, ...streamData } = data;\n      const url = `/api/streams/${encodeURIComponent(streamName)}`;\n      return await fetchJSON(url, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(streamData),\n        timeout: 15000,\n        retries: 1,\n        retryDelay: 1000\n      });\n    },\n    onSuccess: () => {\n      showStatusMessage('Stream updated successfully');\n      closeModal();\n      // Invalidate and refetch streams data\n      queryClient.invalidateQueries({ queryKey: ['streams'] });\n    },\n    onError: (error) => {\n      showStatusMessage(`Error updating stream: ${error.message}`, 5000, 'error');\n    }\n  });\n\n  // Helper function to use the appropriate mutation based on editing state\n  const saveStreamMutation = {\n    mutate: (streamData, options) => {\n      if (isEditing) {\n        // For PUT requests, we need to include the streamName parameter\n        updateStreamMutation.mutate({\n          ...streamData,\n          streamName: streamData.name\n        }, options);\n      } else {\n        createStreamMutation.mutate(streamData, options);\n      }\n    }\n  };\n\n  // Mutation for testing stream connection\n  const testStreamMutation = usePostMutation(\n    '/api/streams/test',\n    {\n      timeout: 20000,\n      retries: 1,\n      retryDelay: 2000\n    },\n    {\n      onMutate: () => {\n        showStatusMessage('Testing stream connection...');\n      },\n      onSuccess: (data) => {\n        if (data.success) {\n          showStatusMessage('Stream connection successful!', 3000, 'success');\n        } else {\n          showStatusMessage(`Stream connection failed: ${data.message}`, 5000, 'error');\n        }\n      },\n      onError: (error) => {\n        showStatusMessage(`Error testing stream: ${error.message}`, 5000, 'error');\n      }\n    }\n  );\n\n  // Mutation for deleting stream\n  const deleteStreamMutation = useMutation({\n    mutationFn: async (params) => {\n      const { streamId } = params;\n      const url = `/api/streams/${encodeURIComponent(streamId)}?permanent=true`;\n      return await fetchJSON(url, {\n        method: 'DELETE',\n        timeout: 15000,\n        retries: 1,\n        retryDelay: 1000\n      });\n    },\n    onSuccess: () => {\n      showStatusMessage('Stream successfully deleted.');\n      closeDeleteModal();\n      // Invalidate and refetch streams data\n      queryClient.invalidateQueries({ queryKey: ['streams'] });\n    },\n    onError: (error) => {\n      showStatusMessage(`Error deleting stream: ${error.message}`, 5000, 'error');\n    }\n  });\n\n  const disableStreamMutation = useMutation({\n    mutationFn: async (params) => {\n      const { streamId } = params;\n      const url = `/api/streams/${encodeURIComponent(streamId)}`;\n      return await fetchJSON(url, {\n        method: 'DELETE',\n        timeout: 15000,\n        retries: 1,\n        retryDelay: 1000\n      });\n    },\n    onSuccess: () => {\n      showStatusMessage('Stream successfully disabled.');\n      closeDeleteModal();\n      // Invalidate and refetch streams data\n      queryClient.invalidateQueries({ queryKey: ['streams'] });\n    },\n    onError: (error) => {\n      showStatusMessage(`Error disabling stream: ${error.message}`, 5000, 'error');\n    }\n  });\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Prepare stream data for API\n    const streamData = {\n      name: currentStream.name,\n      url: currentStream.url,\n      enabled: currentStream.enabled,\n      streaming_enabled: currentStream.streamingEnabled,\n      width: parseInt(currentStream.width, 10),\n      height: parseInt(currentStream.height, 10),\n      fps: parseInt(currentStream.fps, 10),\n      codec: currentStream.codec,\n      protocol: parseInt(currentStream.protocol, 10),\n      priority: parseInt(currentStream.priority, 10),\n      segment_duration: parseInt(currentStream.segment, 10),\n      record: currentStream.record,\n      detection_based_recording: currentStream.detectionEnabled,\n      detection_model: currentStream.detectionModel,\n      detection_threshold: parseInt(currentStream.detectionThreshold, 10),\n      detection_interval: parseInt(currentStream.detectionInterval, 10),\n      pre_detection_buffer: parseInt(currentStream.preBuffer, 10),\n      post_detection_buffer: parseInt(currentStream.postBuffer, 10),\n      record_audio: currentStream.recordAudio\n    };\n\n    // When editing, set is_deleted to false to allow undeleting soft-deleted streams\n    if (isEditing) {\n      streamData.is_deleted = false;\n    }\n\n    // Use mutation to save stream\n    saveStreamMutation.mutate(streamData);\n  };\n\n  // Save stream (wrapper for handleSubmit to use in onClick)\n  const saveStream = (e) => {\n    handleSubmit(e);\n  };\n\n  // Test stream connection\n  const testStreamConnection = () => {\n    testStreamMutation.mutate({\n      url: currentStream.url,\n      protocol: parseInt(currentStream.protocol, 10)\n    });\n  };\n\n  // Open delete modal\n  const openDeleteModal = (stream) => {\n    setStreamToDelete(stream);\n    setDeleteModalVisible(true);\n  };\n\n  // Close delete modal\n  const closeDeleteModal = () => {\n    setDeleteModalVisible(false);\n    setStreamToDelete(null);\n  };\n\n  // Open add stream modal\n  const openAddStreamModal = () => {\n    setCurrentStream({\n      name: '',\n      url: '',\n      enabled: true,\n      streamingEnabled: true,\n      width: 1280,\n      height: 720,\n      fps: 15,\n      codec: 'h264',\n      protocol: '0',\n      priority: '5',\n      segment: 30,\n      record: true,\n      recordAudio: true,\n      detectionEnabled: false,\n      detectionModel: '',\n      detectionThreshold: 50,\n      detectionInterval: 10,\n      preBuffer: 10,\n      postBuffer: 30\n    });\n    setIsEditing(false);\n    setModalVisible(true);\n  };\n\n  // Open edit stream modal\n  const openEditStreamModal = async (streamId) => {\n    try {\n      // Use queryClient to fetch stream details\n      const stream = await queryClient.fetchQuery({\n        queryKey: ['stream', streamId],\n        queryFn: async () => {\n          const response = await fetch(`/api/streams/${encodeURIComponent(streamId)}`);\n          if (!response.ok) {\n            throw new Error(`HTTP error ${response.status}`);\n          }\n          return response.json();\n        },\n        staleTime: 10000 // 10 seconds\n      });\n\n      setCurrentStream({\n        ...stream,\n        // Convert numeric values to strings for form inputs\n        width: stream.width || 1280,\n        height: stream.height || 720,\n        fps: stream.fps || 15,\n        protocol: stream.protocol?.toString() || '0',\n        priority: stream.priority?.toString() || '5',\n        segment: stream.segment_duration || 30,\n        detectionThreshold: stream.detection_threshold || 50,\n        detectionInterval: stream.detection_interval || 10,\n        preBuffer: stream.pre_detection_buffer || 10,\n        postBuffer: stream.post_detection_buffer || 30,\n        // Map API fields to form fields\n        streamingEnabled: stream.streaming_enabled !== undefined ? stream.streaming_enabled : true,\n        isOnvif: stream.is_onvif !== undefined ? stream.is_onvif : false,\n        detectionEnabled: stream.detection_based_recording || false,\n        detectionModel: stream.detection_model || '',\n        recordAudio: stream.record_audio !== undefined ? stream.record_audio : true\n      });\n      setIsEditing(true);\n      setModalVisible(true);\n    } catch (error) {\n      console.error('Error loading stream details:', error);\n      showStatusMessage('Error loading stream details: ' + error.message);\n    }\n  };\n\n  // Close modal\n  const closeModal = () => {\n    setModalVisible(false);\n  };\n\n  // Open ONVIF discovery modal\n  const openOnvifModal = () => {\n    setDiscoveredDevices([]);\n    setDeviceProfiles([]);\n    setSelectedDevice(null);\n    setSelectedProfile(null);\n    setCustomStreamName('');\n    setOnvifModalVisible(true);\n  };\n\n  // Close ONVIF modal\n  const closeOnvifModal = () => {\n    setOnvifModalVisible(false);\n  };\n\n  // Handle form input change\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setCurrentStream(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n\n  // Disable stream (soft delete)\n  const disableStream = (streamId) => {\n    disableStreamMutation.mutate({\n      streamId,\n    });\n  };\n\n  // Delete stream (permanent)\n  const deleteStream = (streamId) => {\n    deleteStreamMutation.mutate({\n      streamId,\n    });\n  };\n\n  // Handle ONVIF credential input change\n  const handleCredentialChange = (e) => {\n    const { name, value } = e.target;\n    setOnvifCredentials(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Handle threshold change\n  const handleThresholdChange = (e) => {\n    const value = e.target.value;\n    setCurrentStream(prev => ({\n      ...prev,\n      detectionThreshold: value\n    }));\n  };\n\n  // Load detection models\n  const loadDetectionModels = () => {\n    queryClient.invalidateQueries({ queryKey: ['detectionModels'] });\n  };\n\n  // ONVIF discovery mutation\n  const onvifDiscoveryMutation = usePostMutation(\n    '/api/onvif/discovery/discover',\n    {\n      timeout: 120000,\n      retries: 0\n    },\n    {\n      onMutate: () => {\n        setIsDiscovering(true);\n      },\n      onSuccess: (data) => {\n        setDiscoveredDevices(data.devices || []);\n        setIsDiscovering(false);\n      },\n      onError: (error) => {\n        showStatusMessage(`Error discovering ONVIF devices: ${error.message}`, 5000, 'error');\n        setIsDiscovering(false);\n      }\n    }\n  );\n\n  // Get device profiles mutation\n  const getDeviceProfilesMutation = useMutation({\n    mutationFn: ({ device, credentials }) => {\n      setIsLoadingProfiles(true);\n\n      // Make a simple GET request\n      return fetch('/api/onvif/device/profiles', {\n        method: 'GET',\n        headers: {\n          'X-Device-URL': `http://${device.ip_address}/onvif/device_service`,\n          'X-Username': credentials.username,\n          'X-Password': credentials.password\n        }\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error ${response.status}`);\n        }\n        return response.json();\n      });\n    },\n    onSuccess: (data) => {\n      setDeviceProfiles(data.profiles || []);\n      setIsLoadingProfiles(false);\n    },\n    onError: (error) => {\n      showStatusMessage(`Error loading device profiles: ${error.message}`, 5000, 'error');\n      setIsLoadingProfiles(false);\n    }\n  });\n\n  // Test ONVIF connection mutation\n  const testOnvifConnectionMutation = usePostMutation(\n    '/api/onvif/device/test',\n    {\n      timeout: 15000,\n      retries: 0\n    },\n    {\n      onMutate: () => {\n        setIsLoadingProfiles(true);\n      },\n      onSuccess: (data, variables) => {\n        if (data.success) {\n          showStatusMessage('Connection successful!', 3000, 'success');\n          // The device object is no longer passed directly in variables\n          // We need to use the selectedDevice state instead\n          if (selectedDevice) {\n            getDeviceProfiles(selectedDevice);\n          }\n        } else {\n          showStatusMessage(`Connection failed: ${data.message}`, 5000, 'error');\n          setIsLoadingProfiles(false);\n        }\n      },\n      onError: (error) => {\n        showStatusMessage(`Error testing connection: ${error.message}`, 5000, 'error');\n        setIsLoadingProfiles(false);\n      }\n    }\n  );\n\n\n\n  // Submit ONVIF device\n  const submitOnvifDevice = () => {\n    if (!selectedDevice || !selectedProfile || !customStreamName.trim()) {\n      showStatusMessage('Missing required information', 5000, 'error');\n      return;\n    }\n\n    setIsAddingStream(true);\n\n    // Prepare stream data\n    const streamData = {\n      name: customStreamName.trim(),\n      url: selectedProfile.stream_uri, // Use stream_uri instead of url\n      enabled: true,\n      streaming_enabled: true,\n      width: selectedProfile.width,\n      height: selectedProfile.height,\n      fps: selectedProfile.fps || 15,\n      codec: selectedProfile.encoding === 'H264' ? 'h264' : 'h265',\n      protocol: '0', // TCP\n      priority: '5', // Medium\n      segment_duration: 30,\n      record: true,\n      record_audio: true,\n      is_onvif: true\n    };\n\n    // Log the stream data for debugging\n    console.log('Adding ONVIF stream with data:', streamData);\n\n    // Use mutation to save stream\n    saveStreamMutation.mutate(streamData, {\n      onSuccess: () => {\n        setIsAddingStream(false);\n        setShowCustomNameInput(false);\n        setOnvifModalVisible(false);\n      },\n      onError: () => {\n        setIsAddingStream(false);\n      },\n      isEditing: false,\n    });\n  };\n\n  // Start ONVIF discovery\n  const startOnvifDiscovery = () => {\n    onvifDiscoveryMutation.mutate({});\n  };\n\n  // Get ONVIF device profiles\n  const getDeviceProfiles = (device) => {\n    setSelectedDevice(device);\n    setDeviceProfiles([]);\n    getDeviceProfilesMutation.mutate({\n      device,\n      credentials: onvifCredentials\n    });\n  };\n\n  // Handle custom stream name change\n  const handleStreamNameChange = (e) => {\n    setCustomStreamName(e.target.value);\n  };\n\n  // Add ONVIF device as stream with selected profile\n  const addOnvifDeviceAsStream = (profile) => {\n    setSelectedProfile(profile);\n    setCustomStreamName(`${selectedDevice.name || 'ONVIF'}_${profile.name || 'Stream'}`);\n    setShowCustomNameInput(true);\n  };\n\n  // Test ONVIF connection\n  const testOnvifConnection = (device) => {\n    // Store the selected device first\n    setSelectedDevice(device);\n\n    // Then make the API call\n    testOnvifConnectionMutation.mutate({\n      url: `http://${device.ip_address}/onvif/device_service`,\n      username: onvifCredentials.username,\n      password: onvifCredentials.password\n    });\n  };\n\n  return html`\n    <section id=\"streams-page\" class=\"page\">\n      <div class=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <h2 class=\"text-xl font-bold\">Streams</h2>\n        <div class=\"controls flex space-x-2\">\n          <button\n              id=\"discover-onvif-btn\"\n              class=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n              onClick=${() => setOnvifModalVisible(true)}\n          >\n            Discover ONVIF Cameras\n          </button>\n          <button\n              id=\"add-stream-btn\"\n              class=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n              onClick=${openAddStreamModal}\n          >\n            Add Stream\n          </button>\n        </div>\n      </div>\n\n      <${ContentLoader}\n          isLoading=${isLoading}\n          hasData=${hasData}\n          loadingMessage=\"Loading streams...\"\n          emptyMessage=\"No streams configured yet. Click 'Add Stream' to create one.\"\n      >\n        <div class=\"streams-container bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden\">\n          <div class=\"overflow-x-auto\">\n            <table id=\"streams-table\" class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n              <thead class=\"bg-gray-50 dark:bg-gray-700\">\n              <tr>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Name</th>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">URL</th>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Resolution</th>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">FPS</th>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Recording</th>\n                <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Actions</th>\n              </tr>\n              </thead>\n              <tbody class=\"bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700\">\n              ${streams.map(stream => html`\n                <tr key=${stream.name} class=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                  <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <div class=\"flex items-center\">\n                      <span class=${`status-indicator w-2 h-2 rounded-full mr-2 ${stream.enabled ? 'bg-green-500' : 'bg-red-500'}`}></span>\n                      ${stream.name}\n                    </div>\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap\">${stream.url}</td>\n                  <td class=\"px-6 py-4 whitespace-nowrap\">${stream.width}x${stream.height}</td>\n                  <td class=\"px-6 py-4 whitespace-nowrap\">${stream.fps}</td>\n                  <td class=\"px-6 py-4 whitespace-nowrap\">\n                    ${stream.record ? 'Enabled' : 'Disabled'}\n                    ${stream.detection_based_recording ? ' (Detection)' : ''}\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <div class=\"flex space-x-2\">\n                      <button\n                          class=\"p-1 rounded-full text-blue-600 hover:bg-blue-100 dark:text-blue-400 dark:hover:bg-blue-900 focus:outline-none\"\n                          onClick=${() => openEditStreamModal(stream.name)}\n                          title=\"Edit\"\n                      >\n                        <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path d=\"M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z\"></path>\n                        </svg>\n                      </button>\n                      <button\n                          class=\"p-1 rounded-full text-red-600 hover:bg-red-100 dark:text-red-400 dark:hover:bg-red-900 focus:outline-none\"\n                          onClick=${() => openDeleteModal(stream)}\n                          title=\"Delete\"\n                      >\n                        <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path fill-rule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clip-rule=\"evenodd\"></path>\n                        </svg>\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              `)}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      <//>\n\n      ${deleteModalVisible && streamToDelete && html`\n        <${StreamDeleteModal}\n            streamId=${streamToDelete.name}\n            streamName=${streamToDelete.name}\n            onClose=${closeDeleteModal}\n            onDisable=${disableStream}\n            onDelete=${deleteStream}\n        />\n      `}\n\n      ${modalVisible && html`\n        <div id=\"stream-modal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300\">\n          <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n            <div class=\"flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700\">\n              <h3 class=\"text-lg font-medium\">${isEditing ? 'Edit Stream' : 'Add Stream'}</h3>\n              <span class=\"text-2xl cursor-pointer\" onClick=${closeModal}>Ã—</span>\n            </div>\n            <div class=\"p-4\">\n              <form id=\"stream-form\" class=\"space-y-4\">\n                <div class=\"form-group\">\n                  <label for=\"stream-name\" class=\"block text-sm font-medium mb-1\">Name</label>\n                  <input\n                      type=\"text\"\n                      id=\"stream-name\"\n                      name=\"name\"\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white ${isEditing ? 'bg-gray-100 dark:bg-gray-800' : ''}\"\n                      value=${currentStream.name}\n                      onChange=${handleInputChange}\n                      disabled=${isEditing}\n                      required\n                  />\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"stream-url\" class=\"block text-sm font-medium mb-1\">URL</label>\n                  <input\n                      type=\"text\"\n                      id=\"stream-url\"\n                      name=\"url\"\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      placeholder=\"rtsp://example.com/stream\"\n                      value=${currentStream.url}\n                      onChange=${handleInputChange}\n                      required\n                  />\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input\n                      type=\"checkbox\"\n                      id=\"stream-enabled\"\n                      name=\"enabled\"\n                      class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                      checked=${currentStream.enabled}\n                      onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-enabled\" class=\"ml-2 block text-sm\">Stream Active</label>\n                  <span class=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">Enable/disable all stream processing</span>\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input\n                      type=\"checkbox\"\n                      id=\"stream-streaming-enabled\"\n                      name=\"streamingEnabled\"\n                      class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                      checked=${currentStream.streamingEnabled}\n                      onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-streaming-enabled\" class=\"ml-2 block text-sm\">Live View Enabled</label>\n                  <span class=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">Enable/disable live viewing in browser</span>\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input\n                      type=\"checkbox\"\n                      id=\"stream-is-onvif\"\n                      name=\"isOnvif\"\n                      class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                      checked=${currentStream.isOnvif}\n                      onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-is-onvif\" class=\"ml-2 block text-sm\">ONVIF Camera</label>\n                  <span class=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">Mark this stream as an ONVIF camera for special handling</span>\n                </div>\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div class=\"form-group\">\n                    <label for=\"stream-width\" class=\"block text-sm font-medium mb-1\">Width</label>\n                    <input\n                        type=\"number\"\n                        id=\"stream-width\"\n                        name=\"width\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        min=\"320\"\n                        max=\"1920\"\n                        value=${currentStream.width}\n                        onChange=${handleInputChange}\n                    />\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-height\" class=\"block text-sm font-medium mb-1\">Height</label>\n                    <input\n                        type=\"number\"\n                        id=\"stream-height\"\n                        name=\"height\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        min=\"240\"\n                        max=\"1080\"\n                        value=${currentStream.height}\n                        onChange=${handleInputChange}\n                    />\n                  </div>\n                </div>\n                <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div class=\"form-group\">\n                    <label for=\"stream-fps\" class=\"block text-sm font-medium mb-1\">FPS</label>\n                    <input\n                        type=\"number\"\n                        id=\"stream-fps\"\n                        name=\"fps\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        min=\"1\"\n                        max=\"30\"\n                        value=${currentStream.fps}\n                        onChange=${handleInputChange}\n                    />\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-codec\" class=\"block text-sm font-medium mb-1\">Codec</label>\n                    <select\n                        id=\"stream-codec\"\n                        name=\"codec\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        value=${currentStream.codec}\n                        onChange=${handleInputChange}\n                    >\n                      <option value=\"h264\">H.264</option>\n                      <option value=\"h265\">H.265</option>\n                    </select>\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-protocol\" class=\"block text-sm font-medium mb-1\">Protocol</label>\n                    <select\n                        id=\"stream-protocol\"\n                        name=\"protocol\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        value=${currentStream.protocol}\n                        onChange=${handleInputChange}\n                    >\n                      <option value=\"0\">TCP</option>\n                      <option value=\"1\">UDP</option>\n                    </select>\n                    <span class=\"text-xs text-gray-500 dark:text-gray-400\">Connection protocol (ONVIF cameras use either TCP or UDP)</span>\n                  </div>\n                </div>\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div class=\"form-group\">\n                    <label for=\"stream-priority\" class=\"block text-sm font-medium mb-1\">Priority</label>\n                    <select\n                        id=\"stream-priority\"\n                        name=\"priority\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        value=${currentStream.priority}\n                        onChange=${handleInputChange}\n                    >\n                      <option value=\"1\">Low (1)</option>\n                      <option value=\"5\">Medium (5)</option>\n                      <option value=\"10\">High (10)</option>\n                    </select>\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-segment\" class=\"block text-sm font-medium mb-1\">Segment Duration (seconds)</label>\n                    <input\n                        type=\"number\"\n                        id=\"stream-segment\"\n                        name=\"segment\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        min=\"60\"\n                        max=\"3600\"\n                        value=${currentStream.segment}\n                        onChange=${handleInputChange}\n                    />\n                  </div>\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input\n                      type=\"checkbox\"\n                      id=\"stream-record\"\n                      name=\"record\"\n                      class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                      checked=${currentStream.record}\n                      onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-record\" class=\"ml-2 block text-sm\">Record</label>\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input\n                      type=\"checkbox\"\n                      id=\"stream-record-audio\"\n                      name=\"recordAudio\"\n                      class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                      checked=${currentStream.recordAudio}\n                      onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-record-audio\" class=\"ml-2 block text-sm\">Record Audio</label>\n                  <span class=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">Include audio in recordings if available in the stream</span>\n                </div>\n\n                <!-- Detection-based recording options -->\n                <div class=\"mt-6 mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">\n                  <h4 class=\"text-md font-medium\">Detection-Based Recording</h4>\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input\n                      type=\"checkbox\"\n                      id=\"stream-detection-enabled\"\n                      name=\"detectionEnabled\"\n                      class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                      checked=${currentStream.detectionEnabled}\n                      onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-detection-enabled\" class=\"ml-2 block text-sm\">Enable Detection-Based Recording</label>\n                  <span class=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">Only record when objects are detected</span>\n                </div>\n                <div class=\"form-group\" style=${currentStream.detectionEnabled ? '' : 'display: none'}>\n                  <label for=\"stream-detection-model\" class=\"block text-sm font-medium mb-1\">Detection Model</label>\n                  <div class=\"flex space-x-2\">\n                    <select\n                        id=\"stream-detection-model\"\n                        name=\"detectionModel\"\n                        class=\"flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        value=${currentStream.detectionModel}\n                        onChange=${handleInputChange}\n                    >\n                      <option value=\"\">Select a model</option>\n                      ${detectionModels.map(model => html`\n                        <option key=${model.id} value=${model.id}>${model.name}</option>\n                      `)}\n                    </select>\n                    <button\n                        id=\"refresh-models-btn\"\n                        class=\"p-2 rounded-md bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none\"\n                        title=\"Refresh Models\"\n                        onClick=${loadDetectionModels}\n                        type=\"button\"\n                    >\n                      <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\" clip-rule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                  </div>\n                </div>\n                <div class=\"form-group\" style=${currentStream.detectionEnabled ? '' : 'display: none'}>\n                  <label for=\"stream-detection-threshold\" class=\"block text-sm font-medium mb-1\">Detection Threshold</label>\n                  <div class=\"flex items-center space-x-2\">\n                    <input\n                        type=\"range\"\n                        id=\"stream-detection-threshold\"\n                        name=\"detectionThreshold\"\n                        class=\"flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"\n                        min=\"0\"\n                        max=\"100\"\n                        step=\"1\"\n                        value=${currentStream.detectionThreshold}\n                        onInput=${handleThresholdChange}\n                    />\n                    <span id=\"stream-threshold-value\" class=\"font-medium text-blue-600 dark:text-blue-400 min-w-[3rem] text-center\">\n                      ${currentStream.detectionThreshold}%\n                    </span>\n                  </div>\n                </div>\n                <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\" style=${currentStream.detectionEnabled ? '' : 'display: none'}>\n                  <div class=\"form-group\">\n                    <label for=\"stream-detection-interval\" class=\"block text-sm font-medium mb-1\">Detection Interval (frames)</label>\n                    <input\n                        type=\"number\"\n                        id=\"stream-detection-interval\"\n                        name=\"detectionInterval\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        min=\"1\"\n                        max=\"100\"\n                        value=${currentStream.detectionInterval}\n                        onChange=${handleInputChange}\n                    />\n                    <span class=\"text-xs text-gray-500 dark:text-gray-400\">Detect on every Nth frame</span>\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-pre-buffer\" class=\"block text-sm font-medium mb-1\">Pre-detection Buffer (seconds)</label>\n                    <input\n                        type=\"number\"\n                        id=\"stream-pre-buffer\"\n                        name=\"preBuffer\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        min=\"0\"\n                        max=\"60\"\n                        value=${currentStream.preBuffer}\n                        onChange=${handleInputChange}\n                    />\n                    <span class=\"text-xs text-gray-500 dark:text-gray-400\">Seconds to keep before detection</span>\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-post-buffer\" class=\"block text-sm font-medium mb-1\">Post-detection Buffer (seconds)</label>\n                    <input\n                        type=\"number\"\n                        id=\"stream-post-buffer\"\n                        name=\"postBuffer\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        min=\"0\"\n                        max=\"300\"\n                        value=${currentStream.postBuffer}\n                        onChange=${handleInputChange}\n                    />\n                    <span class=\"text-xs text-gray-500 dark:text-gray-400\">Seconds to keep after detection</span>\n                  </div>\n                </div>\n              </form>\n            </div>\n            <div class=\"flex justify-between p-4 border-t border-gray-200 dark:border-gray-700\">\n              <button\n                  id=\"stream-test-btn\"\n                  class=\"px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition-colors dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600\"\n                  onClick=${testStreamConnection}\n                  type=\"button\"\n              >\n                Test Connection\n              </button>\n              <div class=\"space-x-2\">\n                <button\n                    id=\"stream-save-btn\"\n                    class=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n                    onClick=${saveStream}\n                    type=\"button\"\n                >\n                  Save\n                </button>\n                <button\n                    id=\"stream-cancel-btn\"\n                    class=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors\"\n                    onClick=${closeModal}\n                    type=\"button\"\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      `}\n\n      ${onvifModalVisible && html`\n        <div id=\"onvif-modal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300\">\n          <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n            <div class=\"flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700\">\n              <h3 class=\"text-lg font-medium\">ONVIF Camera Discovery</h3>\n              <span class=\"text-2xl cursor-pointer\" onClick=${() => setOnvifModalVisible(false)}>Ã—</span>\n            </div>\n            <div class=\"p-4\">\n              <div class=\"mb-4 flex justify-between items-center\">\n                <h4 class=\"text-md font-medium\">Discovered Devices</h4>\n                <button\n                    id=\"discover-btn\"\n                    class=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors focus:outline-none\"\n                    onClick=${startOnvifDiscovery}\n                    disabled=${isDiscovering}\n                    type=\"button\"\n                >\n                  ${isDiscovering ? html`\n                    <span class=\"flex items-center\">\n                      Discovering\n                      <span class=\"ml-1 flex space-x-1\">\n                        <span class=\"animate-pulse delay-0 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                        <span class=\"animate-pulse delay-150 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                        <span class=\"animate-pulse delay-300 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                      </span>\n                    </span>\n                  ` : 'Start Discovery'}\n                </button>\n              </div>\n\n              <div class=\"overflow-x-auto\">\n                <table class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                  <thead class=\"bg-gray-50 dark:bg-gray-700\">\n                  <tr>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">IP Address</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Manufacturer</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Model</th>\n                    <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Actions</th>\n                  </tr>\n                  </thead>\n                  <tbody class=\"bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700\">\n                  ${discoveredDevices.length === 0 ? html`\n                    <tr>\n                      <td colspan=\"4\" class=\"px-6 py-4 text-center text-gray-500 dark:text-gray-400\">\n                        ${isDiscovering ? html`\n                          <div class=\"flex items-center justify-center\">\n                            <span>Discovering devices</span>\n                            <span class=\"ml-1 flex space-x-1\">\n                                <span class=\"animate-pulse delay-0 h-1.5 w-1.5 bg-gray-500 dark:bg-gray-400 rounded-full\"></span>\n                                <span class=\"animate-pulse delay-150 h-1.5 w-1.5 bg-gray-500 dark:bg-gray-400 rounded-full\"></span>\n                                <span class=\"animate-pulse delay-300 h-1.5 w-1.5 bg-gray-500 dark:bg-gray-400 rounded-full\"></span>\n                              </span>\n                          </div>\n                        ` : 'No devices discovered yet. Click \"Start Discovery\" to scan your network.'}\n                      </td>\n                    </tr>\n                  ` : discoveredDevices.map(device => html`\n                    <tr key=${device.ip_address} class=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                      <td class=\"px-6 py-4 whitespace-nowrap\">${device.ip_address}</td>\n                      <td class=\"px-6 py-4 whitespace-nowrap\">${device.manufacturer || 'Unknown'}</td>\n                      <td class=\"px-6 py-4 whitespace-nowrap\">${device.model || 'Unknown'}</td>\n                      <td class=\"px-6 py-4 whitespace-nowrap\">\n                        <button\n                            class=\"px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none\"\n                            onClick=${() => testOnvifConnection(device)}\n                            disabled=${isLoadingProfiles && selectedDevice && selectedDevice.ip_address === device.ip_address}\n                            type=\"button\"\n                        >\n                          ${isLoadingProfiles && selectedDevice && selectedDevice.ip_address === device.ip_address ? html`\n                            <span class=\"flex items-center\">\n                                Loading\n                                <span class=\"ml-1 flex space-x-1\">\n                                  <span class=\"animate-pulse delay-0 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                                  <span class=\"animate-pulse delay-150 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                                  <span class=\"animate-pulse delay-300 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                                </span>\n                              </span>\n                          ` : 'Connect'}\n                        </button>\n                      </td>\n                    </tr>\n                  `)}\n                  </tbody>\n                </table>\n              </div>\n\n              <div class=\"mt-6 mb-4\">\n                <h4 class=\"text-md font-medium mb-2\">Authentication</h4>\n                <p class=\"text-sm text-gray-500 dark:text-gray-400 mb-3\">\n                  Enter credentials to connect to the selected ONVIF device. Credentials are not needed for discovery, only for connecting to devices.\n                </p>\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div class=\"form-group\">\n                    <label for=\"onvif-username\" class=\"block text-sm font-medium mb-1\">Username</label>\n                    <input\n                        type=\"text\"\n                        id=\"onvif-username\"\n                        name=\"username\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        placeholder=\"admin\"\n                        value=${onvifCredentials.username}\n                        onChange=${handleCredentialChange}\n                    />\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"onvif-password\" class=\"block text-sm font-medium mb-1\">Password</label>\n                    <input\n                        type=\"password\"\n                        id=\"onvif-password\"\n                        name=\"password\"\n                        class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                        placeholder=\"password\"\n                        value=${onvifCredentials.password}\n                        onChange=${handleCredentialChange}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              ${selectedDevice && deviceProfiles.length > 0 && html`\n                <div class=\"mt-6\">\n                  <h4 class=\"text-md font-medium mb-2\">Available Profiles for ${selectedDevice.ip_address}</h4>\n                  <div class=\"overflow-x-auto\">\n                    <table class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                      <thead class=\"bg-gray-50 dark:bg-gray-700\">\n                      <tr>\n                        <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Name</th>\n                        <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Resolution</th>\n                        <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Encoding</th>\n                        <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">FPS</th>\n                        <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Actions</th>\n                      </tr>\n                      </thead>\n                      <tbody class=\"bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700\">\n                      ${deviceProfiles.map(profile => html`\n                        <tr key=${profile.token} class=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                          <td class=\"px-6 py-4 whitespace-nowrap\">${profile.name}</td>\n                          <td class=\"px-6 py-4 whitespace-nowrap\">${profile.width}x${profile.height}</td>\n                          <td class=\"px-6 py-4 whitespace-nowrap\">${profile.encoding}</td>\n                          <td class=\"px-6 py-4 whitespace-nowrap\">${profile.fps}</td>\n                          <td class=\"px-6 py-4 whitespace-nowrap\">\n                            <button\n                                class=\"px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 transition-colors focus:outline-none\"\n                                onClick=${() => addOnvifDeviceAsStream(profile)}\n                                type=\"button\"\n                            >\n                              Add as Stream\n                            </button>\n                          </td>\n                        </tr>\n                      `)}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              `}\n            </div>\n            <div class=\"flex justify-end p-4 border-t border-gray-200 dark:border-gray-700\">\n              <button\n                  id=\"onvif-close-btn\"\n                  class=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors\"\n                  onClick=${() => setOnvifModalVisible(false)}\n                  type=\"button\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      `}\n\n      ${showCustomNameInput && html`\n        <div id=\"custom-name-modal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300\">\n          <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full\">\n            <div class=\"flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700\">\n              <h3 class=\"text-lg font-medium\">Stream Name</h3>\n              <span class=\"text-2xl cursor-pointer\" onClick=${() => setShowCustomNameInput(false)}>Ã—</span>\n            </div>\n            <div class=\"p-4\">\n              <div class=\"mb-4\">\n                <label for=\"custom-stream-name\" class=\"block text-sm font-medium mb-1\">Enter a name for this stream:</label>\n                <input\n                    type=\"text\"\n                    id=\"custom-stream-name\"\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                    value=${customStreamName}\n                    onChange=${(e) => setCustomStreamName(e.target.value)}\n                />\n                <p class=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                  This name will be used to identify the stream in the system.\n                </p>\n              </div>\n            </div>\n            <div class=\"flex justify-end p-4 border-t border-gray-200 dark:border-gray-700 space-x-2\">\n              <button\n                  class=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors\"\n                  onClick=${() => setShowCustomNameInput(false)}\n                  type=\"button\"\n              >\n                Cancel\n              </button>\n              <button\n                  class=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors\"\n                  onClick=${submitOnvifDevice}\n                  type=\"button\"\n                  disabled=${!customStreamName.trim() || isAddingStream}\n              >\n                ${isAddingStream ? html`\n                  <span class=\"flex items-center\">\n                    Adding\n                    <span class=\"ml-1 flex space-x-1\">\n                      <span class=\"animate-pulse delay-0 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                      <span class=\"animate-pulse delay-150 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                      <span class=\"animate-pulse delay-300 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                    </span>\n                  </span>\n                ` : 'Add Stream'}\n              </button>\n            </div>\n          </div>\n        </div>\n      `}\n    </section>\n  `;\n}\n\n/**\n * Load StreamsView component\n */\nexport function loadStreamsView() {\n  const mainContent = document.getElementById('main-content');\n  if (!mainContent) return;\n\n  // Render the StreamsView component to the container\n  import('preact').then(({ render }) => {\n    import('../../query-client.js').then(({ QueryClientProvider, queryClient }) => {\n      render(\n        html`<${QueryClientProvider} client=${queryClient}><${StreamsView} /></${QueryClientProvider}>`,\n        mainContent\n      );\n    });\n  });\n}"],"names":["StreamDeleteModal","streamId","streamName","onClose","onDisable","onDelete","isConfirmDelete","setIsConfirmDelete","useState","html","handleDelete","handleDisable","showDeleteConfirmation","StreamsView","queryClient","useQueryClient","modalVisible","setModalVisible","onvifModalVisible","setOnvifModalVisible","showCustomNameInput","setShowCustomNameInput","isAddingStream","setIsAddingStream","discoveredDevices","setDiscoveredDevices","deviceProfiles","setDeviceProfiles","selectedDevice","setSelectedDevice","selectedProfile","setSelectedProfile","customStreamName","setCustomStreamName","onvifCredentials","setOnvifCredentials","username","password","isDiscovering","setIsDiscovering","isLoadingProfiles","setIsLoadingProfiles","data","streamsResponse","isLoading","error","useQuery","timeout","retries","retryDelay","detectionModelsData","streams","Array","isArray","console","log","length","currentStream","setCurrentStream","name","url","enabled","streamingEnabled","width","height","fps","codec","protocol","priority","segment","record","recordAudio","detectionEnabled","detectionModel","detectionThreshold","detectionInterval","preBuffer","postBuffer","isEditing","setIsEditing","deleteModalVisible","setDeleteModalVisible","streamToDelete","setStreamToDelete","hasData","detectionModels","models","createStreamMutation","usePostMutation","onSuccess","showStatusMessage","closeModal","invalidateQueries","queryKey","onError","message","updateStreamMutation","useMutation","mutationFn","async","streamData","encodeURIComponent","fetchJSON","method","headers","body","JSON","stringify","saveStreamMutation","mutate","options","testStreamMutation","onMutate","success","deleteStreamMutation","params","closeDeleteModal","disableStreamMutation","handleInputChange","e","value","type","checked","target","prev","handleCredentialChange","onvifDiscoveryMutation","devices","getDeviceProfilesMutation","device","credentials","fetch","ip_address","then","response","ok","Error","status","json","profiles","testOnvifConnectionMutation","variables","getDeviceProfiles","openAddStreamModal","ContentLoader","map","stream","detection_based_recording","fetchQuery","queryFn","staleTime","toString","segment_duration","detection_threshold","detection_interval","pre_detection_buffer","post_detection_buffer","undefined","streaming_enabled","isOnvif","is_onvif","detection_model","record_audio","openEditStreamModal","openDeleteModal","model","id","loadDetectionModels","testStreamConnection","parseInt","preventDefault","is_deleted","handleSubmit","startOnvifDiscovery","manufacturer","testOnvifConnection","profile","token","encoding","addOnvifDeviceAsStream","submitOnvifDevice","trim","stream_uri","mainContent","document","getElementById","__vitePreload","render","module","import","n","p","meta","QueryClientProvider"],"mappings":"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"}