const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./preact-app-6NzoaWh_.js","./preact-app-C-hVaELm.css"])))=>i.map(i=>d[i]);
var q=Object.freeze,ce=Object.defineProperty;var g=(e,t)=>q(ce(e,"raw",{value:q(t||e.slice())}));import{h as c,d as S,A as W,y as M,_ as ue,c as k}from"./preact-app-6NzoaWh_.js";import{C as me}from"./LoadingIndicator-BELBNhlV.js";import{f as _,e as T,c as fe}from"./fetch-utils-GN-4zfXA.js";var B;function pe({restartSystem:e,shutdownSystem:t,isRestarting:s,isShuttingDown:n}){return c(B||(B=g(['\n    <div class="page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow">\n      <h2 class="text-xl font-bold">System</h2>\n      <div class="controls space-x-2">\n        <button \n          id="restart-btn" \n          class="px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700 transition-colors focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"\n          onClick=',"\n          disabled=",'\n        >\n          Restart\n        </button>\n        <button \n          id="shutdown-btn" \n          class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"\n          onClick=',"\n          disabled=","\n        >\n          Shutdown\n        </button>\n      </div>\n    </div>\n  "])),e,s||n,t,s||n)}var O;function be({systemInfo:e,formatUptime:t}){var s,n,r,o;return c(O||(O=g(['\n    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">\n      <h3 class="text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700">System Information</h3>\n      <div class="space-y-2">\n        <div class="flex justify-between">\n          <span class="font-medium">Version:</span>\n          <span>','</span>\n        </div>\n        <div class="flex justify-between">\n          <span class="font-medium">Uptime:</span>\n          <span>','</span>\n        </div>\n        <div class="flex justify-between">\n          <span class="font-medium">CPU Model:</span>\n          <span>','</span>\n        </div>\n        <div class="flex justify-between">\n          <span class="font-medium">CPU Cores:</span>\n          <span>','</span>\n        </div>\n        <div class="flex justify-between items-center">\n          <span class="font-medium">CPU Usage:</span>\n          <div class="w-32 bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">\n            <div class="bg-blue-600 h-2.5 rounded-full" style=',"></div>\n          </div>\n          <span>","</span>\n        </div>\n      </div>\n    </div>\n  "])),e.version||"Unknown",e.uptime?t(e.uptime):"Unknown",((s=e.cpu)==null?void 0:s.model)||"Unknown",((n=e.cpu)==null?void 0:n.cores)||"Unknown","width: ".concat(((r=e.cpu)==null?void 0:r.usage)||0,"%"),(o=e.cpu)!=null&&o.usage?"".concat(e.cpu.usage.toFixed(1),"%"):"Unknown")}var H;function ye({systemInfo:e,formatBytes:t}){var u,$,f,w,x,p,v,L,U,E,h,P;const s=((u=e.memory)==null?void 0:u.used)||0,n=(($=e.go2rtcMemory)==null?void 0:$.used)||0,r=((f=e.memory)==null?void 0:f.total)||0,o=s+n,d=r?(o/r*100).toFixed(1):0,m=o?(s/o*100).toFixed(1):0,i=o?(n/o*100).toFixed(1):0;return c(H||(H=g(['\n    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">\n      <h3 class="text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700">Memory & Storage</h3>\n      <div class="space-y-4">\n        <div>\n          <div class="flex justify-between mb-1">\n            <span class="font-medium">Process Memory:</span>\n            <div>\n              <span class="inline-block px-2 py-0.5 mr-1 text-xs rounded bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">\n                LightNVR: ','\n              </span>\n              <span class="inline-block px-2 py-0.5 text-xs rounded bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">\n                go2rtc: ','\n              </span>\n            </div>\n          </div>\n          <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1">\n            <span>Combined: '," / ","</span>\n            <span>",'% of total memory</span>\n          </div>\n          <div class="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 overflow-hidden">\n            <div class="flex h-full" style=','>\n              <div class="bg-blue-600 h-2.5" style=','></div>\n              <div class="bg-green-500 h-2.5" style=','></div>\n            </div>\n          </div>\n        </div>\n        <div>\n          <div class="flex justify-between mb-1">\n            <span class="font-medium">System Memory:</span>\n            <span>'," / ",'</span>\n          </div>\n          <div class="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">\n            <div class="bg-blue-600 h-2.5 rounded-full" style=','></div>\n          </div>\n        </div>\n        <div>\n          <div class="flex justify-between mb-1">\n            <span class="font-medium">LightNVR Storage:</span>\n            <span>'," / ",'</span>\n          </div>\n          <div class="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">\n            <div class="bg-blue-600 h-2.5 rounded-full" style=','></div>\n          </div>\n        </div>\n        <div>\n          <div class="flex justify-between mb-1">\n            <span class="font-medium">System Storage:</span>\n            <span>'," / ",'</span>\n          </div>\n          <div class="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">\n            <div class="bg-blue-600 h-2.5 rounded-full" style=',"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  "])),t(s),t(n),t(o),t(r),d,"width: ".concat(d,"%"),"width: ".concat(m,"%"),"width: ".concat(i,"%"),(w=e.systemMemory)!=null&&w.used?t(e.systemMemory.used):"0",(x=e.systemMemory)!=null&&x.total?t(e.systemMemory.total):"0","width: ".concat((p=e.systemMemory)!=null&&p.total?(e.systemMemory.used/e.systemMemory.total*100).toFixed(1):0,"%"),(v=e.disk)!=null&&v.used?t(e.disk.used):"0",(L=e.disk)!=null&&L.total?t(e.disk.total):"0","width: ".concat((U=e.disk)!=null&&U.total?(e.disk.used/e.disk.total*100).toFixed(1):0,"%"),(E=e.systemDisk)!=null&&E.used?t(e.systemDisk.used):"0",(h=e.systemDisk)!=null&&h.total?t(e.systemDisk.total):"0","width: ".concat((P=e.systemDisk)!=null&&P.total?(e.systemDisk.used/e.systemDisk.total*100).toFixed(1):0,"%"))}var G,I,K;function we({systemInfo:e}){var t,s;return c(K||(K=g(['\n    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">\n      <h3 class="text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700">Network Interfaces</h3>\n      <div class="space-y-2">\n        ',"\n      </div>\n    </div>\n  "])),(s=(t=e.network)==null?void 0:t.interfaces)!=null&&s.length?e.network.interfaces.map(n=>c(G||(G=g(["\n          <div key=",' class="mb-2 pb-2 border-b border-gray-100 dark:border-gray-700 last:border-0">\n            <div class="flex justify-between">\n              <span class="font-medium">',":</span>\n              <span>",'</span>\n            </div>\n            <div class="text-sm text-gray-500 dark:text-gray-400">\n              MAC: '," | ","\n            </div>\n          </div>\n        "])),n.name,n.name,n.address||"No IP",n.mac||"Unknown",n.up?"Up":"Down")):c(I||(I=g(['<div class="text-gray-500 dark:text-gray-400">No network interfaces found</div>']))))}var Y;function ve({systemInfo:e,formatBytes:t}){var s,n,r,o;return c(Y||(Y=g(['\n    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">\n      <h3 class="text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700">Streams & Recordings</h3>\n      <div class="space-y-2">\n        <div class="flex justify-between">\n          <span class="font-medium">Active Streams:</span>\n          <span>'," / ",'</span>\n        </div>\n        <div class="flex justify-between">\n          <span class="font-medium">Recordings:</span>\n          <span>','</span>\n        </div>\n        <div class="flex justify-between">\n          <span class="font-medium">Recordings Size:</span>\n          <span>',"</span>\n        </div>\n      </div>\n    </div>\n  "])),((s=e.streams)==null?void 0:s.active)||0,((n=e.streams)==null?void 0:n.total)||0,((r=e.recordings)==null?void 0:r.count)||0,(o=e.recordings)!=null&&o.size?t(e.recordings.size):"0")}var J,Z,Q,X,ee,te;function he(e){if(e==null)return c(J||(J=g(['<span class="px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300">UNKNOWN</span>'])));const t=String(e).toLowerCase().trim();if(t==="error"||t==="err")return c(Z||(Z=g(['<span class="px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200">ERROR</span>'])));if(t==="warning"||t==="warn")return c(Q||(Q=g(['<span class="px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">WARN</span>'])));if(t==="info")return c(X||(X=g(['<span class="px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">INFO</span>'])));if(t==="debug"||t==="dbg")return c(ee||(ee=g(['<span class="px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300">DEBUG</span>'])));{const s=String(e).toUpperCase();return c(te||(te=g(['<span class="px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300">',"</span>"])),s)}}var se,oe,ne;function $e({logs:e,logLevel:t,logCount:s,setLogLevel:n,setLogCount:r,loadLogs:o,clearLogs:d}){return c(ne||(ne=g(['\n    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4 mb-4">\n      <div class="flex justify-between items-center mb-4 pb-2 border-b border-gray-200 dark:border-gray-700">\n        <h3 class="text-lg font-semibold">System Logs</h3>\n        <div class="flex space-x-2">\n          <select \n            id="log-level" \n            class="px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n            value=',"\n            onChange=",'\n          >\n            <option value="error">Error</option>\n            <option value="warning">Warning</option>\n            <option value="info">Info</option>\n            <option value="debug">Debug</option>\n          </select>\n          <select \n            id="log-count" \n            class="px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"\n            value=',"\n            onChange=",'\n          >\n            <option value="50">50 lines</option>\n            <option value="100">100 lines</option>\n            <option value="200">200 lines</option>\n            <option value="500">500 lines</option>\n          </select>\n          <button \n            id="refresh-logs-btn" \n            class="px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"\n            onClick=','\n          >\n            Refresh\n          </button>\n          <button \n            id="clear-logs-btn" \n            class="px-3 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"\n            onClick=','\n          >\n            Clear Logs\n          </button>\n        </div>\n      </div>\n      <div class="logs-container bg-gray-100 dark:bg-gray-900 rounded p-4 overflow-auto max-h-96 font-mono text-sm">\n        ',"\n      </div>\n    </div>\n  "])),t,m=>{const i=m.target.value;console.log("LogsView: Log level changed from ".concat(t," to ").concat(i)),n(i)},s,m=>r(parseInt(m.target.value,10)),o,d,e.length===0?c(se||(se=g(['\n          <div class="text-gray-500 dark:text-gray-400">No logs found</div>\n        ']))):e.map((m,i)=>c(oe||(oe=g(["\n          <div key=",' class="log-entry mb-1 last:mb-0">\n            <span class="text-gray-500 dark:text-gray-400">','</span>\n            <span class="mx-2">',"</span>\n            <span class=",">","</span>\n          </div>\n        "])),i,m.timestamp,he(m.level),"log-message ".concat(m.level==="error"?"text-red-600 dark:text-red-400":""),m.message)))}function z(e,t=1){if(e===0)return"0 Bytes";const s=1024,n=t<0?0:t,r=["Bytes","KB","MB","GB","TB","PB","EB","ZB","YB"],o=Math.floor(Math.log(e)/Math.log(s));return parseFloat((e/Math.pow(s,o)).toFixed(n))+" "+r[o]}function xe(e){const t=Math.floor(e/86400),s=Math.floor(e%86400/3600),n=Math.floor(e%3600/60),r=Math.floor(e%60);let o="";return t>0&&(o+="".concat(t,"d ")),(s>0||t>0)&&(o+="".concat(s,"h ")),(n>0||s>0||t>0)&&(o+="".concat(n,"m ")),o+="".concat(r,"s"),o}function N(e,t){if(String(t||"").toLowerCase()==="debug")return!0;let s=2,n=2;const r=String(e||"").toLowerCase(),o=String(t||"").toLowerCase();return r==="error"?s=0:r==="warning"||r==="warn"?s=1:r==="info"?s=2:r==="debug"&&(s=3),o==="error"?n=0:o==="warning"||o==="warn"?n=1:o==="info"?n=2:o==="debug"&&(n=3),s<=n}function ke({logLevel:e,logCount:t,onLogsReceived:s}){const[n,r]=S(!1),o=W(null),d=W(null);M(()=>{const i=localStorage.getItem("lastLogTimestamp");i&&(console.log("Loaded last log timestamp from localStorage:",i),d.current=i)},[]);const m=()=>{if(!window.wsClient||!window.wsClient.isConnected()){console.log("WebSocket not connected, skipping log fetch");return}if(!document.getElementById("system-page")){console.log("Not on system page, skipping log fetch");return}console.log("Fetching logs via WebSocket with level: debug (to get all logs, will filter on frontend)");const i={level:"debug",count:t};d.current&&(i.last_timestamp=d.current),window.wsClient.getClientId&&(i.client_id=window.wsClient.getClientId()),console.log("Sending fetch request with payload:",i);try{window.wsClient.send("fetch","system/logs",i)?console.log("Fetch request sent successfully"):console.warn("Failed to send fetch request, will retry on next poll")}catch(u){console.error("Error sending fetch request:",u)}};return M(()=>{if(!window.wsClient){console.log("WebSocket client not available");return}const i=u=>{if(console.log("Received logs update via WebSocket:",u),!document.getElementById("system-page")){console.log("Not on system page, ignoring log update");return}if(u&&u.logs&&Array.isArray(u.logs)){const $=u.logs.map(f=>{const w={timestamp:f.timestamp||"Unknown",level:f.level||"info",message:f.message||""};return w.level&&(w.level=w.level.toLowerCase()),w.level==="warn"&&(w.level="warning"),w});u.latest_timestamp&&(d.current=u.latest_timestamp,localStorage.setItem("lastLogTimestamp",u.latest_timestamp),console.log("Updated and saved last log timestamp:",u.latest_timestamp)),$.length>0?(console.log("Received ".concat($.length," logs via WebSocket")),_("/api/system/logs?level=debug&count=100",{timeout:15e3,retries:1,retryDelay:1e3}).then(f=>{if(f.logs&&Array.isArray(f.logs)){const x=[...f.logs.map(p=>{const v={timestamp:p.timestamp||"Unknown",level:(p.level||"info").toLowerCase(),message:p.message||""};return v.level==="warn"&&(v.level="warning"),v})];$.forEach(p=>{x.some(L=>L.timestamp===p.timestamp&&L.message===p.message)||x.push(p)}),x.sort((p,v)=>new Date(v.timestamp)-new Date(p.timestamp)),s(x)}else s($)}).catch(f=>{console.error("Error fetching existing logs:",f),s($)})):console.log("No logs received via WebSocket")}};return console.log("Registering handler for system/logs via WebSocket (once on mount)"),window.wsClient.on("update","system/logs",i),()=>{console.log("Unregistering handler for system/logs via WebSocket (component unmounting)"),window.wsClient.off("update","system/logs"),o.current&&(clearInterval(o.current),o.current=null)}},[]),M(()=>{if(n&&!o.current){if(console.log("Starting log polling"),window.wsClient&&typeof window.wsClient.subscribe=="function"){console.log("Subscribing to system/logs via WebSocket for polling");const i={level:"debug",...d.current?{since:d.current}:{}};window.wsClient.subscribe("system/logs",i),console.log("Subscribed to system/logs with level: debug and last_timestamp: ".concat(d.current||"NULL"))}m(),console.log("Setting up polling interval for logs (every 5 seconds)"),o.current=setInterval(()=>{console.log("Polling interval triggered, fetching logs..."),m()},5e3)}else!n&&o.current&&(console.log("Stopping log polling"),window.wsClient&&typeof window.wsClient.unsubscribe=="function"&&(console.log("Unsubscribing from system/logs via WebSocket"),window.wsClient.unsubscribe("system/logs")),clearInterval(o.current),o.current=null);return()=>{o.current&&(clearInterval(o.current),o.current=null),window.wsClient&&typeof window.wsClient.unsubscribe=="function"&&(console.log("Unsubscribing from system/logs via WebSocket on cleanup"),window.wsClient.unsubscribe("system/logs"))}},[n,e]),M(()=>(console.log("LogsPoller: Setting up polling with log level ".concat(e)),r(!1),setTimeout(()=>{r(!0)},100),()=>{console.log("LogsPoller: Cleaning up on unmount"),r(!1)}),[e,t]),null}var re;function Se(){const[e,t]=S({version:"",uptime:"",cpu:{model:"",cores:0,usage:0},memory:{total:0,used:0,free:0},go2rtcMemory:{total:0,used:0,free:0},systemMemory:{total:0,used:0,free:0},disk:{total:0,used:0,free:0},systemDisk:{total:0,used:0,free:0},network:{interfaces:[]},streams:{active:0,total:0},recordings:{count:0,size:0}}),[s,n]=S([]),[r,o]=S("debug"),d=W("debug"),m=a=>{console.log("SystemView: Setting log level from ".concat(r," to ").concat(a)),console.log("Current stack trace:",new Error().stack),o(a),d.current=a,console.log("SystemView: logLevelRef is now: ".concat(d.current)),setTimeout(()=>{console.log("SystemView: After setState, logLevel is now: ".concat(r)),console.log("SystemView: After setState, logLevelRef is now: ".concat(d.current))},0)},[i,u]=S(100),[$,f]=S(!1),[w,x]=S(!1),[p,v]=S(!0),[L,U]=S(!1),E=a=>{console.log("SystemView received new logs:",a.length);const l=d.current;console.log("Filtering ".concat(a.length," logs based on log level: ").concat(l));const b=a.filter(y=>{const C=N(y.level,l);return y.level==="debug"&&l==="debug"&&!C&&console.warn("Debug log filtered out despite debug level selected:",y),C});console.log("After filtering: ".concat(b.length," logs match the current log level")),n(b),setTimeout(()=>{const y=document.querySelector(".logs-container");y&&(y.scrollTop=y.scrollHeight)},100)},h=W(null);M(()=>(h.current=fe(),P(),D(),console.log("System page loaded - no automatic polling for system info"),()=>{window.wsClient&&typeof window.wsClient.unsubscribe=="function"&&(console.log("Cleaning up any WebSocket subscriptions on unmount"),window.wsClient.unsubscribe("system/logs")),h.current&&h.current.abort()}),[]),M(()=>{if(console.log("SystemView: Log level changed to ".concat(r," or count changed to ").concat(i)),s.length===0)console.log("Initial logs load via HTTP API"),D();else{console.log("Filtering existing logs based on new log level");const a=d.current;console.log("Filtering existing logs using logLevelRef.current: ".concat(a)),n(l=>l.filter(b=>N(b.level,a)))}},[r,i]);const P=async()=>{var a;try{v(!0);const l=await _("/api/system/info",{signal:(a=h.current)==null?void 0:a.signal,timeout:15e3,retries:2,retryDelay:1e3});t(l),U(!0)}catch(l){l.message!=="Request was cancelled"&&(console.error("Error loading system info:",l),U(!1))}finally{v(!1)}},D=async()=>{var a;try{const l=d.current;console.log("Loading logs from API with level: debug (to get all logs, will filter on frontend)");const b=await _("/api/system/logs?level=debug&count=".concat(i),{signal:(a=h.current)==null?void 0:a.signal,timeout:2e4,retries:1,retryDelay:1e3});if(b.logs&&Array.isArray(b.logs))if(b.logs.length>0&&typeof b.logs[0]=="object"&&b.logs[0].level){let y=b.logs.filter(C=>N(C.level,l));console.log("Filtered ".concat(b.logs.length," logs to ").concat(y.length," based on log level ").concat(l)),n(y)}else{const y=b.logs.map(A=>{let j="Unknown",F="debug",V=A;const ge=/\[(.*?)\]\s*\[(.*?)\]\s*(.*)/,R=A.match(ge);return R&&R.length>=4&&(j=R[1],F=R[2].toLowerCase(),V=R[3],F==="warn"&&(F="warning")),{timestamp:j,level:F,message:V}});let C=y.filter(A=>N(A.level,l));console.log("Filtered ".concat(y.length," parsed logs to ").concat(C.length," based on log level ").concat(l)),n(C)}else n([])}catch(l){console.error("Error loading logs:",l),k("Error loading logs: "+l.message)}},ie=async()=>{var a;if(confirm("Are you sure you want to clear all logs?"))try{k("Clearing logs..."),await T("/api/system/logs/clear",{method:"POST",signal:(a=h.current)==null?void 0:a.signal,timeout:15e3,retries:1,retryDelay:1e3}),k("Logs cleared successfully"),D()}catch(l){console.error("Error clearing logs:",l),k("Error clearing logs: "+l.message)}},ae=async()=>{var a;if(confirm("Are you sure you want to restart the system?"))try{f(!0),k("Restarting system..."),await T("/api/system/restart",{method:"POST",signal:(a=h.current)==null?void 0:a.signal,timeout:3e4,retries:0}),k("System is restarting. Please wait..."),setTimeout(()=>{window.location.reload()},1e4)}catch(l){console.error("Error restarting system:",l),k("Error restarting system: "+l.message),f(!1)}},de=async()=>{var a;if(confirm("Are you sure you want to shut down the system?"))try{x(!0),k("Shutting down system..."),await T("/api/system/shutdown",{method:"POST",signal:(a=h.current)==null?void 0:a.signal,timeout:3e4,retries:0}),k("System is shutting down. You will need to manually restart it.")}catch(l){console.error("Error shutting down system:",l),k("Error shutting down system: "+l.message),x(!1)}};return M(()=>{!window.wsClient&&typeof WebSocketClient=="function"&&(console.log("Initializing WebSocket client for system page"),window.wsClient=new WebSocketClient)},[]),c(re||(re=g(['\n    <section id="system-page" class="page">\n      <'," \n        restartSystem="," \n        shutdownSystem="," \n        isRestarting="," \n        isShuttingDown="," \n      />\n      \n      <","\n        isLoading=","\n        hasData=",'\n        loadingMessage="Loading system information..."\n        emptyMessage="System information not available. Please try again later."\n      >\n        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">\n          <'," systemInfo="," formatUptime="," />\n          <"," systemInfo="," formatBytes=",' />\n        </div>\n        \n        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">\n          <'," systemInfo="," />\n          <"," systemInfo="," formatBytes="," />\n        </div>\n        \n        <"," \n          logs="," \n          logLevel="," \n          logCount="," \n          setLogLevel="," \n          setLogCount="," \n          loadLogs="," \n          clearLogs="," \n        />\n        \n        <","\n          logLevel=","\n          logCount=","\n          onLogsReceived=","\n        />\n      <//>\n    </section>\n  "])),pe,ae,de,$,w,me,p,L,be,e,xe,ye,e,z,we,e,ve,e,z,$e,s,r,i,m,u,D,ie,ke,r,i,E)}var le;function Re(){const e=document.getElementById("main-content");e&&ue(async()=>{const{render:t}=await import("./preact-app-6NzoaWh_.js").then(s=>s.p);return{render:t}},__vite__mapDeps([0,1]),import.meta.url).then(({render:t})=>{t(c(le||(le=g(["<"," />"])),Se),e),setTimeout(()=>{const s=new CustomEvent("refresh-system-info");window.dispatchEvent(s)},100)})}window.addEventListener("load",()=>{window.addEventListener("refresh-system-info",async()=>{try{(await T("/api/system/info",{timeout:15e3,retries:1,retryDelay:1e3})).ok&&console.log("System info refreshed")}catch(e){console.error("Error refreshing system info:",e)}})});export{Se as SystemView,Re as loadSystemView};
//# sourceMappingURL=SystemView-Cxn3osiF.js.map
