System.register(["./query-client-legacy-BQ_U5NnD.js","./layout-legacy-CDxh3f01.js","./Footer-legacy-B5sb7m6V.js","./LoadingIndicator-legacy-Xson3LBG.js"],(function(e,t){"use strict";var n,i,r,o,s,l,a,m,c,d,g,u,p,h;return{setters:[e=>{n=e.d,i=e.y,r=e.A,o=e.e,s=e.u,l=e.k,a=e.E,m=e.q,c=e.Q},null,e=>{d=e.h,g=e.c,u=e.H,p=e.F},e=>{h=e.L}],execute:function(){var e=document.createElement("style");function t(){const[e,t]=n(!1),[r,o]=n(1);i((()=>{const e=x.subscribe((e=>{t(e.isPlaying),o(e.zoomLevel)}));return()=>e()}),[]);const s=()=>{x.setState({isPlaying:!1});const e=document.querySelector("#video-player video");e&&e.pause()},l=()=>{if(!x.timelineSegments||0===x.timelineSegments.length)return void g("No recordings to play","warning");console.log("TimelineControls: resumePlayback called"),console.log("TimelineControls: Current state:",{segments:x.timelineSegments.length,currentSegmentIndex:x.currentSegmentIndex,currentTime:x.currentTime,selectedDate:x.selectedDate});let e=null,t=-1,n=0;if(null!==x.currentTime){console.log("TimelineControls: Using current time to find segment:",x.currentTime);for(let i=0;i<x.timelineSegments.length;i++){const r=x.timelineSegments[i];if(x.currentTime>=r.start_timestamp&&x.currentTime<=r.end_timestamp){e=r,t=i,n=x.currentTime-r.start_timestamp,console.log(`TimelineControls: Found segment ${i} containing current time, relative time: ${n}s`);break}}if(!e){let i=0,r=1/0;for(let e=0;e<x.timelineSegments.length;e++){const t=x.timelineSegments[e],n=(t.start_timestamp+t.end_timestamp)/2,o=Math.abs(x.currentTime-n);o<r&&(r=o,i=e)}e=x.timelineSegments[i],t=i,x.currentTime,e.start_timestamp,n=0,console.log(`TimelineControls: Using closest segment ${i}, relative time: ${n}s`)}}else x.currentSegmentIndex>=0&&x.currentSegmentIndex<x.timelineSegments.length?(t=x.currentSegmentIndex,e=x.timelineSegments[t],n=0,console.log(`TimelineControls: Using current segment index ${t}`)):(t=0,e=x.timelineSegments[0],n=0,console.log("TimelineControls: Falling back to first segment"));console.log(`TimelineControls: Playing segment ${t} (ID: ${e.id}) at time ${n}s`),x.currentSegmentIndex=t,x.currentTime=e.start_timestamp+n,x.isPlaying=!0,x.directVideoControl=!0,x.setState({}),setTimeout((()=>{console.log("TimelineControls: Resetting directVideoControl flag"),x.directVideoControl=!1,x.setState({})}),3e3);const i=document.querySelector("#video-player video");if(i){i.pause();const t=()=>{console.log(`TimelineControls: Video metadata loaded, setting time to ${n}s`);try{console.log("TimelineControls: Video metadata",{duration:i.duration,width:i.videoWidth,height:i.videoHeight,segment:e.id,segmentDuration:e.end_timestamp-e.start_timestamp});const t=Math.max(0,Math.min(n,i.duration||0));i.currentTime=t,setTimeout((()=>{x.isPlaying&&(console.log("TimelineControls: Starting video playback"),i.play().then((()=>{console.log("TimelineControls: Video playback started successfully");const t=(e=1)=>{e>5||setTimeout((()=>{i.paused&&x.isPlaying&&(console.log(`TimelineControls: Video paused unexpectedly (attempt ${e}), trying to resume`),i.play().catch((t=>{console.error(`Error resuming video (attempt ${e}):`,t)})),t(e+1))}),500*e)};t();const r=e.end_timestamp-e.start_timestamp;if(console.log(`TimelineControls: Segment duration: ${r}s, video duration: ${i.duration}s`),i.duration<r-1){console.log("TimelineControls: Video duration is shorter than segment duration, will monitor playback");const e=setInterval((()=>{x.isPlaying&&i?i.currentTime>i.duration-.5&&n+i.currentTime<r&&(console.log("TimelineControls: Reached end of video but not end of segment, restarting video"),i.currentTime=0,i.play().catch((e=>{console.error("Error restarting video:",e)}))):clearInterval(e)}),500)}})).catch((e=>{console.error("Error playing video:",e),g("Error playing video: "+e.message,"error")})))}),100)}catch(r){console.error("TimelineControls: Error in handleMetadataLoaded:",r)}finally{i.removeEventListener("loadedmetadata",t)}};i.addEventListener("loadedmetadata",t),console.log(`TimelineControls: Loading video from segment ${e.id}`),i.src=`/api/recordings/play/${e.id}?t=${Date.now()}`,i.load()}else console.error("TimelineControls: No video element found"),g("Error: Video player not found","error")};return d`
    <div class="timeline-controls flex justify-between items-center mb-2">
      <div class="flex items-center">
        <button
          id="play-button"
          class="w-10 h-10 rounded-full bg-green-600 hover:bg-green-700 text-white flex items-center justify-center focus:outline-none focus:ring-1 focus:ring-green-500 focus:ring-offset-1 transition-colors shadow-sm mr-2"
          onClick=${()=>{console.log("TimelineControls: togglePlayback called"),console.log("TimelineControls: Current state before toggle:",{isPlaying:e,currentTime:x.currentTime,currentSegmentIndex:x.currentSegmentIndex,segmentsCount:x.timelineSegments?x.timelineSegments.length:0}),e?s():l()}}
          title=${e?"Pause":"Play from current position"}
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            ${e?d`
                <!-- Pause icon - two vertical bars -->
                <rect x="6" y="6" width="4" height="12" rx="1" fill="white" />
                <rect x="14" y="6" width="4" height="12" rx="1" fill="white" />
              `:d`
                <!-- Play icon - triangle -->
                <path d="M8 5.14v14l11-7-11-7z" fill="white" />
              `}
          </svg>
        </button>
        <span class="text-xs text-gray-600 dark:text-gray-300">Play from current position</span>
      </div>

      <div class="flex items-center gap-1">
        <span class="text-xs text-gray-600 dark:text-gray-300 mr-1">Zoom:</span>
        <button
          id="zoom-out-button"
          class="w-6 h-6 rounded bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 flex items-center justify-center focus:outline-none focus:ring-1 focus:ring-blue-500 transition-colors"
          onClick=${()=>{if(r>1){const e=r/2;x.setState({zoomLevel:e}),g(`Zoomed out: ${24/e} hours view`,"info")}}}
          title="Zoom Out (Show more time)"
          disabled=${r<=1}
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </button>
        <button
          id="zoom-in-button"
          class="w-6 h-6 rounded bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 flex items-center justify-center focus:outline-none focus:ring-1 focus:ring-blue-500 transition-colors"
          onClick=${()=>{if(r<8){const e=2*r;x.setState({zoomLevel:e}),g(`Zoomed in: ${24/e} hours view`,"info")}}}
          title="Zoom In (Show less time)"
          disabled=${r>=8}
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </button>
      </div>
    </div>
  `}function f(){const[e,t]=n(0),[r,o]=n(24),[s,l]=n(1);return i((()=>{const e=x.subscribe((e=>{console.log("TimelineRuler: State update received",{zoomLevel:e.zoomLevel,segmentsCount:e.timelineSegments?e.timelineSegments.length:0,currentTime:e.currentTime});const n=24/e.zoomLevel;let i=12;if(null!==e.currentTime){const t=new Date(1e3*e.currentTime);i=t.getHours()+t.getMinutes()/60+t.getSeconds()/3600}else if(e.timelineSegments&&e.timelineSegments.length>0){let t=24,n=0;e.timelineSegments.forEach((e=>{const i=new Date(1e3*e.start_timestamp),r=new Date(1e3*e.end_timestamp),o=i.getHours()+i.getMinutes()/60+i.getSeconds()/3600,s=r.getHours()+r.getMinutes()/60+r.getSeconds()/3600;t=Math.min(t,o),n=Math.max(n,s)})),i=(t+n)/2,console.log("TimelineRuler: Calculated center from segments",{earliestHour:t,latestHour:n,centerHour:i})}let r=Math.max(0,i-n/2),s=Math.min(24,r+n);24===s&&n<24?(r=Math.max(0,24-n),s=24):0===r&&n<24&&(s=Math.min(24,n)),t(r),o(s),l(e.zoomLevel),console.log("TimelineRuler: Calculated time range",{newStartHour:r,newEndHour:s,hoursPerView:n,centerHour:i}),x.timelineStartHour===r&&x.timelineEndHour===s||(console.log("TimelineRuler: Updating global state with new time range"),x.setState({timelineStartHour:r,timelineEndHour:s}))}));return()=>e()}),[]),d`
    <div class="timeline-ruler relative w-full h-8 bg-gray-300 dark:bg-gray-800 border-b border-gray-400 dark:border-gray-600">
      ${(()=>{const t=[];for(let n=Math.floor(e);n<=Math.ceil(r);n++)if(n>=0&&n<=24){const i=(n-e)/(r-e)*100;if(t.push(d`
          <div
            key="tick-${n}"
            class="absolute top-0 w-px h-5 bg-gray-500 dark:bg-gray-400"
            style="left: ${i}%;"
          ></div>
        `),t.push(d`
          <div
            key="label-${n}"
            class="absolute top-0 text-xs text-gray-600 dark:text-gray-300 transform -translate-x-1/2"
            style="left: ${i}%;"
          >
            ${n}:00
          </div>
        `),n<24&&s>=2){const i=(n+.5-e)/(r-e)*100;if(t.push(d`
            <div
              key="tick-${n}-30"
              class="absolute top-2 w-px h-3 bg-gray-400 dark:bg-gray-500"
              style="left: ${i}%;"
            ></div>
          `),s>=4){const i=(n+.25-e)/(r-e)*100,o=(n+.75-e)/(r-e)*100;t.push(d`
              <div
                key="tick-${n}-15"
                class="absolute top-3 w-px h-2 bg-gray-400 dark:bg-gray-500"
                style="left: ${i}%;"
              ></div>
            `),t.push(d`
              <div
                key="tick-${n}-45"
                class="absolute top-3 w-px h-2 bg-gray-400 dark:bg-gray-500"
                style="left: ${o}%;"
              ></div>
            `)}}}return t})()}
      <div class="absolute bottom-0 left-0 text-xs text-gray-500 px-1">
        Zoom: ${s}x (${Math.round(24/s)} hours)
      </div>
    </div>
  `}function b({segments:e}){const[t,o]=n(e||[]),[s,l]=n(0),[a,m]=n(24),[c,g]=n(-1);i((()=>{console.log(`TimelineSegments: Received segments from props: ${e?e.length:0}`),e&&e.length>0&&o(e)}),[e]);const u=r(null),p=r(!1),h=r(0),f=r([]);i((()=>{const e=x.subscribe((e=>{console.log(`TimelineSegments: State update received, segments: ${e.timelineSegments?e.timelineSegments.length:0}`),e.timelineSegments&&(!f.current||e.timelineSegments.length!==f.current.length||JSON.stringify(e.timelineSegments)!==JSON.stringify(f.current)||e.forceReload)&&(console.log(`TimelineSegments: Updating segments (${e.timelineSegments.length})`),o(e.timelineSegments),f.current=[...e.timelineSegments],h.current=Date.now());const t=void 0!==e.timelineStartHour?e.timelineStartHour:0,n=void 0!==e.timelineEndHour?e.timelineEndHour:24;console.log(`TimelineSegments: Time range update - startHour: ${t}, endHour: ${n}`),l(t),m(n),g(e.currentSegmentIndex||-1)}));return x.timelineSegments&&x.timelineSegments.length>0&&(console.log(`TimelineSegments: Initial load of segments (${x.timelineSegments.length})`),o(x.timelineSegments),f.current=[...x.timelineSegments],g(x.currentSegmentIndex||0),void 0!==x.timelineStartHour&&l(x.timelineStartHour),void 0!==x.timelineEndHour&&m(x.timelineEndHour),h.current=Date.now()),()=>e()}),[]),i((()=>{const e=u.current;if(!e)return;const t=t=>{(t.target===e||t.target.classList.contains("timeline-clickable-area"))&&(p.current=!0,b(t),document.addEventListener("mousemove",n),document.addEventListener("mouseup",i))},n=e=>{p.current&&b(e)},i=()=>{p.current=!1,document.removeEventListener("mousemove",n),document.removeEventListener("mouseup",i)};return e.addEventListener("mousedown",t),()=>{e.removeEventListener("mousedown",t),document.removeEventListener("mousemove",n),document.removeEventListener("mouseup",i)}}),[s,a,t]);const b=e=>{const n=u.current;if(!n)return;const i=n.getBoundingClientRect(),r=e.clientX-i.left,o=i.width,l=s+r/o*(a-s),m=new Date(x.selectedDate);m.setHours(Math.floor(l)),m.setMinutes(Math.floor(l%1*60)),m.setSeconds(Math.floor(l%1*60%1*60));const c=m.getTime()/1e3;x.setState({currentTime:c,prevCurrentTime:x.currentTime,isPlaying:!1});let d=!1;for(let s=0;s<t.length;s++){const n=t[s],i=n.local_start_timestamp||n.start_timestamp,r=n.local_end_timestamp||n.end_timestamp;if(c>=i&&c<=r){console.log(`TimelineSegments: Found segment ${s} containing timestamp`),x.setState({currentSegmentIndex:s}),e.target.classList.contains("timeline-segment")&&y(s,c-i),d=!0;break}}d||x.setState({currentSegmentIndex:-1})},y=(e,n=null)=>{if(console.log(`TimelineSegments: playSegment(${e}, ${n})`),e<0||e>=t.length)return void console.warn(`TimelineSegments: Invalid segment index: ${e}`);const i=t[e],r=i.local_start_timestamp||i.start_timestamp,o=null!==n?r+n:r;x.setState({isPlaying:!1,currentSegmentIndex:-1}),document.body.offsetHeight,setTimeout((()=>{x.setState({currentSegmentIndex:e,currentTime:o,isPlaying:!0,forceReload:!0}),setTimeout((()=>{const e=document.querySelector("#video-player video");e&&(e.pause(),e.removeAttribute("src"),e.load(),e.src=`/api/recordings/play/${i.id}?t=${Date.now()}`,e.onloadedmetadata=()=>{const t=null!==n?n:0;e.currentTime=t,e.play().catch((e=>console.error("Error playing video:",e)))})}),50)}),50)};return d`
    <div
      class="timeline-segments relative w-full h-16 pt-2"
      ref=${u}
    >
      ${(()=>{if(console.log("TimelineSegments: renderSegments called"),console.log("TimelineSegments: segments:",t),console.log("TimelineSegments: startHour:",s,"endHour:",a),!t||0===t.length)return console.log("TimelineSegments: No segments to render"),d`<div class="text-center text-red-500 font-bold">No segments to display</div>`;console.log("TimelineSegments: Rendering segments:",t.length);const e=[],n=new Map;console.log("TimelineSegments: Starting to process segments");let i=0,r=0;t.forEach(((e,t)=>{const o=e.start_timestamp,l=e.end_timestamp,m=new Date(1e3*o),c=new Date(1e3*l),d=m.getHours()+m.getMinutes()/60+m.getSeconds()/3600,g=c.getHours()+c.getMinutes()/60+c.getSeconds()/3600;if(g<s||d>a)return r++,void(t<5&&console.log(`TimelineSegments: Skipping segment ${t}, startHour=${d}, endHour=${g}, visible range=${s}-${a}`));i++;const u=Math.floor(d),p=Math.min(Math.ceil(g),24);for(let i=u;i<p;i++)i>=s&&i<=a&&(n.has(i)||n.set(i,[]),n.get(i).push(t))}));const o=[];let l=null;[...t].sort(((e,t)=>e.start_timestamp-t.start_timestamp)).forEach(((e,t)=>{l?e.start_timestamp-l.end_timestamp<=1?(l.end_timestamp=e.end_timestamp,l.originalIndices.push(t),e.has_detection&&(l.has_detection=!0)):(o.push(l),l={...e,originalIndices:[t]}):l={...e,originalIndices:[t]}})),l&&o.push(l),o.forEach(((t,n)=>{const i=t.start_timestamp,r=t.end_timestamp,o=new Date(1e3*i),l=new Date(1e3*r),m=o.getHours()+o.getMinutes()/60+o.getSeconds()/3600,c=l.getHours()+l.getMinutes()/60+l.getSeconds()/3600;if(c<s||m>a)return;const g=Math.max(m,s),u=Math.min(c,a),p=(g-s)/(a-s)*100,h=(u-g)/(a-s)*100,f=`${Math.round(r-i)}s`,b=o.toLocaleTimeString(),y=l.toLocaleTimeString();e.push(d`
        <div
          key="segment-${n}"
          class="timeline-segment absolute rounded-sm transition-all duration-200 ${t.has_detection?"bg-red-500":"bg-blue-500"}"
          style="left: ${p}%; width: ${h}%; height: ${80}%; top: 50%; transform: translateY(-50%);"
          title="${b} - ${y} (${f})"
        ></div>
      `)}));for(let t=Math.floor(s);t<Math.ceil(a);t++)if(!n.has(t)){const n=(t-s)/(a-s)*100,i=100/(a-s);e.push(d`
          <div
            key="clickable-${t}"
            class="timeline-clickable-area absolute h-full cursor-pointer"
            style="left: ${n}%; width: ${i}%;"
            data-hour=${t}
          ></div>
        `)}return console.log(`TimelineSegments: Rendering complete. Total: ${t.length}, Visible: ${i}, Skipped: ${r}, Final rendered: ${e.length}`),e})()}
    </div>
  `}function y(){const[e,t]=n(0),[o,s]=n(!1),[l,a]=n(0),[m,c]=n(24),[g,u]=n(null),[p,h]=n(!1),f=r(null);r(null);const b=r(0),y=r(((e,t)=>{let n;return function(...i){n&&clearTimeout(n),n=setTimeout((()=>{e.apply(this,i)}),t)}})(((e,t,n)=>{v(e,t,n)}),100)).current;i((()=>{const e=x.subscribe((e=>{console.log("TimelineCursor: State update received",{currentTime:e.currentTime,startHour:e.timelineStartHour,endHour:e.timelineEndHour,segmentsCount:e.timelineSegments?e.timelineSegments.length:0,isDragging:p,userControllingCursor:e.userControllingCursor}),a(e.timelineStartHour||0),c(e.timelineEndHour||24),p||e.userControllingCursor||(u(e.currentTime),S(e.currentTime),y(e.currentTime,e.timelineStartHour||0,e.timelineEndHour||24))}));return()=>e()}),[p,y]),i((()=>{const e=f.current;if(!e)return;const n=e=>{e.preventDefault(),e.stopPropagation(),console.log("TimelineCursor: Mouse down event"),b.current=e.clientX,h(!0),x.userControllingCursor=!0,x.setState({}),document.addEventListener("mousemove",i),document.addEventListener("mouseup",r)},i=n=>{if(!p)return;const i=e.parentElement;if(!i)return;const r=i.getBoundingClientRect(),o=Math.max(0,Math.min(n.clientX-r.left,r.width))/r.width*100;t(o);const s=l+o/100*(m-l),a=new Date;x.selectedDate&&a.setTime(new Date(x.selectedDate).getTime()),a.setHours(Math.floor(s)),a.setMinutes(Math.floor(s%1*60)),a.setSeconds(Math.floor(s%1*60%1*60)),a.setMilliseconds(0);const c=a.getTime()/1e3;u(c),S(c)},r=t=>{if(!p)return;const n=e.parentElement;if(!n)return;const o=n.getBoundingClientRect(),s=Math.max(0,Math.min(t.clientX-o.left,o.width)),a=o.width,c=s/a*100;console.log("TimelineCursor: Mouse up at position",{positionPercent:c,clickX:s,containerWidth:a});const d=m-l,g=l+c/100*d;console.log("TimelineCursor: Calculated hour",{hour:g,startHour:l,endHour:m,hourRange:d});const u=new Date;x.selectedDate&&u.setTime(new Date(x.selectedDate).getTime()),u.setHours(Math.floor(g)),u.setMinutes(Math.floor(g%1*60)),u.setSeconds(Math.floor(g%1*60%1*60)),u.setMilliseconds(0);const f=u.getTime()/1e3;console.log("TimelineCursor: Converted to timestamp",{timestamp:f,dateTime:u.toLocaleString(),selectedDate:x.selectedDate}),console.log("TimelineCursor: Mouse up event"),h(!1),document.removeEventListener("mousemove",i),document.removeEventListener("mouseup",r),setTimeout((()=>{console.log("TimelineCursor: Releasing cursor control"),x.userControllingCursor=!1,x.setState({})}),100),x.currentTime=f,x.prevCurrentTime=x.currentTime,x.isPlaying=!1,x.setState({});const b=x.timelineSegments||[];console.log("TimelineCursor: Searching for segment containing timestamp",{timestamp:f,segmentsCount:b.length});let y=!1,v=-1,S=1/0;for(let e=0;e<b.length;e++){const t=b[e],n=t.local_start_timestamp||t.start_timestamp,i=t.local_end_timestamp||t.end_timestamp;if(e<3&&console.log(`TimelineCursor: Segment ${e}`,{startTimestamp:n,endTimestamp:i,startTime:new Date(1e3*n).toLocaleTimeString(),endTime:new Date(1e3*i).toLocaleTimeString()}),f>=n&&f<=i){console.log(`TimelineCursor: Found exact match at segment ${e}`),x.currentSegmentIndex=e,x.setState({}),y=!0;break}const r=(n+i)/2,o=Math.abs(f-r);o<S&&(S=o,v=e)}y||(v>=0?(console.log(`TimelineCursor: No exact match, using closest segment ${v}`),x.currentSegmentIndex=v,x.setState({})):(console.log("TimelineCursor: No segments found at all"),x.currentSegmentIndex=-1,x.setState({})))};return e.addEventListener("mousedown",n),()=>{e.removeEventListener("mousedown",n),document.removeEventListener("mousemove",i),document.removeEventListener("mouseup",r)}}),[f.current,l,m,p]);const v=(e,n,i)=>{if(console.log("TimelineCursor: updateCursorPosition called",{time:e,startHr:n,endHr:i}),null===e)return console.log("TimelineCursor: No current time, hiding cursor"),void s(!1);const r=new Date(1e3*e),o=r.getHours()+r.getMinutes()/60+r.getSeconds()/3600;if(console.log("TimelineCursor: Calculated hour",{hour:o,timeString:r.toLocaleTimeString()}),o<n||o>i)return console.log("TimelineCursor: Time outside visible range, hiding cursor"),void s(!1);const l=(o-n)/(i-n)*100;console.log("TimelineCursor: Calculated position",{position:l,hour:o,startHr:n,endHr:i}),t(l),s(!0)},S=e=>{if(null===e)return;const t=document.getElementById("time-display");if(!t)return;const n=new Date(1e3*e),i=n.getHours().toString().padStart(2,"0"),r=n.getMinutes().toString().padStart(2,"0"),o=n.getSeconds().toString().padStart(2,"0");t.textContent=`${i}:${r}:${o}`};return i((()=>{console.log("TimelineCursor: Initializing cursor position"),console.log("TimelineCursor: Initial state",{currentTime:x.currentTime,startHour:x.timelineStartHour,endHour:x.timelineEndHour,segments:x.timelineSegments?x.timelineSegments.length:0});const e=()=>{if(console.log("TimelineCursor: Checking timelineState directly",{currentTime:x.currentTime,segmentsLength:x.timelineSegments?x.timelineSegments.length:0,currentSegmentIndex:x.currentSegmentIndex}),x.currentTime)return console.log("TimelineCursor: Setting initial cursor position with current time"),s(!0),v(x.currentTime,x.timelineStartHour||0,x.timelineEndHour||24),!0;if(x.timelineSegments&&x.timelineSegments.length>0){console.log("TimelineCursor: Using first segment start time for cursor");const e=x.timelineSegments[0].start_timestamp;return console.log("TimelineCursor: Directly setting timelineState properties"),x.currentTime=e,x.currentSegmentIndex=0,x.setState({}),s(!0),v(e,x.timelineStartHour||0,x.timelineEndHour||24),!0}return!1};e()||(console.log("TimelineCursor: Initial initialization failed, will retry after delay"),[100,300,500,1e3].forEach(((t,n)=>{setTimeout((()=>{o||(console.log(`TimelineCursor: Retry initialization attempt ${n+1}`),e())}),t)})))}),[]),d`
    <div
      ref=${f}
      class="timeline-cursor absolute top-0 h-full z-50 transition-all duration-100 cursor-ew-resize"
      style="left: ${e}%; display: ${o?"block":"none"}; pointer-events: auto; width: 7px; margin-left: -3.5px;"
    >
      <!-- Invisible wider clickable area -->
      <div class="absolute top-0 bottom-0 left-0 w-full"></div>

      <!-- Skinnier needle with no middle chunk -->
      <div class="absolute top-0 bottom-0 w-0.5 bg-orange-500 left-1/2 transform -translate-x-1/2 pointer-events-none"></div>

      <!-- Top handle (black) -->
      <div class="absolute top-0 left-1/2 w-4 h-4 bg-black rounded-full transform -translate-x-1/2 -translate-y-1/2 shadow-md pointer-events-none"></div>

      <!-- Bottom handle (black) -->
      <div class="absolute bottom-0 left-1/2 w-4 h-4 bg-black rounded-full transform -translate-x-1/2 translate-y-1/2 shadow-md pointer-events-none"></div>
    </div>
  `}function v(){const[e,t]=n(1);return i((()=>{const e=x.subscribe((e=>{t(e.playbackSpeed)}));return()=>e()}),[]),d`
    <div class="mt-2 mb-4 p-2 border border-green-500 rounded-lg bg-white dark:bg-gray-800 shadow-sm">
      <div class="flex flex-col items-center">
        <div class="text-sm font-semibold mb-2 text-gray-700 dark:text-gray-300">Playback Speed</div>
        
        <div class="flex flex-wrap justify-center gap-1">
          ${[.25,.5,1,1.5,2,4].map((t=>d`
            <button 
              key=${`speed-${t}`}
              class=${`speed-btn px-2 py-1 text-sm rounded-full ${t===e?"bg-green-500 text-white":"bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600"} \n                font-medium transition-all focus:outline-none focus:ring-1 focus:ring-green-500 focus:ring-opacity-50`}
              data-speed=${t}
              onClick=${()=>(e=>{const t=document.querySelector("#video-player video");t&&(t.playbackRate=e),x.setState({playbackSpeed:e}),g(`Playback speed: ${e}x`,"info")})(t)}
            >
              ${1===t?"1× (Normal)":`${t}×`}
            </button>
          `))}
        </div>
        
        <div class="mt-1 text-xs font-medium text-green-600 dark:text-green-400">
          Current: ${e}× ${1===e?"(Normal)":""}
        </div>
      </div>
    </div>
  `}function S(){const[e,t]=n(-1),[o,s]=n(!1),[l,a]=n([]),[m,c]=n(1),u=r(null),p=r(null),h=r(null);i((()=>{const e=x.subscribe((e=>{t(e.currentSegmentIndex),s(e.isPlaying),a(e.timelineSegments||[]),c(e.playbackSpeed),f(e)}));return()=>e()}),[]);const f=e=>{const t=u.current;if(!t)return;if(!e.timelineSegments||0===e.timelineSegments.length||e.currentSegmentIndex<0||e.currentSegmentIndex>=e.timelineSegments.length)return;const n=e.timelineSegments[e.currentSegmentIndex];if(!n)return;const i=h.current!==n.id,r=i,o=null!==e.currentTime&&e.currentTime>=n.start_timestamp?e.currentTime-n.start_timestamp:0,s=null!==e.prevCurrentTime&&Math.abs(e.currentTime-e.prevCurrentTime)>1;i&&(console.log(`Segment changed from ${h.current} to ${n.id}`),h.current=n.id),r?(console.log(`Loading new segment ${n.id} (segmentChanged: ${i})`),b(n,o,e.isPlaying)):s?(console.log(`Seeking to ${o}s within current segment`),t.currentTime=o):e.isPlaying&&t.paused?t.play().catch((e=>{console.error("Error playing video:",e)})):e.isPlaying||t.paused||t.pause(),t.playbackRate!==e.playbackSpeed&&(t.playbackRate=e.playbackSpeed)},b=(e,t=0,n=!1)=>{const i=u.current;if(!i)return;console.log(`Loading segment ${e.id} at time ${t}s, autoplay: ${n}`),i.pause();const r=`/api/recordings/play/${e.id}?t=${Date.now()}`,o=()=>{console.log("Video metadata loaded"),i.currentTime=t,i.playbackRate=m,n&&i.play().catch((e=>{console.error("Error playing video:",e),g("Error playing video: "+e.message,"error")})),i.removeEventListener("loadedmetadata",o)};i.addEventListener("loadedmetadata",o),i.src=r,i.load()},y=e=>{if(null===e)return;const t=document.getElementById("time-display");if(!t)return;const n=new Date(1e3*e),i=n.getHours().toString().padStart(2,"0"),r=n.getMinutes().toString().padStart(2,"0"),o=n.getSeconds().toString().padStart(2,"0");t.textContent=`${i}:${r}:${o}`};return d`
    <div class="timeline-player-container mb-2" id="video-player">
      <div class="relative w-full bg-black rounded-lg shadow-md" style="aspect-ratio: 16/9;">
        <video
            ref=${u}
            class="w-full h-full object-contain"
            controls
            autoplay=${!1}
            muted=${!1}
            playsInline
            onended=${()=>{if(console.log("Video ended"),e<l.length-1){const t=e+1;console.log(`Playing next segment ${t}`),x.setState({currentSegmentIndex:t,currentTime:l[t].start_timestamp,isPlaying:!0,forceReload:!0})}else console.log("End of all segments"),x.setState({isPlaying:!1})}}
            ontimeupdate=${()=>{const t=u.current;if(!t)return;if(e<0||!l||0===l.length||e>=l.length)return;const n=l[e];if(!n)return;const i=n.start_timestamp+t.currentTime;y(i),x.setState({currentTime:i,prevCurrentTime:p.current}),p.current=i}}
        ></video>
        
        <!-- Add a message for invalid segments -->
        <div 
          class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-70 text-white text-center p-4 ${e>=0&&l.length>0?"hidden":""}"
        >
          <div>
            <p class="mb-2">No valid segment selected.</p>
            <p class="text-sm">Click on a segment in the timeline or use the play button to start playback.</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Playback speed controls -->
    <${v} />
  `}e.textContent=".timeline-container{position:relative;width:100%;height:100px;background-color:#f0f0f0;border:1px solid #ccc;border-radius:4px;margin-bottom:20px;overflow:hidden}.timeline-ruler{position:relative;width:100%;height:30px;background-color:#e0e0e0;border-bottom:1px solid #ccc}.timeline-tick{position:absolute;top:15px;width:1px;height:10px;background-color:#999}.timeline-tick.major{top:10px;height:20px;background-color:#666}.timeline-label{position:absolute;top:0;transform:translate(-50%);font-size:10px;color:#666;padding:2px}.timeline-segments{position:relative;width:100%;height:70px;padding:10px 0}.timeline-segment{position:absolute;height:20px;background-color:#4a90e2;border-radius:2px;top:25px;opacity:.8;cursor:pointer;transition:all .2s ease}.timeline-segment:hover{opacity:1;height:24px;top:23px;box-shadow:0 2px 4px rgba(0,0,0,.2)}.timeline-segment.has-detection{background-color:#e74c3c}.timeline-cursor{position:absolute;top:0;width:2px;height:100%;background-color:#ff5722;z-index:10}.timeline-player-container{width:100%;aspect-ratio:16 / 9;background-color:#000;border-radius:4px;overflow:hidden;position:relative}.timeline-player-container video{width:100%;height:100%;-o-object-fit:contain;object-fit:contain}.timeline-controls{display:flex;align-items:center;gap:10px;margin-bottom:10px}.timeline-control-btn{width:40px;height:40px;border-radius:50%;background-color:#4a90e2;color:#fff;border:none;cursor:pointer;display:flex;align-items:center;justify-content:center;transition:background-color .2s ease}.timeline-control-btn:hover{background-color:#3a80d2}.timeline-control-btn .icon{font-size:18px}.timeline-time-display{font-family:monospace;font-size:18px;padding:5px 10px;background-color:#f0f0f0;border-radius:4px;border:1px solid #ddd}.timeline-zoom-controls{display:flex;gap:5px}.timeline-zoom-btn{width:30px;height:30px;border-radius:4px;background-color:#f0f0f0;border:1px solid #ddd;cursor:pointer;display:flex;align-items:center;justify-content:center;transition:background-color .2s ease}.timeline-zoom-btn:hover{background-color:#e0e0e0}#status-message-container{position:fixed;top:20px;right:20px;z-index:1000;display:flex;flex-direction:column;gap:10px;max-width:300px}.status-message{padding:10px 15px;border-radius:4px;color:#fff;box-shadow:0 2px 10px rgba(0,0,0,.2);opacity:0;transform:translate(20px);transition:all .3s ease}.status-message.show{opacity:1;transform:translate(0)}@media (prefers-color-scheme: dark){.timeline-container{background-color:#2a2a2a;border-color:#444}.timeline-ruler{background-color:#333;border-color:#444}.timeline-tick{background-color:#777}.timeline-tick.major{background-color:#999}.timeline-label{color:#ccc}.timeline-time-display,.timeline-zoom-btn{background-color:#333;border-color:#444;color:#eee}.timeline-zoom-btn:hover{background-color:#444}}@media (max-width: 768px){.timeline-container{height:80px}.timeline-ruler{height:25px}.timeline-segments{height:55px}.timeline-segment{height:15px;top:20px}.timeline-segment:hover{height:18px;top:18px}.timeline-time-display{font-size:16px}.timeline-control-btn{width:36px;height:36px}.timeline-zoom-btn{width:26px;height:26px}}\n/*$vite$:1*/",document.head.appendChild(e);const x={streams:[],timelineSegments:[],selectedStream:null,selectedDate:null,isPlaying:!1,currentSegmentIndex:-1,zoomLevel:1,timelineStartHour:0,timelineEndHour:24,currentTime:null,prevCurrentTime:null,playbackSpeed:1,showOnlySegments:!0,forceReload:!1,userControllingCursor:!1,listeners:new Set,lastUpdateTime:0,pendingUpdates:{},setState(e){const t=Date.now();console.log("timelineState: setState called with",e),console.log("timelineState: current state before update",{currentTime:this.currentTime,currentSegmentIndex:this.currentSegmentIndex,segmentsLength:this.timelineSegments.length}),void 0!==e.currentTime&&!e.currentSegmentIndex&&!e.isPlaying&&t-this.lastUpdateTime<250?console.log("timelineState: Skipping frequent time update"):(Object.assign(this,e),e.forceReload&&(this.forceReload=!1),this.lastUpdateTime=t,console.log("timelineState: state after update",{currentTime:this.currentTime,currentSegmentIndex:this.currentSegmentIndex,segmentsLength:this.timelineSegments.length}),this.notifyListeners())},subscribe(e){return this.listeners.add(e),()=>this.listeners.delete(e)},notifyListeners(){this.listeners.forEach((e=>e(this)))},flushPendingUpdates(){Object.keys(this.pendingUpdates).length>0&&(Object.assign(this,this.pendingUpdates),this.pendingUpdates={},this.lastUpdateTime=Date.now(),this.notifyListeners())}};function T(){const e=function(){const e=new URLSearchParams(window.location.search);return{stream:e.get("stream")||"",date:e.get("date")||(t=new Date,`${t.getFullYear()}-${String(t.getMonth()+1).padStart(2,"0")}-${String(t.getDate()).padStart(2,"0")}`)};var t}(),[a,m]=n(!1),[c,d]=n([]),[u,p]=n(e.stream),[v,T]=n(e.date),[w,k]=n([]),$=r(null),C=r(!1),H=r(null);i((()=>(H.current=setInterval((()=>{x.flushPendingUpdates()}),200),()=>{H.current&&clearInterval(H.current)})),[]);const{data:E,isLoading:L,error:M}=o("streams","/api/streams",{timeout:15e3,retries:2,retryDelay:1e3});i((()=>{if(E&&Array.isArray(E)&&E.length>0&&!C.current)if(console.log("TimelinePage: Streams loaded, initializing data"),C.current=!0,d(E),x.setState({streams:E}),E.some((e=>e.name===u))&&u)console.log(`TimelinePage: Using stream from URL: ${u}`);else if(E.length>0){const e=E[0].name;console.log(`TimelinePage: Using first stream: ${e}`),p(e)}}),[E]),i((()=>{M&&(console.error("TimelinePage: Error loading streams:",M),g("Error loading streams: "+M.message,"error"))}),[M]),i((()=>{u&&(function(e,t){if(!e)return;const n=new URL(window.location.href);n.searchParams.set("stream",e),n.searchParams.set("date",t),window.history.replaceState({},"",n)}(u,v),x.setState({selectedStream:u,selectedDate:v}))}),[u,v]);const{startTime:I,endTime:P}=(e=>{const t=new Date(e);t.setHours(0,0,0,0);const n=new Date(e);return n.setHours(23,59,59,999),{startTime:t.toISOString(),endTime:n.toISOString()}})(v),{data:D,isLoading:_,error:N,refetch:R}=o(["timeline-segments",u,v],u?`/api/timeline/segments?stream=${encodeURIComponent(u)}&start=${encodeURIComponent(I)}&end=${encodeURIComponent(P)}`:null,{timeout:3e4,retries:2,retryDelay:1e3},{enabled:!!u,onSuccess:e=>{console.log("TimelinePage: Timeline data received:",e);const t=e.segments||[];if(console.log(`TimelinePage: Received ${t.length} segments`),0===t.length)return console.log("TimelinePage: No segments found"),k([]),x.setState({timelineSegments:[],currentSegmentIndex:-1,currentTime:null,isPlaying:!1}),void g("No recordings found for the selected date","warning");const n=JSON.parse(JSON.stringify(t));n.slice(0,3).forEach(((e,t)=>{const n=new Date(1e3*e.start_timestamp),i=new Date(1e3*e.end_timestamp);console.log(`TimelinePage: Segment ${t} - Start: ${n.toLocaleTimeString()}, End: ${i.toLocaleTimeString()}`)})),console.log("TimelinePage: Setting segments"),k(n),document.body.offsetHeight;const i=n[0].start_timestamp;console.log("TimelinePage: Setting initial segment and time",{firstSegmentId:n[0].id,startTime:new Date(1e3*i).toLocaleTimeString()}),console.log("TimelinePage: Directly setting timelineState properties"),x.timelineSegments=n,x.currentSegmentIndex=0,x.currentTime=i,x.prevCurrentTime=i,x.isPlaying=!1,x.forceReload=!0,x.zoomLevel=1,x.selectedDate=v,x.setState({}),console.log("TimelinePage: Updated timelineState with segments"),setTimeout((()=>{console.log("TimelinePage: State after update (delayed check):",{segmentsLength:x.timelineSegments.length,currentSegmentIndex:x.currentSegmentIndex,currentTime:x.currentTime}),x.currentTime&&-1!==x.currentSegmentIndex||(console.log("TimelinePage: State not properly updated, forcing update"),x.setState({currentSegmentIndex:0,currentTime:i,prevCurrentTime:i}))}),100);const r=document.querySelector("#video-player video");r&&(r.src=`/api/recordings/play/${n[0].id}?t=${Date.now()}`,r.load()),g(`Loaded ${n.length} recording segments`,"success")},onError:e=>{console.error("TimelinePage: Error loading timeline data:",e),g("Error loading timeline data: "+e.message,"error"),k([])}});return s("div",{className:"timeline-page",children:[s("div",{className:"flex items-center mb-4",children:[s("h1",{className:"text-2xl font-bold",children:"Timeline Playback"}),s("div",{className:"ml-4 flex",children:[s("a",{href:"recordings.html",className:"px-3 py-1 bg-gray-300 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-400 dark:hover:bg-gray-600 rounded-l-md",children:"Table View"}),s("a",{href:"timeline.html",className:"px-3 py-1 bg-blue-500 text-white rounded-r-md",children:"Timeline View"})]})]}),s("div",{className:"flex flex-wrap gap-4 mb-2",children:[s("div",{className:"stream-selector flex-grow",children:[s("div",{className:"flex justify-between items-center mb-2",children:[s("label",{htmlFor:"stream-selector",children:"Stream"}),s("button",{className:"text-xs bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 px-2 py-1 rounded",onClick:()=>R(),children:"Reload Data"})]}),s("select",{id:"stream-selector",className:"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white",value:u||"",onChange:e=>{const t=e.target.value;console.log(`TimelinePage: Stream changed to ${t}`),p(t)},children:[s("option",{value:"",disabled:!0,children:["Select a stream (",c.length," available)"]}),c.map((e=>s("option",{value:e.name,children:e.name},e.name)))]})]}),s("div",{className:"date-selector flex-grow",children:[s("label",{htmlFor:"timeline-date",className:"block mb-2",children:"Date"}),s("input",{type:"date",id:"timeline-date",className:"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-white",value:v,onChange:e=>{const t=e.target.value;console.log(`TimelinePage: Date changed to ${t}`),T(t)}})]})]}),s("div",{className:"mb-4 text-sm text-gray-500 dark:text-gray-400 italic",children:_?"Loading...":"Recordings auto-load when stream or date changes"}),s("div",{className:"flex justify-between items-center mb-2",children:s("div",{id:"time-display",className:"timeline-time-display bg-gray-200 dark:bg-gray-700 px-3 py-1 rounded font-mono text-base",children:"00:00:00"})}),s("div",{className:"mb-2 text-xs text-gray-500",children:["Debug - isLoading: ",_?"true":"false",", Streams: ",c.length,", Segments: ",w.length]}),_?s(h,{message:"Loading timeline data..."}):0===w.length?s("div",{className:"flex flex-col items-center justify-center py-12 text-center",children:[s("svg",{className:"w-16 h-16 text-gray-400 dark:text-gray-600 mb-4",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg",children:s("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"2",d:"M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"})}),s("p",{className:"text-gray-600 dark:text-gray-400 text-lg",children:"No recordings found for the selected date and stream"})]}):s(l,{children:[s(S,{}),s(t,{}),s("div",{id:"timeline-container",className:"relative w-full h-24 bg-gray-200 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg mb-6 overflow-hidden",ref:$,children:[s(f,{}),s(b,{segments:w}),s(y,{}),s("div",{className:"absolute bottom-1 right-2 text-xs text-gray-500 dark:text-gray-400 bg-white dark:bg-gray-800 bg-opacity-75 dark:bg-opacity-75 px-2 py-1 rounded",children:"Drag the orange dial to navigate"})]})]}),s("div",{className:"mt-6 p-4 bg-gray-200 dark:bg-gray-800 rounded",children:[s("h3",{className:"text-lg font-semibold mb-2",children:"How to use the timeline:"}),s("ul",{className:"list-disc pl-5",children:[s("li",{children:"Select a stream and date to load recordings"}),s("li",{children:"Click on the timeline to position the cursor at a specific time"}),s("li",{children:"Drag the orange cursor to navigate precisely"}),s("li",{children:"Click on a segment (blue bar) to play that recording"}),s("li",{children:"Use the play button to start playback from the current cursor position"}),s("li",{children:"Use the zoom buttons to adjust the timeline scale"})]})]})]})}document.addEventListener("DOMContentLoaded",(()=>{const e=document.getElementById("main-content");e&&a(s(c,{client:m,children:[s(u,{}),s(T,{}),s(p,{})]}),e)}))}}}));
//# sourceMappingURL=timeline-legacy-CaBVdzem.js.map
