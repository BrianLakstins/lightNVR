{"version":3,"file":"StreamsView-legacy-gDQhMt-V.js","sources":["../../js/components/preact/StreamsView.js"],"sourcesContent":["/**\n * LightNVR Web Interface StreamsView Component\n * Preact component for the streams page\n */\n\nimport { h } from '../../preact.min.js';\nimport { html } from '../../html-helper.js';\nimport { useState, useEffect, useRef } from '../../preact.hooks.module.js';\nimport { showStatusMessage } from './UI.js';\nimport { ContentLoader } from './LoadingIndicator.js';\nimport { fetchJSON, enhancedFetch, createRequestController } from '../../fetch-utils.js';\n\n/**\n * StreamsView component\n * @returns {JSX.Element} StreamsView component\n */\nexport function StreamsView() {\n  const [streams, setStreams] = useState([]);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [onvifModalVisible, setOnvifModalVisible] = useState(false);\n  const [discoveredDevices, setDiscoveredDevices] = useState([]);\n  const [deviceProfiles, setDeviceProfiles] = useState([]);\n  const [selectedDevice, setSelectedDevice] = useState(null);\n  const [selectedProfile, setSelectedProfile] = useState(null);\n  const [isDiscovering, setIsDiscovering] = useState(false);\n  const [onvifCredentials, setOnvifCredentials] = useState({\n    username: '',\n    password: ''\n  });\n  const [currentStream, setCurrentStream] = useState({\n    name: '',\n    url: '',\n    enabled: true,\n    streamingEnabled: true,\n    width: 1280,\n    height: 720,\n    fps: 15,\n    codec: 'h264',\n    protocol: '0',\n    priority: '5',\n    segment: 30,\n    record: true,\n    detectionEnabled: false,\n    detectionModel: '',\n    detectionThreshold: 50,\n    detectionInterval: 10,\n    preBuffer: 10,\n    postBuffer: 30\n  });\n  const [detectionModels, setDetectionModels] = useState([]);\n  const [isEditing, setIsEditing] = useState(false);\n  \n  // State for loading and data status\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasData, setHasData] = useState(false);\n\n  // Request controller for cancelling requests on unmount\n  const requestControllerRef = useRef(null);\n\n  // Load streams on mount\n  useEffect(() => {\n    // Create a new request controller\n    requestControllerRef.current = createRequestController();\n    \n    loadStreams();\n    loadDetectionModels();\n    \n    // Clean up and cancel pending requests on unmount\n    return () => {\n      if (requestControllerRef.current) {\n        requestControllerRef.current.abort();\n      }\n    };\n  }, []);\n  \n  // Load streams from API\n  const loadStreams = async () => {\n    try {\n      setIsLoading(true);\n      setHasData(false);\n      \n      const data = await fetchJSON('/api/streams', {\n        signal: requestControllerRef.current?.signal,\n        timeout: 15000, // 15 second timeout\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n      \n      const streamsData = data || [];\n      setStreams(streamsData);\n      setHasData(streamsData.length > 0);\n    } catch (error) {\n      // Only show error if the request wasn't cancelled\n      if (error.message !== 'Request was cancelled') {\n        console.error('Error loading streams:', error);\n        showStatusMessage('Error loading streams: ' + error.message);\n        setHasData(false);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Load detection models from API\n  const loadDetectionModels = async () => {\n    try {\n      const data = await fetchJSON('/api/detection/models', {\n        signal: requestControllerRef.current?.signal,\n        timeout: 10000, // 10 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 500 // 0.5 second between retries\n      });\n      \n      setDetectionModels(data.models || []);\n    } catch (error) {\n      // Only log error if the request wasn't cancelled\n      if (error.message !== 'Request was cancelled') {\n        console.error('Error loading detection models:', error);\n        // Don't show error message for this, just log it\n      }\n    }\n  };\n  \n  // Open add stream modal\n  const openAddStreamModal = () => {\n    setCurrentStream({\n      name: '',\n      url: '',\n      enabled: true,\n      streamingEnabled: true,\n      width: 1280,\n      height: 720,\n      fps: 15,\n      codec: 'h264',\n      protocol: '0',\n      priority: '5',\n      segment: 30,\n      record: true,\n      recordAudio: true,\n      detectionEnabled: false,\n      detectionModel: '',\n      detectionThreshold: 50,\n      detectionInterval: 10,\n      preBuffer: 10,\n      postBuffer: 30\n    });\n    setIsEditing(false);\n    setModalVisible(true);\n  };\n  \n  // Open edit stream modal\n  const openEditStreamModal = async (streamId) => {\n    try {\n      const stream = await fetchJSON(`/api/streams/${encodeURIComponent(streamId)}`, {\n        signal: requestControllerRef.current?.signal,\n        timeout: 10000, // 10 second timeout\n        retries: 2,     // Retry twice\n        retryDelay: 1000 // 1 second between retries\n      });\n    setCurrentStream({\n      ...stream,\n      // Convert numeric values to strings for form inputs\n      width: stream.width || 1280,\n      height: stream.height || 720,\n      fps: stream.fps || 15,\n      protocol: stream.protocol?.toString() || '0',\n      priority: stream.priority?.toString() || '5',\n      segment: stream.segment_duration || 30,\n      detectionThreshold: stream.detection_threshold || 50,\n      detectionInterval: stream.detection_interval || 10,\n      preBuffer: stream.pre_detection_buffer || 10,\n      postBuffer: stream.post_detection_buffer || 30,\n      // Map API fields to form fields\n      streamingEnabled: stream.streaming_enabled !== undefined ? stream.streaming_enabled : true,\n      isOnvif: stream.is_onvif !== undefined ? stream.is_onvif : false,\n      detectionEnabled: stream.detection_based_recording || false,\n      detectionModel: stream.detection_model || '',\n      recordAudio: stream.record_audio !== undefined ? stream.record_audio : true\n      });\n      setIsEditing(true);\n      setModalVisible(true);\n    } catch (error) {\n      console.error('Error loading stream details:', error);\n      showStatusMessage('Error loading stream details: ' + error.message);\n    }\n  };\n  \n  // Close modal\n  const closeModal = () => {\n    setModalVisible(false);\n  };\n  \n  // Handle input change\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    \n    setCurrentStream(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n  \n  // Handle threshold slider change\n  const handleThresholdChange = (e) => {\n    const value = parseInt(e.target.value, 10);\n    setCurrentStream(prev => ({\n      ...prev,\n      detectionThreshold: value\n    }));\n  };\n  \n  // Save stream\n  const saveStream = async () => {\n    try {\n      // Prepare data for API\n      const streamData = {\n        ...currentStream,\n        // Convert string values to numbers where needed\n        width: parseInt(currentStream.width, 10),\n        height: parseInt(currentStream.height, 10),\n        fps: parseInt(currentStream.fps, 10),\n        protocol: parseInt(currentStream.protocol, 10),\n        priority: parseInt(currentStream.priority, 10),\n        segment_duration: parseInt(currentStream.segment, 10),\n        // Map form fields to API fields\n        streaming_enabled: currentStream.streamingEnabled,\n        is_onvif: currentStream.isOnvif,\n        detection_based_recording: currentStream.detectionEnabled,\n        detection_model: currentStream.detectionModel,\n        detection_threshold: currentStream.detectionThreshold,\n        detection_interval: parseInt(currentStream.detectionInterval, 10),\n        pre_detection_buffer: parseInt(currentStream.preBuffer, 10),\n        post_detection_buffer: parseInt(currentStream.postBuffer, 10),\n        record_audio: currentStream.recordAudio\n      };\n      \n      // When editing, set is_deleted to false to allow undeleting soft-deleted streams\n      if (isEditing) {\n        streamData.is_deleted = false;\n      }\n      \n      const url = isEditing \n        ? `/api/streams/${encodeURIComponent(currentStream.name)}`\n        : '/api/streams';\n      \n      const method = isEditing ? 'PUT' : 'POST';\n      \n      await enhancedFetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(streamData),\n        signal: requestControllerRef.current?.signal,\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n      \n      // The streaming flag is already handled by the main update endpoint\n      // The ONVIF flag is now properly handled by the backend\n      \n      showStatusMessage(`Stream ${isEditing ? 'updated' : 'added'} successfully`);\n      closeModal();\n      loadStreams();\n    } catch (error) {\n      console.error(`Error ${isEditing ? 'updating' : 'adding'} stream:`, error);\n      showStatusMessage(`Error ${isEditing ? 'updating' : 'adding'} stream: ${error.message}`);\n    }\n  };\n  \n  // Test stream connection\n  const testStreamConnection = async () => {\n    try {\n      showStatusMessage('Testing stream connection...');\n      \n      const data = await fetchJSON('/api/streams/test', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          url: currentStream.url,\n          protocol: parseInt(currentStream.protocol, 10)\n        }),\n        signal: requestControllerRef.current?.signal,\n        timeout: 20000, // 20 second timeout for stream testing\n        retries: 1,     // Retry once\n        retryDelay: 2000 // 2 seconds between retries\n      });\n      \n      if (data.success) {\n        showStatusMessage('Stream connection successful!');\n        \n        // Update stream info if available\n        if (data.info) {\n          setCurrentStream(prev => ({\n            ...prev,\n            width: data.info.width || prev.width,\n            height: data.info.height || prev.height,\n            fps: data.info.fps || prev.fps,\n            codec: data.info.codec || prev.codec\n          }));\n        }\n      } else {\n        showStatusMessage(`Stream test failed: ${data.message || 'Unknown error'}`, 3000, 'error');\n      }\n    } catch (error) {\n      console.error('Error testing stream:', error);\n      showStatusMessage('Error testing stream: ' + error.message, 3000, 'error');\n    }\n  };\n  \n  // Delete stream\n  const deleteStream = async (streamId) => {\n    if (!confirm(`Are you sure you want to delete stream \"${streamId}\"?`)) {\n      return;\n    }\n    \n    try {\n      await enhancedFetch(`/api/streams/${encodeURIComponent(streamId)}`, {\n        method: 'DELETE',\n        signal: requestControllerRef.current?.signal,\n        timeout: 15000, // 15 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n      \n      showStatusMessage('Stream deleted successfully');\n      loadStreams();\n    } catch (error) {\n      console.error('Error deleting stream:', error);\n      showStatusMessage('Error deleting stream: ' + error.message);\n    }\n  };\n  \n  // Enable/disable stream\n  const toggleStreamEnabled = async (streamId, enabled) => {\n    try {\n      await enhancedFetch(`/api/streams/${encodeURIComponent(streamId)}/enable`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ enabled: !enabled }),\n        signal: requestControllerRef.current?.signal,\n        timeout: 10000, // 10 second timeout\n        retries: 1,     // Retry once\n        retryDelay: 1000 // 1 second between retries\n      });\n      \n      showStatusMessage(`Stream ${enabled ? 'disabled' : 'enabled'} successfully`);\n      loadStreams();\n    } catch (error) {\n      console.error(`Error ${enabled ? 'disabling' : 'enabling'} stream:`, error);\n      showStatusMessage(`Error ${enabled ? 'disabling' : 'enabling'} stream: ${error.message}`);\n    }\n  };\n  \n  // Handle ONVIF credential input change\n  const handleCredentialChange = (e) => {\n    const { name, value } = e.target;\n    setOnvifCredentials(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  \n  // Start ONVIF discovery\n  const startOnvifDiscovery = async () => {\n    try {\n      setIsDiscovering(true);\n      // Don't clear discovered devices immediately to prevent UI flicker\n      // and to preserve any credentials entered\n      showStatusMessage('Starting ONVIF discovery...');\n      \n      const data = await fetchJSON('/api/onvif/discovery/discover', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({}),\n        signal: requestControllerRef.current?.signal,\n        timeout: 120000, // 120 second timeout for discovery (ONVIF discovery can take up to 90 seconds)\n        retries: 0       // No retries for discovery\n      });\n      // Update discovered devices without clearing credentials\n      setDiscoveredDevices(data.devices || []);\n      \n      if (data.devices && data.devices.length > 0) {\n        showStatusMessage(`Discovered ${data.devices.length} ONVIF devices`);\n      } else {\n        showStatusMessage('No ONVIF devices found');\n      }\n    } catch (error) {\n      console.error('Error discovering ONVIF devices:', error);\n      showStatusMessage('Error discovering ONVIF devices: ' + error.message, 3000, 'error');\n    } finally {\n      setIsDiscovering(false);\n    }\n  };\n  \n  // State for profile loading\n  const [isLoadingProfiles, setIsLoadingProfiles] = useState(false);\n\n  // Get ONVIF device profiles\n  const getDeviceProfiles = async (device) => {\n    try {\n      setSelectedDevice(device);\n      setDeviceProfiles([]);\n      setIsLoadingProfiles(true);\n      showStatusMessage('Getting device profiles...');\n      \n      const data = await fetchJSON(`/api/onvif/device/profiles`, {\n        headers: {\n          'X-Device-URL': device.device_service,\n          'X-Username': onvifCredentials.username,\n          'X-Password': onvifCredentials.password\n        },\n        signal: requestControllerRef.current?.signal,\n        timeout: 20000, // 20 second timeout for getting profiles\n        retries: 1,     // Retry once\n        retryDelay: 2000 // 2 seconds between retries\n      });\n      setDeviceProfiles(data.profiles || []);\n      \n      if (data.profiles && data.profiles.length > 0) {\n        showStatusMessage(`Found ${data.profiles.length} profiles`);\n      } else {\n        showStatusMessage('No profiles found');\n      }\n    } catch (error) {\n      console.error('Error getting device profiles:', error);\n      showStatusMessage('Error getting device profiles: ' + error.message, 3000, 'error');\n    } finally {\n      setIsLoadingProfiles(false);\n    }\n  };\n  \n  // State for custom stream name\n  const [customStreamName, setCustomStreamName] = useState('');\n  const [showCustomNameInput, setShowCustomNameInput] = useState(false);\n\n  // Add ONVIF device as stream\n  const addOnvifDeviceAsStream = async (profile) => {\n    try {\n      setSelectedProfile(profile);\n      \n      // Generate a default stream name from device info\n      const defaultStreamName = `ONVIF_${selectedDevice.ip_address.replace(/\\./g, '_')}_${profile.name.replace(/\\s+/g, '_')}`;\n      \n      // Show custom name input dialog\n      setCustomStreamName(defaultStreamName);\n      setShowCustomNameInput(true);\n    } catch (error) {\n      console.error('Error preparing to add ONVIF device:', error);\n      showStatusMessage('Error preparing to add ONVIF device: ' + error.message, 3000, 'error');\n    }\n  };\n  \n  // State for adding stream\n  const [isAddingStream, setIsAddingStream] = useState(false);\n\n  // Submit ONVIF device with custom name\n  const submitOnvifDevice = async () => {\n    try {\n      setIsAddingStream(true);\n      showStatusMessage('Adding ONVIF device as stream...');\n      \n      await enhancedFetch('/api/onvif/device/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          device_url: selectedDevice.device_service,\n          profile_token: selectedProfile.token,\n          stream_name: customStreamName,\n          username: onvifCredentials.username,\n          password: onvifCredentials.password\n        }),\n        signal: requestControllerRef.current?.signal,\n        timeout: 30000, // 30 second timeout for adding ONVIF device\n        retries: 1,     // Retry once\n        retryDelay: 3000 // 3 seconds between retries\n      });\n      \n      showStatusMessage('ONVIF device added as stream successfully');\n      setOnvifModalVisible(false);\n      setShowCustomNameInput(false);\n      loadStreams();\n    } catch (error) {\n      console.error('Error adding ONVIF device as stream:', error);\n      showStatusMessage('Error adding ONVIF device as stream: ' + error.message, 3000, 'error');\n    } finally {\n      setIsAddingStream(false);\n    }\n  };\n  \n  // Test ONVIF connection\n  const testOnvifConnection = async (device) => {\n    try {\n      // Save current credentials to preserve them\n      const currentCredentials = {\n        username: onvifCredentials.username,\n        password: onvifCredentials.password\n      };\n      \n      showStatusMessage('Testing ONVIF connection...');\n      \n      await enhancedFetch('/api/onvif/device/test', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          url: device.device_service,\n          username: currentCredentials.username,\n          password: currentCredentials.password\n        }),\n        signal: requestControllerRef.current?.signal,\n        timeout: 15000, // 15 second timeout for testing connection\n        retries: 1,     // Retry once\n        retryDelay: 2000 // 2 seconds between retries\n      });\n      \n      showStatusMessage('ONVIF connection successful!');\n      \n      // Get device profiles after successful connection test\n      // Pass the saved credentials to ensure they're not lost\n      getDeviceProfiles(device);\n    } catch (error) {\n      console.error('Error testing ONVIF connection:', error);\n      showStatusMessage('Error testing ONVIF connection: ' + error.message, 3000, 'error');\n    }\n  };\n  \n  return html`\n    <section id=\"streams-page\" class=\"page\">\n      <div class=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <h2 class=\"text-xl font-bold\">Streams</h2>\n        <div class=\"controls flex space-x-2\">\n          <button \n            id=\"discover-onvif-btn\" \n            class=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n            onClick=${() => setOnvifModalVisible(true)}\n          >\n            Discover ONVIF Cameras\n          </button>\n          <button \n            id=\"add-stream-btn\" \n            class=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n            onClick=${openAddStreamModal}\n          >\n            Add Stream\n          </button>\n        </div>\n      </div>\n      \n      <${ContentLoader}\n        isLoading=${isLoading}\n        hasData=${hasData}\n        loadingMessage=\"Loading streams...\"\n        emptyMessage=\"No streams configured yet. Click 'Add Stream' to create one.\"\n      >\n        <div class=\"streams-container bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden\">\n          <div class=\"overflow-x-auto\">\n            <table id=\"streams-table\" class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n              <thead class=\"bg-gray-50 dark:bg-gray-700\">\n                <tr>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Name</th>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">URL</th>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Resolution</th>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">FPS</th>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Recording</th>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Actions</th>\n                </tr>\n              </thead>\n              <tbody class=\"bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700\">\n                ${streams.map(stream => html`\n                  <tr key=${stream.name} class=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                    <td class=\"px-6 py-4 whitespace-nowrap\">\n                      <div class=\"flex items-center\">\n                        <span class=${`status-indicator w-2 h-2 rounded-full mr-2 ${stream.enabled ? 'bg-green-500' : 'bg-red-500'}`}></span>\n                        ${stream.name}\n                      </div>\n                    </td>\n                    <td class=\"px-6 py-4 whitespace-nowrap\">${stream.url}</td>\n                    <td class=\"px-6 py-4 whitespace-nowrap\">${stream.width}x${stream.height}</td>\n                    <td class=\"px-6 py-4 whitespace-nowrap\">${stream.fps}</td>\n                    <td class=\"px-6 py-4 whitespace-nowrap\">\n                      ${stream.record ? 'Enabled' : 'Disabled'}\n                      ${stream.detection_based_recording ? ' (Detection)' : ''}\n                    </td>\n                    <td class=\"px-6 py-4 whitespace-nowrap\">\n                      <div class=\"flex space-x-2\">\n                        <button \n                          class=\"p-1 rounded-full text-blue-600 hover:bg-blue-100 dark:text-blue-400 dark:hover:bg-blue-900 focus:outline-none\"\n                          onClick=${() => openEditStreamModal(stream.name)}\n                          title=\"Edit\"\n                        >\n                          <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z\"></path>\n                          </svg>\n                        </button>\n                        <button \n                          class=\"p-1 rounded-full text-red-600 hover:bg-red-100 dark:text-red-400 dark:hover:bg-red-900 focus:outline-none\"\n                          onClick=${() => deleteStream(stream.name)}\n                          title=\"Delete\"\n                        >\n                          <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fill-rule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clip-rule=\"evenodd\"></path>\n                          </svg>\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                `)}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      <//>\n      \n      ${modalVisible && html`\n        <div id=\"stream-modal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300\">\n          <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n            <div class=\"flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700\">\n              <h3 class=\"text-lg font-medium\">${isEditing ? 'Edit Stream' : 'Add Stream'}</h3>\n              <span class=\"text-2xl cursor-pointer\" onClick=${closeModal}>×</span>\n            </div>\n            <div class=\"p-4\">\n              <form id=\"stream-form\" class=\"space-y-4\">\n                <div class=\"form-group\">\n                  <label for=\"stream-name\" class=\"block text-sm font-medium mb-1\">Name</label>\n                  <input \n                    type=\"text\" \n                    id=\"stream-name\" \n                    name=\"name\"\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white ${isEditing ? 'bg-gray-100 dark:bg-gray-800' : ''}\"\n                    value=${currentStream.name}\n                    onChange=${handleInputChange}\n                    disabled=${isEditing}\n                    required\n                  />\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"stream-url\" class=\"block text-sm font-medium mb-1\">URL</label>\n                  <input \n                    type=\"text\" \n                    id=\"stream-url\" \n                    name=\"url\"\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                    placeholder=\"rtsp://example.com/stream\" \n                    value=${currentStream.url}\n                    onChange=${handleInputChange}\n                    required\n                  />\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input \n                    type=\"checkbox\" \n                    id=\"stream-enabled\" \n                    name=\"enabled\"\n                    class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                    checked=${currentStream.enabled}\n                    onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-enabled\" class=\"ml-2 block text-sm\">Stream Active</label>\n                  <span class=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">Enable/disable all stream processing</span>\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input \n                    type=\"checkbox\" \n                    id=\"stream-streaming-enabled\" \n                    name=\"streamingEnabled\"\n                    class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                    checked=${currentStream.streamingEnabled}\n                    onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-streaming-enabled\" class=\"ml-2 block text-sm\">Live View Enabled</label>\n                  <span class=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">Enable/disable live viewing in browser</span>\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input \n                    type=\"checkbox\" \n                    id=\"stream-is-onvif\" \n                    name=\"isOnvif\"\n                    class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                    checked=${currentStream.isOnvif}\n                    onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-is-onvif\" class=\"ml-2 block text-sm\">ONVIF Camera</label>\n                  <span class=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">Mark this stream as an ONVIF camera for special handling</span>\n                </div>\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div class=\"form-group\">\n                    <label for=\"stream-width\" class=\"block text-sm font-medium mb-1\">Width</label>\n                    <input \n                      type=\"number\" \n                      id=\"stream-width\" \n                      name=\"width\"\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      min=\"320\" \n                      max=\"1920\" \n                      value=${currentStream.width}\n                      onChange=${handleInputChange}\n                    />\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-height\" class=\"block text-sm font-medium mb-1\">Height</label>\n                    <input \n                      type=\"number\" \n                      id=\"stream-height\" \n                      name=\"height\"\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      min=\"240\" \n                      max=\"1080\" \n                      value=${currentStream.height}\n                      onChange=${handleInputChange}\n                    />\n                  </div>\n                </div>\n                <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div class=\"form-group\">\n                    <label for=\"stream-fps\" class=\"block text-sm font-medium mb-1\">FPS</label>\n                    <input \n                      type=\"number\" \n                      id=\"stream-fps\" \n                      name=\"fps\"\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      min=\"1\" \n                      max=\"30\" \n                      value=${currentStream.fps}\n                      onChange=${handleInputChange}\n                    />\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-codec\" class=\"block text-sm font-medium mb-1\">Codec</label>\n                    <select \n                      id=\"stream-codec\" \n                      name=\"codec\"\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      value=${currentStream.codec}\n                      onChange=${handleInputChange}\n                    >\n                      <option value=\"h264\">H.264</option>\n                      <option value=\"h265\">H.265</option>\n                    </select>\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-protocol\" class=\"block text-sm font-medium mb-1\">Protocol</label>\n                    <select \n                      id=\"stream-protocol\" \n                      name=\"protocol\"\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      value=${currentStream.protocol}\n                      onChange=${handleInputChange}\n                    >\n                      <option value=\"0\">TCP</option>\n                      <option value=\"1\">UDP</option>\n                    </select>\n                    <span class=\"text-xs text-gray-500 dark:text-gray-400\">Connection protocol (ONVIF cameras use either TCP or UDP)</span>\n                  </div>\n                </div>\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div class=\"form-group\">\n                    <label for=\"stream-priority\" class=\"block text-sm font-medium mb-1\">Priority</label>\n                    <select \n                      id=\"stream-priority\" \n                      name=\"priority\"\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      value=${currentStream.priority}\n                      onChange=${handleInputChange}\n                    >\n                      <option value=\"1\">Low (1)</option>\n                      <option value=\"5\">Medium (5)</option>\n                      <option value=\"10\">High (10)</option>\n                    </select>\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-segment\" class=\"block text-sm font-medium mb-1\">Segment Duration (seconds)</label>\n                    <input \n                      type=\"number\" \n                      id=\"stream-segment\" \n                      name=\"segment\"\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      min=\"60\" \n                      max=\"3600\" \n                      value=${currentStream.segment}\n                      onChange=${handleInputChange}\n                    />\n                  </div>\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input \n                    type=\"checkbox\" \n                    id=\"stream-record\" \n                    name=\"record\"\n                    class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                    checked=${currentStream.record}\n                    onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-record\" class=\"ml-2 block text-sm\">Record</label>\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input \n                    type=\"checkbox\" \n                    id=\"stream-record-audio\" \n                    name=\"recordAudio\"\n                    class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                    checked=${currentStream.recordAudio}\n                    onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-record-audio\" class=\"ml-2 block text-sm\">Record Audio</label>\n                  <span class=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">Include audio in recordings if available in the stream</span>\n                </div>\n                \n                <!-- Detection-based recording options -->\n                <div class=\"mt-6 mb-2 pb-1 border-b border-gray-200 dark:border-gray-700\">\n                  <h4 class=\"text-md font-medium\">Detection-Based Recording</h4>\n                </div>\n                <div class=\"form-group flex items-center\">\n                  <input \n                    type=\"checkbox\" \n                    id=\"stream-detection-enabled\" \n                    name=\"detectionEnabled\"\n                    class=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                    checked=${currentStream.detectionEnabled}\n                    onChange=${handleInputChange}\n                  />\n                  <label for=\"stream-detection-enabled\" class=\"ml-2 block text-sm\">Enable Detection-Based Recording</label>\n                  <span class=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">Only record when objects are detected</span>\n                </div>\n                <div class=\"form-group\" style=${currentStream.detectionEnabled ? '' : 'display: none'}>\n                  <label for=\"stream-detection-model\" class=\"block text-sm font-medium mb-1\">Detection Model</label>\n                  <div class=\"flex space-x-2\">\n                    <select \n                      id=\"stream-detection-model\" \n                      name=\"detectionModel\"\n                      class=\"flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      value=${currentStream.detectionModel}\n                      onChange=${handleInputChange}\n                    >\n                      <option value=\"\">Select a model</option>\n                      ${detectionModels.map(model => html`\n                        <option key=${model.id} value=${model.id}>${model.name}</option>\n                      `)}\n                    </select>\n                    <button \n                      id=\"refresh-models-btn\" \n                      class=\"p-2 rounded-md bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:outline-none\"\n                      title=\"Refresh Models\"\n                      onClick=${loadDetectionModels}\n                      type=\"button\"\n                    >\n                      <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\" clip-rule=\"evenodd\"></path>\n                      </svg>\n                    </button>\n                  </div>\n                </div>\n                <div class=\"form-group\" style=${currentStream.detectionEnabled ? '' : 'display: none'}>\n                  <label for=\"stream-detection-threshold\" class=\"block text-sm font-medium mb-1\">Detection Threshold</label>\n                  <div class=\"flex items-center space-x-2\">\n                    <input \n                      type=\"range\" \n                      id=\"stream-detection-threshold\" \n                      name=\"detectionThreshold\"\n                      class=\"flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"\n                      min=\"0\" \n                      max=\"100\" \n                      step=\"1\" \n                      value=${currentStream.detectionThreshold}\n                      onInput=${handleThresholdChange}\n                    />\n                    <span id=\"stream-threshold-value\" class=\"font-medium text-blue-600 dark:text-blue-400 min-w-[3rem] text-center\">\n                      ${currentStream.detectionThreshold}%\n                    </span>\n                  </div>\n                </div>\n                <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\" style=${currentStream.detectionEnabled ? '' : 'display: none'}>\n                  <div class=\"form-group\">\n                    <label for=\"stream-detection-interval\" class=\"block text-sm font-medium mb-1\">Detection Interval (frames)</label>\n                    <input \n                      type=\"number\" \n                      id=\"stream-detection-interval\" \n                      name=\"detectionInterval\"\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      min=\"1\" \n                      max=\"100\" \n                      value=${currentStream.detectionInterval}\n                      onChange=${handleInputChange}\n                    />\n                    <span class=\"text-xs text-gray-500 dark:text-gray-400\">Detect on every Nth frame</span>\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-pre-buffer\" class=\"block text-sm font-medium mb-1\">Pre-detection Buffer (seconds)</label>\n                    <input \n                      type=\"number\" \n                      id=\"stream-pre-buffer\" \n                      name=\"preBuffer\"\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      min=\"0\" \n                      max=\"60\" \n                      value=${currentStream.preBuffer}\n                      onChange=${handleInputChange}\n                    />\n                    <span class=\"text-xs text-gray-500 dark:text-gray-400\">Seconds to keep before detection</span>\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"stream-post-buffer\" class=\"block text-sm font-medium mb-1\">Post-detection Buffer (seconds)</label>\n                    <input \n                      type=\"number\" \n                      id=\"stream-post-buffer\" \n                      name=\"postBuffer\"\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      min=\"0\" \n                      max=\"300\" \n                      value=${currentStream.postBuffer}\n                      onChange=${handleInputChange}\n                    />\n                    <span class=\"text-xs text-gray-500 dark:text-gray-400\">Seconds to keep after detection</span>\n                  </div>\n                </div>\n              </form>\n            </div>\n            <div class=\"flex justify-between p-4 border-t border-gray-200 dark:border-gray-700\">\n              <button \n                id=\"stream-test-btn\" \n                class=\"px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition-colors dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600\"\n                onClick=${testStreamConnection}\n                type=\"button\"\n              >\n                Test Connection\n              </button>\n              <div class=\"space-x-2\">\n                <button \n                  id=\"stream-save-btn\" \n                  class=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n                  onClick=${saveStream}\n                  type=\"button\"\n                >\n                  Save\n                </button>\n                <button \n                  id=\"stream-cancel-btn\" \n                  class=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors\"\n                  onClick=${closeModal}\n                  type=\"button\"\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      `}\n      \n      ${onvifModalVisible && html`\n        <div id=\"onvif-modal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300\">\n          <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n            <div class=\"flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700\">\n              <h3 class=\"text-lg font-medium\">ONVIF Camera Discovery</h3>\n              <span class=\"text-2xl cursor-pointer\" onClick=${() => setOnvifModalVisible(false)}>×</span>\n            </div>\n            <div class=\"p-4\">\n              <div class=\"mb-4 flex justify-between items-center\">\n                <h4 class=\"text-md font-medium\">Discovered Devices</h4>\n                <button \n                  id=\"discover-btn\" \n                  class=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors focus:outline-none\"\n                  onClick=${startOnvifDiscovery}\n                  disabled=${isDiscovering}\n                  type=\"button\"\n                >\n                  ${isDiscovering ? html`\n                    <span class=\"flex items-center\">\n                      Discovering\n                      <span class=\"ml-1 flex space-x-1\">\n                        <span class=\"animate-pulse delay-0 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                        <span class=\"animate-pulse delay-150 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                        <span class=\"animate-pulse delay-300 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                      </span>\n                    </span>\n                  ` : 'Start Discovery'}\n                </button>\n              </div>\n              \n              <div class=\"overflow-x-auto\">\n                <table class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                  <thead class=\"bg-gray-50 dark:bg-gray-700\">\n                    <tr>\n                      <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">IP Address</th>\n                      <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Manufacturer</th>\n                      <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Model</th>\n                      <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody class=\"bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700\">\n                    ${discoveredDevices.length === 0 ? html`\n                      <tr>\n                        <td colspan=\"4\" class=\"px-6 py-4 text-center text-gray-500 dark:text-gray-400\">\n                          ${isDiscovering ? html`\n                            <div class=\"flex items-center justify-center\">\n                              <span>Discovering devices</span>\n                              <span class=\"ml-1 flex space-x-1\">\n                                <span class=\"animate-pulse delay-0 h-1.5 w-1.5 bg-gray-500 dark:bg-gray-400 rounded-full\"></span>\n                                <span class=\"animate-pulse delay-150 h-1.5 w-1.5 bg-gray-500 dark:bg-gray-400 rounded-full\"></span>\n                                <span class=\"animate-pulse delay-300 h-1.5 w-1.5 bg-gray-500 dark:bg-gray-400 rounded-full\"></span>\n                              </span>\n                            </div>\n                          ` : 'No devices discovered yet. Click \"Start Discovery\" to scan your network.'}\n                        </td>\n                      </tr>\n                    ` : discoveredDevices.map(device => html`\n                      <tr key=${device.ip_address} class=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                        <td class=\"px-6 py-4 whitespace-nowrap\">${device.ip_address}</td>\n                        <td class=\"px-6 py-4 whitespace-nowrap\">${device.manufacturer || 'Unknown'}</td>\n                        <td class=\"px-6 py-4 whitespace-nowrap\">${device.model || 'Unknown'}</td>\n                        <td class=\"px-6 py-4 whitespace-nowrap\">\n                          <button \n                            class=\"px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none\"\n                            onClick=${() => testOnvifConnection(device)}\n                            disabled=${isLoadingProfiles && selectedDevice && selectedDevice.ip_address === device.ip_address}\n                            type=\"button\"\n                          >\n                            ${isLoadingProfiles && selectedDevice && selectedDevice.ip_address === device.ip_address ? html`\n                              <span class=\"flex items-center\">\n                                Loading\n                                <span class=\"ml-1 flex space-x-1\">\n                                  <span class=\"animate-pulse delay-0 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                                  <span class=\"animate-pulse delay-150 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                                  <span class=\"animate-pulse delay-300 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                                </span>\n                              </span>\n                            ` : 'Connect'}\n                          </button>\n                        </td>\n                      </tr>\n                    `)}\n                  </tbody>\n                </table>\n              </div>\n              \n              <div class=\"mt-6 mb-4\">\n                <h4 class=\"text-md font-medium mb-2\">Authentication</h4>\n                <p class=\"text-sm text-gray-500 dark:text-gray-400 mb-3\">\n                  Enter credentials to connect to the selected ONVIF device. Credentials are not needed for discovery, only for connecting to devices.\n                </p>\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div class=\"form-group\">\n                    <label for=\"onvif-username\" class=\"block text-sm font-medium mb-1\">Username</label>\n                    <input \n                      type=\"text\" \n                      id=\"onvif-username\" \n                      name=\"username\"\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      placeholder=\"admin\" \n                      value=${onvifCredentials.username}\n                      onChange=${handleCredentialChange}\n                    />\n                  </div>\n                  <div class=\"form-group\">\n                    <label for=\"onvif-password\" class=\"block text-sm font-medium mb-1\">Password</label>\n                    <input \n                      type=\"password\" \n                      id=\"onvif-password\" \n                      name=\"password\"\n                      class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                      placeholder=\"password\" \n                      value=${onvifCredentials.password}\n                      onChange=${handleCredentialChange}\n                    />\n                  </div>\n                </div>\n              </div>\n              \n              ${selectedDevice && deviceProfiles.length > 0 && html`\n                <div class=\"mt-6\">\n                  <h4 class=\"text-md font-medium mb-2\">Available Profiles for ${selectedDevice.ip_address}</h4>\n                  <div class=\"overflow-x-auto\">\n                    <table class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                      <thead class=\"bg-gray-50 dark:bg-gray-700\">\n                        <tr>\n                          <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Name</th>\n                          <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Resolution</th>\n                          <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Encoding</th>\n                          <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">FPS</th>\n                          <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody class=\"bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700\">\n                        ${deviceProfiles.map(profile => html`\n                          <tr key=${profile.token} class=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                            <td class=\"px-6 py-4 whitespace-nowrap\">${profile.name}</td>\n                            <td class=\"px-6 py-4 whitespace-nowrap\">${profile.width}x${profile.height}</td>\n                            <td class=\"px-6 py-4 whitespace-nowrap\">${profile.encoding}</td>\n                            <td class=\"px-6 py-4 whitespace-nowrap\">${profile.fps}</td>\n                            <td class=\"px-6 py-4 whitespace-nowrap\">\n                              <button \n                                class=\"px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 transition-colors focus:outline-none\"\n                                onClick=${() => addOnvifDeviceAsStream(profile)}\n                                type=\"button\"\n                              >\n                                Add as Stream\n                              </button>\n                            </td>\n                          </tr>\n                        `)}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              `}\n            </div>\n            <div class=\"flex justify-end p-4 border-t border-gray-200 dark:border-gray-700\">\n              <button \n                id=\"onvif-close-btn\" \n                class=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors\"\n                onClick=${() => setOnvifModalVisible(false)}\n                type=\"button\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      `}\n      \n      ${showCustomNameInput && html`\n        <div id=\"custom-name-modal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 transition-opacity duration-300\">\n          <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full\">\n            <div class=\"flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700\">\n              <h3 class=\"text-lg font-medium\">Stream Name</h3>\n              <span class=\"text-2xl cursor-pointer\" onClick=${() => setShowCustomNameInput(false)}>×</span>\n            </div>\n            <div class=\"p-4\">\n              <div class=\"mb-4\">\n                <label for=\"custom-stream-name\" class=\"block text-sm font-medium mb-1\">Enter a name for this stream:</label>\n                <input \n                  type=\"text\" \n                  id=\"custom-stream-name\" \n                  class=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n                  value=${customStreamName}\n                  onChange=${(e) => setCustomStreamName(e.target.value)}\n                />\n                <p class=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                  This name will be used to identify the stream in the system.\n                </p>\n              </div>\n            </div>\n            <div class=\"flex justify-end p-4 border-t border-gray-200 dark:border-gray-700 space-x-2\">\n              <button \n                class=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors\"\n                onClick=${() => setShowCustomNameInput(false)}\n                type=\"button\"\n              >\n                Cancel\n              </button>\n              <button \n                class=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors\"\n                onClick=${submitOnvifDevice}\n                type=\"button\"\n                disabled=${!customStreamName.trim() || isAddingStream}\n              >\n                ${isAddingStream ? html`\n                  <span class=\"flex items-center\">\n                    Adding\n                    <span class=\"ml-1 flex space-x-1\">\n                      <span class=\"animate-pulse delay-0 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                      <span class=\"animate-pulse delay-150 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                      <span class=\"animate-pulse delay-300 h-1.5 w-1.5 bg-white rounded-full\"></span>\n                    </span>\n                  </span>\n                ` : 'Add Stream'}\n              </button>\n            </div>\n          </div>\n        </div>\n      `}\n    </section>\n  `;\n}\n\n/**\n * Load StreamsView component\n */\nexport function loadStreamsView() {\n  const mainContent = document.getElementById('main-content');\n  if (!mainContent) return;\n  \n  // Render the StreamsView component to the container\n  import('../../preact.min.js').then(({ render }) => {\n    render(html`<${StreamsView} />`, mainContent);\n  });\n}\n"],"names":["StreamsView","streams","setStreams","useState","modalVisible","setModalVisible","onvifModalVisible","setOnvifModalVisible","discoveredDevices","setDiscoveredDevices","deviceProfiles","setDeviceProfiles","selectedDevice","setSelectedDevice","selectedProfile","setSelectedProfile","isDiscovering","setIsDiscovering","onvifCredentials","setOnvifCredentials","username","password","currentStream","setCurrentStream","name","url","enabled","streamingEnabled","width","height","fps","codec","protocol","priority","segment","record","detectionEnabled","detectionModel","detectionThreshold","detectionInterval","preBuffer","postBuffer","detectionModels","setDetectionModels","isEditing","setIsEditing","isLoading","setIsLoading","hasData","setHasData","requestControllerRef","useRef","useEffect","current","createRequestController","loadStreams","loadDetectionModels","abort","async","streamsData","fetchJSON","signal","timeout","retries","retryDelay","length","error","message","console","showStatusMessage","data","models","closeModal","handleInputChange","e","value","type","checked","target","prev","handleCredentialChange","isLoadingProfiles","setIsLoadingProfiles","customStreamName","setCustomStreamName","showCustomNameInput","setShowCustomNameInput","isAddingStream","setIsAddingStream","testOnvifConnection","currentCredentials","enhancedFetch","method","headers","body","JSON","stringify","device","device_service","profiles","getDeviceProfiles","html","openAddStreamModal","recordAudio","ContentLoader","map","stream","detection_based_recording","encodeURIComponent","streamId","toString","segment_duration","detection_threshold","detection_interval","pre_detection_buffer","post_detection_buffer","undefined","streaming_enabled","isOnvif","is_onvif","detection_model","record_audio","openEditStreamModal","confirm","deleteStream","model","id","parseInt","success","info","streamData","is_deleted","devices","ip_address","manufacturer","profile","token","encoding","defaultStreamName","replace","addOnvifDeviceAsStream","device_url","profile_token","stream_name","trim","mainContent","document","getElementById","__vitePreload","render","module","import","then","n","p","meta"],"mappings":"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"}