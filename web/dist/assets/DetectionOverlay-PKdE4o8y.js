import{c as k}from"./preact-app-CvC8761_.js";function E(e,o){e&&(e.stopPropagation(),e.preventDefault()),console.log("DIRECT EXIT FUNCTION CALLED");const t=document.getElementById("live-page");if(!t){console.error("Live page element not found");return}t.classList.remove("fullscreen-mode"),document.body.style.overflow="";const n=document.querySelector(".fullscreen-exit");n?n.remove():console.warn("Exit button not found when trying to remove it");const i=document.getElementById("fullscreen-btn");i?i.style.display="":console.warn("Fullscreen button not found when trying to show it again"),o(!1),console.log("Fullscreen mode exited, state set to false")}function $(e,o){console.log("toggleFullscreen called, current state:",e);const t=document.getElementById("live-page");if(!t){console.error("Live page element not found");return}const n=t.classList.contains("fullscreen-mode");if(console.log("DOM check for fullscreen mode:",n),n)E(null,o);else{console.log("Entering fullscreen mode"),t.classList.add("fullscreen-mode"),document.body.style.overflow="hidden";const i=document.createElement("button");i.className="fullscreen-exit fixed top-4 right-4 w-10 h-10 bg-black/70 text-white rounded-full flex justify-center items-center cursor-pointer z-50 transition-all duration-200 hover:bg-black/85 hover:scale-110 shadow-md",i.innerHTML="âœ•";const a=function(d){console.log("Exit button clicked - STANDALONE HANDLER"),E(d,o)};i.addEventListener("click",a),t.appendChild(i);const s=document.getElementById("fullscreen-btn");s&&(s.style.display="none"),o(!0),console.log("Fullscreen mode entered, state set to true")}}function D(e){const o="video-".concat(e.replace(/\s+/g,"-")),t=document.getElementById(o),n=t?t.closest(".video-cell"):null;if(!n){console.error("Stream not found:",e);return}document.fullscreenElement?document.exitFullscreen():n.requestFullscreen().catch(i=>{console.error("Error attempting to enable fullscreen: ".concat(i.message)),k("Could not enable fullscreen mode: ".concat(i.message))})}function R(e,o,t,n){n[e]&&clearInterval(n[e]);const i=c=>{const l=o,r=l.getContext("2d");if(l.width=t.clientWidth,l.height=t.clientHeight,r.clearRect(0,0,l.width,l.height),!c||c.length===0)return;const w=t.videoWidth,x=t.videoHeight;if(!w||!x){console.log("Video dimensions not available yet, skipping detection drawing");return}const h=w/x,I=l.width/l.height;let f,g,p=0,y=0;h>I?(f=l.width,g=l.width/h,y=(l.height-g)/2):(g=l.height,f=l.height*h,p=(l.width-f)/2),c.forEach(u=>{const m=u.x*f+p,v=u.y*g+y,C=u.width*f,B=u.height*g;r.strokeStyle="rgba(255, 0, 0, 0.8)",r.lineWidth=3,r.strokeRect(m,v,C,B);const b="".concat(u.label," (").concat(Math.round(u.confidence*100),"%)");r.font="14px Arial";const L=r.measureText(b).width;r.fillStyle="rgba(255, 0, 0, 0.7)",r.fillRect(m,v-20,L+10,20),r.fillStyle="white",r.fillText(b,m+5,v-5)})};let a=0,s=1e3;const d=setInterval(()=>{t.videoWidth&&fetch("/api/detection/results/".concat(encodeURIComponent(e))).then(c=>{if(!c.ok)throw new Error("Failed to fetch detection results: ".concat(c.status));return a=0,c.json()}).then(c=>{c&&c.detections&&i(c.detections)}).catch(c=>{console.error("Error fetching detection results for ".concat(e,":"),c),o.getContext("2d").clearRect(0,0,o.width,o.height),a++,a>3&&(clearInterval(d),s=Math.min(5e3,s*2),console.log("Reducing detection polling frequency to ".concat(s,"ms due to errors")),n[e]=setInterval(arguments.callee,s))})},s);return n[e]=d,o.detectionInterval=d,d}function S(e,o){const t="canvas-".concat(e.replace(/\s+/g,"-")),n=document.getElementById(t);n&&n.detectionInterval&&(clearInterval(n.detectionInterval),delete n.detectionInterval),o[e]&&(clearInterval(o[e]),delete o[e])}export{D as a,S as c,E as e,R as s,$ as t};
//# sourceMappingURL=DetectionOverlay-PKdE4o8y.js.map
