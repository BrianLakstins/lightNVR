{"version":3,"mappings":"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","names":["initializeVideoPlayer","stream","videoPlayers","detectionIntervals","videoElementId","videoElement","videoCell","canvasId","canvasOverlay","startDetectionPolling","loadingIndicator","timestamp","hlsStreamUrl","e","handleVideoError","error","addPlayButtonOverlay","auth","isMobile","hls","xhr","url","event","data","response","updatedStream","cleanupVideoPlayer","messageSpan","newTimestamp","newUrl","newHls","newData","currentLevel","refreshTimer","playOverlay","playButton","tapMessage","playHandler","showStatusMessage","streamName","message","errorIndicator","retryButton","streamInfo","errorMsg","cleanupDetectionPolling","stopAllStreams","streams","takeSnapshot","streamId","streamElement","canvas","fileName","showSnapshotPreview","enhanceDownloadButton","overlay","buttons","downloadButton","button","newButton","downloadCanvasAsJpeg","blob","blobUrl","link","updateVideoGrid","videoGridRef","layout","selectedStream","placeholder","streamsToShow","snapshotBtn","fullscreenBtn","toggleStreamFullscreen","loadStreams","setStreams","setSelectedStream","streamPromises","detailedStreams","LiveView","useState","setLayout","isFullscreen","setIsFullscreen","isLoading","setIsLoading","useRef","useEffect","handleEscape","livePage","exitFullscreenMode","handleBeforeUnload","html","_e","__template","toggleFullscreen","_b","_a","_c","LoadingIndicator","_d","loadLiveView","mainContent","__vitePreload","render","_f"],"ignoreList":[],"sources":["../../js/components/preact/VideoPlayer.js","../../js/components/preact/SnapshotManager.js","../../js/components/preact/StreamGrid.js","../../js/components/preact/LiveView.js"],"sourcesContent":["/**\n * Video player functionality for LiveView\n */\n\nimport { showStatusMessage } from './UI.js';\nimport { startDetectionPolling, cleanupDetectionPolling } from './DetectionOverlay.js';\n\n/**\n * Initialize video player for a stream\n * @param {Object} stream - Stream object\n * @param {Object} videoPlayers - Reference to store video player instances\n * @param {Object} detectionIntervals - Reference to store detection intervals\n */\nexport function initializeVideoPlayer(stream, videoPlayers, detectionIntervals) {\n  const videoElementId = `video-${stream.name.replace(/\\s+/g, '-')}`;\n  const videoElement = document.getElementById(videoElementId);\n  const videoCell = videoElement ? videoElement.closest('.video-cell') : null;\n  \n  if (!videoElement || !videoCell) return;\n  \n  // Create canvas overlay for detection bounding boxes\n  const canvasId = `canvas-${stream.name.replace(/\\s+/g, '-')}`;\n  let canvasOverlay = document.getElementById(canvasId);\n  \n  if (!canvasOverlay) {\n    canvasOverlay = document.createElement('canvas');\n    canvasOverlay.id = canvasId;\n    canvasOverlay.className = 'detection-overlay';\n    canvasOverlay.style.position = 'absolute';\n    canvasOverlay.style.top = '0';\n    canvasOverlay.style.left = '0';\n    canvasOverlay.style.width = '100%';\n    canvasOverlay.style.height = '100%';\n    canvasOverlay.style.pointerEvents = 'none'; // Allow clicks to pass through\n    videoCell.appendChild(canvasOverlay);\n  }\n  \n  // Start detection polling if detection is enabled for this stream\n  console.log(`Stream ${stream.name} detection settings:`, {\n    detection_based_recording: stream.detection_based_recording,\n    detection_model: stream.detection_model,\n    detection_threshold: stream.detection_threshold\n  });\n  \n  if (stream.detection_based_recording && stream.detection_model) {\n    console.log(`Starting detection polling for stream ${stream.name}`);\n    startDetectionPolling(stream.name, canvasOverlay, videoElement, detectionIntervals);\n  } else {\n    console.log(`Detection not enabled for stream ${stream.name}`);\n  }\n  \n  // Show loading state\n  const loadingIndicator = videoCell.querySelector('.loading-indicator');\n  if (loadingIndicator) {\n    loadingIndicator.style.display = 'flex';\n  }\n  \n  // Build the HLS stream URL with cache-busting timestamp to prevent stale data\n  const timestamp = Date.now();\n  const hlsStreamUrl = `/hls/${encodeURIComponent(stream.name)}/index.m3u8?_t=${timestamp}`;\n  \n  // Get auth from localStorage\n  const auth = localStorage.getItem('auth');\n  \n  // Ensure auth headers are set for HLS requests\n  console.log(`Initializing video player for stream ${stream.name}`);\n  \n  // Check if HLS is supported natively\n  if (videoElement.canPlayType('application/vnd.apple.mpegurl')) {\n    // Native HLS support (Safari)\n    console.log(`Using native HLS support for stream ${stream.name}`);\n    \n    // Set source directly\n    videoElement.src = hlsStreamUrl;\n    \n    // Hide loading indicator when metadata is loaded\n    videoElement.addEventListener('loadedmetadata', function() {\n      console.log(`Metadata loaded for stream ${stream.name}`);\n      if (loadingIndicator) {\n        loadingIndicator.style.display = 'none';\n      }\n    });\n    \n    // Handle errors\n    videoElement.addEventListener('error', (e) => {\n      console.error(`Video error for stream ${stream.name}:`, videoElement.error);\n      handleVideoError(stream.name, videoElement.error ? videoElement.error.message : 'Unknown error');\n    });\n    \n    // Try to play automatically\n    videoElement.play().catch(error => {\n      console.warn('Auto-play prevented:', error);\n      // Add play button overlay for user interaction\n      addPlayButtonOverlay(videoCell, videoElement);\n    });\n  }\n    // Use HLS.js for browsers that don't support HLS natively\n    else if (window.Hls && window.Hls.isSupported()) {\n        // Get auth from localStorage\n        const auth = localStorage.getItem('auth');\n        \n        // Check if this is a mobile device\n        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n        \n        // Configure HLS.js with settings optimized for the device type\n        const hls = new window.Hls({\n            // Increase buffer settings for mobile devices to improve stability\n            maxBufferLength: isMobile ? 30 : 20,\n            maxMaxBufferLength: isMobile ? 60 : 30,\n            // Increase sync settings for mobile to handle network fluctuations\n            liveSyncDurationCount: isMobile ? 4 : 3,\n            liveMaxLatencyDurationCount: isMobile ? 10 : 6,\n            liveDurationInfinity: false,\n            // Disable low latency mode as it can cause issues on mobile devices\n            lowLatencyMode: false,\n            // Enable worker for better performance\n            enableWorker: true,\n            // Increase timeouts for mobile devices to handle slower networks\n            fragLoadingTimeOut: isMobile ? 60000 : 30000,\n            manifestLoadingTimeOut: isMobile ? 60000 : 30000,\n            levelLoadingTimeOut: isMobile ? 60000 : 30000,\n            // Increase back buffer length for mobile\n            backBufferLength: isMobile ? 60 : 30,\n            // Start with lower quality on mobile for faster initial load\n            startLevel: isMobile ? 0 : -1,\n            // More conservative ABR settings for mobile\n            abrEwmaDefaultEstimate: isMobile ? 1000000 : 500000,\n            abrBandWidthFactor: isMobile ? 0.5 : 0.7,\n            abrBandWidthUpFactor: isMobile ? 0.3 : 0.5,\n            // Add custom headers to all HLS requests\n            xhrSetup: function(xhr, url) {\n                // Add Authorization header if we have auth in localStorage\n                if (auth) {\n                    xhr.setRequestHeader('Authorization', 'Basic ' + auth);\n                }\n                // Always include credentials (cookies)\n                xhr.withCredentials = true;\n            }\n        });\n    \n    hls.loadSource(hlsStreamUrl);\n    hls.attachMedia(videoElement);\n    \n            hls.on(window.Hls.Events.MANIFEST_PARSED, () => {\n                console.log(`Manifest parsed for stream ${stream.name}`);\n                \n                // On mobile, we need to be more careful with autoplay\n                const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n                \n                if (isMobile) {\n                    console.log(`Mobile device detected for stream ${stream.name}, using muted autoplay`);\n                    // For mobile, always mute the video first to allow autoplay\n                    videoElement.muted = true;\n                    \n                    // Hide loading indicator after a short delay to ensure UI is ready\n                    setTimeout(() => {\n                        if (loadingIndicator) {\n                            loadingIndicator.style.display = 'none';\n                        }\n                        \n                        // Try to play with muted audio first (more likely to succeed on mobile)\n                        videoElement.play().then(() => {\n                            console.log(`Autoplay succeeded for stream ${stream.name} on mobile`);\n                        }).catch(error => {\n                            console.warn(`Autoplay failed for stream ${stream.name} on mobile:`, error);\n                            // Show play button if autoplay fails even with muted audio\n                            addPlayButtonOverlay(videoCell, videoElement);\n                        });\n                    }, 500);\n                } else {\n                    // For desktop, proceed as before\n                    if (loadingIndicator) {\n                        loadingIndicator.style.display = 'none';\n                    }\n                    \n                    // Try to play automatically\n                    videoElement.play().catch(error => {\n                        console.warn('Auto-play prevented:', error);\n                        // Add play button overlay for user interaction\n                        addPlayButtonOverlay(videoCell, videoElement);\n                    });\n                }\n            });\n    \n    hls.on(window.Hls.Events.ERROR, (event, data) => {\n      console.warn('HLS error:', data);\n      \n      // Handle fatal errors\n      if (data.fatal) {\n        console.error('Fatal HLS error:', data);\n        hls.destroy();\n        \n        // Check if the stream was recently enabled\n        const videoCell = videoElement.closest('.video-cell');\n        const loadingIndicator = videoCell.querySelector('.loading-indicator');\n        \n        // If the stream was recently enabled (indicated by the loading message),\n        // automatically retry after a short delay\n        if (loadingIndicator && \n            loadingIndicator.querySelector('span').textContent === 'Starting stream...') {\n          \n          console.log(`Stream ${stream.name} failed to load after enabling, retrying in 2 seconds...`);\n          \n          // Show retry message\n          loadingIndicator.querySelector('span').textContent = 'Retrying connection...';\n          \n          // Retry after a delay\n          setTimeout(() => {\n            console.log(`Retrying stream ${stream.name} after failure`);\n            // Fetch updated stream info and reinitialize\n            fetch(`/api/streams/${encodeURIComponent(stream.name)}`)\n              .then(response => response.json())\n              .then(updatedStream => {\n                // Cleanup existing player\n                cleanupVideoPlayer(stream.name, videoPlayers, detectionIntervals);\n                // Reinitialize with updated stream info\n                initializeVideoPlayer(updatedStream, videoPlayers, detectionIntervals);\n              })\n              .catch(error => {\n                console.error(`Error fetching stream info for retry: ${error}`);\n                handleVideoError(stream.name, 'Failed to reconnect after enabling');\n              });\n          }, 2000);\n        } else {\n          // Use a standard retry strategy for all devices\n          console.log(`Implementing standard retry for stream ${stream.name}`);\n          \n          // Show loading indicator with retry message\n          if (loadingIndicator) {\n            loadingIndicator.style.display = 'flex';\n            const messageSpan = loadingIndicator.querySelector('span');\n            if (messageSpan) {\n              messageSpan.textContent = 'Reconnecting to stream...';\n            }\n          }\n          \n          // Try to recover with a new HLS instance after a delay\n          setTimeout(() => {\n            try {\n              // Create a new timestamp to avoid caching issues\n              const newTimestamp = Date.now();\n              const newUrl = `/hls/${encodeURIComponent(stream.name)}/index.m3u8?_t=${newTimestamp}`;\n              \n              // Create a new HLS instance with the same settings as the main instance\n              const newHls = new window.Hls({\n                // Increase buffer settings for mobile devices to improve stability\n                maxBufferLength: isMobile ? 30 : 20,\n                maxMaxBufferLength: isMobile ? 60 : 30,\n                // Increase sync settings for mobile to handle network fluctuations\n                liveSyncDurationCount: isMobile ? 4 : 3,\n                liveMaxLatencyDurationCount: isMobile ? 10 : 6,\n                liveDurationInfinity: false,\n                // Disable low latency mode as it can cause issues on mobile devices\n                lowLatencyMode: false,\n                // Enable worker for better performance\n                enableWorker: true,\n                // Increase timeouts for mobile devices to handle slower networks\n                fragLoadingTimeOut: isMobile ? 60000 : 30000,\n                manifestLoadingTimeOut: isMobile ? 60000 : 30000,\n                levelLoadingTimeOut: isMobile ? 60000 : 30000,\n                // Increase back buffer length for mobile\n                backBufferLength: isMobile ? 60 : 30,\n                // Start with lower quality on mobile for faster initial load\n                startLevel: isMobile ? 0 : -1,\n                // More conservative ABR settings for mobile\n                abrEwmaDefaultEstimate: isMobile ? 1000000 : 500000,\n                abrBandWidthFactor: isMobile ? 0.5 : 0.7,\n                abrBandWidthUpFactor: isMobile ? 0.3 : 0.5,\n                // Add custom headers to all HLS requests\n                xhrSetup: function(xhr, url) {\n                  // Add Authorization header if we have auth in localStorage\n                  if (auth) {\n                    xhr.setRequestHeader('Authorization', 'Basic ' + auth);\n                  }\n                  // Always include credentials (cookies)\n                  xhr.withCredentials = true;\n                }\n              });\n              \n              // Load the new source\n              newHls.loadSource(newUrl);\n              newHls.attachMedia(videoElement);\n              \n              // Store the new HLS instance\n              if (videoCell) {\n                if (videoCell.hlsPlayer) {\n                  videoCell.hlsPlayer.destroy();\n                }\n                videoCell.hlsPlayer = newHls;\n              }\n              \n              // Store in ref for cleanup\n              videoPlayers[stream.name] = { \n                hls: newHls, \n                refreshTimer: videoPlayers[stream.name] ? videoPlayers[stream.name].refreshTimer : null \n              };\n              \n              // Hide loading indicator when media is attached\n              newHls.on(window.Hls.Events.MEDIA_ATTACHED, () => {\n                console.log(`New HLS instance attached for stream ${stream.name}`);\n                if (loadingIndicator) {\n                  loadingIndicator.style.display = 'none';\n                }\n                \n                // Show play button for all devices to ensure consistent behavior\n                addPlayButtonOverlay(videoCell, videoElement);\n              });\n              \n              // Handle errors in the new instance\n              newHls.on(window.Hls.Events.ERROR, (event, newData) => {\n                if (newData.fatal) {\n                  console.error('Fatal error in recovery HLS instance:', newData);\n                  newHls.destroy();\n                  handleVideoError(stream.name, 'Failed to reconnect after multiple attempts');\n                }\n              });\n            } catch (error) {\n              console.error('Error during HLS recovery:', error);\n              handleVideoError(stream.name, 'Failed to reconnect: ' + error.message);\n            }\n          }, 3000);\n        }\n      } else if (data.type === window.Hls.ErrorTypes.NETWORK_ERROR) {\n        // For non-fatal network errors, try to recover\n        console.warn('Network error, attempting to recover:', data);\n        \n        // Try to recover by seeking slightly\n        if (videoElement.currentTime > 0) {\n          try {\n            // Seek to live edge\n            hls.recoverMediaError();\n            videoElement.currentTime = videoElement.duration - 1;\n          } catch (e) {\n            console.error('Error during recovery seek:', e);\n          }\n        }\n        \n        // For fragment load errors, try to switch to a lower quality\n        if (data.details === window.Hls.ErrorDetails.FRAG_LOAD_ERROR ||\n            data.details === window.Hls.ErrorDetails.FRAG_LOAD_TIMEOUT) {\n          \n          try {\n            // Get current level\n            const currentLevel = hls.currentLevel;\n            \n            // If not already at lowest level, switch to a lower one\n            if (currentLevel > 0) {\n              console.log(`Switching from level ${currentLevel} to level 0 due to fragment error`);\n              hls.currentLevel = 0;\n            }\n          } catch (e) {\n            console.error('Error during level switching:', e);\n          }\n        }\n      } else if (data.type === window.Hls.ErrorTypes.MEDIA_ERROR) {\n        // For media errors, try to recover\n        console.warn('Media error, attempting to recover:', data);\n        try {\n          hls.recoverMediaError();\n        } catch (e) {\n          console.error('Error during media error recovery:', e);\n        }\n      }\n    });\n    \n    // Set up a universal refresh interval\n    const refreshInterval = 30000; // 30 seconds for all devices\n    const refreshTimer = setInterval(() => {\n      if (videoCell && videoCell.hlsPlayer) {\n        console.log(`Refreshing HLS stream for ${stream.name}`);\n        const newTimestamp = Date.now();\n        const newUrl = `/hls/${encodeURIComponent(stream.name)}/index.m3u8?_t=${newTimestamp}`;\n        \n        // Check if the player is in a good state before refreshing\n        if (!videoCell.hlsPlayer.autoLevelCapping) {\n          videoCell.hlsPlayer.loadSource(newUrl);\n        } else {\n          console.log(`Skipping refresh for ${stream.name} as it appears to be in recovery mode`);\n        }\n      } else {\n        // Clear interval if video cell or player no longer exists\n        clearInterval(refreshTimer);\n      }\n    }, refreshInterval);\n    \n    // Store hls instance and timer for cleanup\n    videoCell.hlsPlayer = hls;\n    videoCell.refreshTimer = refreshTimer;\n    \n    // Store in ref for cleanup\n    videoPlayers[stream.name] = { hls, refreshTimer };\n  }\n  // Fallback for unsupported browsers\n  else {\n    handleVideoError(stream.name, 'HLS not supported by your browser');\n  }\n}\n\n/**\n * Add play button overlay\n * @param {HTMLElement} videoCell - Video cell element\n * @param {HTMLVideoElement} videoElement - Video element\n */\nexport function addPlayButtonOverlay(videoCell, videoElement) {\n  // Check if play overlay already exists\n  if (videoCell.querySelector('.play-overlay')) {\n    return;\n  }\n  \n  const playOverlay = document.createElement('div');\n  playOverlay.className = 'play-overlay';\n  \n  const playButton = document.createElement('div');\n  playButton.className = 'play-button';\n  playButton.innerHTML = `\n    <svg class=\"w-8 h-8 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clip-rule=\"evenodd\"></path>\n    </svg>\n  `;\n  \n  // Add tap/click message for mobile\n  if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {\n    const tapMessage = document.createElement('div');\n    tapMessage.className = 'tap-message';\n    tapMessage.textContent = 'Tap to play';\n    tapMessage.style.color = 'white';\n    tapMessage.style.marginTop = '10px';\n    tapMessage.style.fontSize = '14px';\n    playButton.appendChild(tapMessage);\n  }\n  \n  playOverlay.appendChild(playButton);\n  videoCell.appendChild(playOverlay);\n  \n  // Use both click and touchend events for better mobile response\n  const playHandler = function() {\n    // Disable the overlay immediately to prevent multiple taps\n    playOverlay.style.pointerEvents = 'none';\n    \n    // Show loading indicator\n    const loadingIndicator = videoCell.querySelector('.loading-indicator');\n    if (loadingIndicator) {\n      loadingIndicator.style.display = 'flex';\n    }\n    \n    // Add a visual feedback that the tap was registered\n    playButton.style.transform = 'scale(0.9)';\n    \n    videoElement.play()\n      .then(() => {\n        playOverlay.remove();\n        if (loadingIndicator) {\n          loadingIndicator.style.display = 'none';\n        }\n      })\n      .catch(error => {\n        console.error('Play failed:', error);\n        \n        // Re-enable the overlay if play fails\n        playOverlay.style.pointerEvents = 'auto';\n        playButton.style.transform = '';\n        \n        if (loadingIndicator) {\n          loadingIndicator.style.display = 'none';\n        }\n        \n        // Show error message\n        showStatusMessage('Auto-play blocked by browser. Please try again or check your browser settings.');\n        \n        // On iOS, we need to mute the video to allow playback without user gesture\n        if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n          videoElement.muted = true;\n          showStatusMessage('Video muted to allow playback on iOS. Tap again to play.');\n        }\n      });\n  };\n  \n  // Add both event listeners for better mobile compatibility\n  playOverlay.addEventListener('click', playHandler);\n  playOverlay.addEventListener('touchend', function(e) {\n    e.preventDefault(); // Prevent default touch behavior\n    playHandler();\n  });\n}\n\n/**\n * Handle video error\n * @param {string} streamName - Name of the stream\n * @param {string} message - Error message\n */\nexport function handleVideoError(streamName, message) {\n  const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n  const videoElement = document.getElementById(videoElementId);\n  const videoCell = videoElement ? videoElement.closest('.video-cell') : null;\n  \n  if (!videoCell) return;\n  \n  // Hide loading indicator\n  const loadingIndicator = videoCell.querySelector('.loading-indicator');\n  if (loadingIndicator) {\n    loadingIndicator.style.display = 'none';\n  }\n  \n  // Create error indicator if it doesn't exist\n  let errorIndicator = videoCell.querySelector('.error-indicator');\n  if (!errorIndicator) {\n    errorIndicator = document.createElement('div');\n    errorIndicator.className = 'error-indicator';\n    videoCell.appendChild(errorIndicator);\n  }\n  \n  errorIndicator.innerHTML = `\n    <div class=\"error-icon\">!</div>\n    <p>${message || 'Stream connection failed'}</p>\n    <button class=\"retry-button mt-4 px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\">Retry</button>\n  `;\n  \n  // Add retry button handler\n  const retryButton = errorIndicator.querySelector('.retry-button');\n  if (retryButton) {\n    retryButton.addEventListener('click', () => {\n      // Show loading indicator again\n      if (loadingIndicator) {\n        loadingIndicator.style.display = 'flex';\n      }\n      \n      // Hide error indicator\n      errorIndicator.style.display = 'none';\n      \n      // Fetch stream info again and reinitialize\n      fetch(`/api/streams/${encodeURIComponent(streamName)}`)\n        .then(response => response.json())\n        .then(streamInfo => {\n          // Cleanup existing player if any\n          cleanupVideoPlayer(streamName, videoPlayers, detectionIntervals);\n          \n          // Reinitialize\n          initializeVideoPlayer(streamInfo, videoPlayers, detectionIntervals);\n        })\n        .catch(error => {\n          console.error('Error fetching stream info:', error);\n          \n          // Show error indicator again with new message\n          errorIndicator.style.display = 'flex';\n          const errorMsg = errorIndicator.querySelector('p');\n          if (errorMsg) {\n            errorMsg.textContent = 'Could not reconnect: ' + error.message;\n          }\n          \n          // Hide loading indicator\n          if (loadingIndicator) {\n            loadingIndicator.style.display = 'none';\n          }\n        });\n    });\n  }\n}\n\n/**\n * Cleanup video player\n * @param {string} streamName - Name of the stream\n * @param {Object} videoPlayers - Reference to video player instances\n * @param {Object} detectionIntervals - Reference to detection intervals\n */\nexport function cleanupVideoPlayer(streamName, videoPlayers, detectionIntervals) {\n  const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n  const videoElement = document.getElementById(videoElementId);\n  const videoCell = videoElement ? videoElement.closest('.video-cell') : null;\n  \n  if (!videoCell) return;\n  \n  // Destroy HLS instance and clear refresh timer if they exist\n  if (videoCell.hlsPlayer) {\n    videoCell.hlsPlayer.destroy();\n    delete videoCell.hlsPlayer;\n  }\n  \n  if (videoCell.refreshTimer) {\n    clearInterval(videoCell.refreshTimer);\n    delete videoCell.refreshTimer;\n  }\n  \n  // Reset video element\n  if (videoElement) {\n    videoElement.pause();\n    videoElement.removeAttribute('src');\n    videoElement.load();\n  }\n  \n  // Reset loading indicator\n  const loadingIndicator = videoCell.querySelector('.loading-indicator');\n  if (loadingIndicator) {\n    loadingIndicator.style.display = 'none';\n  }\n  \n  // Remove error indicator if any\n  const errorIndicator = videoCell.querySelector('.error-indicator');\n  if (errorIndicator) {\n    errorIndicator.remove();\n  }\n  \n  // Remove play overlay if any\n  const playOverlay = videoCell.querySelector('.play-overlay');\n  if (playOverlay) {\n    playOverlay.remove();\n  }\n  \n  // Clean up detection polling\n  cleanupDetectionPolling(streamName, detectionIntervals);\n  \n  // Clean up from refs\n  if (videoPlayers[streamName]) {\n    const { hls, refreshTimer } = videoPlayers[streamName];\n    if (hls) {\n      hls.destroy();\n    }\n    if (refreshTimer) {\n      clearInterval(refreshTimer);\n    }\n    delete videoPlayers[streamName];\n  }\n}\n\n/**\n * Stop all streams\n * @param {Array} streams - Array of stream objects\n * @param {Object} videoPlayers - Reference to video player instances\n * @param {Object} detectionIntervals - Reference to detection intervals\n */\nexport function stopAllStreams(streams, videoPlayers, detectionIntervals) {\n  streams.forEach(stream => {\n    cleanupVideoPlayer(stream.name, videoPlayers, detectionIntervals);\n  });\n}\n","/**\n * Snapshot functionality for LiveView\n * This version focuses exclusively on making direct download work\n */\nimport { showStatusMessage, showSnapshotPreview } from './UI.js';\n\n/**\n * Take a snapshot of a stream\n * @param {string} streamId - ID of the stream\n */\nexport function takeSnapshot(streamId) {\n  // Find the stream by ID or name\n  const streamElement = document.querySelector(`.snapshot-btn[data-id=\"${streamId}\"]`);\n  if (!streamElement) {\n    console.error('Stream element not found for ID:', streamId);\n    return;\n  }\n\n  // Get the stream name from the data attribute\n  const streamName = streamElement.getAttribute('data-name');\n  if (!streamName) {\n    console.error('Stream name not found for ID:', streamId);\n    return;\n  }\n\n  // Find the video element\n  const videoElementId = `video-${streamName.replace(/\\s+/g, '-')}`;\n  const videoElement = document.getElementById(videoElementId);\n  if (!videoElement) {\n    console.error('Video element not found for stream:', streamName);\n    return;\n  }\n\n  // Create a canvas element to capture the frame\n  const canvas = document.createElement('canvas');\n  canvas.width = videoElement.videoWidth;\n  canvas.height = videoElement.videoHeight;\n\n  // Check if we have valid dimensions\n  if (canvas.width === 0 || canvas.height === 0) {\n    console.error('Invalid video dimensions:', canvas.width, canvas.height);\n    showStatusMessage('Cannot take snapshot: Video not loaded or has invalid dimensions');\n    return;\n  }\n\n  // Draw the current frame to the canvas\n  const ctx = canvas.getContext('2d');\n  ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n\n  try {\n    // Save the canvas to global scope for direct access in the overlay\n    window.__snapshotCanvas = canvas;\n    \n    // Generate a filename\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const fileName = `snapshot-${streamName.replace(/\\s+/g, '-')}-${timestamp}.jpg`;\n    window.__snapshotFileName = fileName;\n    \n    // Show the standard preview\n    showSnapshotPreview(canvas.toDataURL('image/jpeg', 0.95), `Snapshot: ${streamName}`);\n    \n    // Find and enhance the download button\n    setTimeout(() => enhanceDownloadButton(), 100);\n    \n    // Show success message\n    showStatusMessage('Snapshot taken successfully');\n  } catch (error) {\n    console.error('Error creating snapshot:', error);\n    showStatusMessage('Failed to create snapshot: ' + error.message);\n  }\n}\n\n/**\n * Find and enhance the download button in the preview\n */\nfunction enhanceDownloadButton() {\n  const overlay = document.getElementById('snapshot-preview-overlay');\n  if (!overlay) {\n    // Try again in 100ms if not found\n    setTimeout(enhanceDownloadButton, 100);\n    return;\n  }\n  \n  // Find download button\n  const buttons = overlay.querySelectorAll('button');\n  let downloadButton = null;\n  \n  for (const button of buttons) {\n    if (button.textContent.includes('Download')) {\n      downloadButton = button;\n      break;\n    }\n  }\n  \n  if (!downloadButton) {\n    // Try again if button not found\n    setTimeout(enhanceDownloadButton, 100);\n    return;\n  }\n  \n  // Replace the download button with our enhanced version\n  const newButton = downloadButton.cloneNode(true);\n  downloadButton.parentNode.replaceChild(newButton, downloadButton);\n  \n  // Add our download handler using Blob+URL.createObjectURL approach\n  newButton.addEventListener('click', () => {\n    // Check if we have a canvas available\n    if (!window.__snapshotCanvas) {\n      console.error('No snapshot canvas available');\n      showStatusMessage('Download failed: No snapshot data available');\n      return;\n    }\n    \n    // Convert canvas to blob and download\n    downloadCanvasAsJpeg(window.__snapshotCanvas, window.__snapshotFileName || 'snapshot.jpg');\n  });\n  \n  console.log('Download button enhanced');\n}\n\n/**\n * Convert canvas to blob and download\n * @param {HTMLCanvasElement} canvas - The canvas to download\n * @param {string} fileName - The filename to use\n */\nfunction downloadCanvasAsJpeg(canvas, fileName) {\n  // Use canvas.toBlob for better browser compatibility\n  canvas.toBlob(function(blob) {\n    if (!blob) {\n      console.error('Failed to create blob from canvas');\n      showStatusMessage('Download failed: Unable to create image data');\n      return;\n    }\n    \n    console.log('Created blob:', blob.size, 'bytes');\n    \n    // Create object URL from blob\n    const blobUrl = URL.createObjectURL(blob);\n    console.log('Created blob URL:', blobUrl);\n    \n    // Create download link\n    const link = document.createElement('a');\n    link.href = blobUrl;\n    link.download = fileName;\n    \n    // Style the link to make it more visible\n    link.style.position = 'absolute';\n    link.style.top = '0';\n    link.style.left = '0';\n    link.style.opacity = '0.01'; // Almost invisible but still technically visible\n    \n    // Add the link to the document\n    document.body.appendChild(link);\n    console.log('Added download link to document');\n    \n    // Trigger click after a short delay\n    setTimeout(() => {\n      console.log('Clicking download link');\n      link.click();\n      \n      // Keep the link in the document for a while\n      setTimeout(() => {\n        // Clean up\n        if (document.body.contains(link)) {\n          document.body.removeChild(link);\n        }\n        URL.revokeObjectURL(blobUrl);\n        console.log('Cleaned up download resources');\n      }, 10000); // Keep resources around for 10 seconds\n    }, 100);\n    \n    showStatusMessage('Download started');\n  }, 'image/jpeg', 0.95); // High quality JPEG\n}","/**\n * Stream grid functionality for LiveView\n */\n\nimport { initializeVideoPlayer } from './VideoPlayer.js';\nimport { takeSnapshot } from './SnapshotManager.js';\nimport { toggleStreamFullscreen } from './FullscreenManager.js';\nimport { showStatusMessage } from './UI.js';\n\n/**\n * Update video grid based on layout and streams\n * @param {HTMLElement} videoGridRef - Reference to video grid element\n * @param {Array} streams - Array of stream objects\n * @param {string} layout - Layout type ('1', '4', '9', '16')\n * @param {string} selectedStream - Selected stream name for single view\n * @param {Object} videoPlayers - Reference to video player instances\n * @param {Object} detectionIntervals - Reference to detection intervals\n */\nexport function updateVideoGrid(\n  videoGridRef, \n  streams, \n  layout, \n  selectedStream, \n  videoPlayers, \n  detectionIntervals\n) {\n  if (!videoGridRef) return;\n  \n  // Clear existing content except placeholder\n  const placeholder = videoGridRef.querySelector('.placeholder');\n  videoGridRef.innerHTML = '';\n  \n  // If placeholder exists and no streams, add it back\n  if (placeholder && streams.length === 0) {\n    videoGridRef.appendChild(placeholder);\n    return;\n  }\n  \n  // Filter streams based on layout and selected stream\n  let streamsToShow = streams;\n  if (layout === '1' && selectedStream) {\n    streamsToShow = streams.filter(stream => stream.name === selectedStream);\n  }\n  \n  // Add video elements for each stream\n  streamsToShow.forEach(stream => {\n    // Ensure we have an ID for the stream (use name as fallback if needed)\n    const streamId = stream.id || stream.name;\n    \n    const videoCell = document.createElement('div');\n    videoCell.className = 'video-cell';\n    \n    videoCell.innerHTML = `\n      <video id=\"video-${stream.name.replace(/\\s+/g, '-')}\" autoplay muted></video>\n      <div class=\"stream-info\">\n        <span>${stream.name}</span>\n        <span>${stream.width}x${stream.height} · ${stream.fps}fps</span>\n        <div class=\"stream-controls\">\n          <button class=\"snapshot-btn\" data-id=\"${streamId}\" data-name=\"${stream.name}\">\n            <span>📷</span> Snapshot\n          </button>\n          <button class=\"fullscreen-btn\" data-id=\"${streamId}\" data-name=\"${stream.name}\">\n            <span>⛶</span> Fullscreen\n          </button>\n        </div>\n      </div>\n      <div class=\"loading-indicator\">\n        <div class=\"loading-spinner\"></div>\n        <span>Connecting...</span>\n      </div>\n    `;\n    \n    videoGridRef.appendChild(videoCell);\n    \n    // Initialize video player\n    initializeVideoPlayer(stream, videoPlayers, detectionIntervals);\n    \n    // Add event listeners for buttons\n    const snapshotBtn = videoCell.querySelector('.snapshot-btn');\n    if (snapshotBtn) {\n      snapshotBtn.addEventListener('click', () => {\n        takeSnapshot(streamId);\n      });\n    }\n    \n    const fullscreenBtn = videoCell.querySelector('.fullscreen-btn');\n    if (fullscreenBtn) {\n      fullscreenBtn.addEventListener('click', () => {\n        toggleStreamFullscreen(stream.name);\n      });\n    }\n  });\n}\n\n/**\n * Load streams from API\n * @param {Function} setStreams - State setter for streams\n * @param {Function} setSelectedStream - State setter for selected stream\n * @param {HTMLElement} videoGridRef - Reference to video grid element\n * @returns {Promise<Array>} Promise resolving to array of streams\n */\nexport async function loadStreams(setStreams, setSelectedStream, videoGridRef) {\n  try {\n    // Fetch streams from API\n    const response = await fetch('/api/streams');\n    if (!response.ok) {\n      throw new Error('Failed to load streams');\n    }\n    \n    const data = await response.json();\n    \n    // For live view, we need to fetch full details for each stream\n    // to get detection settings\n    const streamPromises = (data || []).map(stream => {\n      return fetch(`/api/streams/${encodeURIComponent(stream.id || stream.name)}`)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error(`Failed to load details for stream ${stream.name}`);\n          }\n          return response.json();\n        })\n        .catch(error => {\n          console.error(`Error loading details for stream ${stream.name}:`, error);\n          // Return the basic stream info if we can't get details\n          return stream;\n        });\n    });\n    \n    const detailedStreams = await Promise.all(streamPromises);\n    console.log('Loaded detailed streams for live view:', detailedStreams);\n    \n    // Store streams in state\n    setStreams(detailedStreams || []);\n    \n    // If we have streams, set the first one as selected for single view\n    if (detailedStreams.length > 0) {\n      setSelectedStream(detailedStreams[0].name);\n    }\n    \n    return detailedStreams;\n  } catch (error) {\n    console.error('Error loading streams for live view:', error);\n    showStatusMessage('Error loading streams: ' + error.message);\n    \n    return [];\n  }\n}\n","/**\n * LightNVR Web Interface LiveView Component\n * Preact component for the live view page\n */\n\nimport { h } from '../../preact.min.js';\nimport { html } from '../../html-helper.js';\nimport { useState, useEffect, useRef } from '../../preact.hooks.module.js';\nimport { LoadingIndicator } from './LoadingIndicator.js';\n\n// Import modular components\nimport { loadStreams, updateVideoGrid } from './StreamGrid.js';\nimport { stopAllStreams } from './VideoPlayer.js';\nimport { toggleFullscreen, exitFullscreenMode } from './FullscreenManager.js';\n\n/**\n * LiveView component\n * @returns {JSX.Element} LiveView component\n */\nexport function LiveView() {\n  const [streams, setStreams] = useState([]);\n  const [layout, setLayout] = useState('4');\n  const [selectedStream, setSelectedStream] = useState('');\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const videoGridRef = useRef(null);\n  const videoPlayers = useRef({});\n  const detectionIntervals = useRef({});\n  \n  // Set up event listeners\n  useEffect(() => {\n    // Set up Escape key to exit fullscreen mode\n    const handleEscape = (e) => {\n      if (e.key === 'Escape') {\n        console.log(\"Escape key pressed, current fullscreen state:\", isFullscreen);\n        // Check if we're in fullscreen mode by checking the DOM directly\n        const livePage = document.getElementById('live-page');\n        if (livePage && livePage.classList.contains('fullscreen-mode')) {\n          console.log(\"Detected fullscreen mode via DOM, exiting fullscreen\");\n          exitFullscreenMode(null, setIsFullscreen);\n        }\n      }\n    };\n    \n    document.addEventListener('keydown', handleEscape);\n    \n    // Add event listener to stop streams when leaving the page\n    const handleBeforeUnload = () => {\n      stopAllStreams(streams, videoPlayers.current, detectionIntervals.current);\n    };\n    \n    window.addEventListener('beforeunload', handleBeforeUnload);\n    \n    // Cleanup\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n      stopAllStreams(streams, videoPlayers.current, detectionIntervals.current);\n    };\n  }, []);\n  \n  // Load streams after the component has rendered and videoGridRef is available\n  useEffect(() => {\n    if (videoGridRef.current) {\n      // Set loading state\n      setIsLoading(true);\n      \n      // Load streams from API\n      loadStreams(setStreams, setSelectedStream, videoGridRef.current)\n        .then(() => {\n          // Hide loading indicator when done\n          setIsLoading(false);\n        })\n        .catch(() => {\n          // Hide loading indicator on error too\n          setIsLoading(false);\n        });\n    }\n  }, [videoGridRef.current]);\n  \n  // Update video grid when layout or streams change\n  useEffect(() => {\n    updateVideoGrid(\n      videoGridRef.current, \n      streams, \n      layout, \n      selectedStream, \n      videoPlayers.current, \n      detectionIntervals.current\n    );\n  }, [layout, selectedStream, streams]);\n  \n  return html`\n    <section id=\"live-page\" class=\"page\">\n      <div class=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <div class=\"flex items-center space-x-2\">\n          <h2 class=\"text-xl font-bold mr-4\">Live View</h2>\n          <div class=\"flex space-x-2\">\n            <button \n              id=\"webrtc-toggle-btn\" \n              class=\"px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n              onClick=${() => window.location.href = '/index.html'}\n            >\n              Live View (WebRTC)\n            </button>\n            <button \n              id=\"fullscreen-btn\" \n              class=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n              onClick=${() => toggleFullscreen(isFullscreen, setIsFullscreen)}\n            >\n              Fullscreen\n            </button>\n          </div>\n        </div>\n        <div class=\"controls flex items-center space-x-2\">\n          <select \n            id=\"layout-selector\" \n            class=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600\"\n            value=${layout}\n            onChange=${(e) => setLayout(e.target.value)}\n          >\n            <option value=\"1\">Single View</option>\n            <option value=\"4\" selected>2x2 Grid</option>\n            <option value=\"9\">3x3 Grid</option>\n            <option value=\"16\">4x4 Grid</option>\n          </select>\n          \n          ${layout === '1' && html`\n            <select \n              id=\"stream-selector\" \n              class=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600\"\n              value=${selectedStream}\n              onChange=${(e) => setSelectedStream(e.target.value)}\n            >\n              ${streams.map(stream => html`\n                <option key=${stream.name} value=${stream.name}>${stream.name}</option>\n              `)}\n            </select>\n          `}\n        </div>\n      </div>\n      \n      <div \n        id=\"video-grid\" \n        class=${`video-container layout-${layout}`}\n        ref=${videoGridRef}\n      >\n        ${isLoading ? html`\n          <div class=\"flex justify-center items-center col-span-full row-span-full h-64 w-full\">\n            <${LoadingIndicator} message=\"Loading streams...\" size=\"lg\" />\n          </div>\n        ` : streams.length === 0 ? html`\n          <div class=\"placeholder flex flex-col justify-center items-center col-span-full row-span-full bg-white dark:bg-gray-800 rounded-lg shadow-md text-center p-8\">\n            <p class=\"mb-6 text-gray-600 dark:text-gray-300 text-lg\">No streams configured</p>\n            <a href=\"streams.html\" class=\"btn-primary px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\">Configure Streams</a>\n          </div>\n        ` : null}\n        <!-- Video cells will be dynamically added by the updateVideoGrid function -->\n      </div>\n    </section>\n  `;\n}\n\n/**\n * Load LiveView component\n */\nexport function loadLiveView() {\n  const mainContent = document.getElementById('main-content');\n  if (!mainContent) return;\n  \n  // Render the LiveView component to the container\n  import('../../preact.min.js').then(({ render }) => {\n    render(html`<${LiveView} />`, mainContent);\n  });\n}\n"],"file":"assets/LiveView-ByePH35Z.js"}