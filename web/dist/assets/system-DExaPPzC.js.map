{"version":3,"file":"system-DExaPPzC.js","sources":["../../js/components/preact/system/SystemControls.jsx","../../js/components/preact/system/SystemInfo.jsx","../../js/components/preact/system/MemoryStorage.jsx","../../js/components/preact/system/StreamStorage.jsx","../../js/components/preact/system/NetworkInfo.jsx","../../js/components/preact/system/StreamsInfo.jsx","../../js/components/preact/system/LogsView.jsx","../../js/components/preact/system/SystemUtils.js","../../js/components/preact/system/LogsPoller.jsx","../../js/components/preact/SystemView.jsx","../../js/pages/system-page.jsx"],"sourcesContent":["/**\n * SystemControls Component\n * Provides system restart and shutdown controls\n */\n\n/**\n * SystemControls component\n * @param {Object} props Component props\n * @param {Function} props.restartSystem Function to restart the system\n * @param {Function} props.shutdownSystem Function to shut down the system\n * @param {boolean} props.isRestarting Whether the system is currently restarting\n * @param {boolean} props.isShuttingDown Whether the system is currently shutting down\n * @returns {JSX.Element} SystemControls component\n */\nexport function SystemControls({ restartSystem, shutdownSystem, isRestarting, isShuttingDown }) {\n  return (\n    <div className=\"page-header flex justify-between items-center mb-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n      <h2 className=\"text-xl font-bold\">System</h2>\n      <div className=\"controls space-x-2\">\n        <button\n          id=\"restart-btn\"\n          className=\"px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700 transition-colors focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n          onClick={restartSystem}\n          disabled={isRestarting || isShuttingDown}\n        >\n          Restart\n        </button>\n        <button\n          id=\"shutdown-btn\"\n          className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n          onClick={shutdownSystem}\n          disabled={isRestarting || isShuttingDown}\n        >\n          Shutdown\n        </button>\n      </div>\n    </div>\n  );\n}\n","/**\n * SystemInfo Component\n * Displays basic system information like version, uptime, and CPU details\n */\n\n/**\n * SystemInfo component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @param {Function} props.formatUptime Function to format uptime\n * @returns {JSX.Element} SystemInfo component\n */\nexport function SystemInfo({ systemInfo, formatUptime }) {\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 className=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">System Information</h3>\n      <div className=\"space-y-2\">\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">Version:</span>\n          <span>{systemInfo.version || 'Unknown'}</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">Uptime:</span>\n          <span>{systemInfo.uptime ? formatUptime(systemInfo.uptime) : 'Unknown'}</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">CPU Model:</span>\n          <span>{systemInfo.cpu?.model || 'Unknown'}</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">CPU Cores:</span>\n          <span>{systemInfo.cpu?.cores || 'Unknown'}</span>\n        </div>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"font-medium\">CPU Usage:</span>\n          <div className=\"w-32 bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n            <div\n              className=\"bg-blue-600 h-2.5 rounded-full\"\n              style={{ width: `${systemInfo.cpu?.usage || 0}%` }}\n            ></div>\n          </div>\n          <span>{systemInfo.cpu?.usage ? `${systemInfo.cpu.usage.toFixed(1)}%` : 'Unknown'}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/**\n * MemoryStorage Component\n * Displays memory and storage information with progress bars\n */\n\n/**\n * MemoryStorage component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @param {Function} props.formatBytes Function to format bytes to human-readable size\n * @returns {JSX.Element} MemoryStorage component\n */\nexport function MemoryStorage({ systemInfo, formatBytes }) {\n  // Get memory usage values\n  const lightNvrMemoryUsed = systemInfo.memory?.used || 0;\n  const go2rtcMemoryUsed = systemInfo.go2rtcMemory?.used || 0;\n  const totalSystemMemory = systemInfo.memory?.total || 0;\n\n  // Calculate combined memory usage\n  const combinedMemoryUsed = lightNvrMemoryUsed + go2rtcMemoryUsed;\n\n  // Calculate the percentage of total system memory used by both processes combined\n  const combinedMemoryPercent = totalSystemMemory ?\n    (combinedMemoryUsed / totalSystemMemory * 100).toFixed(1) : 0;\n\n  // Calculate the percentage of each process relative to their combined usage\n  // This ensures the slivers add up to the total width of the progress bar\n  const lightNvrSlicePercent = combinedMemoryUsed ?\n    (lightNvrMemoryUsed / combinedMemoryUsed * 100).toFixed(1) : 0;\n\n  const go2rtcSlicePercent = combinedMemoryUsed ?\n    (go2rtcMemoryUsed / combinedMemoryUsed * 100).toFixed(1) : 0;\n\n  // These variables ensure the slivers add up to 100% of the combined usage bar\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 className=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Memory & Storage</h3>\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex justify-between mb-1\">\n            <span className=\"font-medium\">Process Memory:</span>\n            <div>\n              <span className=\"inline-block px-2 py-0.5 mr-1 text-xs rounded bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">\n                LightNVR: {formatBytes(lightNvrMemoryUsed)}\n              </span>\n              <span className=\"inline-block px-2 py-0.5 text-xs rounded bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                go2rtc: {formatBytes(go2rtcMemoryUsed)}\n              </span>\n            </div>\n          </div>\n          <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1\">\n            <span>Combined: {formatBytes(combinedMemoryUsed)} / {formatBytes(totalSystemMemory)}</span>\n            <span>{combinedMemoryPercent}% of total memory</span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 overflow-hidden\">\n            <div className=\"flex h-full\" style={{ width: `${combinedMemoryPercent}%` }}>\n              <div className=\"bg-blue-600 h-2.5\" style={{ width: `${lightNvrSlicePercent}%` }}></div>\n              <div className=\"bg-green-500 h-2.5\" style={{ width: `${go2rtcSlicePercent}%` }}></div>\n            </div>\n          </div>\n        </div>\n        <div>\n          <div className=\"flex justify-between mb-1\">\n            <span className=\"font-medium\">System Memory:</span>\n            <span>\n              {systemInfo.systemMemory?.used ? formatBytes(systemInfo.systemMemory.used) : '0'} /\n              {systemInfo.systemMemory?.total ? formatBytes(systemInfo.systemMemory.total) : '0'}\n            </span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n            <div\n              className=\"bg-blue-600 h-2.5 rounded-full\"\n              style={{\n                width: `${systemInfo.systemMemory?.total ?\n                  (systemInfo.systemMemory.used / systemInfo.systemMemory.total * 100).toFixed(1) : 0}%`\n              }}\n            ></div>\n          </div>\n        </div>\n        <div>\n          <div className=\"flex justify-between mb-1\">\n            <span className=\"font-medium\">LightNVR Storage:</span>\n            <span>\n              {systemInfo.disk?.used ? formatBytes(systemInfo.disk.used) : '0'} /\n              {systemInfo.disk?.total ? formatBytes(systemInfo.disk.total) : '0'}\n            </span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n            <div\n              className=\"bg-blue-600 h-2.5 rounded-full\"\n              style={{\n                width: `${systemInfo.disk?.total ?\n                  (systemInfo.disk.used / systemInfo.disk.total * 100).toFixed(1) : 0}%`\n              }}\n            ></div>\n          </div>\n        </div>\n        <div>\n          <div className=\"flex justify-between mb-1\">\n            <span className=\"font-medium\">System Storage:</span>\n            <span>\n              {systemInfo.systemDisk?.used ? formatBytes(systemInfo.systemDisk.used) : '0'} /\n              {systemInfo.systemDisk?.total ? formatBytes(systemInfo.systemDisk.total) : '0'}\n            </span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n            <div\n              className=\"bg-blue-600 h-2.5 rounded-full\"\n              style={{\n                width: `${systemInfo.systemDisk?.total ?\n                  (systemInfo.systemDisk.used / systemInfo.systemDisk.total * 100).toFixed(1) : 0}%`\n              }}\n            ></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/**\n * StreamStorage Component\n * Displays storage usage per stream with slivers in a progress bar\n */\n\n/**\n * StreamStorage component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @param {Function} props.formatBytes Function to format bytes to human-readable size\n * @returns {JSX.Element} StreamStorage component\n */\nexport function StreamStorage({ systemInfo, formatBytes }) {\n  // Check if stream storage information is available\n  if (!systemInfo.streamStorage || !Array.isArray(systemInfo.streamStorage) || systemInfo.streamStorage.length === 0) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n        <h3 className=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Stream Storage</h3>\n        <div className=\"text-gray-500 dark:text-gray-400 text-center py-4\">\n          No stream storage information available\n        </div>\n      </div>\n    );\n  }\n\n  // Calculate total storage used by all streams\n  const totalStreamStorage = systemInfo.streamStorage.reduce((total, stream) => total + stream.size, 0);\n\n  // Calculate the percentage of total disk space used by all streams\n  const totalDiskSpace = systemInfo.disk?.total || 0;\n  const totalStreamStoragePercent = totalDiskSpace ?\n    (totalStreamStorage / totalDiskSpace * 100).toFixed(1) : 0;\n\n  // Calculate the percentage of each stream relative to the total stream storage\n  const streamStorageData = systemInfo.streamStorage.map(stream => ({\n    name: stream.name,\n    size: stream.size,\n    count: stream.count,\n    slicePercent: totalStreamStorage ? (stream.size / totalStreamStorage * 100).toFixed(1) : 0\n  }));\n\n  // Sort streams by size (largest first)\n  streamStorageData.sort((a, b) => b.size - a.size);\n\n  // Generate a color for each stream\n  const colors = [\n    'bg-blue-600',\n    'bg-green-500',\n    'bg-yellow-500',\n    'bg-red-500',\n    'bg-purple-500',\n    'bg-pink-500',\n    'bg-indigo-500',\n    'bg-teal-500'\n  ];\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 className=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Stream Storage</h3>\n\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex justify-between mb-1\">\n            <span className=\"font-medium\">Storage per Stream:</span>\n            <div className=\"flex flex-wrap justify-end gap-1\">\n              {streamStorageData.map((stream, index) => (\n                <span\n                  key={stream.name}\n                  className={`inline-block px-2 py-0.5 text-xs rounded ${colors[index % colors.length].replace('bg-', 'bg-opacity-20 bg-')} ${colors[index % colors.length].replace('bg-', 'text-')}`}\n                >\n                  {stream.name}: {formatBytes(stream.size)}\n                </span>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1\">\n            <span>Combined: {formatBytes(totalStreamStorage)} / {formatBytes(totalDiskSpace)}</span>\n            <span>{totalStreamStoragePercent}% of total storage</span>\n          </div>\n\n          <div className=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 overflow-hidden\">\n            <div className=\"flex h-full\" style={{ width: `${totalStreamStoragePercent}%` }}>\n              {streamStorageData.map((stream, index) => (\n                <div\n                  key={stream.name}\n                  className={`${colors[index % colors.length]} h-2.5`}\n                  style={{ width: `${stream.slicePercent}%` }}\n                ></div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"mt-4\">\n            <h4 className=\"font-medium mb-2\">Stream Details:</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n              {streamStorageData.map((stream, index) => (\n                <a\n                  key={stream.name}\n                  href={`recordings.html?stream=${encodeURIComponent(stream.name)}`}\n                  className=\"flex items-center p-2 rounded bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors cursor-pointer\"\n                >\n                  <div className={`w-3 h-3 rounded-full mr-2 ${colors[index % colors.length]}`}></div>\n                  <div>\n                    <div className=\"font-medium\">{stream.name}</div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {formatBytes(stream.size)} ({stream.slicePercent}%) • {stream.count} recordings\n                    </div>\n                  </div>\n                </a>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/**\n * NetworkInfo Component\n * Displays network interface information\n */\n\n/**\n * NetworkInfo component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @returns {JSX.Element} NetworkInfo component\n */\nexport function NetworkInfo({ systemInfo }) {\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 className=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Network Interfaces</h3>\n      <div className=\"space-y-2\">\n        {systemInfo.network?.interfaces?.length ? (\n          systemInfo.network.interfaces.map(iface => (\n            <div key={iface.name} className=\"mb-2 pb-2 border-b border-gray-100 dark:border-gray-700 last:border-0\">\n              <div className=\"flex justify-between\">\n                <span className=\"font-medium\">{iface.name}:</span>\n                <span>{iface.address || 'No IP'}</span>\n              </div>\n              <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                MAC: {iface.mac || 'Unknown'} | {iface.up ? 'Up' : 'Down'}\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"text-gray-500 dark:text-gray-400\">No network interfaces found</div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/**\n * StreamsInfo Component\n * Displays information about streams and recordings\n */\n\n/**\n * StreamsInfo component\n * @param {Object} props Component props\n * @param {Object} props.systemInfo System information object\n * @param {Function} props.formatBytes Function to format bytes to human-readable size\n * @returns {JSX.Element} StreamsInfo component\n */\nexport function StreamsInfo({ systemInfo, formatBytes }) {\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n      <h3 className=\"text-lg font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">Streams & Recordings</h3>\n      <div className=\"space-y-2\">\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">Active Streams:</span>\n          <span>{systemInfo.streams?.active || 0} / {systemInfo.streams?.total || 0}</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">Recordings:</span>\n          <span>{systemInfo.recordings?.count || 0}</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"font-medium\">Recordings Size:</span>\n          <span>{systemInfo.recordings?.size ? formatBytes(systemInfo.recordings.size) : '0'}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/**\n * LogsView Component\n * Displays and manages system logs\n */\n\n/**\n * Format log level with appropriate styling\n *\n * @param {string} level Log level\n * @returns {JSX.Element} Formatted log level badge\n */\nfunction formatLogLevel(level) {\n  // Handle null or undefined level\n  if (level === null || level === undefined) {\n    return (\n      <span className=\"px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\">\n        UNKNOWN\n      </span>\n    );\n  }\n\n  // Convert to lowercase string for case-insensitive comparison\n  const levelLower = String(level).toLowerCase().trim();\n\n  // Match against known log levels\n  if (levelLower === 'error' || levelLower === 'err') {\n    return (\n      <span className=\"px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\">\n        ERROR\n      </span>\n    );\n  } else if (levelLower === 'warning' || levelLower === 'warn') {\n    return (\n      <span className=\"px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\">\n        WARN\n      </span>\n    );\n  } else if (levelLower === 'info') {\n    return (\n      <span className=\"px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">\n        INFO\n      </span>\n    );\n  } else if (levelLower === 'debug' || levelLower === 'dbg') {\n    return (\n      <span className=\"px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\">\n        DEBUG\n      </span>\n    );\n  } else {\n    // For any other value, display it as is (uppercase)\n    const levelText = String(level).toUpperCase();\n    return (\n      <span className=\"px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\">\n        {levelText}\n      </span>\n    );\n  }\n}\n\n/**\n * LogsView component\n * @param {Object} props Component props\n * @param {Array} props.logs Array of log entries\n * @param {string} props.logLevel Current log level filter\n * @param {number} props.logCount Number of logs to display\n * @param {Function} props.setLogLevel Function to set log level\n * @param {Function} props.setLogCount Function to set log count\n * @param {Function} props.loadLogs Function to load logs\n * @param {Function} props.clearLogs Function to clear logs\n * @returns {JSX.Element} LogsView component\n */\nexport function LogsView({ logs, logLevel, logCount, setLogLevel, setLogCount, loadLogs, clearLogs }) {\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4 mb-4\">\n      <div className=\"flex justify-between items-center mb-4 pb-2 border-b border-gray-200 dark:border-gray-700\">\n        <h3 className=\"text-lg font-semibold\">System Logs</h3>\n        <div className=\"flex space-x-2\">\n          <select\n            id=\"log-level\"\n            className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n            value={logLevel}\n            onChange={e => {\n              const newLevel = e.target.value;\n              console.log(`LogsView: Log level changed from ${logLevel} to ${newLevel}`);\n              setLogLevel(newLevel);\n            }}\n          >\n            <option value=\"error\">Error</option>\n            <option value=\"warning\">Warning</option>\n            <option value=\"info\">Info</option>\n            <option value=\"debug\">Debug</option>\n          </select>\n          <select\n            id=\"log-count\"\n            className=\"px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n            value={logCount}\n            onChange={e => setLogCount(parseInt(e.target.value, 10))}\n          >\n            <option value=\"50\">50 lines</option>\n            <option value=\"100\">100 lines</option>\n            <option value=\"200\">200 lines</option>\n            <option value=\"500\">500 lines</option>\n          </select>\n          <button\n            id=\"refresh-logs-btn\"\n            className=\"px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n            onClick={loadLogs}\n          >\n            Refresh\n          </button>\n          <button\n            id=\"clear-logs-btn\"\n            className=\"px-3 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800\"\n            onClick={clearLogs}\n          >\n            Clear Logs\n          </button>\n        </div>\n      </div>\n      <div className=\"logs-container bg-gray-100 dark:bg-gray-900 rounded p-4 overflow-auto max-h-96 font-mono text-sm\">\n        {logs.length === 0 ? (\n          <div className=\"text-gray-500 dark:text-gray-400\">No logs found</div>\n        ) : (\n          logs.map((log, index) => (\n            <div key={index} className=\"log-entry mb-1 last:mb-0\">\n              <span className=\"text-gray-500 dark:text-gray-400\">{log.timestamp}</span>\n              <span className=\"mx-2\">{formatLogLevel(log.level)}</span>\n              <span className={`log-message ${log.level === 'error' ? 'text-red-600 dark:text-red-400' : ''}`}>\n                {log.message}\n              </span>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","/**\n * SystemUtils\n * Utility functions for the system components\n */\n\n/**\n * Format bytes to human-readable size\n * \n * @param {number} bytes Number of bytes\n * @param {number} decimals Number of decimal places\n * @returns {string} Formatted size string\n */\nexport function formatBytes(bytes, decimals = 1) {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  \n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/**\n * Format uptime in seconds to a human-readable string\n * \n * @param {number} seconds Uptime in seconds\n * @returns {string} Formatted uptime string\n */\nexport function formatUptime(seconds) {\n  const days = Math.floor(seconds / 86400);\n  const hours = Math.floor((seconds % 86400) / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n  \n  let result = '';\n  if (days > 0) result += `${days}d `;\n  if (hours > 0 || days > 0) result += `${hours}h `;\n  if (minutes > 0 || hours > 0 || days > 0) result += `${minutes}m `;\n  result += `${secs}s`;\n  \n  return result;\n}\n\n/**\n * Check if a log level meets the minimum required level\n * This is a JavaScript implementation of the same logic used in the backend\n * \n * @param {string} logLevel The log level to check\n * @param {string} minLevel The minimum required level\n * @returns {boolean} True if the log level meets the minimum, false otherwise\n */\nexport function log_level_meets_minimum(logLevel, minLevel) {\n  // Special case: if minLevel is debug, always return true\n  // This ensures all log levels are shown when debug is selected\n  if (String(minLevel || '').toLowerCase() === 'debug') {\n    return true;\n  }\n  \n  // Convert log levels to numeric values for comparison\n  let levelValue = 2; // Default to INFO (2)\n  let minValue = 2;   // Default to INFO (2)\n  \n  // Map log level strings to numeric values\n  // ERROR = 0, WARNING = 1, INFO = 2, DEBUG = 3\n  const logLevelLower = String(logLevel || '').toLowerCase();\n  const minLevelLower = String(minLevel || '').toLowerCase();\n  \n  if (logLevelLower === 'error') {\n    levelValue = 0;\n  } else if (logLevelLower === 'warning' || logLevelLower === 'warn') {\n    levelValue = 1;\n  } else if (logLevelLower === 'info') {\n    levelValue = 2;\n  } else if (logLevelLower === 'debug') {\n    levelValue = 3;\n  }\n  \n  if (minLevelLower === 'error') {\n    minValue = 0;\n  } else if (minLevelLower === 'warning' || minLevelLower === 'warn') {\n    minValue = 1;\n  } else if (minLevelLower === 'info') {\n    minValue = 2;\n  } else if (minLevelLower === 'debug') {\n    minValue = 3;\n  }\n  \n  // Return true if the log level is less than or equal to the minimum level\n  // Lower values are higher priority (ERROR = 0 is highest priority)\n  // We want to include all levels with higher or equal priority to the minimum\n  return levelValue <= minValue;\n}\n","/**\n * LogsPoller Component\n * Handles polling for logs via WebSocket instead of automatic updates\n */\n\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { log_level_meets_minimum } from './SystemUtils.js';\nimport { fetchJSON } from '../../../fetch-utils.js';\n\n/**\n * LogsPoller component\n * @param {Object} props Component props\n * @param {string} props.logLevel Current log level filter\n * @param {number} props.logCount Number of logs to display\n * @param {Function} props.onLogsReceived Callback function when logs are received\n * @returns {JSX.Element} LogsPoller component (invisible)\n */\nexport function LogsPoller({ logLevel, logCount, onLogsReceived }) {\n  const [isPolling, setIsPolling] = useState(false);\n  const pollingIntervalRef = useRef(null);\n  // Initialize with null, but will persist between renders\n  const lastTimestampRef = useRef(null);\n\n  // Try to load the last timestamp from localStorage on initial render\n  useEffect(() => {\n    const savedTimestamp = localStorage.getItem('lastLogTimestamp');\n    if (savedTimestamp) {\n      console.log('Loaded last log timestamp from localStorage:', savedTimestamp);\n      lastTimestampRef.current = savedTimestamp;\n    }\n  }, []);\n\n  // Function to fetch logs via WebSocket\n  const fetchLogs = () => {\n    if (!window.wsClient) {\n      console.log('WebSocket client not available, will retry on next poll');\n      return;\n    }\n\n    if (!window.wsClient.isConnected()) {\n      console.log('WebSocket not connected, attempting to connect');\n      window.wsClient.connect();\n      // Skip this fetch attempt, will retry on next poll\n      return;\n    }\n\n    // Only fetch if we're on the system page\n    if (!document.getElementById('system-page')) {\n      console.log('Not on system page, skipping log fetch');\n      return;\n    }\n\n    console.log('Fetching logs via WebSocket with level: debug (to get all logs, will filter on frontend)');\n\n    // Create fetch request payload\n    const payload = {\n      level: 'debug', // Always request debug level to get all logs\n      count: logCount\n    };\n\n    // Add last timestamp if available for pagination\n    if (lastTimestampRef.current) {\n      payload.last_timestamp = lastTimestampRef.current;\n    }\n\n    // Add client ID to the payload\n    if (window.wsClient.getClientId) {\n      payload.client_id = window.wsClient.getClientId();\n    }\n\n    console.log('Sending fetch request with payload:', payload);\n\n    // Send fetch request\n    try {\n      // Always use the send method which properly formats the message\n      const success = window.wsClient.send('fetch', 'system/logs', payload);\n      if (!success) {\n        console.warn('Failed to send fetch request, will retry on next poll');\n      } else {\n        console.log('Fetch request sent successfully');\n      }\n    } catch (error) {\n      console.error('Error sending fetch request:', error);\n    }\n  };\n\n  // Set up WebSocket handler for log updates - only once on mount\n  useEffect(() => {\n    // If WebSocket client is not available, set up a check to try again later\n    if (!window.wsClient) {\n      console.log('WebSocket client not available, will check again later');\n      const checkInterval = setInterval(() => {\n        if (window.wsClient) {\n          console.log('WebSocket client now available, setting up handlers');\n          clearInterval(checkInterval);\n          setupHandlers();\n        }\n      }, 1000);\n\n      // Clean up interval on unmount\n      return () => {\n        clearInterval(checkInterval);\n      };\n    } else {\n      // WebSocket client is available, set up handlers immediately\n      return setupHandlers();\n    }\n\n    // Function to set up WebSocket handlers\n    function setupHandlers() {\n      console.log('Setting up WebSocket handlers for logs');\n\n      // Handler for log updates\n      const handleLogsUpdate = (payload) => {\n        console.log('Received logs update via WebSocket:', payload);\n\n        // Only process updates if we're on the system page\n        if (!document.getElementById('system-page')) {\n          console.log('Not on system page, ignoring log update');\n          return;\n        }\n\n        if (payload && payload.logs && Array.isArray(payload.logs)) {\n          // Clean and normalize logs\n          const cleanedLogs = payload.logs.map(log => {\n            // Simply use the component attributes directly\n            const normalizedLog = {\n              timestamp: log.timestamp || 'Unknown',\n              level: log.level || 'info',\n              message: log.message || ''\n            };\n\n            // Convert level to lowercase for consistency\n            if (normalizedLog.level) {\n              normalizedLog.level = normalizedLog.level.toLowerCase();\n            }\n\n            // Normalize 'warn' to 'warning'\n            if (normalizedLog.level === 'warn') {\n              normalizedLog.level = 'warning';\n            }\n\n            return normalizedLog;\n          });\n\n          // Don't filter logs here - let the parent component handle filtering\n          // This ensures we're always using the most current logLevel value\n\n          // Update last timestamp for pagination if available\n          if (payload.latest_timestamp) {\n            lastTimestampRef.current = payload.latest_timestamp;\n            // Save to localStorage for persistence between page refreshes\n            localStorage.setItem('lastLogTimestamp', payload.latest_timestamp);\n            console.log('Updated and saved last log timestamp:', payload.latest_timestamp);\n          }\n\n          // Call the callback with the logs - parent will filter\n          if (cleanedLogs.length > 0) {\n            console.log(`Received ${cleanedLogs.length} logs via WebSocket`);\n\n            // Sort logs by timestamp (newest first)\n            cleanedLogs.sort((a, b) => {\n              return new Date(b.timestamp) - new Date(a.timestamp);\n            });\n\n            // Call the callback with the WebSocket logs - don't filter here\n            // This ensures WebSocket debug logs are included when debug is selected in UI\n            onLogsReceived(cleanedLogs);\n          } else {\n            console.log('No logs received via WebSocket');\n          }\n        }\n      };\n\n      // Register handler for system logs updates - only once\n      console.log('Registering handler for system/logs via WebSocket (once on mount)');\n      window.wsClient.on('update', 'system/logs', handleLogsUpdate);\n\n      // Clean up on unmount\n      return () => {\n        // Unregister handler\n        console.log('Unregistering handler for system/logs via WebSocket (component unmounting)');\n        window.wsClient.off('update', 'system/logs');\n\n        // Clear polling interval\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n          pollingIntervalRef.current = null;\n        }\n      };\n    }\n  }, []); // Empty dependency array - only run once on mount\n\n  // Start/stop polling when isPolling changes\n  useEffect(() => {\n    // Start polling\n    if (isPolling && !pollingIntervalRef.current) {\n      console.log('Starting log polling');\n\n      // Subscribe to system logs topic\n      if (window.wsClient && typeof window.wsClient.subscribe === 'function') {\n        console.log('Subscribing to system/logs via WebSocket for polling');\n        // Include the last timestamp in the subscription if available\n        const subscriptionParams = {\n          level: 'debug',\n          ...(lastTimestampRef.current ? { since: lastTimestampRef.current } : {})\n        };\n        window.wsClient.subscribe('system/logs', subscriptionParams);\n        console.log(`Subscribed to system/logs with level: debug and last_timestamp: ${lastTimestampRef.current || 'NULL'}`);\n      }\n\n      // Fetch logs immediately\n      fetchLogs();\n\n      // Set up polling interval (every 5 seconds)\n      console.log('Setting up polling interval for logs (every 5 seconds)');\n      pollingIntervalRef.current = setInterval(() => {\n        console.log('Polling interval triggered, fetching logs...');\n        fetchLogs();\n      }, 5000);\n    }\n    // Stop polling\n    else if (!isPolling && pollingIntervalRef.current) {\n      console.log('Stopping log polling');\n\n      // Unsubscribe from system logs topic\n      if (window.wsClient && typeof window.wsClient.unsubscribe === 'function') {\n        console.log('Unsubscribing from system/logs via WebSocket');\n        window.wsClient.unsubscribe('system/logs');\n      }\n\n      clearInterval(pollingIntervalRef.current);\n      pollingIntervalRef.current = null;\n    }\n\n    // Clean up on unmount\n    return () => {\n      if (pollingIntervalRef.current) {\n        clearInterval(pollingIntervalRef.current);\n        pollingIntervalRef.current = null;\n      }\n\n      // Unsubscribe from system logs topic\n      if (window.wsClient && typeof window.wsClient.unsubscribe === 'function') {\n        console.log('Unsubscribing from system/logs via WebSocket on cleanup');\n        window.wsClient.unsubscribe('system/logs');\n      }\n    };\n  }, [isPolling, logLevel]);\n\n  // Listen for manual refresh events\n  useEffect(() => {\n    const handleRefreshEvent = () => {\n      console.log('Received refresh-logs-websocket event, triggering fetch');\n      fetchLogs();\n    };\n\n    window.addEventListener('refresh-logs-websocket', handleRefreshEvent);\n\n    return () => {\n      window.removeEventListener('refresh-logs-websocket', handleRefreshEvent);\n    };\n  }, []);\n\n  // Start polling when component mounts and update when log level changes\n  useEffect(() => {\n    console.log(`LogsPoller: Setting up polling with log level ${logLevel}`);\n    setIsPolling(false); // Stop any existing polling\n\n    // Small delay to ensure any previous polling is cleaned up\n    setTimeout(() => {\n      setIsPolling(true); // Start polling with new parameters\n    }, 100);\n\n    // Clean up on unmount\n    return () => {\n      console.log('LogsPoller: Cleaning up on unmount');\n      setIsPolling(false);\n    };\n  }, [logLevel, logCount]);\n\n  // This component doesn't render anything visible\n  return null;\n}\n","/**\n * LightNVR Web Interface SystemView Component\n * Preact component for the system page\n */\n\nimport { useState, useEffect, useRef } from 'preact/hooks';\nimport { showStatusMessage } from './ToastContainer.jsx';\nimport { ContentLoader } from './LoadingIndicator.jsx';\nimport { useQuery, useMutation, fetchJSON } from '../../query-client.js';\n\n// Import system components\nimport { SystemControls } from './system/SystemControls.jsx';\nimport { SystemInfo } from './system/SystemInfo.jsx';\nimport { MemoryStorage } from './system/MemoryStorage.jsx';\nimport { StreamStorage } from './system/StreamStorage.jsx';\nimport { NetworkInfo } from './system/NetworkInfo.jsx';\nimport { StreamsInfo } from './system/StreamsInfo.jsx';\nimport { LogsView } from './system/LogsView.jsx';\nimport { LogsPoller } from './system/LogsPoller.jsx';\n\n// Import utility functions\nimport { formatBytes, formatUptime, log_level_meets_minimum } from './system/SystemUtils.js';\n\n/**\n * SystemView component\n * @returns {JSX.Element} SystemView component\n */\nexport function SystemView() {\n  // Define all state variables first\n  const [systemInfo, setSystemInfo] = useState({\n    version: '',\n    uptime: '',\n    cpu: {\n      model: '',\n      cores: 0,\n      usage: 0\n    },\n    memory: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    go2rtcMemory: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    systemMemory: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    disk: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    systemDisk: {\n      total: 0,\n      used: 0,\n      free: 0\n    },\n    network: {\n      interfaces: []\n    },\n    streams: {\n      active: 0,\n      total: 0\n    },\n    recordings: {\n      count: 0,\n      size: 0\n    }\n  });\n  const [logs, setLogs] = useState([]);\n  const [logLevel, setLogLevel] = useState('debug');\n  const logLevelRef = useRef('debug');\n  const [logCount, setLogCount] = useState(100);\n  const [isRestarting, setIsRestarting] = useState(false);\n  const [isShuttingDown, setIsShuttingDown] = useState(false);\n  const [hasData, setHasData] = useState(false);\n\n  // Define all query hooks next\n  const {\n    data: systemInfoData,\n    isLoading,\n    error: systemInfoError,\n    refetch: refetchSystemInfo\n  } = useQuery(\n    ['systemInfo'],\n    '/api/system/info',\n    {\n      timeout: 15000,\n      retries: 2,\n      retryDelay: 1000\n    }\n  );\n\n  // Define all mutation hooks next\n  const clearLogsMutation = useMutation({\n    mutationKey: ['clearLogs'],\n    mutationFn: async () => {\n      return await fetchJSON('/api/system/logs/clear', {\n        method: 'POST',\n        timeout: 10000,\n        retries: 1\n      });\n    },\n    onSuccess: () => {\n      showStatusMessage('Logs cleared successfully');\n      setLogs([]);\n    },\n    onError: (error) => {\n      console.error('Error clearing logs:', error);\n      showStatusMessage(`Error clearing logs: ${error.message}`);\n    }\n  });\n\n  // Then define all handler functions\n  const handleSetLogLevel = (newLevel) => {\n    console.log(`SystemView: Setting log level from ${logLevel} to ${newLevel}`);\n    setLogLevel(newLevel);\n    logLevelRef.current = newLevel;\n  };\n\n  const handleLogsReceived = (newLogs) => {\n    console.log('SystemView received new logs:', newLogs.length);\n    const currentLogLevel = logLevelRef.current;\n    const filteredLogs = newLogs.filter(log => log_level_meets_minimum(log.level, currentLogLevel));\n    setLogs(filteredLogs);\n  };\n\n  // Update hasData based on systemInfoData\n  useEffect(() => {\n    if (systemInfoData) {\n      setHasData(true);\n    }\n  }, [systemInfoData]);\n\n  // Restart system mutation\n  const restartSystemMutation = useMutation({\n    mutationFn: async () => {\n      return await fetchJSON('/api/system/restart', {\n        method: 'POST',\n        timeout: 30000, // 30 second timeout for system restart\n        retries: 0      // No retries for system restart\n      });\n    },\n    onMutate: () => {\n      setIsRestarting(true);\n      showStatusMessage('Restarting system...');\n    },\n    onSuccess: () => {\n      showStatusMessage('System is restarting. Please wait...');\n      // Wait for system to restart\n      setTimeout(() => {\n        window.location.reload();\n      }, 10000);\n    },\n    onError: (error) => {\n      console.error('Error restarting system:', error);\n      showStatusMessage(`Error restarting system: ${error.message}`);\n      setIsRestarting(false);\n    }\n  });\n\n  // Shutdown system mutation\n  const shutdownSystemMutation = useMutation({\n    mutationFn: async () => {\n      return await fetchJSON('/api/system/shutdown', {\n        method: 'POST',\n        timeout: 30000, // 30 second timeout for system shutdown\n        retries: 0      // No retries for system shutdown\n      });\n    },\n    onMutate: () => {\n      setIsShuttingDown(true);\n      showStatusMessage('Shutting down system...');\n    },\n    onSuccess: () => {\n      showStatusMessage('System is shutting down. You will need to manually restart it.');\n    },\n    onError: (error) => {\n      console.error('Error shutting down system:', error);\n      showStatusMessage(`Error shutting down system: ${error.message}`);\n      setIsShuttingDown(false);\n    }\n  });\n\n  // Update systemInfo state when data is loaded\n  useEffect(() => {\n    if (systemInfoData) {\n      setSystemInfo(systemInfoData);\n    }\n  }, [systemInfoData]);\n\n  // Component cleanup on unmount\n  useEffect(() => {\n    return () => {\n      console.log('SystemView component unmounting');\n    };\n  }, []);\n\n  // Clear logs function\n  const clearLogs = () => {\n    if (!confirm('Are you sure you want to clear all logs?')) {\n      return;\n    }\n\n    clearLogsMutation.mutate();\n  };\n\n  // Restart system function\n  const restartSystem = () => {\n    if (!confirm('Are you sure you want to restart the system?')) {\n      return;\n    }\n\n    restartSystemMutation.mutate();\n  };\n\n  // Shutdown system function\n  const shutdownSystem = () => {\n    if (!confirm('Are you sure you want to shut down the system?')) {\n      return;\n    }\n\n    shutdownSystemMutation.mutate();\n  };\n\n  // Component initialization\n  useEffect(() => {\n    console.log('SystemView component initialized');\n  }, []);\n\n  return (\n    <section id=\"system-page\" className=\"page\">\n      <SystemControls\n        restartSystem={restartSystem}\n        shutdownSystem={shutdownSystem}\n        isRestarting={isRestarting}\n        isShuttingDown={isShuttingDown}\n      />\n\n      <ContentLoader\n        isLoading={isLoading}\n        hasData={hasData}\n        loadingMessage=\"Loading system information...\"\n        emptyMessage=\"System information not available. Please try again later.\"\n      >\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n          <SystemInfo systemInfo={systemInfo} formatUptime={formatUptime} />\n          <MemoryStorage systemInfo={systemInfo} formatBytes={formatBytes} />\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-4 mb-4\">\n          <StreamStorage systemInfo={systemInfo} formatBytes={formatBytes} />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n          <NetworkInfo systemInfo={systemInfo} />\n          <StreamsInfo systemInfo={systemInfo} formatBytes={formatBytes} />\n        </div>\n\n        <LogsView\n          logs={logs}\n          logLevel={logLevel}\n          logCount={logCount}\n          setLogLevel={handleSetLogLevel}\n          setLogCount={setLogCount}\n          loadLogs={() => {\n            // Trigger a manual log refresh\n            console.log('Manually triggering log refresh');\n            const event = new CustomEvent('refresh-logs');\n            window.dispatchEvent(event);\n          }}\n          clearLogs={clearLogs}\n        />\n\n        <LogsPoller\n          logLevel={logLevel}\n          logCount={logCount}\n          onLogsReceived={handleLogsReceived}\n        />\n      </ContentLoader>\n    </section>\n  );\n}\n","/**\n * LightNVR Web Interface Users Page\n * Entry point for the users page\n */\n\nimport { render } from 'preact';\nimport { SystemView } from '../components/preact/SystemView.jsx';\nimport { QueryClientProvider, queryClient } from '../query-client.js';\nimport {Header} from \"../components/preact/Header.jsx\";\nimport {Footer} from \"../components/preact/Footer.jsx\";\nimport { ToastContainer } from \"../components/preact/ToastContainer.jsx\";\n\n// Render the UsersView component when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Get the container element\n    const container = document.getElementById('main-content');\n\n    if (container) {\n        render(\n            <QueryClientProvider client={queryClient}>\n                <Header />\n                <ToastContainer />\n                <SystemView />\n                <Footer />\n            </QueryClientProvider>,\n            container\n        );\n    }\n});\n"],"names":["SystemControls","restartSystem","shutdownSystem","isRestarting","isShuttingDown","jsxs","jsx","SystemInfo","systemInfo","formatUptime","_a","_b","_c","_d","MemoryStorage","formatBytes","lightNvrMemoryUsed","go2rtcMemoryUsed","totalSystemMemory","combinedMemoryUsed","combinedMemoryPercent","lightNvrSlicePercent","go2rtcSlicePercent","_e","_f","_g","_h","_i","_j","_k","_l","StreamStorage","totalStreamStorage","total","stream","totalDiskSpace","totalStreamStoragePercent","streamStorageData","a","b","colors","index","NetworkInfo","iface","StreamsInfo","formatLogLevel","level","levelLower","levelText","LogsView","logs","logLevel","logCount","setLogLevel","setLogCount","loadLogs","clearLogs","e","newLevel","log","bytes","decimals","k","dm","sizes","i","seconds","days","hours","minutes","secs","result","log_level_meets_minimum","minLevel","levelValue","minValue","logLevelLower","minLevelLower","LogsPoller","onLogsReceived","isPolling","setIsPolling","useState","pollingIntervalRef","useRef","lastTimestampRef","useEffect","savedTimestamp","fetchLogs","payload","error","setupHandlers","checkInterval","handleLogsUpdate","cleanedLogs","normalizedLog","subscriptionParams","handleRefreshEvent","SystemView","setSystemInfo","setLogs","logLevelRef","setIsRestarting","setIsShuttingDown","hasData","setHasData","systemInfoData","isLoading","systemInfoError","refetchSystemInfo","useQuery","clearLogsMutation","useMutation","fetchJSON","showStatusMessage","handleSetLogLevel","handleLogsReceived","newLogs","currentLogLevel","filteredLogs","restartSystemMutation","shutdownSystemMutation","ContentLoader","event","container","render","QueryClientProvider","queryClient","Header","ToastContainer","Footer"],"mappings":"gVAcO,SAASA,EAAe,CAAE,cAAAC,EAAe,eAAAC,EAAgB,aAAAC,EAAc,eAAAC,GAAkB,CAE5F,OAAAC,EAAC,MAAI,CAAA,UAAU,qGACb,SAAA,CAACC,EAAA,KAAA,CAAG,UAAU,oBAAoB,SAAM,SAAA,EACxCD,EAAC,MAAI,CAAA,UAAU,qBACb,SAAA,CAAAC,EAAC,SAAA,CACC,GAAG,cACH,UAAU,6OACV,QAASL,EACT,SAAUE,GAAgBC,EAC3B,SAAA,SAAA,CAED,EACAE,EAAC,SAAA,CACC,GAAG,eACH,UAAU,oOACV,QAASJ,EACT,SAAUC,GAAgBC,EAC3B,SAAA,UAAA,CAAA,CAED,CACF,CAAA,CAAA,EACF,CAEJ,CC1BO,SAASG,EAAW,CAAE,WAAAC,EAAY,aAAAC,GAAgB,aAErD,OAAAJ,EAAC,MAAI,CAAA,UAAU,kDACb,SAAA,CAACC,EAAA,KAAA,CAAG,UAAU,gFAAgF,SAAkB,qBAAA,EAChHD,EAAC,MAAI,CAAA,UAAU,YACb,SAAA,CAACA,EAAA,MAAA,CAAI,UAAU,uBACb,SAAA,CAACC,EAAA,OAAA,CAAK,UAAU,cAAc,SAAQ,WAAA,EACrCA,EAAA,OAAA,CAAM,SAAWE,EAAA,SAAW,SAAU,CAAA,CAAA,EACzC,EACAH,EAAC,MAAI,CAAA,UAAU,uBACb,SAAA,CAACC,EAAA,OAAA,CAAK,UAAU,cAAc,SAAO,UAAA,EACrCA,EAAC,QAAM,SAAWE,EAAA,OAASC,EAAaD,EAAW,MAAM,EAAI,SAAU,CAAA,CAAA,EACzE,EACAH,EAAC,MAAI,CAAA,UAAU,uBACb,SAAA,CAACC,EAAA,OAAA,CAAK,UAAU,cAAc,SAAU,aAAA,EACvCA,EAAA,OAAA,CAAM,WAAWI,EAAAF,EAAA,MAAA,YAAAE,EAAK,QAAS,SAAU,CAAA,CAAA,EAC5C,EACAL,EAAC,MAAI,CAAA,UAAU,uBACb,SAAA,CAACC,EAAA,OAAA,CAAK,UAAU,cAAc,SAAU,aAAA,EACvCA,EAAA,OAAA,CAAM,WAAWK,EAAAH,EAAA,MAAA,YAAAG,EAAK,QAAS,SAAU,CAAA,CAAA,EAC5C,EACAN,EAAC,MAAI,CAAA,UAAU,oCACb,SAAA,CAACC,EAAA,OAAA,CAAK,UAAU,cAAc,SAAU,aAAA,EACxCA,EAAC,MAAI,CAAA,UAAU,uDACb,SAAAA,EAAC,MAAA,CACC,UAAU,iCACV,MAAO,CAAE,MAAO,GAAG,SAAAM,EAAAJ,EAAW,MAAX,YAAAI,EAAgB,QAAS,EAAC,IAAI,CAAA,CAAA,EAErD,EACCN,EAAA,OAAA,CAAM,UAAWO,EAAAL,EAAA,MAAA,MAAAK,EAAK,MAAQ,GAAG,OAAAL,EAAW,IAAI,MAAM,QAAQ,CAAC,EAAC,KAAM,SAAU,CAAA,CAAA,CACnF,CAAA,CAAA,CACF,CAAA,CAAA,EACF,CAEJ,CClCO,SAASM,EAAc,CAAE,WAAAN,EAAY,YAAAO,GAAe,6BAEnD,MAAAC,IAAqBN,EAAAF,EAAW,SAAX,YAAAE,EAAmB,OAAQ,EAChDO,IAAmBN,EAAAH,EAAW,eAAX,YAAAG,EAAyB,OAAQ,EACpDO,IAAoBN,EAAAJ,EAAW,SAAX,YAAAI,EAAmB,QAAS,EAGhDO,EAAqBH,EAAqBC,EAG1CG,EAAwBF,GAC3BC,EAAqBD,EAAoB,KAAK,QAAQ,CAAC,EAAI,EAIxDG,EAAuBF,GAC1BH,EAAqBG,EAAqB,KAAK,QAAQ,CAAC,EAAI,EAEzDG,EAAqBH,GACxBF,EAAmBE,EAAqB,KAAK,QAAQ,CAAC,EAAI,EAK3D,OAAAd,EAAC,MAAI,CAAA,UAAU,kDACb,SAAA,CAACC,EAAA,KAAA,CAAG,UAAU,gFAAgF,SAAgB,mBAAA,EAC9GD,EAAC,MAAI,CAAA,UAAU,YACb,SAAA,CAAAA,EAAC,MACC,CAAA,SAAA,CAACA,EAAA,MAAA,CAAI,UAAU,4BACb,SAAA,CAACC,EAAA,OAAA,CAAK,UAAU,cAAc,SAAe,kBAAA,IAC5C,MACC,CAAA,SAAA,CAACD,EAAA,OAAA,CAAK,UAAU,8GAA8G,SAAA,CAAA,aACjHU,EAAYC,CAAkB,CAAA,EAC3C,EACAX,EAAC,OAAK,CAAA,UAAU,6GAA6G,SAAA,CAAA,WAClHU,EAAYE,CAAgB,CAAA,CACvC,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EACAZ,EAAC,MAAI,CAAA,UAAU,qEACb,SAAA,CAAAA,EAAC,OAAK,CAAA,SAAA,CAAA,aAAWU,EAAYI,CAAkB,EAAE,MAAIJ,EAAYG,CAAiB,CAAA,EAAE,IACnF,OAAM,CAAA,SAAA,CAAAE,EAAsB,mBAAA,CAAiB,CAAA,CAAA,EAChD,EACCd,EAAA,MAAA,CAAI,UAAU,yEACb,WAAC,MAAI,CAAA,UAAU,cAAc,MAAO,CAAE,MAAO,GAAG,OAAAc,EAAqB,IACnE,EAAA,SAAA,CAACd,EAAA,MAAA,CAAI,UAAU,oBAAoB,MAAO,CAAE,MAAO,GAAG,OAAAe,EAAoB,IAAO,CAAA,CAAA,EACjFf,EAAC,MAAI,CAAA,UAAU,qBAAqB,MAAO,CAAE,MAAO,GAAG,OAAAgB,EAAkB,IAAA,CAAO,CAAA,CAAA,CAAA,CAClF,CACF,CAAA,CAAA,EACF,IACC,MACC,CAAA,SAAA,CAACjB,EAAA,MAAA,CAAI,UAAU,4BACb,SAAA,CAACC,EAAA,OAAA,CAAK,UAAU,cAAc,SAAc,iBAAA,IAC3C,OACE,CAAA,SAAA,EAAAO,EAAAL,EAAW,eAAX,MAAAK,EAAyB,KAAOE,EAAYP,EAAW,aAAa,IAAI,EAAI,IAAI,MAChFe,EAAAf,EAAW,eAAX,MAAAe,EAAyB,MAAQR,EAAYP,EAAW,aAAa,KAAK,EAAI,GAAA,CACjF,CAAA,CAAA,EACF,EACAF,EAAC,MAAI,CAAA,UAAU,yDACb,SAAAA,EAAC,MAAA,CACC,UAAU,iCACV,MAAO,CACL,MAAO,GAAG,QAAAkB,EAAAhB,EAAW,eAAX,MAAAgB,EAAyB,OAChChB,EAAW,aAAa,KAAOA,EAAW,aAAa,MAAQ,KAAK,QAAQ,CAAC,EAAI,EAAC,IAAA,CACvF,CAAA,CAEJ,CAAA,CAAA,EACF,IACC,MACC,CAAA,SAAA,CAACH,EAAA,MAAA,CAAI,UAAU,4BACb,SAAA,CAACC,EAAA,OAAA,CAAK,UAAU,cAAc,SAAiB,oBAAA,IAC9C,OACE,CAAA,SAAA,EAAAmB,EAAAjB,EAAW,OAAX,MAAAiB,EAAiB,KAAOV,EAAYP,EAAW,KAAK,IAAI,EAAI,IAAI,MAChEkB,EAAAlB,EAAW,OAAX,MAAAkB,EAAiB,MAAQX,EAAYP,EAAW,KAAK,KAAK,EAAI,GAAA,CACjE,CAAA,CAAA,EACF,EACAF,EAAC,MAAI,CAAA,UAAU,yDACb,SAAAA,EAAC,MAAA,CACC,UAAU,iCACV,MAAO,CACL,MAAO,GAAG,QAAAqB,EAAAnB,EAAW,OAAX,MAAAmB,EAAiB,OACxBnB,EAAW,KAAK,KAAOA,EAAW,KAAK,MAAQ,KAAK,QAAQ,CAAC,EAAI,EAAC,IAAA,CACvE,CAAA,CAEJ,CAAA,CAAA,EACF,IACC,MACC,CAAA,SAAA,CAACH,EAAA,MAAA,CAAI,UAAU,4BACb,SAAA,CAACC,EAAA,OAAA,CAAK,UAAU,cAAc,SAAe,kBAAA,IAC5C,OACE,CAAA,SAAA,EAAAsB,EAAApB,EAAW,aAAX,MAAAoB,EAAuB,KAAOb,EAAYP,EAAW,WAAW,IAAI,EAAI,IAAI,MAC5EqB,EAAArB,EAAW,aAAX,MAAAqB,EAAuB,MAAQd,EAAYP,EAAW,WAAW,KAAK,EAAI,GAAA,CAC7E,CAAA,CAAA,EACF,EACAF,EAAC,MAAI,CAAA,UAAU,yDACb,SAAAA,EAAC,MAAA,CACC,UAAU,iCACV,MAAO,CACL,MAAO,GAAG,QAAAwB,EAAAtB,EAAW,aAAX,MAAAsB,EAAuB,OAC9BtB,EAAW,WAAW,KAAOA,EAAW,WAAW,MAAQ,KAAK,QAAQ,CAAC,EAAI,EAAC,IAAA,CACnF,CAAA,CAEJ,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,EACF,CAEJ,CC3GO,SAASuB,EAAc,CAAE,WAAAvB,EAAY,YAAAO,GAAe,OAEzD,GAAI,CAACP,EAAW,eAAiB,CAAC,MAAM,QAAQA,EAAW,aAAa,GAAKA,EAAW,cAAc,SAAW,EAE7G,OAAAH,EAAC,MAAI,CAAA,UAAU,kDACb,SAAA,CAACC,EAAA,KAAA,CAAG,UAAU,gFAAgF,SAAc,iBAAA,EAC3GA,EAAA,MAAA,CAAI,UAAU,oDAAoD,SAEnE,yCAAA,CAAA,CAAA,EACF,EAKE,MAAA0B,EAAqBxB,EAAW,cAAc,OAAO,CAACyB,EAAOC,IAAWD,EAAQC,EAAO,KAAM,CAAC,EAG9FC,IAAiBzB,EAAAF,EAAW,OAAX,YAAAE,EAAiB,QAAS,EAC3C0B,EAA4BD,GAC/BH,EAAqBG,EAAiB,KAAK,QAAQ,CAAC,EAAI,EAGrDE,EAAoB7B,EAAW,cAAc,IAAe0B,IAAA,CAChE,KAAMA,EAAO,KACb,KAAMA,EAAO,KACb,MAAOA,EAAO,MACd,aAAcF,GAAsBE,EAAO,KAAOF,EAAqB,KAAK,QAAQ,CAAC,EAAI,CAAA,EACzF,EAGFK,EAAkB,KAAK,CAACC,EAAGC,IAAMA,EAAE,KAAOD,EAAE,IAAI,EAGhD,MAAME,EAAS,CACb,cACA,eACA,gBACA,aACA,gBACA,cACA,gBACA,aACF,EAGE,OAAAnC,EAAC,MAAI,CAAA,UAAU,kDACb,SAAA,CAACC,EAAA,KAAA,CAAG,UAAU,gFAAgF,SAAc,iBAAA,EAE3GA,EAAA,MAAA,CAAI,UAAU,YACb,WAAC,MACC,CAAA,SAAA,CAACD,EAAA,MAAA,CAAI,UAAU,4BACb,SAAA,CAACC,EAAA,OAAA,CAAK,UAAU,cAAc,SAAmB,sBAAA,EACjDA,EAAC,OAAI,UAAU,mCACZ,WAAkB,IAAI,CAAC4B,EAAQO,IAC9BpC,EAAC,OAAA,CAEC,UAAW,4CAA4C,OAAAmC,EAAOC,EAAQD,EAAO,MAAM,EAAE,QAAQ,MAAO,mBAAmB,EAAC,KAAI,OAAAA,EAAOC,EAAQD,EAAO,MAAM,EAAE,QAAQ,MAAO,OAAO,GAE/K,SAAA,CAAON,EAAA,KAAK,KAAGnB,EAAYmB,EAAO,IAAI,CAAA,CAAA,EAHlCA,EAAO,IAAA,CAKf,CACH,CAAA,CAAA,EACF,EAEA7B,EAAC,MAAI,CAAA,UAAU,qEACb,SAAA,CAAAA,EAAC,OAAK,CAAA,SAAA,CAAA,aAAWU,EAAYiB,CAAkB,EAAE,MAAIjB,EAAYoB,CAAc,CAAA,EAAE,IAChF,OAAM,CAAA,SAAA,CAAAC,EAA0B,oBAAA,CAAkB,CAAA,CAAA,EACrD,IAEC,MAAI,CAAA,UAAU,yEACb,SAAC9B,EAAA,MAAA,CAAI,UAAU,cAAc,MAAO,CAAE,MAAO,GAAG,OAAA8B,EAAyB,MACtE,WAAkB,IAAI,CAACF,EAAQO,IAC9BnC,EAAC,MAAA,CAEC,UAAW,GAAG,OAAAkC,EAAOC,EAAQD,EAAO,MAAM,EAAC,UAC3C,MAAO,CAAE,MAAO,GAAG,OAAAN,EAAO,aAAY,IAAI,CAAA,EAFrCA,EAAO,IAAA,CAIf,EACH,CACF,CAAA,EAEA7B,EAAC,MAAI,CAAA,UAAU,OACb,SAAA,CAACC,EAAA,KAAA,CAAG,UAAU,mBAAmB,SAAe,kBAAA,EAChDA,EAAC,OAAI,UAAU,wCACZ,WAAkB,IAAI,CAAC4B,EAAQO,IAC9BpC,EAAC,IAAA,CAEC,KAAM,0BAA0B,0BAAmB6B,EAAO,IAAI,GAC9D,UAAU,sIAEV,SAAA,CAAC5B,EAAA,MAAA,CAAI,UAAW,6BAA6B,OAAAkC,EAAOC,EAAQD,EAAO,MAAM,EAAK,CAAA,IAC7E,MACC,CAAA,SAAA,CAAAlC,EAAC,MAAI,CAAA,UAAU,cAAe,SAAA4B,EAAO,KAAK,EAC1C7B,EAAC,MAAI,CAAA,UAAU,2CACZ,SAAA,CAAAU,EAAYmB,EAAO,IAAI,EAAE,KAAGA,EAAO,aAAa,QAAMA,EAAO,MAAM,aAAA,CACtE,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,EAVKA,EAAO,IAAA,CAYf,CACH,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAAA,EACF,CAEJ,CC1GgB,SAAAQ,EAAY,CAAE,WAAAlC,GAAc,SAExC,OAAAH,EAAC,MAAI,CAAA,UAAU,kDACb,SAAA,CAACC,EAAA,KAAA,CAAG,UAAU,gFAAgF,SAAkB,qBAAA,IAC/G,MAAI,CAAA,UAAU,YACZ,UAAAK,GAAAD,EAAAF,EAAW,UAAX,YAAAE,EAAoB,aAApB,MAAAC,EAAgC,OAC/BH,EAAW,QAAQ,WAAW,IAAImC,GAC/BtC,EAAA,MAAA,CAAqB,UAAU,wEAC9B,SAAA,CAACA,EAAA,MAAA,CAAI,UAAU,uBACb,SAAA,CAACA,EAAA,OAAA,CAAK,UAAU,cAAe,SAAA,CAAMsC,EAAA,KAAK,GAAA,EAAC,EAC1CrC,EAAA,OAAA,CAAM,SAAMqC,EAAA,SAAW,OAAQ,CAAA,CAAA,EAClC,EACAtC,EAAC,MAAI,CAAA,UAAU,2CAA2C,SAAA,CAAA,QAClDsC,EAAM,KAAO,UAAU,MAAIA,EAAM,GAAK,KAAO,MAAA,CACrD,CAAA,CAPQ,CAAA,EAAAA,EAAM,IAQhB,CACD,IAEA,MAAI,CAAA,UAAU,mCAAmC,SAAA,6BAA2B,CAAA,CAEjF,CAAA,CAAA,EACF,CAEJ,CCtBO,SAASC,EAAY,CAAE,WAAApC,EAAY,YAAAO,GAAe,aAErD,OAAAV,EAAC,MAAI,CAAA,UAAU,kDACb,SAAA,CAACC,EAAA,KAAA,CAAG,UAAU,gFAAgF,SAAoB,uBAAA,EAClHD,EAAC,MAAI,CAAA,UAAU,YACb,SAAA,CAACA,EAAA,MAAA,CAAI,UAAU,uBACb,SAAA,CAACC,EAAA,OAAA,CAAK,UAAU,cAAc,SAAe,kBAAA,IAC5C,OAAM,CAAA,SAAA,GAAAI,EAAAF,EAAW,UAAX,YAAAE,EAAoB,SAAU,EAAE,QAAIC,EAAAH,EAAW,UAAX,YAAAG,EAAoB,QAAS,CAAA,CAAE,CAAA,CAAA,EAC5E,EACAN,EAAC,MAAI,CAAA,UAAU,uBACb,SAAA,CAACC,EAAA,OAAA,CAAK,UAAU,cAAc,SAAW,cAAA,EACxCA,EAAA,OAAA,CAAM,WAAWM,EAAAJ,EAAA,aAAA,YAAAI,EAAY,QAAS,CAAE,CAAA,CAAA,EAC3C,EACAP,EAAC,MAAI,CAAA,UAAU,uBACb,SAAA,CAACC,EAAA,OAAA,CAAK,UAAU,cAAc,SAAgB,mBAAA,EAC9CA,EAAC,OAAM,CAAA,UAAAO,EAAAL,EAAW,aAAX,MAAAK,EAAuB,KAAOE,EAAYP,EAAW,WAAW,IAAI,EAAI,GAAI,CAAA,CAAA,CACrF,CAAA,CAAA,CACF,CAAA,CAAA,EACF,CAEJ,CCrBA,SAASqC,EAAeC,EAAO,CAEzB,GAAAA,GAAU,KACZ,OACGxC,EAAA,OAAA,CAAK,UAAU,2GAA2G,SAE3H,UAAA,EAKJ,MAAMyC,EAAa,OAAOD,CAAK,EAAE,YAAA,EAAc,KAAK,EAGhD,GAAAC,IAAe,SAAWA,IAAe,MAC3C,OACGzC,EAAA,OAAA,CAAK,UAAU,uGAAuG,SAEvH,QAAA,EAEO,GAAAyC,IAAe,WAAaA,IAAe,OACpD,OACGzC,EAAA,OAAA,CAAK,UAAU,mHAAmH,SAEnI,OAAA,EAEJ,GAAWyC,IAAe,OACxB,OACGzC,EAAA,OAAA,CAAK,UAAU,2GAA2G,SAE3H,OAAA,EAEO,GAAAyC,IAAe,SAAWA,IAAe,MAClD,OACGzC,EAAA,OAAA,CAAK,UAAU,2GAA2G,SAE3H,QAAA,EAEG,CAEL,MAAM0C,EAAY,OAAOF,CAAK,EAAE,YAAY,EAC5C,OACGxC,EAAA,OAAA,CAAK,UAAU,2GACb,SACH0C,EAAA,CAAA,CAGN,CAcgB,SAAAC,GAAS,CAAE,KAAAC,EAAM,SAAAC,EAAU,SAAAC,EAAU,YAAAC,EAAa,YAAAC,EAAa,SAAAC,EAAU,UAAAC,GAAa,CAElG,OAAAnD,EAAC,MAAI,CAAA,UAAU,uDACb,SAAA,CAACA,EAAA,MAAA,CAAI,UAAU,4FACb,SAAA,CAACC,EAAA,KAAA,CAAG,UAAU,wBAAwB,SAAW,cAAA,EACjDD,EAAC,MAAI,CAAA,UAAU,iBACb,SAAA,CAAAA,EAAC,SAAA,CACC,GAAG,YACH,UAAU,2KACV,MAAO8C,EACP,SAAeM,GAAA,CACP,MAAAC,EAAWD,EAAE,OAAO,MAC1B,QAAQ,IAAI,oCAAoC,OAAAN,EAAQ,QAAO,OAAAO,EAAU,EACzEL,EAAYK,CAAQ,CACtB,EAEA,SAAA,CAACpD,EAAA,SAAA,CAAO,MAAM,QAAQ,SAAK,QAAA,EAC1BA,EAAA,SAAA,CAAO,MAAM,UAAU,SAAO,UAAA,EAC9BA,EAAA,SAAA,CAAO,MAAM,OAAO,SAAI,OAAA,EACxBA,EAAA,SAAA,CAAO,MAAM,QAAQ,SAAK,OAAA,CAAA,CAAA,CAAA,CAC7B,EACAD,EAAC,SAAA,CACC,GAAG,YACH,UAAU,2KACV,MAAO+C,EACP,YAAeE,EAAY,SAASG,EAAE,OAAO,MAAO,EAAE,CAAC,EAEvD,SAAA,CAACnD,EAAA,SAAA,CAAO,MAAM,KAAK,SAAQ,WAAA,EAC1BA,EAAA,SAAA,CAAO,MAAM,MAAM,SAAS,YAAA,EAC5BA,EAAA,SAAA,CAAO,MAAM,MAAM,SAAS,YAAA,EAC5BA,EAAA,SAAA,CAAO,MAAM,MAAM,SAAS,WAAA,CAAA,CAAA,CAAA,CAC/B,EACAA,EAAC,SAAA,CACC,GAAG,mBACH,UAAU,uLACV,QAASiD,EACV,SAAA,SAAA,CAED,EACAjD,EAAC,SAAA,CACC,GAAG,iBACH,UAAU,oLACV,QAASkD,EACV,SAAA,YAAA,CAAA,CAED,CACF,CAAA,CAAA,EACF,EACAlD,EAAC,OAAI,UAAU,mGACZ,WAAK,SAAW,IACd,MAAI,CAAA,UAAU,mCAAmC,SAAa,eAAA,CAAA,EAE/D4C,EAAK,IAAI,CAACS,EAAKlB,IACbpC,EAAC,MAAgB,CAAA,UAAU,2BACzB,SAAA,CAAAC,EAAC,OAAK,CAAA,UAAU,mCAAoC,SAAAqD,EAAI,UAAU,IACjE,OAAK,CAAA,UAAU,OAAQ,SAAed,EAAAc,EAAI,KAAK,EAAE,EAClDrD,EAAC,OAAK,CAAA,UAAW,eAAe,OAAAqD,EAAI,QAAU,QAAU,iCAAmC,IACxF,SAAAA,EAAI,OACP,CAAA,CAAA,CALQ,EAAAlB,CAMV,CACD,CAEL,CAAA,CAAA,EACF,CAEJ,CC7HO,SAAS1B,EAAY6C,EAAOC,EAAW,EAAG,CAC/C,GAAID,IAAU,EAAG,MAAO,UAExB,MAAME,EAAI,KACJC,EAAKF,EAAW,EAAI,EAAIA,EACxBG,EAAQ,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAI,EAEhEC,EAAI,KAAK,MAAM,KAAK,IAAIL,CAAK,EAAI,KAAK,IAAIE,CAAC,CAAC,EAElD,OAAO,YAAYF,EAAQ,KAAK,IAAIE,EAAGG,CAAC,GAAG,QAAQF,CAAE,CAAC,EAAI,IAAMC,EAAMC,CAAC,CACzE,CAQO,SAASxD,GAAayD,EAAS,CACpC,MAAMC,EAAO,KAAK,MAAMD,EAAU,KAAK,EACjCE,EAAQ,KAAK,MAAOF,EAAU,MAAS,IAAI,EAC3CG,EAAU,KAAK,MAAOH,EAAU,KAAQ,EAAE,EAC1CI,EAAO,KAAK,MAAMJ,EAAU,EAAE,EAEpC,IAAIK,EAAS,GACb,OAAIJ,EAAO,IAAGI,GAAU,GAAG,OAAAJ,EAAI,QAC3BC,EAAQ,GAAKD,EAAO,KAAGI,GAAU,GAAG,OAAAH,EAAK,QACzCC,EAAU,GAAKD,EAAQ,GAAKD,EAAO,KAAGI,GAAU,GAAG,OAAAF,EAAO,OAC9DE,GAAU,GAAG,OAAAD,EAAI,KAEVC,CACT,CAUO,SAASC,GAAwBrB,EAAUsB,EAAU,CAG1D,GAAI,OAAOA,GAAY,EAAE,EAAE,YAAW,IAAO,QAC3C,MAAO,GAIT,IAAIC,EAAa,EACbC,EAAW,EAIf,MAAMC,EAAgB,OAAOzB,GAAY,EAAE,EAAE,YAAa,EACpD0B,EAAgB,OAAOJ,GAAY,EAAE,EAAE,YAAa,EAE1D,OAAIG,IAAkB,QACpBF,EAAa,EACJE,IAAkB,WAAaA,IAAkB,OAC1DF,EAAa,EACJE,IAAkB,OAC3BF,EAAa,EACJE,IAAkB,UAC3BF,EAAa,GAGXG,IAAkB,QACpBF,EAAW,EACFE,IAAkB,WAAaA,IAAkB,OAC1DF,EAAW,EACFE,IAAkB,OAC3BF,EAAW,EACFE,IAAkB,UAC3BF,EAAW,GAMND,GAAcC,CACvB,CC5EO,SAASG,GAAW,CAAE,SAAA3B,EAAU,SAAAC,EAAU,eAAA2B,GAAkB,CACjE,KAAM,CAACC,EAAWC,CAAY,EAAIC,EAAS,EAAK,EAC1CC,EAAqBC,EAAO,IAAI,EAEhCC,EAAmBD,EAAO,IAAI,EAGpCE,EAAU,IAAM,CACR,MAAAC,EAAiB,aAAa,QAAQ,kBAAkB,EAC1DA,IACM,QAAA,IAAI,+CAAgDA,CAAc,EAC1EF,EAAiB,QAAUE,EAE/B,EAAG,EAAE,EAGL,MAAMC,EAAY,IAAM,CAClB,GAAA,CAAC,OAAO,SAAU,CACpB,QAAQ,IAAI,yDAAyD,EACrE,MAAA,CAGF,GAAI,CAAC,OAAO,SAAS,cAAe,CAClC,QAAQ,IAAI,gDAAgD,EAC5D,OAAO,SAAS,QAAQ,EAExB,MAAA,CAIF,GAAI,CAAC,SAAS,eAAe,aAAa,EAAG,CAC3C,QAAQ,IAAI,wCAAwC,EACpD,MAAA,CAGF,QAAQ,IAAI,0FAA0F,EAGtG,MAAMC,EAAU,CACd,MAAO,QACP,MAAOrC,CACT,EAGIiC,EAAiB,UACnBI,EAAQ,eAAiBJ,EAAiB,SAIxC,OAAO,SAAS,cACVI,EAAA,UAAY,OAAO,SAAS,YAAY,GAG1C,QAAA,IAAI,sCAAuCA,CAAO,EAGtD,GAAA,CAEc,OAAO,SAAS,KAAK,QAAS,cAAeA,CAAO,EAIlE,QAAQ,IAAI,iCAAiC,EAF7C,QAAQ,KAAK,uDAAuD,QAI/DC,EAAO,CACN,QAAA,MAAM,+BAAgCA,CAAK,CAAA,CAEvD,EAGAJ,OAAAA,EAAU,IAAM,CAEV,GAAC,OAAO,SAgBV,OAAOK,EAAc,EAhBD,CACpB,QAAQ,IAAI,wDAAwD,EAC9D,MAAAC,EAAgB,YAAY,IAAM,CAClC,OAAO,WACT,QAAQ,IAAI,qDAAqD,EACjE,cAAcA,CAAa,EACbD,EAAA,IAEf,GAAI,EAGP,MAAO,IAAM,CACX,cAAcC,CAAa,CAC7B,CAAA,CAOF,SAASD,GAAgB,CACvB,QAAQ,IAAI,wCAAwC,EAG9C,MAAAE,EAAoBJ,GAAY,CAIpC,GAHQ,QAAA,IAAI,sCAAuCA,CAAO,EAGtD,CAAC,SAAS,eAAe,aAAa,EAAG,CAC3C,QAAQ,IAAI,yCAAyC,EACrD,MAAA,CAGF,GAAIA,GAAWA,EAAQ,MAAQ,MAAM,QAAQA,EAAQ,IAAI,EAAG,CAE1D,MAAMK,EAAcL,EAAQ,KAAK,IAAW9B,GAAA,CAE1C,MAAMoC,EAAgB,CACpB,UAAWpC,EAAI,WAAa,UAC5B,MAAOA,EAAI,OAAS,OACpB,QAASA,EAAI,SAAW,EAC1B,EAGA,OAAIoC,EAAc,QACFA,EAAA,MAAQA,EAAc,MAAM,YAAY,GAIpDA,EAAc,QAAU,SAC1BA,EAAc,MAAQ,WAGjBA,CAAA,CACR,EAMGN,EAAQ,mBACVJ,EAAiB,QAAUI,EAAQ,iBAEtB,aAAA,QAAQ,mBAAoBA,EAAQ,gBAAgB,EACzD,QAAA,IAAI,wCAAyCA,EAAQ,gBAAgB,GAI3EK,EAAY,OAAS,GACvB,QAAQ,IAAI,YAAY,OAAAA,EAAY,OAAM,sBAAqB,EAGnDA,EAAA,KAAK,CAACxD,EAAGC,IACZ,IAAI,KAAKA,EAAE,SAAS,EAAI,IAAI,KAAKD,EAAE,SAAS,CACpD,EAIDyC,EAAee,CAAW,GAE1B,QAAQ,IAAI,gCAAgC,CAC9C,CAEJ,EAGA,eAAQ,IAAI,mEAAmE,EAC/E,OAAO,SAAS,GAAG,SAAU,cAAeD,CAAgB,EAGrD,IAAM,CAEX,QAAQ,IAAI,4EAA4E,EACjF,OAAA,SAAS,IAAI,SAAU,aAAa,EAGvCV,EAAmB,UACrB,cAAcA,EAAmB,OAAO,EACxCA,EAAmB,QAAU,KAEjC,CAAA,CAEJ,EAAG,EAAE,EAGLG,EAAU,IAAM,CAEV,GAAAN,GAAa,CAACG,EAAmB,QAAS,CAI5C,GAHA,QAAQ,IAAI,sBAAsB,EAG9B,OAAO,UAAY,OAAO,OAAO,SAAS,WAAc,WAAY,CACtE,QAAQ,IAAI,sDAAsD,EAElE,MAAMa,EAAqB,CACzB,MAAO,QACP,GAAIX,EAAiB,QAAU,CAAE,MAAOA,EAAiB,OAAA,EAAY,CAAA,CACvE,EACO,OAAA,SAAS,UAAU,cAAeW,CAAkB,EAC3D,QAAQ,IAAI,mEAAmE,OAAAX,EAAiB,SAAW,OAAQ,CAAA,CAI3GG,EAAA,EAGV,QAAQ,IAAI,wDAAwD,EACjDL,EAAA,QAAU,YAAY,IAAM,CAC7C,QAAQ,IAAI,8CAA8C,EAChDK,EAAA,GACT,GAAI,CAGA,KAAA,CAACR,GAAaG,EAAmB,UACxC,QAAQ,IAAI,sBAAsB,EAG9B,OAAO,UAAY,OAAO,OAAO,SAAS,aAAgB,aAC5D,QAAQ,IAAI,8CAA8C,EACnD,OAAA,SAAS,YAAY,aAAa,GAG3C,cAAcA,EAAmB,OAAO,EACxCA,EAAmB,QAAU,MAI/B,MAAO,IAAM,CACPA,EAAmB,UACrB,cAAcA,EAAmB,OAAO,EACxCA,EAAmB,QAAU,MAI3B,OAAO,UAAY,OAAO,OAAO,SAAS,aAAgB,aAC5D,QAAQ,IAAI,yDAAyD,EAC9D,OAAA,SAAS,YAAY,aAAa,EAE7C,CAAA,EACC,CAACH,EAAW7B,CAAQ,CAAC,EAGxBmC,EAAU,IAAM,CACd,MAAMW,EAAqB,IAAM,CAC/B,QAAQ,IAAI,yDAAyD,EAC3DT,EAAA,CACZ,EAEO,cAAA,iBAAiB,yBAA0BS,CAAkB,EAE7D,IAAM,CACJ,OAAA,oBAAoB,yBAA0BA,CAAkB,CACzE,CACF,EAAG,EAAE,EAGLX,EAAU,KACA,QAAA,IAAI,iDAAiD,OAAAnC,EAAU,EACvE8B,EAAa,EAAK,EAGlB,WAAW,IAAM,CACfA,EAAa,EAAI,GAChB,GAAG,EAGC,IAAM,CACX,QAAQ,IAAI,oCAAoC,EAChDA,EAAa,EAAK,CACpB,GACC,CAAC9B,EAAUC,CAAQ,CAAC,EAGhB,IACT,CChQO,SAAS8C,IAAa,CAE3B,KAAM,CAAC1F,EAAY2F,CAAa,EAAIjB,EAAS,CAC3C,QAAS,GACT,OAAQ,GACR,IAAK,CACH,MAAO,GACP,MAAO,EACP,MAAO,CACT,EACA,OAAQ,CACN,MAAO,EACP,KAAM,EACN,KAAM,CACR,EACA,aAAc,CACZ,MAAO,EACP,KAAM,EACN,KAAM,CACR,EACA,aAAc,CACZ,MAAO,EACP,KAAM,EACN,KAAM,CACR,EACA,KAAM,CACJ,MAAO,EACP,KAAM,EACN,KAAM,CACR,EACA,WAAY,CACV,MAAO,EACP,KAAM,EACN,KAAM,CACR,EACA,QAAS,CACP,WAAY,CAAA,CACd,EACA,QAAS,CACP,OAAQ,EACR,MAAO,CACT,EACA,WAAY,CACV,MAAO,EACP,KAAM,CAAA,CACR,CACD,EACK,CAAChC,EAAMkD,CAAO,EAAIlB,EAAS,CAAA,CAAE,EAC7B,CAAC/B,EAAUE,CAAW,EAAI6B,EAAS,OAAO,EAC1CmB,EAAcjB,EAAO,OAAO,EAC5B,CAAChC,EAAUE,CAAW,EAAI4B,EAAS,GAAG,EACtC,CAAC/E,EAAcmG,CAAe,EAAIpB,EAAS,EAAK,EAChD,CAAC9E,EAAgBmG,CAAiB,EAAIrB,EAAS,EAAK,EACpD,CAACsB,EAASC,CAAU,EAAIvB,EAAS,EAAK,EAGtC,CACJ,KAAMwB,EACN,UAAAC,EACA,MAAOC,EACP,QAASC,CAAA,EACPC,EACF,CAAC,YAAY,EACb,mBACA,CACE,QAAS,KACT,QAAS,EACT,WAAY,GAAA,CAEhB,EAGMC,EAAoBC,EAAY,CACpC,YAAa,CAAC,WAAW,EACzB,WAAY,SACH,MAAMC,EAAU,yBAA0B,CAC/C,OAAQ,OACR,QAAS,IACT,QAAS,CAAA,CACV,EAEH,UAAW,IAAM,CACfC,EAAkB,2BAA2B,EAC7Cd,EAAQ,CAAA,CAAE,CACZ,EACA,QAAUV,GAAU,CACV,QAAA,MAAM,uBAAwBA,CAAK,EACzBwB,EAAA,wBAAwB,OAAAxB,EAAM,QAAS,CAAA,CAC3D,CACD,EAGKyB,EAAqBzD,GAAa,CACtC,QAAQ,IAAI,sCAAsC,OAAAP,EAAQ,QAAO,OAAAO,EAAU,EAC3EL,EAAYK,CAAQ,EACpB2C,EAAY,QAAU3C,CACxB,EAEM0D,EAAsBC,GAAY,CAC9B,QAAA,IAAI,gCAAiCA,EAAQ,MAAM,EAC3D,MAAMC,EAAkBjB,EAAY,QAC9BkB,EAAeF,EAAQ,OAAO1D,GAAOa,GAAwBb,EAAI,MAAO2D,CAAe,CAAC,EAC9FlB,EAAQmB,CAAY,CACtB,EAGAjC,EAAU,IAAM,CACVoB,GACFD,EAAW,EAAI,CACjB,EACC,CAACC,CAAc,CAAC,EAGnB,MAAMc,EAAwBR,EAAY,CACxC,WAAY,SACH,MAAMC,EAAU,sBAAuB,CAC5C,OAAQ,OACR,QAAS,IACT,QAAS,CAAA,CACV,EAEH,SAAU,IAAM,CACdX,EAAgB,EAAI,EACpBY,EAAkB,sBAAsB,CAC1C,EACA,UAAW,IAAM,CACfA,EAAkB,sCAAsC,EAExD,WAAW,IAAM,CACf,OAAO,SAAS,OAAO,GACtB,GAAK,CACV,EACA,QAAUxB,GAAU,CACV,QAAA,MAAM,2BAA4BA,CAAK,EAC7BwB,EAAA,4BAA4B,OAAAxB,EAAM,QAAS,EAC7DY,EAAgB,EAAK,CAAA,CACvB,CACD,EAGKmB,EAAyBT,EAAY,CACzC,WAAY,SACH,MAAMC,EAAU,uBAAwB,CAC7C,OAAQ,OACR,QAAS,IACT,QAAS,CAAA,CACV,EAEH,SAAU,IAAM,CACdV,EAAkB,EAAI,EACtBW,EAAkB,yBAAyB,CAC7C,EACA,UAAW,IAAM,CACfA,EAAkB,gEAAgE,CACpF,EACA,QAAUxB,GAAU,CACV,QAAA,MAAM,8BAA+BA,CAAK,EAChCwB,EAAA,+BAA+B,OAAAxB,EAAM,QAAS,EAChEa,EAAkB,EAAK,CAAA,CACzB,CACD,EAGDjB,EAAU,IAAM,CACVoB,GACFP,EAAcO,CAAc,CAC9B,EACC,CAACA,CAAc,CAAC,EAGnBpB,EAAU,IACD,IAAM,CACX,QAAQ,IAAI,iCAAiC,CAC/C,EACC,EAAE,EAGL,MAAM9B,EAAY,IAAM,CACjB,QAAQ,0CAA0C,GAIvDuD,EAAkB,OAAO,CAC3B,EAGM9G,EAAgB,IAAM,CACrB,QAAQ,8CAA8C,GAI3DuH,EAAsB,OAAO,CAC/B,EAGMtH,EAAiB,IAAM,CACtB,QAAQ,gDAAgD,GAI7DuH,EAAuB,OAAO,CAChC,EAGAnC,OAAAA,EAAU,IAAM,CACd,QAAQ,IAAI,kCAAkC,CAChD,EAAG,EAAE,EAGFjF,EAAA,UAAA,CAAQ,GAAG,cAAc,UAAU,OAClC,SAAA,CAAAC,EAACN,EAAA,CACC,cAAAC,EACA,eAAAC,EACA,aAAAC,EACA,eAAAC,CAAA,CACF,EAEAC,EAACqH,EAAA,CACC,UAAAf,EACA,QAAAH,EACA,eAAe,gCACf,aAAa,4DAEb,SAAA,CAACnG,EAAA,MAAA,CAAI,UAAU,6CACb,SAAA,CAACC,EAAAC,EAAA,CAAW,WAAAC,EAAwB,aAAAC,EAA4B,CAAA,EAChEH,EAACQ,EAAc,CAAA,WAAAN,EAAwB,YAAAO,CAA0B,CAAA,CAAA,EACnE,EAEAT,EAAC,OAAI,UAAU,8BACb,WAACyB,EAAc,CAAA,WAAAvB,EAAwB,YAAAO,EAA0B,CACnE,CAAA,EAEAV,EAAC,MAAI,CAAA,UAAU,6CACb,SAAA,CAAAC,EAACoC,GAAY,WAAAlC,EAAwB,EACrCF,EAACsC,EAAY,CAAA,WAAApC,EAAwB,YAAAO,CAA0B,CAAA,CAAA,EACjE,EAEAT,EAAC2C,GAAA,CACC,KAAAC,EACA,SAAAC,EACA,SAAAC,EACA,YAAa+D,EACb,YAAA7D,EACA,SAAU,IAAM,CAEd,QAAQ,IAAI,iCAAiC,EACvC,MAAAqE,EAAQ,IAAI,YAAY,cAAc,EAC5C,OAAO,cAAcA,CAAK,CAC5B,EACA,UAAAnE,CAAA,CACF,EAEAlD,EAACwE,GAAA,CACC,SAAA3B,EACA,SAAAC,EACA,eAAgBgE,CAAA,CAAA,CAClB,CAAA,CAAA,CACF,EACF,CAEJ,CClRA,SAAS,iBAAiB,mBAAoB,IAAM,CAE1C,MAAAQ,EAAY,SAAS,eAAe,cAAc,EAEpDA,GACAC,EACIxH,EAACyH,EAAoB,CAAA,OAAQC,EACzB,SAAA,CAAAzH,EAAC0H,EAAO,EAAA,IACPC,EAAe,EAAA,IACf/B,GAAW,EAAA,IACXgC,EAAO,CAAA,CAAA,CAAA,EACZ,EACAN,CACJ,CAER,CAAC"}